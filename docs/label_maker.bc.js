// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=unknown, use-js-string=true, version=5.9.1+5.9.1
//# 6 ".label_maker.eobjs/jsoo/label_maker.bc.runtime.js"
(function(a){typeof
globalThis!=="object"&&(this?b():(a.defineProperty(a.prototype,"_T_",{configurable:true,get:b}),_T_));function
b(){var
b=this||self;b.globalThis=b;delete
a.prototype._T_}}(Object));(function(d){"use strict";var
dP=4294967296,eF=4096,ac=" ",d9=180,C="0",cl="compare: functional value",ad=1000,ck="mkdir",eE="\x00",ae="int_of_string",eq="/static/",ct="node:fs",dO="dir",e=0xff,eo="Assert_failure",ep=0x04,eD=": read token ",en="2d",dM="canvas",dN="0x",d8=0x7ff0,dL=0xdfff,bu=0x40,d7="End_of_file",bt=0.5,cs="caml_bigstring_blit_string_to_ba: kind mismatch",dK=": closedir failed",em=0x19,eC="Out_of_memory",eB="win32",br="State ",cb=0x0a,dJ="p",dH="Not_found",dI="caml_bigstring_blit_ba_to_ba: kind mismatch",d6=0.001,cr="Failure",aM="Unix.Unix_error",ci=244,d5="^",eA=0x08,B=0x00,el=0x0000ffff,ch="ENOTDIR",d4=0xfe,dF="Invalid_argument",dG=50528770,J=254,aK="+",I=0xffffff,ek=1027,a2=1024,X=1023,ei=246,ej="(",cq=132,an=65536,dE=0x0c,bs=0xf,a1=512,ez="Match_failure",cp="closedir",dD=1026,eh=1022,dB="nan",dC=140,h="",ca="rmdir",d3="fd ",d2=1074,d1=0x100,ey="lexing: empty token",A=248,ex=0xe0,dA=0x3fffffff,cg=0xf0,d0="Sys_error",y=0x80,eg="ENOTEMPTY",ew="EEXIST",cj=1255,ev="Str.replace: reference to unmatched group",b$=" : flags Open_text and Open_binary are not compatible",dZ=196,cf="e",dY=0xff00,ef="Bigarray.blit: dimension mismatch",b_=": Not a directory",ce="ENOENT",ee="Stack_overflow",eu="Undefined_recursive_module",dX=0x18,W=0x8000,dV=0x03,dW=0x800,dy="error",dz=" : is a directory",dT="Division_by_zero",dU="Unix",bx=0x100000000,a0=".",ed=0x01,Z=0x3f,et=0x05,cd=" : file already exists",aI=0x7f,V=128,a4=": No such file or directory",co=1900,aJ=255,aL=0x20,dx=",",E=256,dw="Win32",b9="index out of bounds",Y="/",b8=252,ec=16843009,aw="-",dv=": file descriptor already closed",aZ="EBADF",eb=0x07,cn=")",dS=200,cc=102,du=251,dt=12520,cm=" : flags Open_rdonly and Open_wronly are not compatible",dR=0x02,b7=0x09,ea=86400000,aY=250,dr=0x06,ds=268,dQ="([^/]+)",d$="jsError",bq='"',K=0xffff,a3=127,dq=0xdc00,es="Sys_blocked_io",er="_",dp="px ",bw=1.0,d_="\\",bv="_bigarr02";function
aV(a,b,c){var
d=String.fromCharCode;if(b===0&&c<=eF&&c===a.length)return d.apply(null,a);
var
e=h;for(;0<c;b+=a2,c-=a2)e+=d.apply(null,a.slice(b,b+Math.min(c,a2)));return e}function
k(a){return a}function
al(a){return k(aV(a,0,a.length))}function
t(a,b){return a.get(a.offset(b))}function
eG(a,b){this.s=a;this.i=b}eG.prototype={read8u:function(){return t(this.s,this.i++)},read8s:function(){return t(this.s,this.i++)<<24>>24},read16u:function(){var
b=this.s,a=this.i;this.i=a+2;return t(b,a)<<8|t(b,a+1)},read16s:function(){var
b=this.s,a=this.i;this.i=a+2;return t(b,a)<<24>>16|t(b,a+1)},read32u:function(){var
b=this.s,a=this.i;this.i=a+4;return(t(b,a)<<24|t(b,a+1)<<16|t(b,a+2)<<8|t(b,a+3))>>>0},read32s:function(){var
b=this.s,a=this.i;this.i=a+4;return t(b,a)<<24|t(b,a+1)<<16|t(b,a+2)<<8|t(b,a+3)},readstr:function(a){var
d=this.i,c=new
Array(a);for(var
b=0;b<a;b++)c[b]=t(this.s,d+b);this.i=d+a;return al(c)},readuint8array:function(a){var
b=this.i,c=this.offset(b);this.i=b+a;return this.s.data.subarray(c,c+a)}};function
aF(a,b){if(a===0)return h;
if(b.repeat)return b.repeat(a);
var
d=h,c=0;for(;;){if(a&1)d+=b;a>>=1;if(a===0)return d;
b+=b;c++;if(c===9)b.slice(0,1)}}function
P(a){if(a.t===2)a.c+=aF(a.l-a.c.length,"\0");else
a.c=aV(a.c,0,a.c.length);a.t=0}function
bn(a){if(a.length<24){for(var
b=0;b<a.length;b++)if(a.charCodeAt(b)>a3)return false;
return true}else
return!/[^\x00-\x7f]/.test(a)}function
dd(a){for(var
k=h,d=h,g,f,i,b,c=0,j=a.length;c<j;c++){f=a.charCodeAt(c);if(f<y){for(var
e=c+1;e<j&&(f=a.charCodeAt(e))<y;e++);if(e-c>a1){d.slice(0,1);k+=d;d=h;k+=a.slice(c,e)}else
d+=a.slice(c,e);if(e===j)break;c=e}b=1;if(++c<j&&((i=a.charCodeAt(c))&-64)===V){g=i+(f<<6);if(f<ex){b=g-0x3080;if(b<y)b=1}else{b=2;if(++c<j&&((i=a.charCodeAt(c))&-64)===V){g=i+(g<<6);if(f<cg){b=g-0xe2080;if(b<dW||b>=0xd7ff&&b<0xe000)b=2}else{b=3;if(++c<j&&((i=a.charCodeAt(c))&-64)===V&&f<0xf5){b=i-0x3c82080+(g<<6);if(b<0x10000||b>0x10ffff)b=3}}}}}if(b<4){c-=b;d+="\ufffd"}else if(b>K)d+=String.fromCharCode(0xd7c0+(b>>10),dq+(b&0x3ff));else
d+=String.fromCharCode(b);if(d.length>a2){d.slice(0,1);k+=d;d=h}}return k+d}function
L(a,b,c){this.t=a;this.c=b;this.l=c}L.prototype.toString=function(){switch(this.t){case
9:case
8:return this.c;
case
4:case
2:P(this);case
0:if(bn(this.c))this.t=9;else
this.t=8;return this.c}};L.prototype.toUtf16=function(){var
a=this.toString();if(this.t===9)return a;
return dd(a)};L.prototype.slice=function(){var
a=this.t===4?this.c.slice():this.c;return new
L(this.t,a,this.l)};function
de(a){for(var
f=h,c=f,b,i,d=0,g=a.length;d<g;d++){b=a.charCodeAt(d);if(b<y){for(var
e=d+1;e<g&&(b=a.charCodeAt(e))<y;e++);if(e-d>a1){c.slice(0,1);f+=c;c=h;f+=a.slice(d,e)}else
c+=a.slice(d,e);if(e===g)break;d=e}if(b<dW){c+=String.fromCharCode(0xc0|b>>6);c+=String.fromCharCode(y|b&Z)}else if(b<0xd800||b>=dL)c+=String.fromCharCode(ex|b>>12,y|b>>6&Z,y|b&Z);else if(b>=0xdbff||d+1===g||(i=a.charCodeAt(d+1))<dq||i>dL)c+="\xef\xbf\xbd";else{d++;b=(b<<10)+i-0x35fdc00;c+=String.fromCharCode(cg|b>>18,y|b>>12&Z,y|b>>6&Z,y|b&Z)}if(c.length>a2){c.slice(0,1);f+=c;c=h}}return f+c}function
w(a){return bn(a)?k(a):k(de(a))}var
nh=["E2BIG","EACCES","EAGAIN",aZ,"EBUSY","ECHILD","EDEADLK","EDOM",ew,"EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENAMETOOLONG","ENFILE","ENODEV",ce,"ENOEXEC","ENOLCK","ENOMEM","ENOSPC","ENOSYS",ch,eg,"ENOTTY","ENXIO","EPERM","EPIPE","ERANGE","EROFS","ESPIPE","ESRCH","EXDEV","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","EOPNOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","EHOSTDOWN","EHOSTUNREACH","ELOOP","EOVERFLOW"];function
U(a,b,c,d){var
e=nh.indexOf(a);if(e<0){if(d==null)d=-9999;e=[0,d]}var
f=[e,w(b||h),w(c||h)];return f}var
c3={};function
S(a){return c3[a]}var
b4={};function
dh(a){if(b4[a])return b4[a];
var
b=d.process;if(b&&b.env&&b.env[a]!==undefined)return b.env[a];
if(d.jsoo_env&&typeof
d.jsoo_env[a]==="string")return d.jsoo_env[a]}var
bj=0;(function(){var
c=dh("OCAMLRUNPARAM");if(c!==undefined){var
b=c.split(dx);for(var
a=0;a<b.length;a++)if(b[a]==="b"){bj=1;break}else if(b[a].startsWith("b="))bj=+b[a].slice(2);else
continue}}());var
b1=bj,q=[0];function
e1(a,b){if(!a.js_error||b||a[0]===A)a.js_error=new
d.Error("Js exception containing backtrace");return a}function
bT(a,b){return bj&&b1?e1(a,b):a}function
T(a,b){throw bT([0,a].concat(b))}function
aC(a){return a
instanceof
L}function
aU(a){return typeof
a==="string"&&!/[^\x00-\xff]/.test(a)}function
ap(a){if(!(a
instanceof
Uint8Array))a=new
Uint8Array(a);return new
L(4,a,a.length)}function
cL(a){return new
L(0,a,a.length)}function
r(a){return a}function
aq(a){return cL(r(a))}function
fO(a,b){throw bT([0,a,b])}function
b0(a,b){fO(a,k(b))}function
j(a){b0(q.Sys_error,a)}function
bh(a){j(a+a4)}function
a9(a){var
c=new
Uint8Array(a.l),e=a.c,d=e.length,b=0;for(;b<d;b++)c[b]=e.charCodeAt(b);for(d=a.l;b<d;b++)c[b]=0;a.c=c;a.t=4;return c}function
am(a){if(a.t!==4)a9(a);return a.c}function
i(a){b0(q.Invalid_argument,a)}function
as(a){if(a<0)i("Bytes.create");return new
L(a?2:9,h,a)}function
bb(a){return a.l}function
ag(a,b,c,d,e){if(e===0)return 0;
if(d===0&&(e>=c.l||c.t===2&&e>=c.c.length)){c.c=a.t===4?aV(a.c,b,e):b===0&&a.c.length===e?a.c:a.c.slice(b,b+e);c.t=c.c.length===c.l?0:2}else if(c.t===2&&d===c.c.length){c.c+=a.t===4?aV(a.c,b,e):b===0&&a.c.length===e?a.c:a.c.slice(b,b+e);c.t=c.c.length===c.l?0:2}else{if(c.t!==4)a9(c);var
g=a.c,h=c.c;if(a.t===4)if(d<=b)for(var
f=0;f<e;f++)h[d+f]=g[b+f];else
for(var
f=e-1;f>=0;f--)h[d+f]=g[b+f];else{var
i=Math.min(e,g.length-b);for(var
f=0;f<i;f++)h[d+f]=g.charCodeAt(b+f);for(;f<e;f++)h[d+f]=0}}return 0}function
cu(){}function
z(a){this.data=a}z.prototype=new
cu();z.prototype.constructor=z;z.prototype.truncate=function(a){var
b=this.data;this.data=as(a|0);ag(b,0,this.data,0,a)};z.prototype.length=function(){return bb(this.data)};z.prototype.write=function(a,b,c,d){var
e=this.length();if(a+d>=e){var
f=as(a+d),g=this.data;this.data=f;ag(g,0,this.data,0,e)}ag(ap(b),c,this.data,a,d);return 0};z.prototype.read=function(a,b,c,d){var
e=this.length();if(a+d>=e)d=e-a;if(d){var
f=as(d|0);ag(this.data,a,f,0,d);b.set(am(f),c)}return d};function
ao(a,b,c){this.file=b;this.name=a;this.flags=c}ao.prototype.err_closed=function(){j(this.name+dv)};ao.prototype.length=function(){if(this.file)return this.file.length();
this.err_closed()};ao.prototype.write=function(a,b,c,d){if(this.file)return this.file.write(a,b,c,d);
this.err_closed()};ao.prototype.read=function(a,b,c,d){if(this.file)return this.file.read(a,b,c,d);
this.err_closed()};ao.prototype.close=function(){this.file=undefined};function
c(a,b){this.content={};this.root=a;this.lookupFun=b}c.prototype.nm=function(a){return this.root+a};c.prototype.create_dir_if_needed=function(a){var
d=a.split(Y),c=h;for(var
b=0;b<d.length-1;b++){c+=d[b]+Y;if(this.content[c])continue;this.content[c]=Symbol("directory")}};c.prototype.slash=function(a){return/\/$/.test(a)?a:a+Y};c.prototype.lookup=function(a){if(!this.content[a]&&this.lookupFun){var
b=this.lookupFun(k(this.root),k(a));if(b!==0){this.create_dir_if_needed(a);this.content[a]=new
z(aq(b[1]))}}};c.prototype.exists=function(a,b){if(a===h)return 1;
var
c=this.slash(a);if(this.content[c])return 1;
if(!b)this.lookup(a);return this.content[a]?1:0};c.prototype.isFile=function(a){return this.exists(a)&&!this.is_dir(a)?1:0};c.prototype.mkdir=function(a,b,c){var
e=c&&S(aM);if(this.exists(a))if(e)T(e,U(ew,ck,this.nm(a)));else
j(a+": File exists");var
d=/^(.*)\/[^/]+/.exec(a);d=d&&d[1]||h;if(!this.exists(d))if(e)T(e,U(ce,ck,this.nm(d)));else
j(d+a4);if(!this.is_dir(d))if(e)T(e,U(ch,ck,this.nm(d)));else
j(d+b_);this.create_dir_if_needed(this.slash(a))};c.prototype.rmdir=function(a,b){var
c=b&&S(aM),d=a===h?h:this.slash(a),f=new
RegExp(d5+d+dQ);if(!this.exists(a))if(c)T(c,U(ce,ca,this.nm(a)));else
j(a+a4);if(!this.is_dir(a))if(c)T(c,U(ch,ca,this.nm(a)));else
j(a+b_);for(var
e
in
this.content)if(e.match(f))if(c)T(c,U(eg,ca,this.nm(a)));else
j(this.nm(a)+": Directory not empty");delete
this.content[d]};c.prototype.readdir=function(a){var
f=a===h?h:this.slash(a);if(!this.exists(a))j(a+a4);if(!this.is_dir(a))j(a+b_);var
g=new
RegExp(d5+f+dQ),d={},c=[];for(var
e
in
this.content){var
b=e.match(g);if(b&&!d[b[1]]){d[b[1]]=true;c.push(b[1])}}return c};c.prototype.opendir=function(a,b){var
c=b&&S(aM),d=this.readdir(a),e=false,f=0;return{readSync:function(){if(e)if(c)T(c,U(aZ,cp,this.nm(a)));else
j(a+dK);if(f===d.length)return null;
var
b=d[f];f++;return{name:b}},closeSync:function(){if(e)if(c)T(c,U(aZ,cp,this.nm(a)));else
j(a+dK);e=true;d=[]}}};c.prototype.is_dir=function(a){if(a===h)return true;
var
b=this.slash(a);return this.content[b]?1:0};c.prototype.unlink=function(a){if(!this.exists(a,true))j(a+a4);delete
this.content[a];return 0};c.prototype.open=function(a,b){var
c;if(b.rdonly&&b.wronly)j(this.nm(a)+cm);if(b.text&&b.binary)j(this.nm(a)+b$);this.lookup(a);if(this.content[a]){if(this.is_dir(a))j(this.nm(a)+dz);if(b.create&&b.excl)j(this.nm(a)+cd);c=this.content[a];if(b.truncate)c.truncate()}else if(b.create){this.create_dir_if_needed(a);this.content[a]=new
z(as(0));c=this.content[a]}else
bh(this.nm(a));return new
ao(this.nm(a),c,b)};c.prototype.open=function(a,b){var
c;if(b.rdonly&&b.wronly)j(this.nm(a)+cm);if(b.text&&b.binary)j(this.nm(a)+b$);this.lookup(a);if(this.content[a]){if(this.is_dir(a))j(this.nm(a)+dz);if(b.create&&b.excl)j(this.nm(a)+cd);c=this.content[a];if(b.truncate)c.truncate()}else if(b.create){this.create_dir_if_needed(a);this.content[a]=new
z(as(0));c=this.content[a]}else
bh(this.nm(a));return new
ao(this.nm(a),c,b)};c.prototype.register=function(a,b){var
c;if(this.content[a])j(this.nm(a)+cd);if(aC(b))c=new
z(b);if(aU(b))c=new
z(aq(b));else if(Array.isArray(b))c=new
z(ap(b));else if(typeof
b==="string")c=new
z(cL(b));else if(b.toString){var
d=aq(w(b.toString()));c=new
z(d)}if(c){this.create_dir_if_needed(a);this.content[a]=c}else
j(this.nm(a)+" : registering file with invalid content type")};c.prototype.constructor=c;function
aN(a,b){z.call(this,as(0));this.log=function(a){return 0};if(a===1&&typeof
console.log==="function")this.log=console.log;else if(a===2&&typeof
console.error==="function")this.log=console.error;else if(typeof
console.log==="function")this.log=console.log;this.flags=b}aN.prototype.length=function(){return 0};aN.prototype.write=function(a,b,c,d){if(this.log){if(d>0&&c>=0&&c+d<=b.length&&b[c+d-1]===10)d--;var
e=as(d);ag(ap(b),c,e,0,d);this.log(e.toUtf16());return 0}j(this.fd+dv)};aN.prototype.read=function(a,b,c,d){j(this.fd+": file descriptor is write only")};aN.prototype.close=function(){this.log=undefined};var
aT=Math.pow(2,-24);function
bY(a){throw a}function
bi(){bY(q.Division_by_zero)}function
f(a,b,c){this.lo=a&I;this.mi=b&I;this.hi=c&K}f.prototype.caml_custom="_j";f.prototype.copy=function(){return new
f(this.lo,this.mi,this.hi)};f.prototype.ucompare=function(a){if(this.hi>a.hi)return 1;
if(this.hi<a.hi)return-1;
if(this.mi>a.mi)return 1;
if(this.mi<a.mi)return-1;
if(this.lo>a.lo)return 1;
if(this.lo<a.lo)return-1;
return 0};f.prototype.compare=function(a){var
b=this.hi<<16,c=a.hi<<16;if(b>c)return 1;
if(b<c)return-1;
if(this.mi>a.mi)return 1;
if(this.mi<a.mi)return-1;
if(this.lo>a.lo)return 1;
if(this.lo<a.lo)return-1;
return 0};f.prototype.neg=function(){var
a=-this.lo,b=-this.mi+(a>>24),c=-this.hi+(b>>24);return new
f(a,b,c)};f.prototype.add=function(a){var
b=this.lo+a.lo,c=this.mi+a.mi+(b>>24),d=this.hi+a.hi+(c>>24);return new
f(b,c,d)};f.prototype.sub=function(a){var
b=this.lo-a.lo,c=this.mi-a.mi+(b>>24),d=this.hi-a.hi+(c>>24);return new
f(b,c,d)};f.prototype.mul=function(a){var
b=this.lo*a.lo,c=(b*aT|0)+this.mi*a.lo+this.lo*a.mi,d=(c*aT|0)+this.hi*a.lo+this.mi*a.mi+this.lo*a.hi;return new
f(b,c,d)};f.prototype.isZero=function(){return(this.lo|this.mi|this.hi)===0};f.prototype.isNeg=function(){return this.hi<<16<0};f.prototype.and=function(a){return new
f(this.lo&a.lo,this.mi&a.mi,this.hi&a.hi)};f.prototype.or=function(a){return new
f(this.lo|a.lo,this.mi|a.mi,this.hi|a.hi)};f.prototype.xor=function(a){return new
f(this.lo^a.lo,this.mi^a.mi,this.hi^a.hi)};f.prototype.shift_left=function(a){a=a&63;if(a===0)return this;
if(a<24)return new
f(this.lo<<a,this.mi<<a|this.lo>>24-a,this.hi<<a|this.mi>>24-a);
if(a<48)return new
f(0,this.lo<<a-24,this.mi<<a-24|this.lo>>48-a);
return new
f(0,0,this.lo<<a-48)};f.prototype.shift_right_unsigned=function(a){a=a&63;if(a===0)return this;
if(a<24)return new
f(this.lo>>a|this.mi<<24-a,this.mi>>a|this.hi<<24-a,this.hi>>a);
if(a<48)return new
f(this.mi>>a-24|this.hi<<48-a,this.hi>>a-24,0);
return new
f(this.hi>>a-48,0,0)};f.prototype.shift_right=function(a){a=a&63;if(a===0)return this;
var
c=this.hi<<16>>16;if(a<24)return new
f(this.lo>>a|this.mi<<24-a,this.mi>>a|c<<24-a,this.hi<<16>>a>>>16);
var
b=this.hi<<16>>31;if(a<48)return new
f(this.mi>>a-24|this.hi<<48-a,this.hi<<16>>a-24>>16,b&K);
return new
f(this.hi<<16>>a-32,b,b)};f.prototype.lsl1=function(){this.hi=this.hi<<1|this.mi>>23;this.mi=(this.mi<<1|this.lo>>23)&I;this.lo=this.lo<<1&I};f.prototype.lsr1=function(){this.lo=(this.lo>>>1|this.mi<<23)&I;this.mi=(this.mi>>>1|this.hi<<23)&I;this.hi=this.hi>>>1};f.prototype.udivmod=function(a){var
d=0,c=this.copy(),b=a.copy(),e=new
f(0,0,0);while(c.ucompare(b)>0){d++;b.lsl1()}while(d>=0){d--;e.lsl1();if(c.ucompare(b)>=0){e.lo++;c=c.sub(b)}b.lsr1()}return{quotient:e,modulus:c}};f.prototype.div=function(a){var
b=this;if(a.isZero())bi();var
d=b.hi^a.hi;if(b.hi&W)b=b.neg();if(a.hi&W)a=a.neg();var
c=b.udivmod(a).quotient;if(d&W)c=c.neg();return c};f.prototype.mod=function(a){var
b=this;if(a.isZero())bi();var
d=b.hi;if(b.hi&W)b=b.neg();if(a.hi&W)a=a.neg();var
c=b.udivmod(a).modulus;if(d&W)c=c.neg();return c};f.prototype.toInt=function(){return this.lo|this.mi<<24};f.prototype.toFloat=function(){return(this.hi<<16)*Math.pow(2,32)+this.mi*Math.pow(2,24)+this.lo};f.prototype.toArray=function(){return[this.hi>>8,this.hi&e,this.mi>>16,this.mi>>8&e,this.mi&e,this.lo>>16,this.lo>>8&e,this.lo&e]};f.prototype.lo32=function(){return this.lo|(this.mi&e)<<24};f.prototype.hi32=function(){return this.mi>>>8&K|this.hi<<16};function
eH(){this.locked=false}function
a5(a){this.data=new
Int32Array(a);this.length=this.data.length+2}a5.prototype.caml_custom="_nat";function
v(a){return a.length}function
x(a,b){return a.charCodeAt(b)}function
aX(a){var
d=v(a),c=new
Uint8Array(d),b=0;for(;b<d;b++)c[b]=x(a,b);return c}function
ah(){i(b9)}function
ai(a,b,c){c&=e;if(a.t!==4){if(b===a.c.length){a.c+=String.fromCharCode(c);if(b+1===a.l)a.t=0;return 0}a9(a)}a.c[b]=c;return 0}function
he(a,b,c){if(b>>>0>=a.l)ah();return ai(a,b,c)}function
M(a,b){this.fs=require(ct);this.fd=a;this.flags=b}M.prototype=new
cu();M.prototype.constructor=M;M.prototype.truncate=function(a){try{this.fs.ftruncateSync(this.fd,a|0)}catch(f){j(f.toString())}};M.prototype.length=function(){try{return this.fs.fstatSync(this.fd).size}catch(f){j(f.toString())}};M.prototype.write=function(a,b,c,d){try{if(this.flags.isCharacterDevice)this.fs.writeSync(this.fd,b,c,d);else
this.fs.writeSync(this.fd,b,c,d,a)}catch(f){j(f.toString())}return 0};M.prototype.read=function(a,b,c,d){try{if(this.flags.isCharacterDevice)var
e=this.fs.readSync(this.fd,b,c,d);else
var
e=this.fs.readSync(this.fd,b,c,d,a);return e}catch(f){j(f.toString())}};M.prototype.close=function(){try{this.fs.closeSync(this.fd);return 0}catch(f){j(f.toString())}};function
b(a){this.fs=require(ct);this.root=a}b.prototype.nm=function(a){return this.root+a};b.prototype.exists=function(a){try{return this.fs.existsSync(this.nm(a))?1:0}catch(f){return 0}};b.prototype.isFile=function(a){try{return this.fs.statSync(this.nm(a)).isFile()?1:0}catch(f){j(f.toString())}};b.prototype.mkdir=function(a,b,c){try{this.fs.mkdirSync(this.nm(a),{mode:b});return 0}catch(f){this.raise_nodejs_error(f,c)}};b.prototype.rmdir=function(a,b){try{this.fs.rmdirSync(this.nm(a));return 0}catch(f){this.raise_nodejs_error(f,b)}};b.prototype.readdir=function(a,b){try{return this.fs.readdirSync(this.nm(a))}catch(f){this.raise_nodejs_error(f,b)}};b.prototype.is_dir=function(a){try{return this.fs.statSync(this.nm(a)).isDirectory()?1:0}catch(f){j(f.toString())}};b.prototype.unlink=function(a,b){try{this.fs.unlinkSync(this.nm(a));return 0}catch(f){this.raise_nodejs_error(f,b)}};b.prototype.open=function(a,b,c){var
d=require("node:constants"),e=0;for(var
h
in
b)switch(h){case"rdonly":e|=d.O_RDONLY;break;case"wronly":e|=d.O_WRONLY;break;case"append":e|=d.O_WRONLY|d.O_APPEND;break;case"create":e|=d.O_CREAT;break;case"truncate":e|=d.O_TRUNC;break;case"excl":e|=d.O_EXCL;break;case"binary":e|=d.O_BINARY;break;case"text":e|=d.O_TEXT;break;case"nonblock":e|=d.O_NONBLOCK;break}try{var
f=this.fs.openSync(this.nm(a),e),g=this.fs.lstatSync(this.nm(a)).isCharacterDevice();b.isCharacterDevice=g;return new
M(f,b)}catch(f){this.raise_nodejs_error(f,c)}};b.prototype.rename=function(a,b,c){try{this.fs.renameSync(this.nm(a),this.nm(b))}catch(f){this.raise_nodejs_error(f,c)}};b.prototype.stat=function(a,b){try{var
c=this.fs.statSync(this.nm(a));return this.stats_from_js(c)}catch(f){this.raise_nodejs_error(f,b)}};b.prototype.lstat=function(a,b){try{var
c=this.fs.lstatSync(this.nm(a));return this.stats_from_js(c)}catch(f){this.raise_nodejs_error(f,b)}};b.prototype.symlink=function(a,b,c,d){try{this.fs.symlinkSync(this.nm(b),this.nm(c),a?dO:"file");return 0}catch(f){this.raise_nodejs_error(f,d)}};b.prototype.readlink=function(a,b){try{var
c=this.fs.readlinkSync(this.nm(a),"utf8");return w(c)}catch(f){this.raise_nodejs_error(f,b)}};b.prototype.opendir=function(a,b){try{return this.fs.opendirSync(this.nm(a))}catch(f){this.raise_nodejs_error(f,b)}};b.prototype.raise_nodejs_error=function(a,b){var
c=S(aM);if(b&&c){var
d=U(a.code,a.syscall,a.path,a.errno);T(c,d)}else
j(a.toString())};b.prototype.stats_from_js=function(a){var
b;if(a.isFile())b=0;else if(a.isDirectory())b=1;else if(a.isCharacterDevice())b=2;else if(a.isBlockDevice())b=3;else if(a.isSymbolicLink())b=4;else if(a.isFIFO())b=5;else if(a.isSocket())b=6;return[0,a.dev,a.ino,b,a.mode,a.nlink,a.uid,a.gid,a.rdev,a.size,a.atimeMs,a.mtimeMs,a.ctimeMs]};b.prototype.constructor=b;var
aO;if(typeof
d.Map==="undefined")aO=function(){function
a(a){this.objs=a}a.prototype.get=function(a){for(var
b=0;b<this.objs.length;b++)if(this.objs[b]===a)return b};a.prototype.set=function(){};return function(){this.objs=[];this.lookup=new
a(this.objs)}}();else
aO=function(){this.objs=[];this.lookup=new
d.Map()};aO.prototype.store=function(a){this.lookup.set(a,this.objs.length);this.objs.push(a)};aO.prototype.recall=function(a){var
b=this.lookup.get(a);return b===undefined?undefined:this.objs.length-b};function
cv(a,b){this.s=r(a);this.i=b}cv.prototype={read8u:function(){return this.s.charCodeAt(this.i++)},read8s:function(){return this.s.charCodeAt(this.i++)<<24>>24},read16u:function(){var
b=this.s,a=this.i;this.i=a+2;return b.charCodeAt(a)<<8|b.charCodeAt(a+1)},read16s:function(){var
b=this.s,a=this.i;this.i=a+2;return b.charCodeAt(a)<<24>>16|b.charCodeAt(a+1)},read32u:function(){var
b=this.s,a=this.i;this.i=a+4;return(b.charCodeAt(a)<<24|b.charCodeAt(a+1)<<16|b.charCodeAt(a+2)<<8|b.charCodeAt(a+3))>>>0},read32s:function(){var
b=this.s,a=this.i;this.i=a+4;return b.charCodeAt(a)<<24|b.charCodeAt(a+1)<<16|b.charCodeAt(a+2)<<8|b.charCodeAt(a+3)},readstr:function(a){var
b=this.i;this.i=b+a;return k(this.s.slice(b,b+a))},readuint8array:function(a){var
c=new
Uint8Array(a),e=this.s,d=this.i;for(var
b=0;b<a;b++)c[b]=e.charCodeAt(d+b);this.i=d+a;return c}};function
fl(a,b){return new
f(a&I,a>>>24&e|(b&K)<<8,b>>>16&K)}function
bM(a){return a.hi32()}function
bN(a){return a.lo32()}function
m(){i(b9)}var
eJ=bv;function
af(a,b,c,d){this.kind=a;this.layout=b;this.dims=c;this.data=d}af.prototype.caml_custom=eJ;af.prototype.offset=function(a){var
c=0;if(typeof
a==="number")a=[a];if(!Array.isArray(a))i("bigarray.js: invalid offset");if(this.dims.length!==a.length)i("Bigarray.get/set: bad number of dimensions");if(this.layout===0)for(var
b=0;b<this.dims.length;b++){if(a[b]<0||a[b]>=this.dims[b])m();c=c*this.dims[b]+a[b]}else
for(var
b=this.dims.length-1;b>=0;b--){if(a[b]<1||a[b]>this.dims[b])m();c=c*this.dims[b]+(a[b]-1)}return c};af.prototype.get=function(a){switch(this.kind){case
7:var
d=this.data[a*2+0],b=this.data[a*2+1];return fl(d,b);
case
10:case
11:var
e=this.data[a*2+0],c=this.data[a*2+1];return[J,e,c];
default:return this.data[a]}};af.prototype.set=function(a,b){switch(this.kind){case
7:this.data[a*2+0]=bN(b);this.data[a*2+1]=bM(b);break;case
10:case
11:this.data[a*2+0]=b[1];this.data[a*2+1]=b[2];break;default:this.data[a]=b;break}return 0};af.prototype.fill=function(a){switch(this.kind){case
7:var
c=bN(a),e=bM(a);if(c===e)this.data.fill(c);else
for(var
b=0;b<this.data.length;b++)this.data[b]=b%2===0?c:e;break;case
10:case
11:var
d=a[1],f=a[2];if(d===f)this.data.fill(d);else
for(var
b=0;b<this.data.length;b++)this.data[b]=b%2===0?d:f;break;default:this.data.fill(a);break}};af.prototype.compare=function(a,b){if(this.layout!==a.layout||this.kind!==a.kind){var
f=this.kind|this.layout<<8,g=a.kind|a.layout<<8;return g-f}if(this.dims.length!==a.dims.length)return a.dims.length-this.dims.length;
for(var
c=0;c<this.dims.length;c++)if(this.dims[c]!==a.dims[c])return this.dims[c]<a.dims[c]?-1:1;
switch(this.kind){case
0:case
1:case
10:case
11:var
d,e;for(var
c=0;c<this.data.length;c++){d=this.data[c];e=a.data[c];if(d<e)return-1;
if(d>e)return 1;
if(d!==e){if(!b)return Number.NaN;
if(!Number.isNaN(d))return 1;
if(!Number.isNaN(e))return-1}}break;case
7:for(var
c=0;c<this.data.length;c+=2){if(this.data[c+1]<a.data[c+1])return-1;
if(this.data[c+1]>a.data[c+1])return 1;
if(this.data[c]>>>0<a.data[c]>>>0)return-1;
if(this.data[c]>>>0>a.data[c]>>>0)return 1}break;case
2:case
3:case
4:case
5:case
6:case
8:case
9:case
12:for(var
c=0;c<this.data.length;c++){if(this.data[c]<a.data[c])return-1;
if(this.data[c]>a.data[c])return 1}break}return 0};function
ax(a,b,c,d){this.kind=a;this.layout=b;this.dims=c;this.data=d}ax.prototype=new
af();ax.prototype.offset=function(a){if(typeof
a!=="number")if(Array.isArray(a)&&a.length===1)a=a[0];else
i("Ml_Bigarray_c_1_1.offset");if(a<0||a>=this.dims[0])m();return a};ax.prototype.get=function(a){return this.data[a]};ax.prototype.set=function(a,b){this.data[a]=b;return 0};ax.prototype.fill=function(a){this.data.fill(a);return 0};function
by(a,b){this.s=a;this.i=b}by.prototype={read8u:function(){return this.s[this.i++]},read8s:function(){return this.s[this.i++]<<24>>24},read16u:function(){var
b=this.s,a=this.i;this.i=a+2;return b[a]<<8|b[a+1]},read16s:function(){var
b=this.s,a=this.i;this.i=a+2;return b[a]<<24>>16|b[a+1]},read32u:function(){var
b=this.s,a=this.i;this.i=a+4;return(b[a]<<24|b[a+1]<<16|b[a+2]<<8|b[a+3])>>>0},read32s:function(){var
b=this.s,a=this.i;this.i=a+4;return b[a]<<24|b[a+1]<<16|b[a+2]<<8|b[a+3]},readstr:function(a){var
b=this.i;this.i=b+a;return al(this.s.subarray(b,b+a))},readuint8array:function(a){var
b=this.i;this.i=b+a;return this.s.subarray(b,b+a)}};function
f8(a,b,c,d){var
e=d;for(var
f=0;f<c;f++){var
g=(a.data[b+f]>>>0)+e;a.data[b+f]=g|0;if(g===g>>>0){e=0;break}else
e=1}return e}function
cw(a,b,c,d,e,f,g){var
i=g;for(var
h=0;h<f;h++){var
j=(a.data[b+h]>>>0)+(d.data[e+h]>>>0)+i;a.data[b+h]=j;if(j===j>>>0)i=0;else
i=1}return f8(a,b+f,c-f,i)}function
ay(a){var
d=a.length,c=1;for(var
b=0;b<d;b++){if(a[b]<0)i("Bigarray.create: negative dimension");c=c*a[b]}return c}function
aQ(a){switch(a){case
7:case
10:case
11:return 2;
default:return 1}}function
N(a,b,c,d){var
e=aQ(a);if(ay(c)*e!==d.length)i("length doesn't match dims");if(b===0&&c.length===1&&e===1)return new
ax(a,b,c,d);
return new
af(a,b,c,d)}function
gb(a){var
b=new
Uint8Array(a);return N(12,0,[b.length],b)}function
gc(a){var
b=new
Uint8Array(a.buffer,a.byteOffset,a.length*a.BYTES_PER_ELEMENT);return N(12,0,[b.length],b)}function
gd(a){return a.data.buffer}function
ge(a){return a.data}var
bz=function(){function
k(a,b,c){const
d=a[b]+a[c];let
e=a[b+1]+a[c+1];if(d>=bx)e++;a[b]=d;a[b+1]=e}function
l(a,b,c,d){let
e=a[b]+c;if(c<0)e+=bx;let
f=a[b+1]+d;if(e>=bx)f++;a[b]=e;a[b+1]=f}function
f(a,b){return a[b]^a[b+1]<<8^a[b+2]<<16^a[b+3]<<24}function
e(a,b,c,d,e,f){const
m=j[e],n=j[e+1],o=j[f],p=j[f+1];k(g,a,b);l(g,a,m,n);let
h=g[d]^g[a],i=g[d+1]^g[a+1];g[d]=i;g[d+1]=h;k(g,c,d);h=g[b]^g[c];i=g[b+1]^g[c+1];g[b]=h>>>24^i<<8;g[b+1]=i>>>24^h<<8;k(g,a,b);l(g,a,o,p);h=g[d]^g[a];i=g[d+1]^g[a+1];g[d]=h>>>16^i<<16;g[d+1]=i>>>16^h<<16;k(g,c,d);h=g[b]^g[c];i=g[b+1]^g[c+1];g[b]=i>>>31^h<<1;g[b+1]=h>>>31^i<<1}const
h=new
Uint32Array([0xf3bcc908,0x6a09e667,0x84caa73b,0xbb67ae85,0xfe94f82b,0x3c6ef372,0x5f1d36f1,0xa54ff53a,0xade682d1,0x510e527f,0x2b3e6c1f,0x9b05688c,0xfb41bd6b,0x1f83d9ab,0x137e2179,0x5be0cd19]),a=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3],d=new
Uint8Array(a.map(function(a){return a*2})),g=new
Uint32Array(32),j=new
Uint32Array(32);function
i(a,b){let
c=0;for(c=0;c<16;c++){g[c]=a.h[c];g[c+16]=h[c]}g[24]=g[24]^a.t;g[25]=g[25]^a.t/bx;if(b){g[28]=~g[28];g[29]=~g[29]}for(c=0;c<32;c++)j[c]=f(a.b,4*c);for(c=0;c<12;c++){e(0,8,16,24,d[c*16+0],d[c*16+1]);e(2,10,18,26,d[c*16+2],d[c*16+3]);e(4,12,20,28,d[c*16+4],d[c*16+5]);e(6,14,22,30,d[c*16+6],d[c*16+7]);e(0,10,20,30,d[c*16+8],d[c*16+9]);e(2,12,22,24,d[c*16+10],d[c*16+11]);e(4,14,16,26,d[c*16+12],d[c*16+13]);e(6,8,18,28,d[c*16+14],d[c*16+15])}for(c=0;c<16;c++)a.h[c]=a.h[c]^g[c]^g[c+16]}const
c=new
Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);function
n(a,b){if(a===0||a>64)throw new
Error("Illegal output length, expected 0 < length <= 64");if(b.length>64)throw new
Error("Illegal key, expected Uint8Array with 0 < length <= 64");const
d={b:new
Uint8Array(V),h:new
Uint32Array(16),t:0,c:0,outlen:a};c.fill(0);c[0]=a;c[1]=b.length;c[2]=1;c[3]=1;for(let
a=0;a<16;a++)d.h[a]=h[a]^f(c,a*4);if(b.length>0){m(d,b);d.c=V}return d}function
m(a,b){for(let
c=0;c<b.length;c++){if(a.c===V){a.t+=a.c;i(a,false);a.c=0}a.b[a.c++]=b[c]}}function
b(a){a.t+=a.c;while(a.c<V)a.b[a.c++]=0;i(a,true);const
c=new
Uint8Array(a.outlen);for(let
b=0;b<a.outlen;b++)c[b]=a.h[b>>2]>>8*(b&3);return c}return{Init:n,Update:m,Final:b}}();function
gf(a,b,c,d,e){for(var
f=0;f<e;f++)a.data[b+f]=c.data[d+f];return 0}var
a6=function(){function
k(a,b){return a+b|0}function
l(a,b,c,d,e,f){b=k(k(b,a),k(d,f));return k(b<<e|b>>>32-e,c)}function
g(a,b,c,d,e,f,g){return l(b&c|~b&d,a,b,e,f,g)}function
h(a,b,c,d,e,f,g){return l(b&d|c&~d,a,b,e,f,g)}function
i(a,b,c,d,e,f,g){return l(b^c^d,a,b,e,f,g)}function
j(a,b,c,d,e,f,g){return l(c^(b|~d),a,b,e,f,g)}return function(a,b){var
c=a[0],d=a[1],e=a[2],f=a[3];c=g(c,d,e,f,b[0],7,0xd76aa478);f=g(f,c,d,e,b[1],12,0xe8c7b756);e=g(e,f,c,d,b[2],17,0x242070db);d=g(d,e,f,c,b[3],22,0xc1bdceee);c=g(c,d,e,f,b[4],7,0xf57c0faf);f=g(f,c,d,e,b[5],12,0x4787c62a);e=g(e,f,c,d,b[6],17,0xa8304613);d=g(d,e,f,c,b[7],22,0xfd469501);c=g(c,d,e,f,b[8],7,0x698098d8);f=g(f,c,d,e,b[9],12,0x8b44f7af);e=g(e,f,c,d,b[10],17,0xffff5bb1);d=g(d,e,f,c,b[11],22,0x895cd7be);c=g(c,d,e,f,b[12],7,0x6b901122);f=g(f,c,d,e,b[13],12,0xfd987193);e=g(e,f,c,d,b[14],17,0xa679438e);d=g(d,e,f,c,b[15],22,0x49b40821);c=h(c,d,e,f,b[1],5,0xf61e2562);f=h(f,c,d,e,b[6],9,0xc040b340);e=h(e,f,c,d,b[11],14,0x265e5a51);d=h(d,e,f,c,b[0],20,0xe9b6c7aa);c=h(c,d,e,f,b[5],5,0xd62f105d);f=h(f,c,d,e,b[10],9,0x02441453);e=h(e,f,c,d,b[15],14,0xd8a1e681);d=h(d,e,f,c,b[4],20,0xe7d3fbc8);c=h(c,d,e,f,b[9],5,0x21e1cde6);f=h(f,c,d,e,b[14],9,0xc33707d6);e=h(e,f,c,d,b[3],14,0xf4d50d87);d=h(d,e,f,c,b[8],20,0x455a14ed);c=h(c,d,e,f,b[13],5,0xa9e3e905);f=h(f,c,d,e,b[2],9,0xfcefa3f8);e=h(e,f,c,d,b[7],14,0x676f02d9);d=h(d,e,f,c,b[12],20,0x8d2a4c8a);c=i(c,d,e,f,b[5],4,0xfffa3942);f=i(f,c,d,e,b[8],11,0x8771f681);e=i(e,f,c,d,b[11],16,0x6d9d6122);d=i(d,e,f,c,b[14],23,0xfde5380c);c=i(c,d,e,f,b[1],4,0xa4beea44);f=i(f,c,d,e,b[4],11,0x4bdecfa9);e=i(e,f,c,d,b[7],16,0xf6bb4b60);d=i(d,e,f,c,b[10],23,0xbebfbc70);c=i(c,d,e,f,b[13],4,0x289b7ec6);f=i(f,c,d,e,b[0],11,0xeaa127fa);e=i(e,f,c,d,b[3],16,0xd4ef3085);d=i(d,e,f,c,b[6],23,0x04881d05);c=i(c,d,e,f,b[9],4,0xd9d4d039);f=i(f,c,d,e,b[12],11,0xe6db99e5);e=i(e,f,c,d,b[15],16,0x1fa27cf8);d=i(d,e,f,c,b[2],23,0xc4ac5665);c=j(c,d,e,f,b[0],6,0xf4292244);f=j(f,c,d,e,b[7],10,0x432aff97);e=j(e,f,c,d,b[14],15,0xab9423a7);d=j(d,e,f,c,b[5],21,0xfc93a039);c=j(c,d,e,f,b[12],6,0x655b59c3);f=j(f,c,d,e,b[3],10,0x8f0ccc92);e=j(e,f,c,d,b[10],15,0xffeff47d);d=j(d,e,f,c,b[1],21,0x85845dd1);c=j(c,d,e,f,b[8],6,0x6fa87e4f);f=j(f,c,d,e,b[15],10,0xfe2ce6e0);e=j(e,f,c,d,b[6],15,0xa3014314);d=j(d,e,f,c,b[13],21,0x4e0811a1);c=j(c,d,e,f,b[4],6,0xf7537e82);f=j(f,c,d,e,b[11],10,0xbd3af235);e=j(e,f,c,d,b[2],15,0x2ad7d2bb);d=j(d,e,f,c,b[9],21,0xeb86d391);a[0]=k(c,a[0]);a[1]=k(d,a[1]);a[2]=k(e,a[2]);a[3]=k(f,a[3])}}();function
cx(a){var
c=a.len&Z;a.b8[c]=y;c++;if(c>56){for(var
b=c;b<64;b++)a.b8[b]=0;a6(a.w,a.b32);for(var
b=0;b<56;b++)a.b8[b]=0}else
for(var
b=c;b<56;b++)a.b8[b]=0;a.b32[14]=a.len<<3;a.b32[15]=a.len>>29&0x1fffffff;a6(a.w,a.b32);var
f=new
Uint8Array(16);for(var
d=0;d<4;d++)for(var
b=0;b<4;b++)f[d*4+b]=a.w[d]>>8*b&e;return f}function
cy(){var
a=new
ArrayBuffer(64),b=new
Uint32Array(a),c=new
Uint8Array(a);return{len:0,w:new
Uint32Array([0x67452301,0xefcdab89,0x98badcfe,0x10325476]),b32:b,b8:c}}function
bA(a,b,c){var
e=a.len&Z,d=0;a.len+=c;if(e){var
f=64-e;if(c<f){a.b8.set(b.subarray(0,c),e);return}a.b8.set(b.subarray(0,f),e);a6(a.w,a.b32);c-=f;d+=f}while(c>=64){a.b8.set(b.subarray(d,d+64),0);a6(a.w,a.b32);c-=64;d+=64}if(c)a.b8.set(b.subarray(d,d+c),0)}function
gg(a){return Math.acosh(a)}function
a8(d,c){var
f=d.l>=0?d.l:d.l=d.length,e=c.length,b=f-e;if(b===0)return d.apply(null,c);
else if(b<0){var
a=d.apply(null,c.slice(0,f));if(typeof
a!=="function")return a;
return a8(a,c.slice(f))}else{switch(b){case
1:{var
a=function(a){var
f=new
Array(e+1);for(var
b=0;b<e;b++)f[b]=c[b];f[e]=a;return d.apply(null,f)};break}case
2:{var
a=function(a,b){var
g=new
Array(e+2);for(var
f=0;f<e;f++)g[f]=c[f];g[e]=a;g[e+1]=b;return d.apply(null,g)};break}default:var
a=function(){var
e=arguments.length===0?1:arguments.length,b=new
Array(c.length+e);for(var
a=0;a<c.length;a++)b[a]=c[a];for(var
a=0;a<arguments.length;a++)b[c.length+a]=arguments[a];return a8(d,b)}}a.l=b;return a}}function
gh(){return function
b(a){return a8(b.fun,[a])}}function
gi(a,b,c){return 0}var
aP=function(){var
a=d.process,g="a.out",b=[];if(a&&a.argv&&a.argv.length>1){var
f=a.argv;g=f[1];b=f.slice(2)}var
h=w(g),e=[0,h];for(var
c=0;c<b.length;c++)e.push(w(b[c]));return e}();function
cz(a,b){var
g=a.length,h=b.length,f=g+h-1,d=new
Array(f);d[0]=0;var
c=1,e=1;for(;c<g;c++)d[c]=a[c];for(;c<f;c++,e++)d[c]=b[e];return d}function
bB(a,b,c,d,e){if(d<=b)for(var
f=1;f<=e;f++)c[d+f]=a[b+f];else
for(var
f=e;f>=1;f--)c[d+f]=a[b+f];return 0}function
gj(a){var
c=[0];while(a!==0){var
d=a[1];for(var
b=1;b<d.length;b++)c.push(d[b]);a=a[2]}return c}function
gk(a){if(a<0)m();var
a=a+1|0,b=new
Array(a);b[0]=J;for(var
c=1;c<a;c++)b[c]=0;return b}function
bC(a,b,c,d){for(var
e=0;e<c;e++)a[b+e+1]=d;return 0}function
cA(a,b){if(b<0||b>=a.length-1)m();return a[b+1]}function
a7(a,b){if(a<0)m();var
a=a+1|0,c=new
Array(a);c[0]=0;for(var
d=1;d<a;d++)c[d]=b;return c}function
gl(a){return am(a)}function
gm(a){return aX(a)}function
gn(a,b,c){if(b<0||b>=a.length-1)m();a[b+1]=c;return 0}function
cB(a,b,c){var
d=new
Array(c+1);d[0]=0;for(var
e=1,f=b+1;e<=c;e++,f++)d[e]=a[f];return d}function
go(a){return Math.asinh(a)}function
gp(a){return Math.atanh(a)}function
gq(a,b,c){if(a[1]===b){a[1]=c;return 1}return 0}function
gr(a,b){var
c=a[1];a[1]=b;return c}function
gs(a,b){var
c=a[1];a[1]+=b;return c}function
gt(a){return a[1]}function
gu(a){return[0,a]}function
gv(a,b){if(b.dims.length!==a.dims.length)i(ef);for(var
c=0;c<b.dims.length;c++)if(b.dims[c]!==a.dims[c])i(ef);b.data.set(a.data);return 0}function
gw(a,b){if(a.layout===b)return a;
var
d=[];for(var
c=0;c<a.dims.length;c++)d[c]=a.dims[a.dims.length-c-1];return N(a.kind,b,d,a.data)}function
cC(a,b,c){return a.compare(b,c)}function
cD(a,b){var
c;switch(a){case
0:c=Float32Array;break;case
1:c=Float64Array;break;case
2:c=Int8Array;break;case
3:c=Uint8Array;break;case
4:c=Int16Array;break;case
5:c=Uint16Array;break;case
6:c=Int32Array;break;case
7:c=Int32Array;break;case
8:c=Int32Array;break;case
9:c=Int32Array;break;case
10:c=Float32Array;break;case
11:c=Float64Array;break;case
12:c=Uint8Array;break}if(!c)i("Bigarray.create: unsupported kind");var
d=new
c(b*aQ(a));return d}function
R(a){return a.slice(1)}function
gx(a,b,c){var
d=R(c),e=cD(a,ay(d));return N(a,b,d,e)}function
gy(a,b,c,d,e,f){if(b||aQ(d)===2)i("caml_ba_create_from: use return caml_ba_create_unsafe");return N(d,e,f,a)}function
bK(a){var
b=new
Int32Array(1);b[0]=a;var
c=new
Float32Array(b.buffer);return c[0]}function
_(a){return new
f(a[7]<<0|a[6]<<8|a[5]<<16,a[4]<<0|a[3]<<8|a[2]<<16,a[1]<<0|a[0]<<8)}function
aS(a){var
f=a.lo,g=a.mi,c=a.hi,d=(c&0x7fff)>>4;if(d===2047)return(f|g|c&bs)===0?c&W?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY:Number.NaN;
var
e=Math.pow(2,-24),b=(f*e+g)*e+(c&bs);if(d>0){b+=16;b*=Math.pow(2,d-ek)}else
b*=Math.pow(2,-dD);if(c&W)b=-b;return b}function
g(a){if(!q.Failure)q.Failure=[A,k(cr),-3];b0(q.Failure,a)}function
cE(a,b,c){var
m=a.read32s();if(m<0||m>16)g("input_value: wrong number of bigarray dimensions");var
t=a.read32s(),n=t&e,s=t>>8&1,l=[];if(c===bv)for(var
d=0;d<m;d++){var
r=a.read16u();if(r===K){var
w=a.read32u(),x=a.read32u();if(w!==0)g("input_value: bigarray dimension overflow in 32bit");r=x}l.push(r)}else
for(var
d=0;d<m;d++)l.push(a.read32u());var
h=ay(l),j=cD(n,h),k=N(n,s,l,j);switch(n){case
2:for(var
d=0;d<h;d++)j[d]=a.read8s();break;case
3:case
12:for(var
d=0;d<h;d++)j[d]=a.read8u();break;case
4:for(var
d=0;d<h;d++)j[d]=a.read16s();break;case
5:for(var
d=0;d<h;d++)j[d]=a.read16u();break;case
6:for(var
d=0;d<h;d++)j[d]=a.read32s();break;case
8:case
9:var
v=a.read8u();if(v)g("input_value: cannot read bigarray with 64-bit OCaml ints");for(var
d=0;d<h;d++)j[d]=a.read32s();break;case
7:var
i=new
Array(8);for(var
d=0;d<h;d++){for(var
f=0;f<8;f++)i[f]=a.read8u();var
u=_(i);k.set(d,u)}break;case
1:var
i=new
Array(8);for(var
d=0;d<h;d++){for(var
f=0;f<8;f++)i[f]=a.read8u();var
o=aS(_(i));k.set(d,o)}break;case
0:for(var
d=0;d<h;d++){var
o=bK(a.read32s());k.set(d,o)}break;case
10:for(var
d=0;d<h;d++){var
q=bK(a.read32s()),p=bK(a.read32s());k.set(d,[J,q,p])}break;case
11:var
i=new
Array(8);for(var
d=0;d<h;d++){for(var
f=0;f<8;f++)i[f]=a.read8u();var
q=aS(_(i));for(var
f=0;f<8;f++)i[f]=a.read8u();var
p=aS(_(i));k.set(d,[J,q,p])}break}b[0]=(4+m)*4;return N(n,s,l,j)}function
bD(a,b){if(b<0||b>=a.dims.length)i("Bigarray.dim");return a.dims[b]}function
gz(a){return bD(a,0)}function
gA(a){return bD(a,1)}function
gB(a){return bD(a,2)}function
gC(a,b){a.fill(b);return 0}function
eK(a){var
b;if(a
instanceof
Float32Array)b=0;else if(a
instanceof
Float64Array)b=1;else if(a
instanceof
Int8Array)b=2;else if(a
instanceof
Uint8Array)b=3;else if(a
instanceof
Uint8ClampedArray)b=3;else if(a
instanceof
Int16Array)b=4;else if(a
instanceof
Uint16Array)b=5;else if(a
instanceof
Int32Array)b=6;else if(a
instanceof
Uint32Array)b=6;else
i("caml_ba_kind_of_typed_array: unsupported kind");return b}function
gD(a){var
b=eK(a),a=a
instanceof
Uint32Array?new
Int32Array(a.buffer,a.byteOffset,a.length):a;return N(b,0,[a.length],a)}function
gE(a,b,c){return a.get(a.offset([b,c]))}function
gF(a,b,c,d){return a.get(a.offset([b,c,d]))}function
gG(a,b){var
c=a.offset(R(b));return a.get(c)}function
be(a,b){return Math.imul(a,b)}function
u(a,b){b=be(b,0xcc9e2d51|0);b=b<<15|b>>>32-15;b=be(b,0x1b873593);a^=b;a=a<<13|a>>>32-13;return(a+(a<<2)|0)+(0xe6546b64|0)|0}var
m5=Math.log2&&Math.log2(1.1235582092889474e307)===1020;function
dg(a){if(m5)return Math.floor(Math.log2(a));
var
b=0;if(a===0)return Number.NEGATIVE_INFINITY;
if(a>=1)while(a>=2){a/=2;b++}else
while(a<1){a*=2;b--}return b}function
ba(a,b,c){return new
f(a,b,c)}function
aB(a){if(!Number.isFinite(a)){if(Number.isNaN(a))return ba(1,0,d8);
return a>0?ba(0,0,d8):ba(0,0,0xfff0)}var
f=a===0&&1/a===Number.NEGATIVE_INFINITY?W:a>=0?0:W;if(f)a=-a;var
b=dg(a)+X;if(b<=0){b=0;a/=Math.pow(2,-dD)}else{a/=Math.pow(2,b-ek);if(a<16){a*=2;b-=1}if(b===0)a/=2}var
d=Math.pow(2,24),c=a|0;a=(a-c)*d;var
e=a|0;a=(a-e)*d;var
g=a|0;c=c&bs|f|b<<4;return ba(g,e,c)}function
fe(a,b){a=u(a,bN(b));a=u(a,bM(b));return a}function
bH(a,b){return fe(a,aB(b))}function
cF(a){var
c=ay(a.dims),d=0;switch(a.kind){case
2:case
3:case
12:if(c>E)c=E;var
e=0,b=0;for(b=0;b+4<=a.data.length;b+=4){e=a.data[b+0]|a.data[b+1]<<8|a.data[b+2]<<16|a.data[b+3]<<24;d=u(d,e)}e=0;switch(c&3){case
3:e=a.data[b+2]<<16;case
2:e|=a.data[b+1]<<8;case
1:e|=a.data[b+0];d=u(d,e)}break;case
4:case
5:if(c>V)c=V;var
e=0,b=0;for(b=0;b+2<=a.data.length;b+=2){e=a.data[b+0]|a.data[b+1]<<16;d=u(d,e)}if((c&1)!==0)d=u(d,a.data[b]);break;case
6:if(c>64)c=64;for(var
b=0;b<c;b++)d=u(d,a.data[b]);break;case
8:case
9:if(c>64)c=64;for(var
b=0;b<c;b++)d=u(d,a.data[b]);break;case
7:if(c>32)c=32;c*=2;for(var
b=0;b<c;b++)d=u(d,a.data[b]);break;case
10:c*=2;case
0:if(c>64)c=64;for(var
b=0;b<c;b++)d=bH(d,a.data[b]);break;case
11:c*=2;case
1:if(c>32)c=32;for(var
b=0;b<c;b++)d=bH(d,a.data[b]);break}return d}function
gH(){return 0}function
gI(a){return a.kind}function
gJ(a){return a.layout}function
eL(a,b,c,d,e,f){g("caml_ba_map_file not implemented")}function
gK(a,b){return eL(a[0],a[1],a[2],a[3],a[4],a[5])}function
gL(a){return a.dims.length}function
gM(a,b){b=R(b);var
d=[],e=b.length;if(e<0||e>16)i("Bigarray.reshape: bad number of dimensions");var
f=1;for(var
c=0;c<e;c++){d[c]=b[c];if(d[c]<0)i("Bigarray.reshape: negative dimension");f=f*d[c]}var
g=ay(a.dims);if(f!==g)i("Bigarray.reshape: size mismatch");return N(a.kind,a.layout,d,a.data)}function
bJ(a){var
b=new
Float32Array(1);b[0]=a;var
c=new
Int32Array(b.buffer);return c[0]|0}function
aa(a){return a.toArray()}function
cG(a,b,c){a.write(32,b.dims.length);a.write(32,b.kind|b.layout<<8);if(b.caml_custom===bv)for(var
d=0;d<b.dims.length;d++)if(b.dims[d]<K)a.write(16,b.dims[d]);else{a.write(16,K);a.write(32,0);a.write(32,b.dims[d])}else
for(var
d=0;d<b.dims.length;d++)a.write(32,b.dims[d]);switch(b.kind){case
2:case
3:case
12:for(var
d=0;d<b.data.length;d++)a.write(8,b.data[d]);break;case
4:case
5:for(var
d=0;d<b.data.length;d++)a.write(16,b.data[d]);break;case
6:for(var
d=0;d<b.data.length;d++)a.write(32,b.data[d]);break;case
8:case
9:a.write(8,0);for(var
d=0;d<b.data.length;d++)a.write(32,b.data[d]);break;case
7:for(var
d=0;d<b.data.length/2;d++){var
f=aa(b.get(d));for(var
e=0;e<8;e++)a.write(8,f[e])}break;case
1:for(var
d=0;d<b.data.length;d++){var
f=aa(aB(b.get(d)));for(var
e=0;e<8;e++)a.write(8,f[e])}break;case
0:for(var
d=0;d<b.data.length;d++){var
f=bJ(b.get(d));a.write(32,f)}break;case
10:for(var
d=0;d<b.data.length/2;d++){var
e=b.get(d);a.write(32,bJ(e[1]));a.write(32,bJ(e[2]))}break;case
11:for(var
d=0;d<b.data.length/2;d++){var
g=b.get(d),f=aa(aB(g[1]));for(var
e=0;e<8;e++)a.write(8,f[e]);var
f=aa(aB(g[2]));for(var
e=0;e<8;e++)a.write(8,f[e])}break}c[0]=(4+b.dims.length)*4;c[1]=(4+b.dims.length)*8}function
eM(a,b,c){a.set(a.offset(b),c);return 0}function
gN(a,b,c,d){a.set(a.offset([b,c]),d);return 0}function
gO(a,b,c,d,e){a.set(a.offset([b,c,d]),e);return 0}function
gP(a,b,c){a.set(a.offset(R(b)),c);return 0}function
gQ(a,b){b=R(b);var
d=b.length,e=[],f=[],g;if(d>a.dims.length)i("Bigarray.slice: too many indices");if(a.layout===0){for(var
c=0;c<d;c++)e[c]=b[c];for(;c<a.dims.length;c++)e[c]=0;f=a.dims.slice(d)}else{for(var
c=0;c<d;c++)e[a.dims.length-d+c]=b[c];for(var
c=0;c<a.dims.length-d;c++)e[c]=1;f=a.dims.slice(0,a.dims.length-d)}g=a.offset(e);var
k=ay(f),h=aQ(a.kind),j=a.data.subarray(g*h,(g+k)*h);return N(a.kind,a.layout,f,j)}function
gR(a,b,c){var
f,e=1;if(a.layout===0){for(var
d=1;d<a.dims.length;d++)e=e*a.dims[d];f=0}else{for(var
d=0;d<a.dims.length-1;d++)e=e*a.dims[d];f=a.dims.length-1;b=b-1}if(b<0||c<0||b+c>a.dims[f])i("Bigarray.sub: bad sub-array");var
g=[];for(var
d=0;d<a.dims.length;d++)g[d]=a.dims[d];g[f]=c;e*=aQ(a.kind);var
h=a.data.subarray(b*e,(b+c)*e);return N(a.kind,a.layout,g,h)}function
cH(a){return a.data}function
gS(a,b){var
c=a.offset(b);if(c+1>=a.data.length)m();var
d=a.get(c),e=a.get(c+1);return d|e<<8}function
gT(a,b){var
c=a.offset(b);if(c+3>=a.data.length)m();var
d=a.get(c+0),e=a.get(c+1),f=a.get(c+2),g=a.get(c+3);return d<<0|e<<8|f<<16|g<<24}function
gU(a,b){var
c=a.offset(b);if(c+7>=a.data.length)m();var
d=a.get(c+0),e=a.get(c+1),f=a.get(c+2),g=a.get(c+3),h=a.get(c+4),i=a.get(c+5),j=a.get(c+6),k=a.get(c+7);return _([k,j,i,h,g,f,e,d])}function
gV(a,b,c){var
d=a.offset(b);if(d+1>=a.data.length)m();a.set(d+0,c&e);a.set(d+1,c>>>8&e);return 0}function
gW(a,b,c){var
d=a.offset(b);if(d+3>=a.data.length)m();a.set(d+0,c&e);a.set(d+1,c>>>8&e);a.set(d+2,c>>>16&e);a.set(d+3,c>>>24&e);return 0}function
gX(a,b,c){var
e=a.offset(b);if(e+7>=a.data.length)m();var
c=aa(c);for(var
d=0;d<8;d++)a.set(e+d,c[7-d]);return 0}function
gY(a){return b1?1:0}function
gZ(a,b,c,d,e){if(12!==a.kind)i(dI);if(12!==c.kind)i(dI);if(e===0)return 0;
var
f=a.offset(b),g=c.offset(d);if(f+e>a.data.length)m();if(g+e>c.data.length)m();var
h=a.data.subarray(f,f+e);c.data.set(h,d);return 0}function
g0(a,b,c,d,e){if(12!==a.kind)i(cs);if(e===0)return 0;
var
f=a.offset(b);if(f+e>a.data.length)m();if(d+e>bb(c))m();var
g=a.data.slice(f,f+e);ag(ap(g),0,c,d,e);return 0}function
g1(a,b,c,d,e){if(12!==c.kind)i(cs);if(e===0)return 0;
var
f=c.offset(d);if(b+e>bb(a))m();if(f+e>c.data.length)m();var
g=am(a).slice(b,b+e);c.data.set(g,f);return 0}function
g2(a,b,c,d,e){if(12!==c.kind)i(cs);if(e===0)return 0;
var
f=c.offset(d);if(b+e>v(a))m();if(f+e>c.data.length)m();var
g=aX(a).slice(b,b+e);c.data.set(g,f);return 0}function
g3(a,b,c,d,e){for(var
f=0;f<e;f++){var
g=t(a,b+f),h=t(c,d+f);if(g<h)return-1;
if(g>h)return 1}return 0}function
cJ(a,b){var
c=bz.Final(a);return al(c)}function
cK(a,b,c,d){var
e=am(b);e=e.subarray(c,c+d);bz.Update(a,e);return 0}function
cI(a,b){b=aX(b);if(b.length>64)b.subarray(0,64);return bz.Init(a,b)}function
g4(a,b,c,d,e){var
f=cI(a,b);cK(f,c,d,e);return cJ(f,a)}function
g5(a,b,c,d,e){var
f=cI(a,b),g=aq(c);cK(f,g,d,e);return cJ(f,a)}function
g6(a,b,c,d,e){ag(aq(a),b,c,d,e);return 0}function
g7(a){return(a&0x00ff)<<8|(a&dY)>>8}function
s(a){if(bn(a))return a;
return dd(a)}function
eN(a){var
d={},c=-1;if(a)for(var
b=1;b<a.length;b++){var
e=a[b][2];c=Math.max(c,e);d[s(a[b][1])]=e}d.next_idx=c+1;return d}function
eO(a,b){a.t&6&&P(a);b.t&6&&P(b);return a.c<b.c?-1:a.c>b.c?1:0}function
eP(a,b){if(a===b)return 1;
a.t&6&&P(a);b.t&6&&P(b);return a.c===b.c?1:0}function
O(a,b){switch(a.t&6){case
0:return a.c.charCodeAt(b);
case
2:if(b>=a.c.length)return 0;
return a.c.charCodeAt(b);
case
4:return a.c[b]}}function
g8(a,b){if(b>>>0>=a.l)ah();return O(a,b)}function
g9(a,b){if(b>>>0>=a.l-1)ah();var
c=O(a,b),d=O(a,b+1);return d<<8|c}function
g_(a,b){if(b>>>0>=a.l-3)ah();var
c=O(a,b),d=O(a,b+1),e=O(a,b+2),f=O(a,b+3);return f<<24|e<<16|d<<8|c}function
g$(a,b){if(b>>>0>=a.l-7)ah();var
d=new
Array(8);for(var
c=0;c<8;c++)d[7-c]=O(a,b+c);return _(d)}function
eQ(a,b){a.t&6&&P(a);b.t&6&&P(b);return a.c<=b.c?1:0}function
ha(a,b){return eQ(b,a)}function
eR(a,b){a.t&6&&P(a);b.t&6&&P(b);return a.c<b.c?1:0}function
hb(a,b){return eR(b,a)}function
hc(a,b){return 1-eP(a,b)}function
hd(a){var
b=9;if(!bn(a))b=8,a=de(a);return new
L(b,a,a.length)}function
hf(a,b,c){if(b>>>0>=a.l-1)ah();var
f=e&c>>8,d=e&c;ai(a,b+0,d);ai(a,b+1,f);return 0}function
hg(a,b,c){if(b>>>0>=a.l-3)ah();var
h=e&c>>24,g=e&c>>16,f=e&c>>8,d=e&c;ai(a,b+0,d);ai(a,b+1,f);ai(a,b+2,g);ai(a,b+3,h);return 0}function
hh(a,b,c){if(b>>>0>=a.l-7)ah();var
e=aa(c);for(var
d=0;d<8;d++)ai(a,b+7-d,e[d]);return 0}var
F=a8;function
hi(a){return Math.cbrt(a)}var
$=new
Array();function
o(a){return $[a]}function
hj(a){var
b=o(a);return b.fd}function
hk(a,b){if(b>>>0>=a.length-1)m();return a}function
hl(a){if(Number.isFinite(a)){if(Math.abs(a)>=2.2250738585072014e-308)return 0;
if(a!==0)return 1;
return 2}return Number.isNaN(a)?4:3}function
bQ(a){return a===245?1:0}function
fj(a,b){b[0]=4;return a.read32s()}function
fL(a,b){switch(a.read8u()){case
1:b[0]=4;return a.read32s();
case
2:g("input_value: native integer value too large");break;default:g("input_value: ill-formed native integer")}}function
fv(a,b){var
d=new
Array(8);for(var
c=0;c<8;c++)d[c]=a.read8u();b[0]=8;return _(d)}function
fp(a,b,c){var
e=aa(b);for(var
d=0;d<8;d++)a.write(8,e[d]);c[0]=8;c[1]=8}function
fk(a,b,c){return a.compare(b)}function
fm(a){return a.lo32()^a.hi32()}var
ak={_j:{deserialize:fv,serialize:fp,fixed_length:8,compare:fk,hash:fm},_i:{deserialize:fj,fixed_length:4},_n:{deserialize:fL,fixed_length:4},_bigarray:{deserialize:function(a,b){return cE(a,b,"_bigarray")},serialize:cG,compare:cC,hash:cF},_bigarr02:{deserialize:function(a,b){return cE(a,b,bv)},serialize:cG,compare:cC,hash:cF}};function
bE(a){return ak[a.caml_custom]&&ak[a.caml_custom].compare}function
cM(a,b,c,d){var
f=bE(b);if(f){var
e=c>0?f(b,a,d):f(a,b,d);if(d&&Number.isNaN(e))return c;
if(Number.isNaN(+e))return+e;
if((e|0)!==0)return e|0}return c}function
cN(a){if(typeof
a==="number")return ad;
else if(aC(a))return b8;
else if(aU(a))return 1252;
else if(Array.isArray(a)&&a[0]===a[0]>>>0&&a[0]<=aJ){var
b=a[0]|0;return b===J?0:b}else if(a
instanceof
String)return dt;
else if(typeof
a==="string")return dt;
else if(a
instanceof
Number)return ad;
else if(a&&a.caml_custom)return cj;
else if(a&&a.compare)return 1256;
else if(typeof
a==="function")return 1247;
else if(typeof
a==="symbol")return 1251;
return 1001}function
fx(a,b){if(a<b)return-1;
if(a===b)return 0;
return 1}function
lD(a,b){return a<b?-1:a>b?1:0}function
ar(a,b,c){var
f=[];for(;;){if(!(c&&a===b)){var
e=cN(a);if(e===aY){a=a[1];continue}var
g=cN(b);if(g===aY){b=b[1];continue}if(e!==g){if(e===ad){if(g===cj)return cM(a,b,-1,c);
return-1}if(g===ad){if(e===cj)return cM(b,a,1,c);
return 1}return e<g?-1:1}switch(e){case
247:i(cl);break;case
248:var
d=fx(a[2],b[2])|0;if(d!==0)return d;
break;case
249:i(cl);break;case
250:i("equal: got Forward_tag, should not happen");break;case
251:i("equal: abstract value");break;case
252:if(a!==b){var
d=eO(a,b)|0;if(d!==0)return d}break;case
253:i("equal: got Double_tag, should not happen");break;case
254:i("equal: got Double_array_tag, should not happen");break;case
255:i("equal: got Custom_tag, should not happen");break;case
1247:i(cl);break;case
1255:var
j=bE(a);if(j!==bE(b))return a.caml_custom<b.caml_custom?-1:1;
if(!j)i("compare: abstract value");var
d=j(a,b,c);if(Number.isNaN(d))return c?-1:d;
if(d!==(d|0))return-1;
if(d!==0)return d|0;
break;case
1256:var
d=a.compare(b,c);if(Number.isNaN(d))return c?-1:d;
if(d!==(d|0))return-1;
if(d!==0)return d|0;
break;case
1000:a=+a;b=+b;if(a<b)return-1;
if(a>b)return 1;
if(a!==b){if(!c)return Number.NaN;
if(!Number.isNaN(a))return 1;
if(!Number.isNaN(b))return-1}break;case
1001:if(a<b)return-1;
if(a>b)return 1;
if(a!==b)return c?1:Number.NaN;
break;case
1251:if(a!==b)return c?1:Number.NaN;
break;case
1252:var
a=r(a),b=r(b);if(a!==b){if(a<b)return-1;
if(a>b)return 1}break;case
12520:var
a=a.toString(),b=b.toString();if(a!==b){if(a<b)return-1;
if(a>b)return 1}break;default:if(bQ(e)){i("compare: continuation value");break}if(a.length!==b.length)return a.length<b.length?-1:1;
if(a.length>1)f.push(a,b,1);break}}if(f.length===0)return 0;
var
h=f.pop();b=f.pop();a=f.pop();if(h+1<a.length)f.push(a,b,h+1);a=a[h];b=b[h]}}function
hm(a,b){return ar(a,b,true)}function
eS(a){var
b=a[1];a[1]=0;return b}function
hn(a,b,c,d){var
e=eS(a);e[3]=[0,b,c,d];return e}function
ho(){return[0]}function
hp(){g("caml_convert_raw_backtrace_slot")}function
hq(a,b){if(b===0)b=1/b;a=Math.abs(a);return b<0?-a:a}function
hr(a){return Math.cosh(a)}function
av(){return typeof
d.process!=="undefined"&&typeof
d.process.versions!=="undefined"&&typeof
d.process.versions.node!=="undefined"}function
m8(){function
a(a){if(a.charAt(0)===Y)return[h,a.slice(1)];
return}function
b(a){var
g=/^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,b=g.exec(a),c=b[1]||h,e=c.length>0&&c.charAt(1)!==":";if(b[2]||e){var
d=b[1]||h,f=b[2]||h;return[d,a.slice(d.length+f.length)]}return}return av()&&d.process&&d.process.platform?d.process.platform===eB?b:a:a}var
b6=m8();function
aW(a){return a.slice(-1)!==Y?a+Y:a}if(av()&&d.process&&d.process.cwd)var
aj=d.process.cwd().replace(/\\/g,Y);else
var
aj="/static";aj=aW(aj);function
bS(a){a=s(a);if(!b6(a))a=aj+a;var
e=b6(a),d=e[1].split(/[/\\]/),b=[];for(var
c=0;c<d.length;c++)switch(d[c]){case"..":if(b.length>1)b.pop();break;case".":break;case"":break;default:b.push(d[c]);break}b.unshift(e[0]);b.orig=a;return b}function
cQ(a){var
b=b6(a);if(!b)return;
return b[0]+Y}var
bl=cQ(aj)||g("unable to compute caml_root"),H=[];if(av())H.push({path:bl,device:new
b(bl)});else
H.push({path:bl,device:new
c(bl)});H.push({path:eq,device:new
c(eq)});function
p(a){var
h=bS(a),a=h.join(Y),g=aW(a),d;for(var
f=0;f<H.length;f++){var
c=H[f];if(g.search(c.path)===0&&(!d||d.path.length<c.path.length))d={path:c.path,device:c.device,rest:a.slice(c.path.length,a.length)}}if(!d&&av()){var
e=cQ(a);if(e&&e.match(/^[a-zA-Z]:\/$/)){var
c={path:e,device:new
b(e)};H.push(c);d={path:c.path,device:c.device,rest:a.slice(c.path.length,a.length)}}}if(d)return d;
j("no device found for "+g)}function
eT(a,b){var
c=p(a);if(!c.device.register)g("cannot register file");c.device.register(c.rest,b);return 0}function
hs(a){i("String.create")}var
cO=0;function
ht(a){return w(a.caml_custom)}var
dn=function(){var
J=ArrayBuffer,g=Uint8Array,C=Uint16Array,K=Int16Array,b=Uint32Array,f=Int32Array;function
O(a,b,c){if(g.prototype.slice)return g.prototype.slice.call(a,b,c);
if(b==null||b<0)b=0;if(c==null||c>a.length)c=a.length;var
d=new
g(c-b);d.set(a.subarray(b,c));return d}function
s(a,b,c,d){if(g.prototype.fill)return g.prototype.fill.call(a,b,c,d);
if(c==null||c<0)c=0;if(d==null||d>a.length)d=a.length;for(;c<d;++c)a[c]=b;return a}function
k(a,b,c,d){if(g.prototype.copyWithin)return g.prototype.copyWithin.call(a,b,c,d);
if(c==null||c<0)c=0;if(d==null||d>a.length)d=a.length;while(c<d)a[b++]=a[c++]}var
e=["invalid zstd data","window size too large (>2046MB)","invalid block type","FSE accuracy too high","match distance too far back","unexpected EOF"];function
i(a,b,c){var
d=new
Error(b||e[a]);d.code=a;if(!c)throw d;return d}function
m(a,b,c){var
d=0,e=0;for(;d<c;++d)e|=a[b++]<<(d<<3);return e}function
u(a,b){return(a[b]|a[b+1]<<8|a[b+2]<<16|a[b+3]<<24)>>>0}function
n(a,b){var
q=a[0]|a[1]<<8|a[2]<<16;if(q===0x2fb528&&a[3]===253){var
e=a[4],l=e>>5&1,s=e>>2&1,o=e&3,j=e>>6;if(e&8)i(0);var
h=6-l,n=o===3?4:o,t=m(a,h,n);h+=n;var
p=j?1<<j:l,k=m(a,h,p)+(j===1&&E),c=k;if(!l){var
r=1<<10+(a[5]>>3);c=r+(r>>3)*(a[5]&7)}if(c>2145386496)i(1);var
d=new
g((b===1?k||c:b?0:c)+12);d[0]=1,d[4]=4,d[8]=8;return{b:h+p,y:0,l:0,d:t,w:b&&b!==1?b:d.subarray(12),e:c,o:new
f(d.buffer,0,3),u:k,c:s,m:Math.min(131072,c)}}else if((q>>4|a[3]<<20)===0x184d2a5)return u(a,4)+8;
i(0)}function
o(a){var
b=0;for(;1<<b<=a;++b);return b-1}function
t(a,b,c){var
h=(b<<3)+4,p=(a[b]&15)+5;if(p>c)i(3);var
d=1<<p,j=d,k=-1,t=-1,e=-1,y=d,l=new
J(a1+(d<<2)),x=new
K(l,0,E),w=new
C(l,0,E),G=new
C(l,a1,d),v=a1+(d<<1),r=new
g(l,v,d),D=new
g(l,v+d);while(k<aJ&&j>0){var
q=o(j+1),s=h>>3,z=(1<<q+1)-1,f=(a[s]|a[s+1]<<8|a[s+2]<<16)>>(h&7)&z,A=(1<<q)-1,B=z-j-1,I=f&A;if(I<B)h+=q,f=I;else{h+=q+1;if(f>A)f-=B}x[++k]=--f;if(f===-1){j+=f;r[--y]=k}else
j-=f;if(!f)do{var
H=h>>3;t=(a[H]|a[H+1]<<8)>>(h&7)&3;h+=2;k+=t}while(t===3)}if(k>aJ||j)i(0);var
n=0,N=(d>>1)+(d>>3)+3,M=d-1;for(var
m=0;m<=k;++m){var
u=x[m];if(u<1){w[m]=-u;continue}for(e=0;e<u;++e){r[n]=m;do
n=n+N&M;while(n>=y)}}if(n)i(0);for(e=0;e<d;++e){var
F=w[r[e]]++,L=D[e]=p-o(F);G[e]=(F<<L)-d}return[h+7>>3,{b:p,s:r,n:D,t:G}]}function
am(a,b){var
c=0,e=-1,w=new
g(292),x=a[b],d=w.subarray(0,E),K=w.subarray(E,ds),k=new
C(w.buffer,ds);if(x<V){var
A=t(a,b+1,6),M=A[0],h=A[1];b+=x;var
F=M<<3,H=a[b];if(!H)i(0);var
n=0,p=0,u=h.b,v=u,f=(++b<<3)-8+o(H);for(;;){f-=u;if(f<F)break;var
m=f>>3;n+=(a[m]|a[m+1]<<8)>>(f&7)&(1<<u)-1;d[++e]=h.s[n];f-=v;if(f<F)break;m=f>>3;p+=(a[m]|a[m+1]<<8)>>(f&7)&(1<<v)-1;d[++e]=h.s[p];u=h.n[n];n=h.t[n];v=h.n[p];p=h.t[p]}if(++e>aJ)i(0)}else{e=x-a3;for(;c<e;c+=2){var
B=a[++b];d[c]=B>>4;d[c+1]=B&15}++b}var
z=0;for(c=0;c<e;++c){var
l=d[c];if(l>11)i(0);z+=l&&1<<l-1}var
j=o(z)+1,q=1<<j,y=q-z;if(y&y-1)i(0);d[e++]=o(y)+1;for(c=0;c<e;++c){var
l=d[c];++K[d[c]=l&&j+1-l]}var
G=new
g(q<<1),L=G.subarray(0,q),I=G.subarray(q);k[j]=0;for(c=j;c>0;--c){var
J=k[c];s(I,c,J,k[c-1]=J+K[c]*(1<<j-c))}if(k[0]!==q)i(0);for(c=0;c<e;++c){var
r=d[c];if(r){var
D=k[r];s(L,c,D,k[r]=D+(1<<j-r))}}return[b,{n:I,b:j,s:L}]}var
ah=t(new
g([81,16,99,dC,49,198,24,99,12,33,dZ,24,99,cc,cc,134,70,146,4]),0,6)[1],ai=t(new
g([33,20,dZ,24,99,dC,33,cq,16,66,8,33,cq,16,66,8,33,68,68,68,68,68,68,68,68,36,9]),0,6)[1],aj=t(new
g([32,cq,16,66,cc,70,68,68,68,68,36,73,2]),0,5)[1];function
a(a,b){var
e=a.length,d=new
f(e);for(var
c=0;c<e;++c){d[c]=b;b+=1<<a[c]}return d}var
M=new
g(new
f([0,0,0,0,ec,dG,134678020,202050057,269422093]).buffer,0,36),ak=a(M,0),N=new
g(new
f([0,0,0,0,0,0,0,0,ec,dG,117769220,185207048,252579084,16]).buffer,0,53),al=a(N,3);function
r(a,b,c){var
l=a.length,m=b.length,k=a[l-1],n=(1<<c.b)-1,j=-c.b;if(!k)i(0);var
e=0,f=c.b,d=(l<<3)-8+o(k)-f,h=-1;while(d>j&&h<m){var
g=d>>3,p=(a[g]|a[g+1]<<8|a[g+2]<<16)>>(d&7);e=(e<<f|p)&n;b[++h]=c.s[e];d-=f=c.n[e]}if(d!==j||h+1!==m)i(0)}function
ag(a,b,c){var
d=6,h=b.length,e=h+3>>2,f=e<<1,g=e+f;r(a.subarray(d,d+=a[0]|a[1]<<8),b.subarray(0,e),c);r(a.subarray(d,d+=a[2]|a[3]<<8),b.subarray(e,f),c);r(a.subarray(d,d+=a[4]|a[5]<<8),b.subarray(f,g),c);r(a.subarray(d),b.subarray(g),c)}function
l(a,b,c){var
P,d=b.b,R=a[d],S=R>>1&3;b.l=R&1;var
L=R>>3|a[d+1]<<5|a[d+2]<<13,p=(d+=3)+L;if(S===1){if(d>=a.length)return;
b.b=d+1;if(c){s(c,a[d],b.y,b.y+=L);return c}return s(new
g(L),a[d])}if(p>a.length)return;
if(S===0){b.b=p;if(c){c.set(a.subarray(d,p),b.y);b.y+=L;return c}return O(a,d,p)}if(S===2){var
D=a[d],G=D&3,A=D>>2&3,m=D>>4,u=0,ae=0;if(G<2)if(A&1)m|=a[++d]<<4|(A&2&&a[++d]<<12);else
m=D>>3;else{ae=A;if(A<2)m|=(a[++d]&63)<<4,u=a[d]>>6|a[++d]<<2;else if(A===2)m|=a[++d]<<4|(a[++d]&3)<<12,u=a[d]>>2|a[++d]<<6;else
m|=a[++d]<<4|(a[++d]&63)<<12,u=a[d]>>6|a[++d]<<2|a[++d]<<10}++d;var
h=c?c.subarray(b.y,b.y+b.m):new
g(b.m),l=h.length-m;if(G===0)h.set(a.subarray(d,d+=m),l);else if(G===1)s(h,a[d++],l);else{var
T=b.h;if(G===2){var
Z=am(a,d);u+=d-(d=Z[0]);b.h=T=Z[1]}else if(!T)i(0);(ae?ag:r)(a.subarray(d,d+=u),h.subarray(l),T)}var
n=a[d++];if(n){if(n===aJ)n=(a[d++]|a[d++]<<8)+0x7f00;else if(n>a3)n=n-V<<8|a[d++];var
af=a[d++];if(af&3)i(0);var
E=[ai,aj,ah];for(var
f=2;f>-1;--f){var
W=af>>(f<<1)+2&3;if(W===1){var
Y=new
g([0,0,a[d++]]);E[f]={s:Y.subarray(2,3),n:Y.subarray(0,1),t:new
C(Y.buffer,0,1),b:0}}else if(W===2)P=t(a,d,9-(f&1)),d=P[0],E[f]=P[1];else if(W===3){if(!b.t)i(0);E[f]=b.t[f]}}var
Q=b.t=E,y=Q[0],z=Q[1],w=Q[2],_=a[p-1];if(!_)i(0);var
j=(p<<3)-8+o(_)-w.b,e=j>>3,k=0,I=(a[e]|a[e+1]<<8)>>(j&7)&(1<<w.b)-1;e=(j-=z.b)>>3;var
K=(a[e]|a[e+1]<<8)>>(j&7)&(1<<z.b)-1;e=(j-=y.b)>>3;var
J=(a[e]|a[e+1]<<8)>>(j&7)&(1<<y.b)-1;for(++n;--n;){var
U=w.s[I],$=w.n[I],X=y.s[J],aa=y.n[J],ac=z.s[K],ab=z.n[K];e=(j-=ac)>>3;var
ad=1<<ac,q=ad+((a[e]|a[e+1]<<8|a[e+2]<<16|a[e+3]<<24)>>>(j&7)&ad-1);e=(j-=N[X])>>3;var
x=al[X]+((a[e]|a[e+1]<<8|a[e+2]<<16)>>(j&7)&(1<<N[X])-1);e=(j-=M[U])>>3;var
H=ak[U]+((a[e]|a[e+1]<<8|a[e+2]<<16)>>(j&7)&(1<<M[U])-1);e=(j-=$)>>3;I=w.t[I]+((a[e]|a[e+1]<<8)>>(j&7)&(1<<$)-1);e=(j-=aa)>>3;J=y.t[J]+((a[e]|a[e+1]<<8)>>(j&7)&(1<<aa)-1);e=(j-=ab)>>3;K=z.t[K]+((a[e]|a[e+1]<<8)>>(j&7)&(1<<ab)-1);if(q>3){b.o[2]=b.o[1];b.o[1]=b.o[0];b.o[0]=q-=3}else{var
F=q-(H!==0);if(F){q=F===3?b.o[0]-1:b.o[F];if(F>1)b.o[2]=b.o[1];b.o[1]=b.o[0];b.o[0]=q}else
q=b.o[0]}for(var
f=0;f<H;++f)h[k+f]=h[l+f];k+=H,l+=H;var
B=k-q;if(B<0){var
v=-B,an=b.e+B;if(v>x)v=x;for(var
f=0;f<v;++f)h[k+f]=b.w[an+f];k+=v,x-=v,B=0}for(var
f=0;f<x;++f)h[k+f]=h[B+f];k+=x}if(k!==l)while(l<h.length)h[k++]=h[l++];else
k=h.length;if(c)b.y+=k;else
h=O(h,0,k)}else if(c){b.y+=m;if(l)for(var
f=0;f<m;++f)h[f]=h[l+f]}else if(l)h=O(h,l);b.b=p;return h}i(2)}function
j(a,b){if(a.length===1)return a[0];
var
e=new
g(b);for(var
c=0,d=0;c<a.length;++c){var
f=a[c];e.set(f,d);d+=f.length}return e}return function(a,b){var
f=0,e=[],h=+!b,g=0;while(a.length){var
c=n(a,h||b);if(typeof
c==="object"){if(h){b=null;if(c.w.length===c.u){e.push(b=c.w);g+=c.u}}else{e.push(b);c.e=0}while(!c.l){var
d=l(a,c,b);if(!d)i(5);if(b)c.e=c.y;else{e.push(d);g+=d.length;k(c.w,0,d.length);c.w.set(d,c.w.length-d.length)}}f=c.b+c.c*4}else
f=c;a=a.subarray(f)}return j(e,g)}}(),bF=dn;function
hu(a,b){if(b===0)bi();return a/b|0}var
a_=[0];function
hv(a,b){if(a_!==a)return 0;
a_=b;return 1}function
hw(a){return a_}function
hx(a){a_=a}var
aR=0;function
fH(a){a.locked=false;return 0}var
hy=1;function
hz(a,b){var
c=hy++,d=aR;aR=c;var
e=F(a,[0]);aR=d;fH(b[2]);b[1]=[0,[0,e]];return c}var
D={caml_ephe_none:0},at=2,Q=3;function
az(a){var
b=a[at];if(b===D)return 0;
for(var
c=Q;c<a.length;c++){var
e=a[c];if(d.WeakRef&&e
instanceof
d.WeakRef){var
f=e.deref();if(f===undefined){a[c]=D;a[at]=D;return 0}if(d.WeakMap){b=b.get(e);if(b===undefined){a[at]=D;return 0}}}}return[0,b]}function
eX(a){a[at]=D;return 0}function
eV(a,b){for(var
c=a.length-1;c>=Q;c--){var
e=a[c];if(d.WeakRef&&e
instanceof
d.WeakRef){var
f=e.deref();if(f===undefined){a[c]=D;continue}if(d.WeakMap)b=new
d.WeakMap().set(e,b)}}a[at]=b;return 0}function
a$(a,b){if(b===0)eX(a);else
eV(a,b[1]);return 0}function
hA(a,b){var
c=az(a);a$(b,c);return 0}function
hB(a,b,c,d,e){var
f=az(a);bB(a,Q+b-1,c,Q+d-1,e);a$(c,f);return 0}function
hC(a){var
b=az(a);return b===0?0:1}function
hD(a,b){var
c=a[Q+b];if(c===D)return 0;
if(d.WeakRef&&c
instanceof
d.WeakRef){c=c.deref();if(c===undefined){a[Q+b]=D;a[at]=D;return 0}}return 1}function
f2(a){var
d=Q+a,b=new
Array(d);b[0]=du;b[1]="caml_ephe_list_head";for(var
c=2;c<d;c++)b[c]=D;return b}function
hE(a){return f2(a)}function
c4(a){var
d=a.length,c=new
Array(d);for(var
b=0;b<d;b++)c[b]=a[b];return c}function
hF(a){var
b=az(a);if(b===0)return 0;
var
c=b[1];if(Array.isArray(c))return[0,c4(c)];
return b}function
eU(a,b){var
c=a[Q+b];if(c===D)return 0;
if(d.WeakRef&&c
instanceof
d.WeakRef){c=c.deref();if(c===undefined){a[Q+b]=D;a[at]=D;return 0}}return[0,c]}function
hG(a,b){var
c=eU(a,b);if(c===0)return c;
var
d=c[1];if(Array.isArray(d))return[0,c4(d)];
return c}function
eW(a,b,c){var
e=az(a);if(d.WeakRef&&c
instanceof
Object)c=new
d.WeakRef(c);a[Q+b]=c;a$(a,e);return 0}function
eY(a,b){var
c=az(a);a[Q+b]=D;a$(a,c);return 0}function
hH(a,b){return+(ar(a,b,false)===0)}function
eZ(a){var
d=0.254829592,e=-0.284496736,f=1.421413741,g=-1.453152027,h=1.061405429,i=0.3275911,c=1;if(a<0)c=-1;a=Math.abs(a);var
b=bw/(bw+i*a),j=bw-((((h*b+g)*b+f)*b+e)*b+d)*b*Math.exp(-(a*a));return c*j}function
hI(a){return 1-eZ(a)}var
e0=aP[1];function
hJ(a){return Math.pow(2,a)}function
hK(a){return Math.expm1(a)}function
fy(a){switch(a[2]){case-8:case-11:case-12:return 1;
default:return 0}}function
e2(a){var
b=h;if(a[0]===0){b+=a[1][1];if(a.length===3&&a[2][0]===0&&fy(a[1]))var
e=a[2],f=1;else
var
f=2,e=a;b+=ej;for(var
d=f;d<e.length;d++){if(d>f)b+=", ";var
c=e[d];if(typeof
c==="number")b+=c.toString();else if(c
instanceof
L)b+=bq+c.toString()+bq;else if(typeof
c==="string")b+=bq+c.toString()+bq;else
b+=er}b+=cn}else if(a[0]===A)b+=a[1];return b}function
cP(a){if(Array.isArray(a)&&(a[0]===0||a[0]===A)){var
c=S("Printexc.handle_uncaught_exception");if(c)F(c,[a,false]);else{var
d=e2(a),b=S("Pervasives.do_at_exit");if(b)F(b,[0]);console.error("Fatal error: exception "+d);if(a.js_error)throw a.js_error}}else
throw a}function
hL(a,b,c,d){if(c>0)if(b===0&&(c>=a.l||a.t===2&&c>=a.c.length))if(d===0){a.c=h;a.t=2}else{a.c=aF(c,String.fromCharCode(d));a.t=c===a.l?0:2}else{if(a.t!==4)a9(a);for(c+=b;b<c;b++)a.c[b]=d}return 0}function
hM(){return 0}var
eI=new
d.Set();function
hN(c,b){if(d.FinalizationRegistry&&b
instanceof
Object){var
a=new
d.FinalizationRegistry(function(a){eI.delete(a);c(0);return});a.register(b,a);eI.add(a)}return 0}function
hO(){return 0}function
bG(a,b){if(a.uppercase)b=b.toUpperCase();var
e=b.length;if(a.signedconv&&(a.sign<0||a.signstyle!==aw))e++;if(a.alternate){if(a.base===8)e+=1;if(a.base===16)e+=2}var
c=h;if(a.justify===aK&&a.filler===ac)for(var
d=e;d<a.width;d++)c+=ac;if(a.signedconv)if(a.sign<0)c+=aw;else if(a.signstyle!==aw)c+=a.signstyle;if(a.alternate&&a.base===8)c+=C;if(a.alternate&&a.base===16)c+=a.uppercase?"0X":dN;if(a.justify===aK&&a.filler===C)for(var
d=e;d<a.width;d++)c+=C;c+=b;if(a.justify===aw)for(var
d=e;d<a.width;d++)c+=ac;return k(c)}function
hP(a,b){if(a===b)return 0;
if(a<b)return-1;
if(a>b)return 1;
if(!Number.isNaN(a))return 1;
if(!Number.isNaN(b))return-1;
return 0}function
aA(a){return aS(_(a))}function
hQ(a){var
b,e=/^ *[-+]?(?:\d*\.?\d+|\d+\.?\d*)(?:[eE][-+]?\d+)?$/;a=r(a);b=+a;if(!Number.isNaN(b)&&e.test(a))return b;
a=a.replace(/_/g,h);b=+a;if(!Number.isNaN(b)&&e.test(a)||/^[+-]?nan$/i.test(a))return b;
var
c=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?$/i.exec(a);if(c){var
d=c[3].replace(/0+$/,h),i=Number.parseInt(c[1]+c[2]+d,16),f=(c[5]|0)-4*d.length;b=i*Math.pow(2,f);return b}if(/^\+?inf(inity)?$/i.test(a))return Number.POSITIVE_INFINITY;
if(/^-inf(inity)?$/i.test(a))return Number.NEGATIVE_INFINITY;
g("float_of_string")}function
hR(a,b){return cz(a,b)}function
hS(a,b,c,d,e){return bB(a,b,c,d,e)}function
hT(a){if(a<0)m();var
a=a+1|0,b=new
Array(a);b[0]=J;for(var
c=1;c<a;c++)b[c]=0;return b}function
hU(a,b,c,d){return bC(a,b,c,d)}function
hV(a,b,c,d){return bC(a,b,c,d)}function
hW(a,b){return a7(a,b)}function
hX(a,b){return a7(a,b)}function
hY(a,b,c){return cB(a,b,c)}function
hZ(a,b,c){var
h=Math.pow(2,27)+1,q=Math.pow(2,-eh),g=Math.pow(2,-52),p=416,e=Math.pow(2,+p),f=Math.pow(2,-p);function
v(a,b){var
f=h*a,c=f-(f-a),e=a-c,i=h*b,d=i-(i-b),g=b-d,j=a*b,k=c*d-j+c*g+e*d+e*g;return{p:j,e:k}}function
l(a,b){var
c=a+b,d=c-a,e=a-(c-d)+(b-d);return{s:c,e:e}}function
r(a,b){return a!==0&&b!==0&&h*a-(h*a-a)===a?a*(1+(a<0?-1:+1)*(b<0?-1:+1)*g):a}if(a===0||b===0||!Number.isFinite(a)||!Number.isFinite(b))return a*b+c;
if(c===0)return a*b;
if(!Number.isFinite(c))return c;
var
d=1;while(Math.abs(a)>e){d*=e;a*=f}while(Math.abs(b)>e){d*=e;b*=f}if(d===1/0)return a*b*d;
while(Math.abs(a)<f){d*=f;a*=e}while(Math.abs(b)<f){d*=f;b*=e}if(d===0)return c;
var
n=a,o=b,k=c/d;if(Math.abs(k)>Math.abs(n*o)*4/g)return c;
if(Math.abs(k)<Math.abs(n*o)*g/4*g/4)k=(c<0?-1:+1)*q;var
u=v(n,o),s=l(u.p,k),t=l(u.e,s.e),m=l(s.s,t.s),i=m.s+r(m.e,t.e);if(i===0)return i;
var
j=i*d;if(Math.abs(j)>q)return j;
return j+r(i-j/d,m.e)*d}function
bX(a){a=r(a);var
e=a.length;if(e>31)i("format_int: format too long");var
b={justify:aK,signstyle:aw,filler:ac,alternate:false,base:0,signedconv:false,width:0,uppercase:false,sign:1,prec:-1,conv:"f"};for(var
d=0;d<e;d++){var
c=a.charAt(d);switch(c){case"-":b.justify=aw;break;case"+":case" ":b.signstyle=c;break;case"0":b.filler=C;break;case"#":b.alternate=true;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":b.width=0;while(c=a.charCodeAt(d)-48,c>=0&&c<=9){b.width=b.width*10+c;d++}d--;break;case".":b.prec=0;d++;while(c=a.charCodeAt(d)-48,c>=0&&c<=9){b.prec=b.prec*10+c;d++}d--;break;case"d":case"i":b.signedconv=true;b.base=10;break;case"u":b.base=10;break;case"x":b.base=16;break;case"X":b.base=16;b.uppercase=true;break;case"o":b.base=8;break;case"e":case"f":case"g":b.signedconv=true;b.conv=c;break;case"E":case"F":case"G":b.signedconv=true;b.uppercase=true;b.conv=c.toLowerCase();break}}return b}function
h0(a,b){function
j(a,b){if(Math.abs(a)<bw)return a.toFixed(b);
else{var
c=Number.parseInt(a.toString().split(aK)[1]);if(c>20){c-=20;a/=Math.pow(10,c);a+=new
Array(c+1).join(C);if(b>0)a=a+a0+new
Array(b+1).join(C);return a}else
return a.toFixed(b)}}var
c,f=bX(a),e=f.prec<0?6:f.prec;if(b<0||b===0&&1/b===Number.NEGATIVE_INFINITY){f.sign=-1;b=-b}if(Number.isNaN(b)){c=dB;f.filler=ac}else if(!Number.isFinite(b)){c="inf";f.filler=ac}else
switch(f.conv){case"e":var
c=b.toExponential(e),d=c.length;if(c.charAt(d-3)===cf)c=c.slice(0,d-1)+C+c.slice(d-1);break;case"f":c=j(b,e);break;case"g":e=e?e:1;c=b.toExponential(e-1);var
i=c.indexOf(cf),h=+c.slice(i+1);if(h<-4||b>=1e21||b.toFixed(0).length>e){var
d=i-1;while(c.charAt(d)===C)d--;if(c.charAt(d)===a0)d--;c=c.slice(0,d+1)+c.slice(i);d=c.length;if(c.charAt(d-3)===cf)c=c.slice(0,d-1)+C+c.slice(d-1);break}else{var
g=e;if(h<0){g-=h+1;c=b.toFixed(g)}else
while(c=b.toFixed(g),c.length>e+1)g--;if(g){var
d=c.length-1;while(c.charAt(d)===C)d--;if(c.charAt(d)===a0)d--;c=c.slice(0,d+1)}}break}return bG(f,c)}function
h1(a,b){if(r(a)==="%d")return k(h+b);
var
c=bX(a);if(b<0)if(c.signedconv){c.sign=-1;b=-b}else
b>>>=0;var
d=b.toString(c.base);if(c.prec>=0){c.filler=ac;var
e=c.prec-d.length;if(e>0)d=aF(e,C)+d}return bG(c,d)}var
c5=0;function
h2(){return c5++}function
h3(a){if(a===0||!Number.isFinite(a))return[0,a,0];
var
c=a<0;if(c)a=-a;var
b=Math.max(-X,dg(a)+1);a*=Math.pow(2,-b);while(a<bt){a*=2;b--}while(a>=1){a*=bt;b++}if(c)a=-a;return[0,a,b]}function
b3(a,b){var
a=k(a),b=k(b);return eT(a,b)}function
e3(){var
b=d.jsoo_fs_tmp;if(b)for(var
a=0;a<b.length;a++)b3(b[a].name,b[a].content);d.jsoo_create_file=b3;d.jsoo_fs_tmp=[];return 0}function
h4(){return 0}function
h5(){return[J,0,0,0]}function
h6(a){if(typeof
d.gc==="function")d.gc();return 0}function
h7(){return[0,0,0,0,0,0,0,0,0,0,0,0]}function
h8(a){if(typeof
d.gc==="function")d.gc();return 0}function
h9(a){return 0}function
h_(a){if(typeof
d.gc==="function")d.gc(true);return 0}function
h$(a){return 0}function
e4(){return[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}function
ia(a){return 0}function
ib(){return e4()}function
ic(){return[0]}function
id(){return[0]}function
ie(){return 0}function
ig(){return[0]}function
ih(){return q}function
ii(a){return 0}var
bU=[];function
ij(a,b,c){var
e=a[1],i=bU[c];if(i===undefined)for(var
h=bU.length;h<c;h++)bU[h]=0;else if(e[i]===b)return e[i-1];
var
d=3,g=e[1]*2+1,f;while(d<g){f=d+g>>1|1;if(b<e[f+1])g=f-2;else
d=f}bU[c]=d+1;return b===e[d+1]?e[d]:0}function
cR(a,b,c,d,e,f,g){while(f>g)g+=360;f/=d9;g/=d9;var
k=0,h,i,n,o,q=2,m=(g-f)*Math.PI*((e+d)/2)/q|0,p=(g-f)*Math.PI/m,j=f*Math.PI;for(var
l=0;l<=m;l++){h=b-e*Math.sin(j)*Math.sin(k*Math.PI)+d*Math.cos(j)*Math.cos(k*Math.PI);h=h.toFixed(2);i=c+d*Math.cos(j)*Math.sin(k*Math.PI)+e*Math.sin(j)*Math.cos(k*Math.PI);i=i.toFixed(2);if(l===0)a.moveTo(h,i);else if(n!==h||o!==i)a.lineTo(h,i);n=h;o=i;j-=p}return 0}var
G;function
l(){if(G)return G;
throw bT([0,S("Graphics.Graphic_failure"),k("Not initialized")])}function
ik(a,b,c){var
f=l(),e=f.context.getImageData(b,f.height-a.height-c,a.width,a.height);for(var
d=0;d<e.data.length;d+=4){a.data[d]=e.data[d];a.data[d+1]=e.data[d+1];a.data[d+2]=e.data[d+2];a.data[d+3]=e.data[d+3]}return 0}function
il(){var
a=l();a.canvas.width=a.width;a.canvas.height=a.height;return 0}function
im(){var
a=l();a.canvas.width=0;a.canvas.height=0;return 0}function
io(a){g("caml_gr_close_subwindow not Implemented")}function
ip(a,b){var
c=l();return c.context.createImageData(a,b)}function
iq(){var
a=l();return a.x}function
ir(){var
a=l();return a.y}function
is(){g("caml_gr_display_mode not Implemented")}function
it(a){if(a.canvas.ownerDocument)return a.canvas.ownerDocument}function
iu(a,b,c,d,e,f){var
g=l();g.context.beginPath();cR(g.context,a,g.height-b,c,d,e,f);g.context.stroke();return 0}function
cS(a){var
b=l(),d=b.context.measureText(a),c=d.width;b.context.fillText(a,b.x,b.height-b.y);b.x+=c|0;return 0}function
iv(a){cS(String.fromCharCode(a));return 0}function
iw(a,b,c){var
e=l();if(!a.image){var
f=document.createElement(dM);f.width=e.width;f.height=e.height;f.getContext(en).putImageData(a,0,0);var
g=new
d.Image();g.onload=function(){e.context.drawImage(g,b,e.height-a.height-c);a.image=g};g.src=f.toDataURL("image/png")}else
e.context.drawImage(a.image,b,e.height-a.height-c);return 0}function
ix(a,b,c,d){var
e=l();e.context.strokeRect(a,e.height-b,c,-d);return 0}function
iy(a){cS(s(a));return 0}function
iz(a){var
d=[0];for(var
b=0;b<a.height;b++){d[b+1]=[0];for(var
c=0;c<a.width;c++){var
e=b*(a.width*4)+c*4,h=a.data[e+0],g=a.data[e+1],f=a.data[e+2];d[b+1][c+1]=(h<<16)+(g<<8)+f}}return d}function
iA(a,b,c,d,e,f){var
g=l();g.context.beginPath();cR(g.context,a,g.height-b,c,d,e,f);g.context.fill();return 0}function
iB(a){var
b=l();b.context.beginPath();b.context.moveTo(a[1][1],b.height-a[1][2]);for(var
c=2;c<a.length;c++)b.context.lineTo(a[c][1],b.height-a[c][2]);b.context.lineTo(a[1][1],b.height-a[1][2]);b.context.fill();return 0}function
iC(a,b,c,d){var
e=l();e.context.fillRect(a,e.height-b,c,-d);return 0}function
iD(a,b){var
c=l();c.context.beginPath();c.context.moveTo(c.x,c.height-c.y);c.context.lineTo(a,c.height-b);c.context.stroke();c.x=a;c.y=b;return 0}function
iE(a){var
j=l(),i=a.length-1,h=a[1].length-1,b=j.context.createImageData(h,i);for(var
f=0;f<i;f++)for(var
g=0;g<h;g++){var
d=a[f+1][g+1],c=f*(h*4)+g*4;if(d===-1){b.data[c+0]=0;b.data[c+1]=0;b.data[c+2]=0;b.data[c+3]=0}else{b.data[c+0]=d>>16&e;b.data[c+1]=d>>8&e;b.data[c+2]=d>>0&e;b.data[c+3]=e}}return b}function
e5(a,b){var
c=l();c.x=a;c.y=b;return 0}function
e$(a){var
b=l();b.title=a;var
c=s(a);if(b.set_title)b.set_title(c);return 0}function
e9(a){var
b=l();b.line_width=a;b.context.lineWidth=a;return 0}function
e_(a){var
b=l();b.text_size=a;b.context.font=b.text_size+dp+s(b.font);return 0}function
e8(a){var
b=l();b.font=a;b.context.font=b.text_size+dp+s(b.font);return 0}function
e7(a){var
c=l();function
b(a){var
b=h+a.toString(16);while(b.length<2)b=C+b;return b}var
i=a>>16&e,g=a>>8&e,f=a>>0&e;c.color=a;var
d="#"+b(i)+b(g)+b(f);c.context.fillStyle=d;c.context.strokeStyle=d;return 0}function
e6(a,b){var
c=l();c.width=a;c.height=b;c.canvas.width=a;c.canvas.height=b;return 0}function
fb(){e5(G.x,G.y);e6(G.width,G.height);e9(G.line_width);e_(G.text_size);e8(G.font);e7(G.color);e$(G.title);G.context.textBaseline="bottom"}function
fc(a){G=a;fb();return 0}function
fa(a,b,c){var
d=a.getContext(en);return{context:d,canvas:a,x:0,y:0,width:b,height:c,line_width:1,font:k("fixed"),text_size:26,color:0x000000,title:k(h)}}function
iF(c){var
c=s(c);function
i(a){var
b=c.match("(^|,) *"+a+" *= *([a-zA-Z0-9_]+) *(,|$)");if(b)return b[2]}var
e=[];if(!(c===h))e.push(c);var
k=i("target");if(!k)k=h;var
o=i("status");if(!o)e.push("status=1");var
b=i("width");b=b?Number.parseInt(b):dS;e.push("width="+b);var
a=i("height");a=a?Number.parseInt(a):dS;e.push("height="+a);var
n=d.open("about:blank",k,e.join(dx));if(!n)g("Graphics.open_graph: cannot open the window");var
j=n.document,f=j.createElement(dM);f.width=b;f.height=a;var
m=fa(f,b,a);m.set_title=function(a){j.title=a};fc(m);var
l=j.body;l.style.margin="0px";l.appendChild(f);return 0}function
iG(a,b,c,d){g("caml_gr_open_subwindow not Implemented")}function
iH(a,b){var
c=l(),g=c.context.createImageData(1,1),d=g.data,f=c.color;d[0]=f>>16&e;d[1]=f>>8&e,d[2]=f>>0&e;d[3]=e;c.x=a;c.y=b;c.context.putImageData(g,a,c.height-b);return 0}function
iI(a,b){var
d=l(),e=d.context.getImageData(a,d.height-b,1,1),c=e.data;return(c[0]<<16)+(c[1]<<8)+c[2]}function
iJ(){g("caml_gr_remember_mode not Implemented")}function
iK(){return 0}function
iL(){return 0}function
iM(){var
a=l();return a.width}function
iN(){var
a=l();return a.height}function
iO(){g("caml_gr_synchronize not Implemented")}function
iP(a){var
b=l(),c=b.context.measureText(s(a)).width;return[0,c,b.text_size]}function
iQ(a){g("caml_gr_wait_event not Implemented: use Graphics_js instead")}function
iR(a){g("caml_gr_window_id not Implemented")}function
iS(a,b){return+(ar(a,b,false)>=0)}function
iT(a,b){return+(ar(a,b,false)>0)}function
bI(a,b){var
e=b.length,c,d;for(c=0;c+4<=e;c+=4){d=b.charCodeAt(c)|b.charCodeAt(c+1)<<8|b.charCodeAt(c+2)<<16|b.charCodeAt(c+3)<<24;a=u(a,d)}d=0;switch(e&3){case
3:d=b.charCodeAt(c+2)<<16;case
2:d|=b.charCodeAt(c+1)<<8;case
1:d|=b.charCodeAt(c);a=u(a,d)}a^=e;return a}function
cV(a,b){return bI(a,r(b))}function
cT(a,b){var
e=b.length,c,d;for(c=0;c+4<=e;c+=4){d=b[c]|b[c+1]<<8|b[c+2]<<16|b[c+3]<<24;a=u(a,d)}d=0;switch(e&3){case
3:d=b[c+2]<<16;case
2:d|=b[c+1]<<8;case
1:d|=b[c];a=u(a,d)}a^=e;return a}function
fF(a){switch(a.t&6){case
2:P(a);return a.c;
default:return a.c}}function
fd(a,b){var
c=fF(b);return typeof
c==="string"?bI(a,c):cT(a,c)}function
cU(a){a^=a>>>16;a=be(a,0x85ebca6b|0);a^=a>>>13;a=be(a,0xc2b2ae35|0);a^=a>>>16;return a}function
iU(a,b,c,d){var
j,k,l,h,g,f,e,i,m;h=b;if(h<0||h>E)h=E;g=a;f=c;j=[d];k=0;l=1;while(k<l&&g>0){e=j[k++];if(e&&e.caml_custom){if(ak[e.caml_custom]&&ak[e.caml_custom].hash){var
n=ak[e.caml_custom].hash(e);f=u(f,n);g--}}else if(Array.isArray(e)&&e[0]===(e[0]|0))switch(e[0]){case
248:f=u(f,e[2]);g--;break;case
250:j[--k]=e[1];break;default:if(bQ(e[0]))break;var
o=e.length-1<<10|e[0];f=u(f,o);for(i=1,m=e.length;i<m;i++){if(l>=h)break;j[l++]=e[i]}break}else if(aC(e)){f=fd(f,e);g--}else if(aU(e)){f=cV(f,e);g--}else if(typeof
e==="string"){f=bI(f,e);g--}else if(e===(e|0)){f=u(f,e+e+1);g--}else if(typeof
e==="number"){f=bH(f,e);g--}}f=cU(f);return f&dA}function
iV(a,b){return cT(a,b.data)}function
b5(a,b,c){for(var
d=c-1;d>=0;d--)if(a.data[b+d]!==0)return d+1;
return 1}function
ff(a){var
d=b5(a,0,a.data.length),b=0;for(var
c=0;c<d;c++)b=u(b,a.data[c]);return b}function
iW(a,b,c){if(!Number.isFinite(a)){if(Number.isNaN(a))return w(dB);
return w(a>0?"infinity":"-infinity")}var
k=a===0&&1/a===Number.NEGATIVE_INFINITY?1:a>=0?0:1;if(k)a=-a;var
e=0;if(a===0);else if(a<1)while(a<1&&e>-eh){a*=2;e--}else
while(a>=2){a/=2;e++}var
l=e<0?h:aK,f=h;if(k)f=aw;else
switch(c){case
43:f=aK;break;case
32:f=ac;break;default:break}if(b>=0&&b<13){var
i=Math.pow(2,b*4);a=Math.round(a*i)/i}var
d=a.toString(16);if(b>=0){var
j=d.indexOf(a0);if(j<0)d+=a0+aF(b,C);else{var
g=j+1+b;if(d.length<g)d+=aF(g-d.length,C);else
d=d.slice(0,g)}}return w(f+dN+d+dJ+l+e.toString(10))}function
iX(a,b){return Math.hypot(a,b)}var
aD=16;function
bk(a){if(a.refill!=null){var
e=a.refill(),b=aX(e);if(b.length===0)a.refill=null;else{if(a.buffer.length<a.buffer_max+b.length){var
c=new
Uint8Array(a.buffer_max+b.length);c.set(a.buffer);a.buffer=c}a.buffer.set(b,a.buffer_max);a.offset+=b.length;a.buffer_max+=b.length}}else{var
d=a.file.read(a.offset,a.buffer,a.buffer_max,a.buffer.length-a.buffer_max);a.offset+=d;a.buffer_max+=d}}function
bg(){bY(q.End_of_file)}function
fD(a,b){var
c=new
by(am(a),b);function
h(a){var
b=c.read8u(),d=b&aI;while((b&y)!==0){b=c.read8u();var
e=d<<7;if(d!==e>>7)a[0]=true;d=e|b&aI}return d}switch(c.read32u()){case
0x8495a6be:var
e=20,d=c.read32u();break;case
0x8495a6bd:var
e=c.read8u()&Z,f=[false],d=h(f);if(f[0])g("Marshal.data_size: object too large to be read back on this platform");break;case
0x8495a6bf:g("Marshal.data_size: object too large to be read back on a 32-bit platform");break;default:g("Marshal.data_size: bad object");break}return e-aD+d}function
fi(d,b){function
f(a){var
b=d.read8u(),c=b&aI;while((b&y)!==0){b=d.read8u();var
e=c<<7;if(c!==e>>7)a[0]=true;c=e|b&aI}return c}var
x=d.read32u();switch(x){case
0x8495a6be:var
w=20,p=0,j=d.read32u(),s=j,q=d.read32u(),t=d.read32u(),u=d.read32u();break;case
0x8495a6bd:var
w=d.read8u()&Z,p=1,a=[false],j=f(a),s=f(a),q=f(a),t=f(a),u=f(a);if(a[0])g("caml_input_value_from_reader: object too large to be read back on this platform");break;case
0x8495a6bf:g("caml_input_value_from_reader: object too large to be read back on a 32-bit platform");break;default:g("caml_input_value_from_reader: bad object");break}var
o=[],c=q>0?[]:null,k=0;function
n(a){var
m=a.read8u();if(m>=bu)if(m>=y){var
s=m&bs,n=m>>4&0x7,b=[s];if(n===0)return b;
if(c)c[k++]=b;o.push(b,n);return b}else
return m&Z;
else if(m>=aL){var
f=m&0x1f,b=a.readstr(f);if(c)c[k++]=b;return b}else
switch(m){case
0x00:return a.read8s();
case
0x01:return a.read16s();
case
0x02:return a.read32s();
case
0x03:g("input_value: integer too large");break;case
0x04:var
l=a.read8u();if(p===0)l=k-l;return c[l];
case
0x05:var
l=a.read16u();if(p===0)l=k-l;return c[l];
case
0x06:var
l=a.read32u();if(p===0)l=k-l;return c[l];
case
0x08:var
u=a.read32u(),s=u&e,n=u>>10,b=[s];if(n===0)return b;
if(c)c[k++]=b;o.push(b,n);return b;
case
0x13:g("input_value: data block too large");break;case
0x09:var
f=a.read8u(),b=a.readstr(f);if(c)c[k++]=b;return b;
case
0x0a:var
f=a.read32u(),b=a.readstr(f);if(c)c[k++]=b;return b;
case
0x0c:var
i=new
Array(8);for(var
d=0;d<8;d++)i[7-d]=a.read8u();var
b=aA(i);if(c)c[k++]=b;return b;
case
0x0b:var
i=new
Array(8);for(var
d=0;d<8;d++)i[d]=a.read8u();var
b=aA(i);if(c)c[k++]=b;return b;
case
0x0e:var
f=a.read8u(),b=new
Array(f+1);b[0]=J;var
i=new
Array(8);if(c)c[k++]=b;for(var
d=1;d<=f;d++){for(var
j=0;j<8;j++)i[7-j]=a.read8u();b[d]=aA(i)}return b;
case
0x0d:var
f=a.read8u(),b=new
Array(f+1);b[0]=J;var
i=new
Array(8);if(c)c[k++]=b;for(var
d=1;d<=f;d++){for(var
j=0;j<8;j++)i[j]=a.read8u();b[d]=aA(i)}return b;
case
0x07:var
f=a.read32u(),b=new
Array(f+1);b[0]=J;if(c)c[k++]=b;var
i=new
Array(8);for(var
d=1;d<=f;d++){for(var
j=0;j<8;j++)i[7-j]=a.read8u();b[d]=aA(i)}return b;
case
0x0f:var
f=a.read32u(),b=new
Array(f+1);b[0]=J;var
i=new
Array(8);for(var
d=1;d<=f;d++){for(var
j=0;j<8;j++)i[j]=a.read8u();b[d]=aA(i)}return b;
case
0x10:case
0x11:g("input_value: code pointer");break;case
0x12:case
0x18:case
0x19:var
t,v=h;while((t=a.read8u())!==0)v+=String.fromCharCode(t);var
r=ak[v],q;if(!r)g("input_value: unknown custom block identifier");switch(m){case
0x12:break;case
0x19:if(!r.fixed_length)g("input_value: expected a fixed-size custom block");q=r.fixed_length;break;case
0x18:q=a.read32u();a.read32s();a.read32s();break}var
w=a.i,n=[0],b=r.deserialize(a,n);if(q!==undefined)if(q!==n[0])g("input_value: incorrect length of serialized custom block");if(c)c[k++]=b;return b;
default:g("input_value: ill-formed message")}}if(p)if(bF)var
v=d.readuint8array(j),i=new
Uint8Array(s),i=bF(v,i),d=new
by(i,0);else
g("input_value: compressed object, cannot decompress");var
i=n(d);while(o.length>0){var
r=o.pop(),l=o.pop(),m=l.length;if(m<r)o.push(l,r);l[m]=n(d)}return i}function
fT(a){a.t&6&&P(a);return k(a.c)}function
fh(a,b){var
c=new
cv(fT(a),typeof
b==="number"?b:b[0]);return fi(c,b)}function
fg(a){var
d=o(a),f=new
Uint8Array(aD);function
h(a,b,c){var
e=0;while(e<c){if(d.buffer_curr>=d.buffer_max){d.buffer_curr=0;d.buffer_max=0;bk(d)}if(d.buffer_curr>=d.buffer_max)break;a[b+e]=d.buffer[d.buffer_curr];d.buffer_curr++;e++}return e}var
b=h(f,0,aD);if(b===0)bg();else if(b<aD)g("input_value: truncated object");var
c=fD(ap(f),0),e=new
Uint8Array(c+aD);e.set(f,0);var
b=h(e,aD,c);if(b<c)g("input_value: truncated object "+b+"  "+c);var
i=fh(ap(e),0);return i}function
iZ(a){return fg(a)}function
i0(){return 0}function
i1(a){return(a&0x000000ff)<<24|(a&0x0000ff00)<<8|(a&0x00ff0000)>>>8|(a&0xff000000)>>>24}function
bL(a,b){return a.add(b)}function
i2(a,b){return a.and(b)}function
i3(a){var
b=aa(a);return _([b[7],b[6],b[5],b[4],b[3],b[2],b[1],b[0]])}function
i4(a,b){return a.div(b)}function
fo(a){return+a.isZero()}function
au(a){return new
f(a&I,a>>24&I,a>>31&K)}function
fu(a){return a.toInt()}function
fn(a){return+a.isNeg()}function
cX(a){return a.neg()}function
i5(a,b){var
c=bX(a);if(c.signedconv&&fn(b)){c.sign=-1;b=cX(b)}var
d=h,i=au(c.base),g="0123456789abcdef";do{var
f=b.udivmod(i);b=f.quotient;d=g.charAt(fu(f.modulus))+d}while(!fo(b));if(c.prec>=0){c.filler=ac;var
e=c.prec-d.length;if(e>0)d=aF(e,C)+d}return bG(c,d)}function
i6(a,b){return a.mod(b)}function
cW(a,b){return a.mul(b)}function
bO(a){if(a<0)a=Math.ceil(a);return new
f(a&I,Math.floor(a*aT)&I,Math.floor(a*aT*aT)&K)}function
bP(a,b){return a.ucompare(b)<0}function
c6(a){var
b=0,f=v(a),d=10,e=1,c=1;if(f>0)switch(x(a,b)){case
45:b++;e=-1;break;case
43:b++;e=1;break}if(b+1<f&&x(a,b)===48)switch(x(a,b+1)){case
120:case
88:c=0;d=16;b+=2;break;case
111:case
79:c=0;d=8;b+=2;break;case
98:case
66:c=0;d=2;b+=2;break;case
117:case
85:c=0;b+=2;break}return[b,e,d,c]}function
bf(a){if(a>=48&&a<=57)return a-48;
if(a>=65&&a<=90)return a-55;
if(a>=97&&a<=122)return a-87;
return-1}function
cY(a){var
h=c6(a),e=h[0],k=h[1],i=h[2],l=h[3],j=au(i),m=new
f(I,0xfffffff,K).udivmod(j).quotient,d=x(a,e),b=bf(d);if(b<0||b>=i)g(ae);var
c=au(b);for(;;){e++;d=x(a,e);if(d===95)continue;b=bf(d);if(b<0||b>=i)break;if(bP(m,c))g(ae);b=au(b);c=bL(cW(j,c),b);if(bP(c,b))g(ae)}if(e!==v(a))g(ae);if(l&&bP(new
f(0,0,W),c))g(ae);if(k<0)c=cX(c);return c}function
fq(a,b){return a.or(b)}function
fr(a,b){return a.shift_left(b)}function
i7(a,b){return a.shift_right(b)}function
fs(a,b){return a.shift_right_unsigned(b)}function
ft(a,b){return a.sub(b)}function
cZ(a){return a.toFloat()}function
fw(a,b){return a.xor(b)}function
i8(a){var
f=c6(a),d=f[0],j=f[1],h=f[2],k=f[3],i=v(a),l=-1>>>0,e=d<i?x(a,d):0,c=bf(e);if(c<0||c>=h)g(ae);var
b=c;for(d++;d<i;d++){e=x(a,d);if(e===95)continue;c=bf(e);if(c<0||c>=h)break;b=h*b+c;if(b>l)g(ae)}if(d!==i)g(ae);b=j*b;if(k&&(b|0)!==b)g(ae);return b|0}function
i9(){return 1}function
i_(a){return+(a>31&&a<a3)}function
i$(a,b,c){return a.apply(b,R(c))}function
ja(a,b){delete
a[b];return 0}function
jb(a,b){return+(a==b)}function
jc(a){if(a.js_error)return a.js_error;
return null}function
jd(a){if(a.js_error)return[0,a.js_error];
return 0}function
je(a){return eval(s(a))}function
jf(a){console.error("caml_js_expr: fallback to runtime evaluation\n");return eval(s(a))}function
jg(a){return!!a}function
jh(a){return a}function
ji(a){return s(a)}function
jj(a,b){switch(b.length){case
1:return a();
case
2:return a(b[1]);
case
3:return a(b[1],b[2]);
case
4:return a(b[1],b[2],b[3]);
case
5:return a(b[1],b[2],b[3],b[4]);
case
6:return a(b[1],b[2],b[3],b[4],b[5]);
case
7:return a(b[1],b[2],b[3],b[4],b[5],b[6]);
case
8:return a(b[1],b[2],b[3],b[4],b[5],b[6],b[7])}return a.apply(null,R(b))}function
c0(a){return a.l>=0?a.l:a.l=a.length}function
jk(a,b){return a[b]}function
jl(){var
b=console,c=["log","debug","info","warn",dy,"assert",dO,"dirxml","trace","group","groupCollapsed","groupEnd","time","timeEnd"];function
d(){}for(var
a=0;a<c.length;a++)if(!b[c[a]])b[c[a]]=d;return b}function
jm(a){var
d=/^&#?[0-9a-zA-Z]+;$/;if(a.match(d)){var
c,b=document.createElement(dJ);b.innerHTML=a;c=b.textContent||b.innerText;b=null;return c}else
return null}var
bR={amp:/&/g,lt:/</g,quot:/"/g,all:/[&<"]/};function
jn(a){if(!bR.all.test(a))return a;
return a.replace(bR.amp,"&amp;").replace(bR.lt,"&lt;").replace(bR.quot,"&quot;")}function
jo(a,b){return a
instanceof
b?1:0}function
jp(a,b,c){return a[s(b)].apply(a,R(c))}function
jq(a,b){switch(b.length){case
1:return new
a();
case
2:return new
a(b[1]);
case
3:return new
a(b[1],b[2]);
case
4:return new
a(b[1],b[2],b[3]);
case
5:return new
a(b[1],b[2],b[3],b[4]);
case
6:return new
a(b[1],b[2],b[3],b[4],b[5]);
case
7:return new
a(b[1],b[2],b[3],b[4],b[5],b[6]);
case
8:return new
a(b[1],b[2],b[3],b[4],b[5],b[6],b[7])}function
c(){return a.apply(this,R(b))}c.prototype=a.prototype;return new
c()}function
jr(a){var
c={};for(var
b=1;b<a.length;b++){var
d=a[b];c[s(d[1])]=d[2]}return c}function
js(){var
a=d.navigator&&d.navigator.userAgent?d.navigator.userAgent:h;return a.indexOf("MSIE")!==-1&&a.indexOf("Opera")!==0}function
jt(a){return F(a,[0])}function
ju(a,b,c){a[b]=c;return 0}function
jv(a,b){return+(a===b)}function
jw(a){var
d=a.length,c=new
Array(d+1);c[0]=0;for(var
b=0;b<d;b++)c[b+1]=a[b];return c}function
jx(a){return+a}function
jy(a){return k(a)}function
jz(a){return a}function
jA(a){return a|0}function
jB(a){return w(a)}function
jC(a){return typeof
a}function
jD(a){var
a=s(a);if(!a.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))console.error('caml_js_var: "'+a+'" is not a valid JavaScript variable. continuing ..');return eval(a)}function
c1(a){return function(){var
d=arguments.length;if(d>0){var
c=new
Array(d);for(var
b=0;b<d;b++)c[b]=arguments[b]}else
c=[undefined];var
e=F(a,c);return e
instanceof
Function?c1(e):e}}function
jE(a){return function(){var
d=arguments.length,c=new
Array(d);for(var
b=0;b<d;b++)c[b]=arguments[b];return F(a,[c])}}function
jF(a,b){return function(){var
f=arguments.length,d=new
Array(a),e=Math.min(arguments.length,a);for(var
c=0;c<e;c++)d[c]=arguments[c];return F(b,d)}}function
jG(a){return function(){var
d=c0(a),c=new
Array(d);for(var
b=0;b<d;b++)c[b]=arguments[b];return F(a,c)}}function
jH(a){return function(){var
e=arguments.length,c=new
Array(e+1);c[0]=this;for(var
b=0;b<e;b++)c[b+1]=arguments[b];var
d=F(a,c);return d
instanceof
Function?c1(d):d}}function
jI(a){return function(){var
d=arguments.length,c=new
Array(d);for(var
b=0;b<d;b++)c[b]=arguments[b];return F(a,[this,c])}}function
jJ(a,b){return function(){var
d=new
Array(a+1),e=Math.min(arguments.length,a);d[0]=this;for(var
c=0;c<e;c++)d[c+1]=arguments[c];return F(b,d)}}function
jK(a){return function(){var
d=c0(a)-1,c=new
Array(d+1);c[0]=this;for(var
b=0;b<d;b++)c[b+1]=arguments[b];return F(a,c)}}function
jL(a){return 0}function
jM(a){return 1}function
jN(a){return[aY,a]}function
fM(a){if(Array.isArray(a)&&a[0]===a[0]>>>0)return a[0];
else if(aC(a))return b8;
else if(aU(a))return b8;
else if(a
instanceof
Function||typeof
a==="function")return 247;
else if(a&&a.caml_custom)return aJ;
else
return ad}function
jO(a){return fM(a)===aY?a[1]:a}function
bV(a,b,c){if(a[0]===b){a[0]=c;return 1}return 0}function
jP(a){bV(a,ci,ei);return 0}function
jQ(a){return Array.isArray(a)&&a[0]===a[0]>>>0&&bV(a,ei,ci)?0:1}function
jR(a){bV(a,ci,aY);return 0}function
jS(a,b){b|=0;if(b>X){b-=X;a*=Math.pow(2,X);if(b>X){b-=X;a*=Math.pow(2,X)}}if(b<-X){b+=X;a*=Math.pow(2,-X)}a*=Math.pow(2,b);return a}function
jT(a,b){return+(ar(a,b,false)<=0)}function
jU(a,b){return+(ar(a,b,false)<0)}function
n(a){a=r(a);var
d=a.length/2,c=new
Array(d);for(var
b=0;b<d;b++)c[b]=(a.charCodeAt(2*b)|a.charCodeAt(2*b+1)<<8)<<16>>16;return c}function
jV(a,b,c){var
q=2,r=3,u=5,e=6,j=7,i=8,l=9,p=1,o=2,t=3,v=4,s=5;if(!a.lex_default){a.lex_base=n(a[p]);a.lex_backtrk=n(a[o]);a.lex_check=n(a[s]);a.lex_trans=n(a[v]);a.lex_default=n(a[t])}var
f,d=b,m=c[q];if(d>=0){c[j]=c[u]=c[e];c[i]=-1}else
d=-d-1;for(;;){var
h=a.lex_base[d];if(h<0)return-h-1;
var
k=a.lex_backtrk[d];if(k>=0){c[j]=c[e];c[i]=k}if(c[e]>=c[r])if(c[l]===0)return-d-1;
else
f=E;else{f=O(m,c[e]);c[e]++}if(a.lex_check[h+f]===d)d=a.lex_trans[h+f];else
d=a.lex_default[d];if(d<0){c[e]=c[j];if(c[i]===-1)g(ey);else
return c[i]}else if(f===E)c[l]=0}}function
jX(){var
b=0;for(var
a=0;a<H.length;a++){var
c=b;b=[0,k(H[a].path),c]}return b}function
jY(a){var
c=0;for(var
b=a.length-1;b>=0;b--){var
d=a[b];c=[0,d,c]}return c}function
fA(a){var
b=[];for(;a!==0;a=a[2])b.push(a[1]);return b}function
jZ(a){return Math.log10(a)}function
j0(a){return Math.log1p(a)}function
j1(a){return Math.log2(a)}var
fB=cY(w("0xd1342543de82ef95")),fC=cY(w("0xdaba0b6eb09322e3"));function
j2(a){function
o(a,b){return fr(a,b)}function
h(a,b){return fs(a,b)}function
s(a,b){return fq(a,b)}function
f(a,b){return fw(a,b)}function
k(a,b){return bL(a,b)}function
i(a,b){return cW(a,b)}function
m(a,b){return s(o(a,b),h(a,64-b))}function
g(a,b){return t(a,b)}function
j(a,b,c){return eM(a,b,c)}var
q=fB,l=fC,b,d,c,e=a,r=g(e,0),n=g(e,1),p=g(e,2),u=g(e,3);b=k(n,p);b=i(f(b,h(b,32)),l);b=i(f(b,h(b,32)),l);b=f(b,h(b,32));j(e,1,k(i(n,q),r));var
d=p,c=u;c=f(c,d);d=m(d,24);d=f(f(d,c),o(c,16));c=m(c,37);j(e,2,d);j(e,3,c);return b}function
j3(a){if(a<0)m();var
a=a+1|0,b=new
Array(a);b[0]=J;for(var
c=1;c<a;c++)b[c]=0;return b}function
j4(a,b){return a7(a,b)}var
j5={PREFIX_SMALL_BLOCK:y,PREFIX_SMALL_INT:bu,PREFIX_SMALL_STRING:aL,CODE_INT8:B,CODE_INT16:ed,CODE_INT32:dR,CODE_INT64:dV,CODE_SHARED8:ep,CODE_SHARED16:et,CODE_SHARED32:dr,CODE_BLOCK32:eA,CODE_BLOCK64:0x13,CODE_STRING8:b7,CODE_STRING32:cb,CODE_DOUBLE_BIG:0x0b,CODE_DOUBLE_LITTLE:dE,CODE_DOUBLE_ARRAY8_BIG:0x0d,CODE_DOUBLE_ARRAY8_LITTLE:0x0e,CODE_DOUBLE_ARRAY32_BIG:0x0f,CODE_DOUBLE_ARRAY32_LITTLE:eb,CODE_CODEPOINTER:0x10,CODE_INFIXPOINTER:0x11,CODE_CUSTOM:0x12,CODE_CUSTOM_LEN:dX,CODE_CUSTOM_FIXED:em};function
j6(a){return 0}function
fE(a,b,c){var
d=cy(),e=am(a);bA(d,e.subarray(b,b+c),c);return al(cx(d))}function
bc(a,b,c,d){var
e=o(a),g=d,f=e.buffer_max-e.buffer_curr;if(d<=f){b.set(e.buffer.subarray(e.buffer_curr,e.buffer_curr+d),c);e.buffer_curr+=d}else if(f>0){b.set(e.buffer.subarray(e.buffer_curr,e.buffer_curr+f),c);e.buffer_curr+=f;g=f}else{e.buffer_curr=0;e.buffer_max=0;bk(e);var
f=e.buffer_max-e.buffer_curr;if(g>f)g=f;b.set(e.buffer.subarray(e.buffer_curr,e.buffer_curr+g),c);e.buffer_curr+=g}return g|0}function
j7(a,b){var
e=cy(),d=new
Uint8Array(eF);if(b<0)while(true){var
c=bc(a,d,0,d.length);if(c===0)break;bA(e,d.subarray(0,c),c)}else
while(b>0){var
c=bc(a,d,0,b>d.length?d.length:b);if(c===0)bg();bA(e,d.subarray(0,c),c);b-=c}return al(cx(e))}function
j8(a,b,c){return fE(aq(a),b,c)}function
j9(a){return 0}function
j_(a,b,c){return 0}function
j$(a){return 0}function
ka(a,b){var
d=o(a),c=o(b);$[a]=c;return d}function
kb(a,b){$[a]=b;return 0}function
kc(a){var
b=o(a);return b.file.length()}function
kd(a){var
b=o(a);return bO(b.file.length())}var
aG=new
Array(3);function
fU(a){var
b=aG[a];if(b)b.close();delete
aG[a];return 0}function
aE(a){var
b=o(a);if(!b.opened)j("Cannot flush a closed channel");if(!b.buffer||b.buffer_curr===0)return 0;
if(b.output)b.output(aV(b.buffer,0,b.buffer_curr));else
b.file.write(b.offset,b.buffer,0,b.buffer_curr);b.offset+=b.buffer_curr;b.buffer_curr=0;return 0}function
ke(a){var
b=o(a);if(b.opened){b.opened=false;fU(b.fd);b.fd=-1;b.buffer=new
Uint8Array(0);b.buffer_curr=0;b.buffer_max=0}return 0}function
kf(a){return 0}function
kg(a){return{condition:1}}function
kh(a){return 0}function
ki(a,b){return 0}function
kj(){return 0}function
kk(a){return 0}function
kl(a){return aR}function
km(a){return aR}var
c9=0;function
kn(a){c9=a;return 0}function
ko(a,b,c,d){var
e=am(b);return bc(a,e,c,d)}function
kp(a,b,c,d){var
e=cH(b);return bc(a,e,c,d)}function
fG(a){var
b=o(a);if(b.buffer_curr>=b.buffer_max){b.buffer_curr=0;b.buffer_max=0;bk(b)}if(b.buffer_curr>=b.buffer_max)bg();var
c=b.buffer[b.buffer_curr];b.buffer_curr++;return c}function
kq(a){var
d=o(a),b=0;for(var
c=0;c<4;c++)b=(b<<8)+fG(a)|0;return b|0}function
kr(a){var
b=o(a),c=b.buffer_curr;do
if(c>=b.buffer_max){if(b.buffer_curr>0){b.buffer.set(b.buffer.subarray(b.buffer_curr),0);c-=b.buffer_curr;b.buffer_max-=b.buffer_curr;b.buffer_curr=0}if(b.buffer_max>=b.buffer.length)return-b.buffer_max|0;
var
d=b.buffer_max;bk(b);if(d===b.buffer_max)return-b.buffer_max|0}while(b.buffer[c++]!==10);return c-b.buffer_curr|0}function
ks(a){var
b=o(a);return b.file.flags.binary}function
kt(a){return o(a).buffered?1:0}function
ku(a){if(a.locked)g("Mutex.lock: mutex already locked. Cannot wait.");else
a.locked=true;return 0}function
kv(a){return new
eH()}function
kw(a){if(!a.locked){a.locked=true;return 1}return 0}function
fW(a,b){if(b.name)try{var
d=require(ct),c=d.openSync(b.name,"rs");return new
M(c,b)}catch(f){}return new
M(a,b)}function
b2(a,b){if(b===undefined)b=aG.length;aG[b]=a;return b|0}function
l9(a,b,c){var
d={};while(b){switch(b[1]){case
0:d.rdonly=1;break;case
1:d.wronly=1;break;case
2:d.append=1;break;case
3:d.create=1;break;case
4:d.truncate=1;break;case
5:d.excl=1;break;case
6:d.binary=1;break;case
7:d.text=1;break;case
8:d.nonblock=1;break}b=b[2]}if(d.rdonly&&d.wronly)j(r(a)+cm);if(d.text&&d.binary)j(r(a)+b$);var
e=p(a),f=e.device.open(e.rest,d);return b2(f,undefined)}(function(){function
a(a,b){return av()?fW(a,b):new
aN(a,b)}b2(a(0,{rdonly:1,altname:"/dev/stdin",isCharacterDevice:true}),0);b2(a(1,{buffered:2,wronly:1,isCharacterDevice:true}),1);b2(a(2,{buffered:2,wronly:1,isCharacterDevice:true}),2)}());function
fI(a){var
b=aG[a];if(b.flags.wronly)j(d3+a+" is writeonly");var
d=null,c={file:b,offset:b.flags.append?b.length():0,fd:a,opened:true,out:false,buffer_curr:0,buffer_max:0,buffer:new
Uint8Array(an),refill:d};$[c.fd]=c;return c.fd}function
kx(a,b){return fI(a)}function
fJ(a){var
b=aG[a];if(b.flags.rdonly)j(d3+a+" is readonly");var
d=b.flags.buffered!==undefined?b.flags.buffered:1,c={file:b,offset:b.flags.append?b.length():0,fd:a,opened:true,out:true,buffer_curr:0,buffer:new
Uint8Array(an),buffered:d};$[c.fd]=c;return c.fd}function
ky(a,b){return fJ(a)}function
kz(){var
b=0;for(var
a=0;a<$.length;a++)if($[a]&&$[a].opened&&$[a].out)b=[0,$[a].fd,b];return b}function
c2(a,b,c,d){var
e=o(a);if(!e.opened)j("Cannot output to a closed channel");b=b.subarray(c,c+d);if(e.buffer_curr+b.length>e.buffer.length){var
g=new
Uint8Array(e.buffer_curr+b.length);g.set(e.buffer);e.buffer=g}switch(e.buffered){case
0:e.buffer.set(b,e.buffer_curr);e.buffer_curr+=b.length;aE(a);break;case
1:e.buffer.set(b,e.buffer_curr);e.buffer_curr+=b.length;if(e.buffer_curr>=e.buffer.length)aE(a);break;case
2:var
f=b.lastIndexOf(10);if(f<0){e.buffer.set(b,e.buffer_curr);e.buffer_curr+=b.length;if(e.buffer_curr>=e.buffer.length)aE(a)}else{e.buffer.set(b.subarray(0,f+1),e.buffer_curr);e.buffer_curr+=f+1;aE(a);e.buffer.set(b.subarray(f+1),e.buffer_curr);e.buffer_curr+=b.length-f-1}break}return 0}function
fK(a,b,c,d){var
b=am(b);return c2(a,b,c,d)}function
bd(a,b,c,d){return fK(a,aq(b),c,d)}function
kA(a,b,c,d){var
b=cH(b);return c2(a,b,c,d)}function
kB(a,b){var
c=k(String.fromCharCode(b));bd(a,c,0,1);return 0}function
kC(a,b){var
c=[b>>24&e,b>>16&e,b>>8&e,b&e],d=al(c);bd(a,d,0,4);return 0}function
c7(a){var
b=o(a);return b.offset-(b.buffer_max-b.buffer_curr)|0}function
kD(a){return c7(a)}function
kE(a){return bO(c7(a))}function
c8(a){var
b=o(a);return b.offset+b.buffer_curr}function
kF(a){return c8(a)}function
kG(a){return bO(c8(a))}function
kH(){return 0}function
kI(a){return 0}function
kJ(){return 0}function
kK(){return 0}function
kL(){return 0}function
kM(a){return c9}function
c_(a,b){var
c=o(a);if(c.refill!=null)j("Illegal seek");if(b>=c.offset-c.buffer_max&&b<=c.offset&&c.file.flags.binary)c.buffer_curr=c.buffer_max-(c.offset-b);else{c.offset=b;c.buffer_curr=0;c.buffer_max=0}return 0}function
kN(a,b){return c_(a,b)}function
kO(a,b){var
b=cZ(b);return c_(a,b)}function
c$(a,b){aE(a);var
c=o(a);c.offset=b;return 0}function
kP(a,b){return c$(a,b)}function
kQ(a,b){var
b=cZ(b);return c$(a,b)}function
kR(a,b){var
c=o(a);c.file.flags.text=!b;c.file.flags.binary=b;return 0}function
kS(a,b){o(a).buffered=b;if(!b)aE(a);return 0}function
kT(a,b){var
c=o(a);c.name=b;return 0}function
kU(a,b){var
c=o(a);c.output=function(a){b(a)};return 0}function
kV(a,b){o(a).refill=b;return 0}function
kW(a,b){if(b===0)bi();return a%b}function
kX(a){if(Number.isFinite(a)){var
d=1/a<0;a=Math.abs(a);var
b=Math.floor(a),c=a-b;if(d){b=-b;c=-c}return[0,c,b]}if(Number.isNaN(a))return[0,Number.NaN,Number.NaN];
return[0,1/a,a]}function
kY(a,b){var
d=bS(a),a=aW(d.join(Y));H.push({path:a,device:new
c(a,b)});return 0}function
jW(a,b,c,d){for(;;){var
f=a.charCodeAt(b);b++;if(f===e)return;
var
g=a.charCodeAt(b);b++;if(g===e)c[f+1]=d;else
c[f+1]=c[g+1]}}function
fz(a,b,c){for(;;){var
d=a.charCodeAt(b);b++;if(d===e)return;
var
f=a.charCodeAt(b);b++;if(f===e)c[d+1]=-1;else
c[d+1]=c[f+1]}}function
kZ(a,b,c){var
x=2,y=3,F=5,h=6,k=7,j=8,q=9,l=10,v=1,t=2,C=3,G=4,z=5,w=6,u=7,D=8,H=9,A=10,B=11;if(!a.lex_default){a.lex_base=n(a[v]);a.lex_backtrk=n(a[t]);a.lex_check=n(a[z]);a.lex_trans=n(a[G]);a.lex_default=n(a[C])}if(!a.lex_default_code){a.lex_base_code=n(a[w]);a.lex_backtrk_code=n(a[u]);a.lex_check_code=n(a[A]);a.lex_trans_code=n(a[H]);a.lex_default_code=n(a[D])}if(a.lex_code==null)a.lex_code=r(a[B]);var
f,d=b,s=c[x];if(d>=0){c[k]=c[F]=c[h];c[j]=-1}else
d=-d-1;for(;;){var
i=a.lex_base[d];if(i<0){var
e=a.lex_base_code[d];fz(a.lex_code,e,c[l]);return-i-1}var
o=a.lex_backtrk[d];if(o>=0){var
e=a.lex_backtrk_code[d];fz(a.lex_code,e,c[l]);c[k]=c[h];c[j]=o}if(c[h]>=c[y])if(c[q]===0)return-d-1;
else
f=E;else{f=O(s,c[h]);c[h]++}var
m=d;if(a.lex_check[i+f]===d)d=a.lex_trans[i+f];else
d=a.lex_default[d];if(d<0){c[h]=c[k];if(c[j]===-1)g(ey);else
return c[j]}else{var
p=a.lex_base_code[m],e;if(a.lex_check_code[p+f]===m)e=a.lex_trans_code[p+f];else
e=a.lex_default_code[m];if(e>0)jW(a.lex_code,e,c[l],c[h]);if(f===E)c[q]=0}}}function
k0(a){return k(a)}function
k1(a,b){if(Number.isNaN(a)||Number.isNaN(b))return Number.NaN;
if(a===b)return b;
if(a===0)return b<0?-Math.pow(2,-d2):Math.pow(2,-d2);
var
c=aB(a),d=au(1);if(a<b===a>0)c=bL(c,d);else
c=ft(c,d);return aS(c)}function
k2(a,b){return+(ar(a,b,false)!==0)}function
k3(a,b){g("Obj.add_offset is not supported")}function
k4(a,b){var
d=new
Array(b+1);d[0]=a;for(var
c=1;c<=b;c++)d[c]=0;return d}function
k5(a,b,c,d){if(a[b+1]===c){a[b+1]=d;return 1}return 0}function
k6(a){return 1}function
k7(a,b){return a[b+1]}function
k8(a){return 0}function
k9(a,b,c){return a[b+1]=c}function
k_(a,b){var
e=b.length,d=new
Array(e);d[0]=a;for(var
c=1;c<e;c++)d[c]=b[c];return d}function
k$(a,b){switch(b.length){case
0:return new
a();
case
1:return new
a(b[0]);
case
2:return new
a(b[0],b[1]);
case
3:return new
a(b[0],b[1],b[2]);
case
4:return new
a(b[0],b[1],b[2],b[3]);
case
5:return new
a(b[0],b[1],b[2],b[3],b[4]);
case
6:return new
a(b[0],b[1],b[2],b[3],b[4],b[5]);
case
7:return new
a(b[0],b[1],b[2],b[3],b[4],b[5],b[6])}function
c(){return a.apply(this,b)}c.prototype=a.prototype;return new
c()}var
bW=function(){function
f(){this.chunk=[]}f.prototype={chunk_idx:20,block_len:0,obj_counter:0,size_32:0,size_64:0,write:function(a,b){for(var
c=a-8;c>=0;c-=8)this.chunk[this.chunk_idx++]=b>>c&e},write_at:function(a,b,c){var
a=a;for(var
d=b-8;d>=0;d-=8)this.chunk[a++]=c>>d&e},write_code:function(a,b,c){this.chunk[this.chunk_idx++]=b;for(var
d=a-8;d>=0;d-=8)this.chunk[this.chunk_idx++]=c>>d&e},write_shared:function(a){if(a<1<<8)this.write_code(8,ep,a);else if(a<1<<16)this.write_code(16,et,a);else
this.write_code(32,dr,a)},pos:function(){return this.chunk_idx},finalize:function(){this.block_len=this.chunk_idx-20;this.chunk_idx=0;this.write(32,0x8495a6be);this.write(32,this.block_len);this.write(32,this.obj_counter);this.write(32,this.size_32);this.write(32,this.size_64);return this.chunk}};return function(a,b){b=fA(b);var
n=b.indexOf(0)!==-1,o=b.indexOf(1)!==-1;if(o)console.warn("in caml_output_val: flag Marshal.Closures is not supported.");var
c=new
f(),l=[],d=n?null:new
aO();function
j(a){if(n)return false;
var
b=d.recall(a);if(b){c.write_shared(b);return true}else{d.store(a);return false}}function
m(a){if(a.caml_custom){if(j(a))return;
var
e=a.caml_custom,m=ak[e],f=[0,0];if(!m.serialize)i("output_value: abstract value (Custom)");if(m.fixed_length===undefined){c.write(8,dX);for(var
b=0;b<e.length;b++)c.write(8,e.charCodeAt(b));c.write(8,0);var
n=c.pos();for(var
b=0;b<12;b++)c.write(8,0);m.serialize(c,a,f);c.write_at(n,32,f[0]);c.write_at(n+4,32,0);c.write_at(n+8,32,f[1])}else{c.write(8,em);for(var
b=0;b<e.length;b++)c.write(8,e.charCodeAt(b));c.write(8,0);var
p=c.pos();m.serialize(c,a,f);if(m.fixed_length!==c.pos()-p)g("output_value: incorrect fixed sizes specified by "+e)}c.size_32+=2+(f[0]+3>>2);c.size_64+=2+(f[1]+7>>3)}else if(Array.isArray(a)&&a[0]===(a[0]|0)){if(a[0]===du)g("output_value: abstract value (Abstract)");if(bQ(a[0]))i("output_value: continuation value");if(a.length>1&&j(a))return;
if(a[0]<16&&a.length-1<8)c.write(8,y+a[0]+(a.length-1<<4));else
c.write_code(32,eA,a.length-1<<10|a[0]);c.size_32+=a.length;c.size_64+=a.length;if(a.length>1)l.push(a,1)}else if(aC(a)){if(!aC(k(h)))g("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");if(j(a))return;
var
d=bb(a);if(d<aL)c.write(8,aL+d);else if(d<d1)c.write_code(8,b7,d);else
c.write_code(32,cb,d);for(var
b=0;b<d;b++)c.write(8,O(a,b));c.size_32+=1+((d+4)/4|0);c.size_64+=1+((d+8)/8|0)}else if(aU(a)){if(j(a))return;
var
d=v(a);if(d<aL)c.write(8,aL+d);else if(d<d1)c.write_code(8,b7,d);else
c.write_code(32,cb,d);for(var
b=0;b<d;b++)c.write(8,x(a,b));c.size_32+=1+((d+4)/4|0);c.size_64+=1+((d+8)/8|0)}else if(a!==(a|0)){var
o=typeof
a;if(o!=="number")g("output_value: abstract value ("+o+cn);if(j(a))return;
var
q=aa(aB(a));c.write(8,dE);for(var
b=0;b<8;b++)c.write(8,q[7-b]);c.size_32+=3;c.size_64+=2}else if(a>=0&&a<bu)c.write(8,bu+a);else if(a>=-(1<<7)&&a<1<<7)c.write_code(8,B,a);else if(a>=-(1<<15)&&a<1<<15)c.write_code(16,ed,a);else
c.write_code(32,dR,a)}m(a);while(l.length>0){var
e=l.pop(),a=l.pop();if(e+1<a.length)l.push(a,e+1);m(a[e])}if(d)c.obj_counter=d.objs.length;c.finalize();return c.chunk}}();function
fN(a,b){return al(bW(a,b))}function
la(a,b,c){var
d=fN(b,c);bd(a,d,0,v(d));return 0}function
lb(a,b,c,d,e){var
f=bW(d,e);if(f.length>c)g("Marshal.to_buffer: buffer overflow");ag(f,0,a,b,f.length);return 0}function
lc(a,b){return ap(bW(a,b))}var
ab=0;function
ld(e,b,c,d){var
C=E,B=6,an=7,Z=8,_=9,M=10,S=0,y=1,Q=2,R=3,P=4,O=5,u=1,K=2,J=3,w=4,H=5,V=6,j=7,A=8,X=9,W=10,D=11,T=12,U=13,G=14,I=15,F=16,am=2,al=3,af=4,ae=5,aa=6,ac=7,aj=8,ai=9,ad=10,x=11,ak=12,$=13,ah=15,ag=16;function
l(a){var
b=k(a+"\n");bd(2,b,0,v(b))}function
N(a,b){var
c=s(a);if(c[0]===eE)return"<unknown token>";
return c.split(eE)[b]}function
Y(a,b){var
d,c;if(Array.isArray(b)){d=N(e[ag],b[0]);if(typeof
b[1]==="number")c=h+b[1];else if(typeof
b[1]==="string")c=b[1];else if(b[1]instanceof
L)c=r(b[1]);else
c=er;l(br+a+eD+d+ej+c+cn)}else{d=N(e[ah],b);l(br+a+eD+d)}}if(!e.dgoto){e.defred=n(e[aa]);e.sindex=n(e[aj]);e.check=n(e[$]);e.rindex=n(e[ai]);e.table=n(e[ak]);e.len=n(e[ae]);e.lhs=n(e[af]);e.gindex=n(e[ad]);e.dgoto=n(e[ac])}var
q=0,o,i,a,p,f=b[G],g=b[I],m=b[F];a:for(;;)switch(c){case
0:g=0;m=0;case
6:o=e.defred[g];if(o!==0){c=M;continue a}if(b[j]>=0){c=an;continue a}q=S;break a;case
1:if(Array.isArray(d)){b[j]=e[al][d[0]+1];b[A]=d[1]}else{b[j]=e[am][d+1];b[A]=0}if(ab)Y(g,d);case
7:i=e.sindex[g];a=i+b[j];if(i!==0&&a>=0&&a<=e[x]&&e.check[a]===b[j]){c=Z;continue a}i=e.rindex[g];a=i+b[j];if(i!==0&&a>=0&&a<=e[x]&&e.check[a]===b[j]){o=e.table[a];c=M;continue a}if(m<=0){q=O;break a}case
5:if(m<3){m=3;for(;;){p=b[u][f+1];i=e.sindex[p];a=i+C;if(i!==0&&a>=0&&a<=e[x]&&e.check[a]===C){if(ab)l("Recovering in state "+p);c=_;continue a}else{if(ab)l("Discarding state "+p);if(f<=b[V]){if(ab)l("No more states to discard");return y}f--}}}else{if(b[j]===0)return y;
if(ab)l("Discarding last token read");b[j]=-1;c=B;continue a}case
8:b[j]=-1;if(m>0)m--;case
9:if(ab)l(br+g+": shift to state "+e.table[a]);g=e.table[a];f++;if(f>=b[H]){q=Q;break a}case
2:b[u][f+1]=g;b[K][f+1]=b[A];b[J][f+1]=b[X];b[w][f+1]=b[W];c=B;continue a;case
10:if(ab)l(br+g+": reduce by rule "+o);var
t=e.len[o];b[D]=f;b[U]=o;b[T]=t;f=f-t+1;t=e.lhs[o];p=b[u][f];i=e.gindex[t];a=i+p;if(i!==0&&a>=0&&a<=e[x]&&e.check[a]===p)g=e.table[a];else
g=e.dgoto[t];if(f>=b[H]){q=R;break a}case
3:q=P;break a;case
4:b[u][f+1]=g;b[K][f+1]=d;var
z=b[D];b[w][f+1]=b[w][z+1];if(f>z)b[J][f+1]=b[w][z+1];c=B;continue a;default:return y}b[G]=f;b[I]=g;b[F]=m;return q}function
le(a){return 0}function
lf(a){console.error("caml_pure_js_expr: fallback to runtime evaluation\n");return eval(s(a))}function
bZ(){bY(q.Not_found)}function
lg(){return 0}function
lh(){return 0}function
li(){i("Printexc.get_raw_backtrace_slot: index out of bounds")}function
lj(a){var
a=typeof
a==="string"?k(a):a,b=p(a);if(b.device.exists(b.rest)){var
d=b.device.open(b.rest,{rdonly:1}),e=d.length(),c=new
Uint8Array(e);d.read(0,c,0,e);return al(c)}bh(r(a))}function
lk(a){return 1}function
ll(a){b1=a;return 0}var
di=undefined;function
a(a,b,c){if(c){var
d=c;if(di)a=F(di,[d]);else if(q.symbols){if(!q.symidx)q.symidx=eN(q.symbols);var
e=q.symidx[d];if(e>=0)a=e;else{var
a=q.symidx.next_idx++;q.symidx[d]=a}}}q[a+1]=b;if(c)q[c]=b}function
lm(a,b){c3[r(a)]=b;return 0}function
ln(a,b){return 0}function
lo(a){if(a>=0){var
b=Math.floor(a);return a-b>=bt?b+1:b}else{var
b=Math.ceil(a);return b-a>=bt?b-1:b}}function
lp(a){return{}}function
lq(a){return 0}function
lr(a,b,c){return 0}function
ls(a,b,c){cO+=1;return[0,cO,a,c,b]}function
lt(){return 0}function
lu(a,b){return 0}function
lv(a){return k(h)}function
lw(a){return k(h)}function
lx(a){a[2]=c5++;return a}function
ly(a){var
b=ab;ab=a;return b}function
lz(a,b){b4[a]=b;return 0}function
lB(a){if(a===0)a=1/a;return a<0?1:0}function
lC(a){return Math.sinh(a)}function
bm(){i(b9)}function
lE(a,b){return a+b}function
fP(a,b){if(a===b)return 1;
return 0}function
fQ(a,b){if(b>>>0>=v(a))bm();return x(a,b)}function
lF(a,b){if(b>>>0>=v(a)-1)bm();var
c=x(a,b),d=x(a,b+1);return d<<8|c}function
lG(a,b){if(b>>>0>=v(a)-3)bm();var
c=x(a,b),d=x(a,b+1),e=x(a,b+2),f=x(a,b+3);return f<<24|e<<16|d<<8|c}function
lH(a,b){if(b>>>0>=v(a)-7)bm();var
d=new
Array(8);for(var
c=0;c<8;c++)d[7-c]=x(a,b+c);return _(d)}function
fR(a,b){return a<=b?1:0}function
lI(a,b){return fR(b,a)}function
fS(a,b){return a<b?1:0}function
lJ(a,b){return fS(b,a)}function
lK(a,b){var
a=cV(a,b),a=cU(a);return a&dA}function
lL(a,b){return 1-fP(a,b)}function
lM(a,b,c){g("caml_string_set")}function
lN(a){return aP}function
lO(a){var
b=p(a);if(b.device.exists(b.rest)){if(b.rest)aj=aW(b.path+b.rest);else
aj=b.path;return 0}else
bh(r(a))}function
lP(){return[0,k("js_of_ocaml")]}function
lQ(){return 0}function
lR(){return 32}function
lS(){return 0x7fffffff/4|0}function
lT(a){return 0}var
bo=d.process&&d.process.platform&&d.process.platform===eB?dw:dU;function
lU(){return bo==="Cygwin"?1:0}function
lV(){return bo===dU?1:0}function
lW(){return bo===dw?1:0}function
lX(){return 32}function
lY(a){return e0}function
lZ(a){if(d.quit)d.quit(a);if(d.process&&d.process.exit)d.process.exit(a);i("Function 'exit' not implemented")}function
l0(a){var
b=p(a);return b.device.exists(b.rest)}function
l1(a){return[0,aP[1],aP]}function
l2(){return[0,k(bo),32,0]}function
l3(){return k(aj)}function
fV(a){var
b=dh(s(a));if(b===undefined)bZ();return w(b)}function
l4(a){var
b=p(a),c=b.device.is_dir(b.rest);return c?1:0}function
l5(a){var
b=p(a);return b.device.isFile(b.rest)}function
l6(a){return 0}function
l7(a,b){var
c=p(a);c.device.mkdir(c.rest,b);return 0}function
l8(a){aP=a;return 0}function
l_(){if(d.crypto)if(d.crypto.getRandomValues){var
a=d.crypto.getRandomValues(new
Int32Array(4));return[0,a[0],a[1],a[2],a[3]]}else if(d.crypto.randomBytes){var
a=new
Int32Array(d.crypto.randomBytes(16).buffer);return[0,a[0],a[1],a[2],a[3]]}var
b=new
Date().getTime(),c=b^0xffffffff*Math.random();return[0,c]}function
l$(a){var
e=p(a),c=e.device.readdir(e.rest),d=new
Array(c.length+1);d[0]=0;for(var
b=0;b<c.length;b++)d[b+1]=k(c[b]);return d}function
ma(a){var
b=p(a);return b.device.unlink(b.rest)}function
mb(a,b){var
c=p(a),d=p(b);if(c.device!==d.device)g("caml_sys_rename: cannot move file between two filesystem");if(!c.device.rename)g("caml_sys_rename: no implemented");c.device.rename(c.rest,d.rest)}function
mc(a){var
b=p(a);b.device.rmdir(b.rest);return 0}function
md(a){var
a=s(a);if(typeof
require!=="undefined"){var
b=require("node:child_process");if(b&&b.execSync)try{b.execSync(a,{stdio:"inherit"});return 0}catch(f){return 1}}else
return a3}var
iY=new
Date().getTime()*d6;function
fX(){var
a=new
Date().getTime();return a*d6-iY}function
me(a){return fX()}function
mf(a){return fV(a)}function
mg(a){return Math.tanh(a)}function
mh(a){return s(a)}function
mi(a){var
b=1;while(a&&a.joo_tramp){a=a.joo_tramp.apply(null,a.joo_args);b++}return a}function
mj(a,b){return{joo_tramp:a,joo_args:b}}function
mk(a){return Math.trunc(a)}function
ml(a,b){return cz(a,b)}function
mm(a,b,c,d,e){return bB(a,b,c,d,e)}function
mn(a,b,c,d){return bC(a,b,c,d)}function
mo(a,b){return a7(a,b)}function
mp(a,b,c){return cB(a,b,c)}function
mq(){}function
da(a){try{a.pointer.closeSync()}catch(f){var
b=S(aM);T(b,U(aZ,cp,a.path))}}function
mr(a){return a}function
ms(a){return da(a)}function
db(a){var
b=p(a);if(!b.device.opendir)g("caml_unix_opendir: not implemented");var
c=b.device.opendir(b.rest,true);return{pointer:c,path:a}}function
dc(a){var
b;try{b=a.pointer.readSync()}catch(f){var
c=S(aM);T(c,U(aZ,"readdir",a.path))}if(b===null)bg();else
return w(b.name)}function
mt(a){var
b=s(a);b=b.replace(/(^|[\\/])\*\.\*$/,h);a=w(b);var
c=db(a),d=dc(c);return[0,d,c]}function
mu(a){return dc(a)}function
mv(a){bZ()}function
fY(){return new
Date().getTime()/ad}function
mw(a){if(d.process&&d.process.getuid)return d.process.getuid();
bZ()}function
mx(a){var
b=new
Date(a*ad),c=b.getTime(),e=new
Date(Date.UTC(b.getUTCFullYear(),0,1)).getTime(),d=Math.floor((c-e)/ea);return[0,b.getUTCSeconds(),b.getUTCMinutes(),b.getUTCHours(),b.getUTCDate(),b.getUTCMonth(),b.getUTCFullYear()-co,b.getUTCDay(),d,false|0]}function
my(a){return av()?1:0}function
mz(){return 0}function
mA(a){if(av()){var
b=require("node:tty");return b.isatty(a)?1:0}else
return 0}function
fZ(a){var
b=new
Date(a*ad),c=b.getTime(),f=new
Date(b.getFullYear(),0,1).getTime(),d=Math.floor((c-f)/ea),e=new
Date(b.getFullYear(),0,1),g=new
Date(b.getFullYear(),6,1),h=Math.max(e.getTimezoneOffset(),g.getTimezoneOffset());return[0,b.getSeconds(),b.getMinutes(),b.getHours(),b.getDate(),b.getMonth(),b.getFullYear()-co,b.getDay(),d,b.getTimezoneOffset()<h|0]}function
f0(a){var
b=p(a);if(!b.device.lstat)g("caml_unix_lstat: not implemented");return b.device.lstat(b.rest,true)}function
mB(a){var
b=f0(a);b[9]=au(b[9]);return b}function
mC(a,b){var
c=p(a);if(!c.device.mkdir)g("caml_unix_mkdir: not implemented");return c.device.mkdir(c.rest,b,true)}function
mD(a){var
c=new
Date(a[6]+co,a[5],a[4],a[3],a[2],a[1]).getTime(),b=Math.floor(c/ad),d=fZ(b);return[0,b,d]}function
mE(a){var
b=p(a);if(!b.device.readlink)g("caml_unix_readlink: not implemented");return b.device.readlink(b.rest,true)}function
mF(a){da(a);var
b=db(a.path);a.pointer=b.pointer;return 0}function
mG(a){var
b=p(a);if(!b.device.rmdir)g("caml_unix_rmdir: not implemented");return b.device.rmdir(b.rest,true)}function
mH(){}function
f1(a){var
b=p(a);if(!b.device.stat)g("caml_unix_stat: not implemented");return b.device.stat(b.rest,true)}function
mI(a){var
b=f1(a);b[9]=au(b[9]);return b}function
mJ(a,b,c){var
d=p(b),e=p(c);if(d.device!==e.device)g("caml_unix_symlink: cannot symlink between two filesystems");if(!d.device.symlink)g("caml_unix_symlink: not implemented");return d.device.symlink(a,d.rest,e.rest,true)}function
mK(){return Math.floor(fY())}function
mL(a){var
b=p(a);if(!b.device.unlink)g("caml_unix_unlink: not implemented");b.device.unlink(b.rest,true);return 0}function
mM(a){var
d=bS(a),a=aW(d.join(Y)),c=-1;for(var
b=0;b<H.length;b++)if(H[b].path===a)c=b;if(c>-1)H.splice(c,1);return 0}function
mN(a,b){if(b.fun){a.fun=b.fun;return 0}if(typeof
b==="function"){a.fun=b;return 0}var
c=b.length;while(c--)a[c]=b[c];return 0}function
mO(a,b,c){if(c===0)eY(a,b);else
eW(a,b,c[1]);return 0}function
mP(a){{if(Array.isArray(a))return a;
var
b;if(d.RangeError&&a
instanceof
d.RangeError&&a.message&&a.message.match(/maximum call stack/i))b=q.Stack_overflow;else if(d.InternalError&&a
instanceof
d.InternalError&&a.message&&a.message.match(/too much recursion/i))b=q.Stack_overflow;else if(a
instanceof
d.Error&&S(d$))b=[0,S(d$),a];else
b=[0,q.Failure,w(String(a))];if(a
instanceof
d.Error)b.js_error=a;return b}}function
mQ(a){return 0}function
mR(a){if(typeof
d.XMLHttpRequest!=="undefined")try{return new
d.XMLHttpRequest()}catch(f){}if(typeof
d.activeXObject!=="undefined"){try{return new
d.activeXObject("Msxml2.XMLHTTP")}catch(f){}try{return new
d.activeXObject("Msxml3.XMLHTTP")}catch(f){}try{return new
d.activeXObject("Microsoft.XMLHTTP")}catch(f){}}g("Cannot create a XMLHttpRequest")}function
mS(a){bF=dn;return 1}function
mT(a,b,c,d){if(a.data[b]>c.data[d])return 1;
if(a.data[b]<c.data[d])return-1;
return 0}function
f3(a,b,c,d,e,f){var
h=b5(a,b,c),i=b5(d,e,f);if(h>i)return 1;
if(h<i)return-1;
for(var
g=c-1;g>=0;g--){if(a.data[b+g]>>>0>d.data[e+g]>>>0)return 1;
if(a.data[b+g]>>>0<d.data[e+g]>>>0)return-1}return 0}function
mU(a,b,c){for(var
d=0;d<c;d++)a.data[b+d]=(-1>>>0)-(a.data[b+d]>>>0)}function
f4(a){var
c=new
a5(a);for(var
b=0;b<a;b++)c.data[b]=-1;return c}function
f5(a,b,c,d){var
e=d===1?0:1;for(var
f=0;f<c;f++){var
g=(a.data[b+f]>>>0)-e;a.data[b+f]=g;if(g>=0){e=0;break}else
e=1}return e===1?0:1}function
f6(a,b){var
d=a.read32s(),e=new
a5(d);for(var
c=0;c<d;c++)e.data[c]=a.read32s();b[0]=d*4;return e}function
df(a,b,c){var
e=a*an+(b>>>16),f=Math.floor(e/c)*an,g=e%c*an,d=g+(b&el);return[f+Math.floor(d/c),d%c]}function
f7(a,b,c,d,e,f,g,h,i){var
k=e.data[f+g-1]>>>0;for(var
j=g-2;j>=0;j--){var
l=df(k,e.data[f+j]>>>0,h.data[i]>>>0);a.data[b+j]=l[0];k=l[1]}c.data[d]=k;return 0}function
f_(a,b){var
c=a.data[b],d=0;if(c&0xffff0000){d+=16;c>>>=16}if(c&dY){d+=8;c>>>=8}if(c&cg){d+=4;c>>>=4}if(c&12){d+=2;c>>>=2}if(c&2){d+=1;c>>>=1}if(c&1)d+=1;return 32-d}function
dk(a,b,c,d,e,f){if(f===0){d.data[e]=0;return 0}var
h=0;for(var
g=0;g<c;g++){var
i=a.data[b+g]>>>0;a.data[b+g]=i<<f|h;h=i>>>32-f}d.data[e]=h;return 0}function
dl(a,b,c,d,e,f){if(f===0){d.data[e]=0;return 0}var
h=0;for(var
g=c-1;g>=0;g--){var
i=a.data[b+g]>>>0;a.data[b+g]=i>>>f|h;h=i<<32-f}d.data[e]=h;return 0}function
ga(a,b,c){for(var
d=0;d<c;d++)a.data[b+d]=0;return 0}function
aH(a){return new
a5(a)}function
dj(a,b,c,d,e,f,g,h){var
i=0,k=g.data[h]>>>0;for(var
j=0;j<f;j++){var
n=(a.data[b+j]>>>0)+(d.data[e+j]>>>0)*(k&el)+i,l=(d.data[e+j]>>>0)*(k>>>16);i=Math.floor(l/an);var
m=n+l%an*an;a.data[b+j]=m;i+=Math.floor(m/dP)}return f<c&&i?cw(a,b+f,c-f,aH([i]),0,1,0):i}function
dm(a,b,c,d,e,f,g){var
i=g===1?0:1;for(var
h=0;h<f;h++){var
j=(a.data[b+h]>>>0)-(d.data[e+h]>>>0)-i;a.data[b+h]=j;if(j>=0)i=0;else
i=1}return f5(a,b+f,c-f,i===1?0:1)}function
mV(a,b,c,d,e,f){if(f===1){f7(a,b+1,a,b,a,b,c,d,e);return 0}var
i=f_(d,e+f-1);dk(d,e,f,aH([0]),0,i);dk(a,b,c,aH([0]),0,i);var
k=(d.data[e+f-1]>>>0)+1,j=f4(f+1);for(var
g=c-1;g>=f;g--){var
h=k===dP?a.data[b+g]>>>0:df(a.data[b+g]>>>0,a.data[b+g-1]>>>0,k)[0];ga(j,0,f+1);dj(j,0,f+1,d,e,f,aH([h]),0);dm(a,b+g-f,f+1,j,0,f+1,1);while(a.data[b+g]!==0||f3(a,b+g-f,f,d,e,f)>=0){h=h+1;dm(a,b+g-f,f+1,d,e,f,1)}a.data[b+g]=h}dl(a,b,f,aH([0]),0,i);dl(d,e,f,aH([0]),0,i);return 0}function
f$(a,b,c){var
d=b.data.length;a.write(32,d);for(var
e=0;e<d;e++)a.write(32,b.data[e]);c[0]=d*4;c[1]=d*8}function
mW(){ak._nat={deserialize:f6,serialize:f$,hash:ff}}function
mX(a,b){if(a.data[b]>=0)return 1;
return 0}function
mY(a,b){return 1}function
mZ(a,b){if(a.data[b]&1)return 1;
return 0}function
m0(a,b){if(a.data[b]===0)return 1;
return 0}function
m1(a,b){if(d.jsoo_create_file)d.jsoo_create_file(a,b);else{if(!d.jsoo_fs_tmp)d.jsoo_fs_tmp=[];d.jsoo_fs_tmp.push({name:a,content:b})}return 0}function
m2(){g("Effect handlers are not supported")}function
m3(a,b,c,d){a.data[b]&=c.data[d];return 0}function
m4(a){return a.data.length}function
m6(a,b,c,d){a.data[b]|=c.data[d];return 0}function
m7(a,b,c,d){a.data[b]^=c.data[d];return 0}function
f9(a,b,c,d,e,f,g,h,i){var
k=0;for(var
j=0;j<i;j++)k+=dj(a,b+j,c-j,d,e,f,g,h+j);return k}function
m9(a,b){return a.data[b]}function
m_(a,b){return a.data[b]}var
bp=function(){var
b=[B,B,B,B,B,B,e,dV,d4,e,e,0x87,d4,e,e,eb,B,B,B,B,B,B,B,B,e,e,aI,e,e,e,aI,e],f={CHAR:0,CHARNORM:1,STRING:2,STRINGNORM:3,CHARCLASS:4,BOL:5,EOL:6,WORDBOUNDARY:7,BEGGROUP:8,ENDGROUP:9,REFGROUP:10,ACCEPT:11,SIMPLEOPT:12,SIMPLESTAR:13,SIMPLEPLUS:14,GOTO:15,PUSHBACK:16,SETMARK:17,CHECKPROGRESS:18};function
s(a){return b[a>>3]>>(a&7)&1}function
p(a,b){return fQ(a,b>>3)>>(b&7)&1}function
a(a,b,c,d){var
z=R(a[1]),n=R(a[2]),y=r(a[3]),B=a[4]|0,C=a[5]|0,E=a[6]|0,b=aX(b),o=0,A=false,w=[],l=new
Array(B),u=new
Array(C);for(var
i=0;i<l.length;i++)l[i]={start:-1,end:-1};l[0].start=c;function
h(){while(w.length){var
a=w.pop();if(a.undo)a.undo.obj[a.undo.prop]=a.undo.value;else if(a.pos){o=a.pos.pc;c=a.pos.txt;return}}A=true}function
t(a){w.push(a)}function
x(){l[0].end=c;var
d=new
Array(1+l.length*2);d[0]=0;for(var
b=0;b<l.length;b++){var
a=l[b];if(a.start<0||a.end<0)a.start=a.end=-1;d[2*b+1]=a.start;d[2*b+1+1]=a.end}return d}function
m(){if(d)return x();
else
h()}while(!A){var
D=z[o]&e,v=z[o]>>8,g=v&e,j=b[c],k;o++;switch(D){case
f.CHAR:if(c===b.length){m();break}if(j===g)c++;else
h();break;case
f.CHARNORM:if(c===b.length){m();break}if(y.charCodeAt(j)===g)c++;else
h();break;case
f.STRING:for(var
q=r(n[g]),i=0;i<q.length;i++){if(c===b.length){m();break}if(j===q.charCodeAt(i))j=b[++c];else{h();break}}break;case
f.STRINGNORM:for(var
q=r(n[g]),i=0;i<q.length;i++){if(c===b.length){m();break}if(y.charCodeAt(j)===q.charCodeAt(i))j=b[++c];else{h();break}}break;case
f.CHARCLASS:if(c===b.length){m();break}if(p(n[g],j))c++;else
h();break;case
f.BOL:if(c>0&&b[c-1]!==10)h();break;case
f.EOL:if(c<b.length&&b[c]!==10)h();break;case
f.WORDBOUNDARY:if(c===0){if(c===b.length){m();break}if(s(b[0]))break;h()}else if(c===b.length){if(s(b[c-1]))break;h()}else{if(s(b[c-1])!==s(b[c]))break;h()}break;case
f.BEGGROUP:k=l[g];t({undo:{obj:k,prop:"start",value:k.start}});k.start=c;break;case
f.ENDGROUP:k=l[g];t({undo:{obj:k,prop:"end",value:k.end}});k.end=c;break;case
f.REFGROUP:k=l[g];if(k.start<0||k.end<0){h();break}for(var
i=k.start;i<k.end;i++){if(c===b.length){m();break}if(b[i]!==b[c]){h();break}c++}break;case
f.SIMPLEOPT:if(p(n[g],j))c++;break;case
f.SIMPLESTAR:while(p(n[g],j))j=b[++c];break;case
f.SIMPLEPLUS:if(c===b.length){m();break}if(p(n[g],j))do
j=b[++c];while(p(n[g],j));else
h();break;case
f.ACCEPT:return x();
case
f.GOTO:o=o+v;break;case
f.PUSHBACK:t({pos:{pc:o+v,txt:c}});break;case
f.SETMARK:t({undo:{obj:u,prop:g,value:u[g]}});u[g]=c;break;case
f.CHECKPROGRESS:if(u[g]===c)h();break;default:throw new
Error("Invalid bytecode")}}return 0}return a}();function
m$(a,b,c){if(c<0||c>v(b))i("Str.partial_match");var
d=bp(a,b,c,1);return d?d:[0]}function
na(a,b,c){var
a=r(a),m=a.length,c=r(c),e=h,i=0,d,j,l,f;while(i<m){d=a.charAt(i++);if(d!==d_)e+=d;else{if(i===m)g("Str.replace: illegal backslash sequence");d=a.charAt(i++);switch(d){case"\\":e+=d;break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":f=+d;if(f*2>=b.length-1)g(ev);j=cA(b,f*2);l=cA(b,f*2+1);if(j===-1)g(ev);e+=c.slice(j,l);break;default:e+=d_+d}}}return k(e)}function
nb(a,b,c){if(c<0||c>v(b))i("Str.search_backward");while(c>=0){var
d=bp(a,b,c,0);if(d)return d;
c--}return[0]}function
nc(a,b,c){if(c<0||c>v(b))i("Str.search_forward");while(c<=v(b)){var
d=bp(a,b,c,0);if(d)return d;
c++}return[0]}function
nd(a,b,c){if(c<0||c>v(b))i("Str.string_match");var
d=bp(a,b,c,0);return d?d:[0]}function
ne(a,b,c){a.data[b]=c;return 0}function
nf(a,b,c){a.data[b]=c;return 0}function
ng(a,b,c,d,e,f){var
g=0;g+=cw(a,b,c,a,b,c,0);g+=f9(a,b,c,d,e,f,d,e,f);return g}function
lA(){var
c=d.process;if(c&&c.on)c.on("uncaughtException",function(a,b){cP(a);c.exit(2)});else if(d.addEventListener)d.addEventListener(dy,function(a){if(a.error)cP(a.error)})}lA();d.jsoo_runtime={caml_blake2_bytes:g4,caml_blake2_string:g5,caml_blake2_update:cK,caml_blake2_final:cJ,caml_blake2_create:cI,blake2b:bz,caml_ml_runtime_events_path:kI,caml_runtime_events_read_poll:lr,caml_runtime_events_free_cursor:lq,caml_runtime_events_create_cursor:lp,caml_ml_runtime_events_resume:kK,caml_ml_runtime_events_are_active:kH,caml_ml_runtime_events_pause:kJ,caml_ml_runtime_events_start:kL,caml_runtime_events_user_resolve:lt,caml_runtime_events_user_write:lu,caml_runtime_events_user_register:ls,caml_custom_event_index:cO,caml_zstd_initialize:mS,caml_decompress_input:bF,zstd_decompress:dn,jsoo_effect_not_supported:m2,caml_ml_condition_signal:kh,caml_ml_condition_broadcast:kf,caml_ml_condition_wait:ki,caml_ml_condition_new:kg,caml_get_continuation_callstack:ic,caml_continuation_use_and_update_handler_noexc:hn,caml_continuation_use_noexc:eS,caml_alloc_stack:gi,caml_ml_mutex_unlock:fH,caml_ml_mutex_try_lock:kw,caml_ml_mutex_lock:ku,caml_ml_mutex_new:kv,MlMutex:eH,caml_lxm_next:j2,caml_lxm_daba:fC,caml_lxm_M:fB,caml_ml_domain_cpu_relax:kk,caml_ml_domain_id:kl,caml_domain_spawn:hz,caml_domain_id:aR,caml_ml_domain_index:km,caml_recommended_domain_count:lk,caml_atomic_make_contended:gu,caml_atomic_exchange:gr,caml_atomic_fetch_add:gs,caml_atomic_cas:gq,caml_atomic_load:gt,caml_domain_dls_get:hw,caml_domain_dls_compare_and_set:hv,caml_domain_dls_set:hx,caml_domain_dls:a_,caml_ephe_check_data:hC,caml_ephe_unset_data:eX,caml_ephe_set_data_opt:a$,caml_ephe_set_data:eV,caml_ephe_get_data_copy:hF,caml_ephe_get_data:az,caml_ephe_blit_data:hA,caml_ephe_blit_key:hB,caml_ephe_check_key:hD,caml_ephe_get_key_copy:hG,caml_ephe_get_key:eU,caml_weak_set:mO,caml_weak_create:f2,caml_ephe_create:hE,caml_ephe_unset_key:eY,caml_ephe_set_key:eW,caml_ephe_none:D,caml_ephe_data_offset:at,caml_ephe_key_offset:Q,caml_unix_inet_addr_of_string:mz,caml_unix_findclose:ms,caml_unix_findnext:mu,caml_unix_findfirst:mt,caml_unix_rewinddir:mF,caml_unix_closedir:da,caml_unix_readdir:dc,caml_unix_opendir:db,caml_unix_has_symlink:my,caml_unix_getpwuid:mv,caml_unix_getuid:mw,caml_unix_unlink:mL,caml_unix_readlink:mE,caml_unix_symlink:mJ,caml_unix_rmdir:mG,caml_unix_mkdir:mC,caml_unix_lstat_64:mB,caml_unix_lstat:f0,caml_unix_stat_64:mI,caml_unix_stat:f1,make_unix_err_args:U,caml_unix_isatty:mA,caml_unix_filedescr_of_fd:mr,caml_unix_cleanup:mq,caml_unix_startup:mH,caml_unix_mktime:mD,caml_unix_localtime:fZ,caml_unix_gmtime:mx,caml_unix_time:mK,caml_unix_gettimeofday:fY,re_replacement_text:na,re_partial_match:m$,re_string_match:nd,re_search_backward:nb,re_search_forward:nc,re_match:bp,caml_sys_is_regular_file:l5,caml_xdg_defaults:mQ,caml_sys_const_naked_pointers_checked:lT,caml_ml_runtime_warnings_enabled:kM,caml_ml_enable_runtime_warnings:kn,caml_runtime_warnings:c9,caml_install_signal_handler:i0,caml_runtime_parameters:lv,caml_runtime_variant:lw,caml_sys_isatty:l6,caml_sys_get_config:l2,os_type:bo,caml_sys_const_backend_type:lP,caml_sys_const_ostype_cygwin:lU,caml_sys_const_ostype_win32:lW,caml_sys_const_ostype_unix:lV,caml_sys_const_max_wosize:lS,caml_sys_const_int_size:lR,caml_sys_const_word_size:lX,caml_sys_const_big_endian:lQ,caml_sys_random_seed:l_,caml_sys_time_include_children:me,caml_sys_time:fX,caml_sys_system_command:md,caml_sys_executable_name:lY,caml_sys_modify_argv:l8,caml_sys_argv:lN,caml_sys_get_argv:l1,caml_executable_name:e0,caml_argv:aP,caml_sys_unsafe_getenv:mf,caml_sys_getenv:fV,jsoo_sys_getenv:dh,caml_set_static_env:lz,jsoo_static_env:b4,caml_fatal_uncaught_exception:cP,caml_format_exception:e2,caml_is_special_exception:fy,caml_sys_exit:lZ,caml_raise_sys_error:j,caml_process_pending_actions_with_root:le,caml_maybe_print_stats:j6,caml_is_printable:i_,caml_get_global_data:ih,caml_register_global:a,jsoo_toplevel_reloc:di,caml_build_symbols:eN,caml_global_data:q,caml_named_value:S,caml_register_named_value:lm,caml_named_values:c3,caml_call_gen:a8,caml_set_parser_trace:ly,caml_parse_engine:ld,caml_parser_trace:ab,caml_custom_identifier:ht,caml_is_continuation_tag:bQ,caml_lazy_read_result:jO,caml_lazy_reset_to_lazy:jP,caml_lazy_update_to_forward:jR,caml_lazy_update_to_forcing:jQ,caml_obj_update_tag:bV,caml_obj_add_offset:k3,caml_obj_reachable_words:k8,caml_obj_set_raw_field:k9,caml_obj_raw_field:k7,caml_fresh_oo_id:h2,caml_set_oo_id:lx,caml_oo_last_id:c5,caml_get_public_method:ij,caml_lazy_make_forward:jN,caml_obj_is_shared:k6,caml_obj_compare_and_swap:k5,caml_obj_dup:c4,caml_obj_with_tag:k_,caml_obj_block:k4,caml_obj_tag:fM,caml_alloc_dummy_infix:gh,caml_update_dummy:mN,deserialize_nat:f6,serialize_nat:f$,lxor_digit_nat:m7,lor_digit_nat:m6,land_digit_nat:m3,compare_nat:f3,compare_digits_nat:mT,shift_right_nat:dl,div_nat:mV,div_digit_nat:f7,div_helper:df,shift_left_nat:dk,square_nat:ng,mult_nat:f9,mult_digit_nat:dj,sub_nat:dm,decr_nat:f5,complement_nat:mU,add_nat:cw,incr_nat:f8,is_digit_odd:mZ,is_digit_normalized:mY,is_digit_zero:m0,is_digit_int:mX,num_leading_zero_bits_in_digit:f_,num_digits_nat:b5,nth_digit_nat_native:m_,set_digit_nat_native:nf,nth_digit_nat:m9,set_digit_nat:ne,blit_nat:gf,set_to_zero_nat:ga,create_nat:f4,nat_of_array:aH,length_nat:m4,caml_hash_nat:ff,MlNat:a5,initialize_nat:mW,caml_new_string:k0,caml_array_of_bytes:gl,caml_array_of_string:gm,caml_js_to_string:jB,caml_to_js_string:mh,caml_js_from_string:ji,caml_js_to_byte_string:jy,caml_is_ml_string:aU,caml_ml_bytes_content:fF,caml_is_ml_bytes:aC,caml_bytes_of_jsbytes:cL,caml_string_of_jsstring:w,caml_jsstring_of_string:s,caml_jsbytes_of_string:r,caml_string_of_jsbytes:k,caml_bytes_of_string:aq,caml_string_of_bytes:fT,caml_string_lessthan:fS,caml_string_lessequal:fR,caml_string_equal:fP,caml_string_compare:lD,caml_ml_string_length:v,caml_string_unsafe_get:x,caml_string_concat:lE,caml_ml_bytes_length:bb,caml_blit_string:g6,caml_blit_bytes:ag,caml_fill_bytes:hL,caml_bytes_greaterthan:hb,caml_string_greaterthan:lJ,caml_bytes_greaterequal:ha,caml_string_greaterequal:lI,caml_bytes_lessthan:eR,caml_bytes_lessequal:eQ,caml_bytes_notequal:hc,caml_string_notequal:lL,caml_bytes_equal:eP,caml_bytes_compare:eO,caml_bytes_of_array:ap,caml_string_of_array:al,caml_create_bytes:as,caml_create_string:hs,caml_uint8_array_of_string:aX,caml_uint8_array_of_bytes:am,caml_convert_bytes_to_array:a9,caml_convert_string_to_bytes:P,MlBytes:L,caml_bytes_of_utf16_jsstring:hd,caml_bytes_set:he,caml_bytes_set64:hh,caml_bytes_set32:hg,caml_bytes_set16:hf,caml_string_set:lM,caml_bytes_get:g8,caml_bytes_get64:g$,caml_string_get64:lH,caml_bytes_get32:g_,caml_string_get32:lG,caml_bytes_get16:g9,caml_string_get16:lF,caml_string_get:fQ,caml_bytes_bound_error:ah,caml_string_bound_error:bm,caml_bytes_unsafe_set:ai,caml_bytes_unsafe_get:O,jsoo_is_ascii:bn,caml_utf16_of_utf8:dd,caml_utf8_of_utf16:de,caml_subarray_to_jsbytes:aV,caml_str_repeat:aF,caml_md5_bytes:fE,caml_MD5Final:cx,caml_MD5Update:bA,caml_MD5Init:cy,caml_MD5Transform:a6,caml_md5_string:j8,caml_md5_chan:j7,caml_output_value_to_buffer:lb,caml_output_value_to_bytes:lc,caml_output_value_to_string:fN,caml_output_val:bW,MlObjectTable:aO,caml_marshal_data_size:fD,caml_marshal_header_size:aD,caml_input_value_from_reader:fi,caml_custom_ops:ak,caml_nativeint_unmarshal:fL,caml_int32_unmarshal:fj,caml_int64_marshal:fp,caml_int64_unmarshal:fv,caml_input_value_from_bytes:fh,caml_float_of_bytes:aA,BigStringReader:eG,MlStringReader:cv,UInt8ArrayReader:by,caml_marshal_constants:j5,caml_new_lex_engine:kZ,caml_lex_engine:jV,caml_lex_array:n,caml_js_error_of_exception:jc,caml_xmlhttprequest_create:mR,caml_js_get_console:jl,caml_js_html_entities:jm,caml_js_html_escape:jn,caml_js_on_ie:js,caml_js_object:jr,caml_pure_js_expr:lf,caml_js_expr:jf,caml_js_eval_string:je,caml_js_strict_equals:jv,caml_js_equals:jb,caml_js_function_arity:c0,caml_js_wrap_meth_callback_unsafe:jK,caml_js_wrap_meth_callback_strict:jJ,caml_js_wrap_meth_callback_arguments:jI,caml_js_wrap_meth_callback:jH,caml_js_wrap_callback_unsafe:jG,caml_js_wrap_callback_strict:jF,caml_js_wrap_callback_arguments:jE,caml_js_wrap_callback:c1,caml_ojs_new_arr:k$,caml_js_new:jq,caml_js_meth_call:jp,caml_js_fun_call:jj,caml_js_call:i$,caml_js_var:jD,caml_list_to_js_array:fA,caml_list_of_js_array:jY,caml_js_to_array:jw,caml_js_from_array:R,caml_js_to_int32:jA,caml_js_to_float:jz,caml_js_from_float:jh,caml_js_to_bool:jx,caml_js_from_bool:jg,caml_js_error_option_of_exception:jd,caml_exn_with_js_backtrace:e1,caml_maybe_attach_backtrace:bT,caml_wrap_exception:mP,caml_jsoo_flags_effects:jL,caml_jsoo_flags_use_js_string:jM,caml_is_js:i9,caml_callback:F,caml_trampoline_return:mj,caml_trampoline:mi,caml_js_typeof:jC,caml_js_instanceof:jo,caml_js_delete:ja,caml_js_get:jk,caml_js_set:ju,caml_js_pure_expr:jt,caml_ml_set_buffered:kS,caml_ml_is_buffered:kt,caml_ml_output_int:kC,caml_ml_pos_out_64:kG,caml_ml_pos_out:kF,caml_pos_out:c8,caml_ml_seek_out_64:kQ,caml_ml_seek_out:kP,caml_seek_out:c$,caml_output_value:la,caml_ml_output_char:kB,caml_ml_output:bd,caml_ml_output_bigarray:kA,caml_ml_output_bytes:fK,caml_ml_output_ta:c2,caml_ml_flush:aE,caml_ml_input_scan_line:kr,caml_ml_pos_in_64:kE,caml_ml_pos_in:kD,caml_pos_in:c7,caml_ml_seek_in_64:kO,caml_ml_seek_in:kN,caml_seek_in:c_,caml_ml_input_int:kq,caml_ml_input_char:fG,caml_input_value_to_outside_heap:iZ,caml_input_value:fg,caml_ml_input_block:bc,caml_ml_input_bigarray:kp,caml_ml_input:ko,caml_refill:bk,caml_ml_set_channel_refill:kV,caml_ml_set_channel_output:kU,caml_ml_channel_size_64:kd,caml_ml_channel_size:kc,caml_ml_close_channel:ke,caml_ml_is_binary_mode:ks,caml_ml_set_binary_mode:kR,caml_channel_descriptor:hj,caml_ml_open_descriptor_out_with_flags:ky,caml_ml_open_descriptor_in_with_flags:kx,caml_ml_open_descriptor_in:fI,caml_ml_open_descriptor_out:fJ,caml_ml_out_channels_list:kz,caml_ml_channel_get:o,caml_ml_channel_restore:kb,caml_ml_channel_redirect:ka,caml_ml_channels:$,caml_ml_set_channel_name:kT,caml_sys_open:l9,caml_sys_close:fU,caml_sys_fds:aG,caml_int64_bswap:i3,caml_int32_bswap:i1,caml_bswap16:g7,caml_mod:kW,caml_div:hu,caml_mul:be,caml_int_of_string:i8,caml_parse_digit:bf,caml_parse_sign_and_base:c6,caml_format_int:h1,caml_int64_hash:fm,caml_int64_to_bytes:aa,caml_int64_of_bytes:_,caml_int64_hi32:bM,caml_int64_lo32:bN,caml_int64_create_lo_hi:fl,caml_int64_create_lo_mi_hi:ba,caml_int64_of_string:cY,caml_int64_format:i5,caml_int64_of_float:bO,caml_int64_to_float:cZ,caml_int64_to_int32:fu,caml_int64_of_int32:au,caml_int64_mod:i6,caml_int64_div:i4,caml_int64_shift_right:i7,caml_int64_shift_right_unsigned:fs,caml_int64_shift_left:fr,caml_int64_xor:fw,caml_int64_or:fq,caml_int64_and:i2,caml_int64_is_negative:fn,caml_int64_is_zero:fo,caml_int64_mul:cW,caml_int64_sub:ft,caml_int64_add:bL,caml_int64_neg:cX,caml_int64_compare:fk,caml_int64_ult:bP,MlInt64:f,caml_int64_offset:aT,caml_float_of_string:hQ,caml_format_float:h0,caml_fma_float:hZ,caml_erfc_float:hI,caml_erf_float:eZ,caml_cbrt_float:hi,caml_round_float:lo,caml_atanh_float:gp,caml_tanh_float:mg,caml_asinh_float:go,caml_sinh_float:lC,caml_acosh_float:gg,caml_cosh_float:hr,caml_log10_float:jZ,caml_hypot_float:iX,caml_log2_float:j1,caml_log1p_float:j0,caml_exp2_float:hJ,caml_expm1_float:hK,caml_signbit_float:lB,caml_copysign_float:hq,caml_float_compare:hP,caml_frexp_float:h3,caml_ldexp_float:jS,caml_modf_float:kX,caml_classify_float:hl,caml_int32_float_of_bits:bK,caml_trunc_float:mk,caml_nextafter_float:k1,caml_int64_float_of_bits:aS,caml_hexstring_of_float:iW,caml_int32_bits_of_float:bJ,caml_int64_bits_of_float:aB,jsoo_floor_log2:dg,caml_string_hash:lK,caml_hash:iU,caml_hash_mix_string:cV,caml_hash_mix_bytes:fd,caml_hash_mix_bytes_arr:cT,caml_hash_mix_jsbytes:bI,caml_hash_mix_int64:fe,caml_hash_mix_float:bH,caml_hash_mix_final:cU,caml_hash_mix_int:u,caml_gr_close_subwindow:io,caml_gr_open_subwindow:iG,caml_gr_window_id:iR,caml_gr_display_mode:is,caml_gr_remember_mode:iJ,caml_gr_synchronize:iO,caml_gr_wait_event:iQ,caml_gr_sigio_signal:iL,caml_gr_sigio_handler:iK,caml_gr_blit_image:ik,caml_gr_create_image:ip,caml_gr_draw_image:iw,caml_gr_dump_image:iz,caml_gr_make_image:iE,caml_gr_text_size:iP,caml_gr_set_text_size:e_,caml_gr_set_font:e8,caml_gr_draw_string:iy,caml_gr_draw_char:iv,caml_gr_draw_str:cS,caml_gr_fill_arc:iA,caml_gr_fill_poly:iB,caml_gr_fill_rect:iC,caml_gr_set_line_width:e9,caml_gr_draw_arc:iu,caml_gr_arc_aux:cR,caml_gr_draw_rect:ix,caml_gr_lineto:iD,caml_gr_current_y:ir,caml_gr_current_x:iq,caml_gr_moveto:e5,caml_gr_point_color:iI,caml_gr_plot:iH,caml_gr_set_color:e7,caml_gr_size_y:iN,caml_gr_size_x:iM,caml_gr_clear_graph:il,caml_gr_resize_window:e6,caml_gr_set_window_title:e$,caml_gr_close_graph:im,caml_gr_doc_of_state:it,caml_gr_state_create:fa,caml_gr_state_init:fb,caml_gr_open_graph:iF,caml_gr_state_set:fc,caml_gr_state_get:l,caml_gr_state:G,caml_get_minor_free:ii,caml_gc_minor_words:h$,caml_gc_major_slice:h9,caml_memprof_discard:j9,caml_memprof_stop:j$,caml_memprof_start:j_,caml_final_release:hO,caml_final_register_called_without_value:hN,caml_final_register:hM,caml_gc_get:h7,caml_gc_set:ia,caml_gc_stat:ib,caml_gc_quick_stat:e4,caml_gc_counters:h5,caml_gc_compaction:h4,caml_gc_full_major:h6,caml_gc_major:h8,caml_gc_minor:h_,caml_sys_open_for_node:fW,MlNodeFd:M,MlNodeDevice:b,fs_node_supported:av,MlFakeFd:ao,MlFakeFd_out:aN,MlFakeFile:z,MlFakeDevice:c,caml_read_file_content:lj,jsoo_create_file:b3,caml_create_file:eT,caml_fs_init:e3,jsoo_create_file_extern:m1,caml_ba_map_file_bytecode:gK,caml_ba_map_file:eL,caml_sys_rmdir:mc,caml_sys_mkdir:l7,caml_sys_rename:mb,caml_sys_is_directory:l4,caml_sys_remove:ma,caml_sys_read_directory:l$,caml_sys_file_exists:l0,caml_raise_no_such_file:bh,caml_sys_chdir:lO,caml_sys_getcwd:l3,caml_unmount:mM,caml_mount_autoload:kY,resolve_fs_device:p,caml_list_mount_point:jX,jsoo_mount_point:H,caml_make_path:bS,path_is_absolute:b6,MlFile:cu,caml_root:bl,caml_get_root:cQ,caml_current_dir:aj,caml_trailing_slash:aW,caml_finish_formatting:bG,caml_parse_format:bX,caml_array_bound_error:m,caml_raise_not_found:bZ,caml_raise_zero_divide:bi,caml_raise_end_of_file:bg,caml_invalid_argument:i,caml_failwith:g,caml_raise_with_string:b0,caml_raise_with_args:T,caml_raise_with_arg:fO,caml_raise_constant:bY,caml_lessthan:jU,caml_lessequal:jT,caml_greaterthan:iT,caml_greaterequal:iS,caml_notequal:k2,caml_equal:hH,caml_int_compare:fx,caml_compare:hm,caml_compare_val:ar,caml_compare_val_number_custom:cM,caml_compare_val_get_custom:bE,caml_compare_val_tag:cN,caml_bigstring_blit_ba_to_bytes:g0,caml_bigstring_blit_bytes_to_ba:g1,caml_bigstring_blit_string_to_ba:g2,caml_bigstring_blit_ba_to_ba:gZ,caml_bigstring_memcmp:g3,bigstring_of_typed_array:gc,bigstring_of_array_buffer:gb,bigstring_to_typed_array:ge,bigstring_to_array_buffer:gd,caml_hash_mix_bigstring:iV,caml_ba_from_typed_array:gD,caml_ba_kind_of_typed_array:eK,caml_ba_to_typed_array:cH,caml_ba_hash:cF,caml_ba_create_from:gy,caml_ba_deserialize:cE,caml_ba_serialize:cG,caml_ba_reshape:gM,caml_ba_slice:gQ,caml_ba_sub:gR,caml_ba_blit:gv,caml_ba_fill:gC,caml_ba_set_3:gO,caml_ba_set_2:gN,caml_ba_set_1:eM,caml_ba_uint8_set64:gX,caml_ba_uint8_set32:gW,caml_ba_uint8_set16:gV,caml_ba_set_generic:gP,caml_ba_get_3:gF,caml_ba_get_2:gE,caml_ba_get_1:t,caml_ba_uint8_get64:gU,caml_ba_uint8_get32:gT,caml_ba_uint8_get16:gS,caml_ba_get_generic:gG,caml_ba_dim_3:gB,caml_ba_dim_2:gA,caml_ba_dim_1:gz,caml_ba_dim:bD,caml_ba_num_dims:gL,caml_ba_layout:gJ,caml_ba_kind:gI,caml_ba_change_layout:gw,caml_ba_create:gx,caml_ba_create_unsafe:N,caml_ba_compare:cC,Ml_Bigarray_c_1_1:ax,Ml_Bigarray:af,caml_ba_custom_name:eJ,caml_ba_create_buffer:cD,caml_ba_get_size_per_element:aQ,caml_ba_get_size:ay,caml_ba_init:gH,caml_convert_raw_backtrace_slot:hp,caml_get_current_callstack:id,caml_restore_raw_backtrace:ln,caml_raw_backtrace_slot:li,caml_raw_backtrace_next_slot:lh,caml_raw_backtrace_length:lg,caml_convert_raw_backtrace:ho,caml_record_backtrace:ll,caml_get_exception_raw_backtrace:ig,caml_get_exception_backtrace:ie,caml_backtrace_status:gY,caml_ml_debug_info_status:kj,caml_record_backtrace_runtime_flag:b1,caml_record_backtrace_env_flag:bj,caml_uniform_array_make:mo,caml_floatarray_make_unboxed:hX,caml_floatarray_make:hW,caml_floatarray_create:hT,caml_array_create_float:gk,caml_make_float_vect:j3,caml_make_vect:j4,caml_array_make:a7,caml_check_bound:hk,caml_uniform_array_fill:mn,caml_floatarray_fill_unboxed:hV,caml_floatarray_fill:hU,caml_array_fill:bC,caml_array_get:cA,caml_array_set:gn,caml_uniform_array_blit:mm,caml_floatarray_blit:hS,caml_array_blit:bB,caml_array_concat:gj,caml_uniform_array_append:ml,caml_floatarray_append:hR,caml_array_append:cz,caml_uniform_array_sub:mp,caml_floatarray_sub:hY,caml_array_sub:cB};b3("/static/XCCW_Joined_23a.ttf","\0\x01\0\0\0\x0f\0\x80\0\x03\0pOS/2v\b\xf2\xd5\0\0\x01x\0\0\0Vcmap\x83(o}\0\0\x05\xe0\0\0\x02\ncvt ;\xfd\x0e\xec\0\0\x0fp\0\0\x01Jfpgm\x0e\x7fl\xaa\0\0\x07\xec\0\0\x05\x7fgasp\xff\xff\0\x04\0\0\xf6\xd8\0\0\0\bglyf`\xdf\xb8\xa2\0\0\x12\xc8\0\0\xc9\x04head\xf9h\xd3&\0\0\0\xfc\0\0\x006hhea\x11\xc0\x05\x8c\0\0\x014\0\0\0$hmtxn=I<\0\0\x01\xd0\0\0\x04\x10kern\xde\xef\xe0v\0\0\xdb\xcc\0\0\x15\x8alocaZ-*&\0\0\x10\xbc\0\0\x02\nmaxp\x02q\x07A\0\0\x01X\0\0\0 names_$\\\0\0\xf1X\0\0\x02Ppost\x1e \xe38\0\0\xf3\xa8\0\0\x03.prep\xb8\xbe\xa1\xe7\0\0\rl\0\0\x02\x04\0\x01\0\0\0\x01\0\0P\xef\x9b\xe3_\x0f<\xf5\0\t\b\0\0\0\0\0\xc8:\x8cs\0\0\0\0\xc9\x93\xfb\xa3\xfdi\xfc\xe8\x0b\x15\t3\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\t?\xfc\xea\0\0\n-\xfdi\xfdp\x0b\x15\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x04\0\x01\0\0\x01\x04\0\xe3\0\x05\0\xad\0\x04\0\x02\0\x10\0/\0S\0\0\0\xfe\x05\x7f\0\x02\0\x01\0\x01\x04\xfc\x01\x90\0\x05\0\x04\x01\xa4\x01\xa4\0\0\x02L\x01\xa4\x01\xa4\0\0\x02L\0(\x02X\n\x03\x03\x05\x06\x02\x04\0\0\0\0\0\x80\0\0\xa7\x10\0\0J\0\0\0\0\0\0\0\0CCW \0@\0 \xe0s\x07\x0f\xfd*\0\xcd\t?\x03\x16 \0\0\x11\0\0\0\0\0\0\x05\xf2\x01\"\x03\xe6\0\0\x03\xe6\0\0\x05\x16\0\0\x03\xea\x01\x9a\x03-\0\xc8\x06=\0\xc8\x06(\x01,\x07\xf6\0\xc8\b\x80\x01,\x01\xb4\0\xc8\x03\xa9\0\xc8\x03\xed\0\xc8\x04f\0d\x05\\\0d\x03u\0\xc8\x04)\0d\x03r\x01,\x04L\0\xc8\x06\xb2\x01,\x03J\x01^\x06\x8d\x01^\x06i\x01^\x06\xde\x01^\x06\xb3\x01^\x06o\x01^\x06@\x01^\x06\xd7\x01^\x06O\x01^\x03`\x01,\x03\xc5\x01,\x04\xe6\0d\x05\x86\0d\x05\xb6\x01,\x05\x12\x01,\b\x02\0\xc8\x07@\0\xc8\x06f\x01,\x06F\0\x96\x063\0\xfa\x06&\0\xfa\x04~\0\xfa\x07?\0\xfa\x07\x1e\0\xfa\x04\x90\0\xfa\x05>\0\xfa\x06\xe1\0\xfa\x06\x13\0\xfa\b\x82\0\xfa\x07@\0\xfa\x06\xec\0\xfa\x05-\0\xfa\x07n\0\xfa\x06\x96\0\xfa\x06\n\0\xfa\x05o\0\xf0\x06_\0\xfa\x05J\0\xfa\x07\x9a\0\xfa\x06\xc6\0\xfa\x04\xd2\0\xfa\x06\xd3\0\xfa\x04\xc0\x01,\x03\xfe\0\xc8\x04\xc0\0\xc8\x04\xb6\0z\x03j\xff\xbb\x03L\x013\x06\x0e\xffL\x05\x9f\xffL\x04\xea\xffL\x06\n\xffL\x04\"\xff8\x03\xac\xff$\x05\xb8\xffL\x06\x01\xffL\x02\xd5\xffG\x02\xf7\xff\x01\x04\x85\xffG\x02\xef\xffF\x07\xfe\xffB\x05\xce\xffG\x05\xf0\xffL\x05;\xffL\x06|\xffL\x04'\xffL\x05x\xffL\x03'\xffL\x05\xe8\xffL\x06O\xffL\x07\xa6\xffL\x05\xef\xffL\x05\x98\xffL\x05I\xffL\x04\x07\0d\x02>\0d\x04\b\0d\x05T\0d\x02[\0d\x04h\0d\x06+\0d\x061\0d\x05\xcb\0d\x02T\0d\x05\x05\0d\x03L\x01\x1a\x07\x06\0d\x03\xe3\0y\x04\xf3\0d\x05=\0d\x07\x06\0d\x03L\0Z\x03\xff\0\xc8\x05\\\0d\x03\xca\0d\x02\xff\0d\x03L\x01?\x05\x98\0d\x05\xfc\0d\x01\xe2\0d\x03L\0\xd5\x01\xb1\0d\x04\0\0x\x04\xdc\0d\x07G\0d\x06\xd0\0d\x07d\0d\x04K\0d\x07@\0\xc8\x07@\0\xc8\x07@\0\xc8\x07@\0\xc8\x07@\0\xc8\x07D\0\xc8\t\x9b\0\xc8\x06H\0\x96\x06(\0\xfa\x06(\0\xfa\x06(\0\xfa\x06(\0\xfa\x04\x90\0\xfa\x04\x90\0\xfa\x04\x90\0\xfa\x04\x94\0\xfa\x06\xc0\0\xc8\x07@\0\xfa\x06\xec\0\xfa\x06\xf0\0\xfa\x06\xec\0\xfa\x06\xec\0\xfa\x06\xec\0\xfa\x05M\0\xc8\x06\xec\0\xc8\x06`\0\xfa\x06`\0\xfa\x06`\0\xfa\x06`\0\xfa\x04\xd4\0\xfa\x05|\0\xc8\x06\xb4\0\0\x06\x0e\xffL\x06\x0e\xffL\x06\x0e\xffL\x06\x0e\xffL\x06\x0e\xffL\x06\x0e\xffL\n-\xffL\x04\xea\xffL\x04\"\xff8\x04\"\xff8\x04\"\xff8\x04\"\xff8\x02\xd5\xffG\x02\xd5\xffG\x02\xd5\xffG\x02\xd5\xffG\x05:\0\xc8\x05\xce\xffG\x05\xf0\xffL\x05\xf0\xffL\x05\xf0\xffL\x05\xf0\xffL\x05\xf0\xffL\x05\xc0\0\xc8\x05\xf0\xffL\x05\xe8\xffL\x05\xe8\xffL\x05\xe8\xffL\x05\xe8\xffL\x05\x9a\xffL\x05n\0\xc8\x05\x9a\xffL\x02\xd5\xffG\x03L\x019\x03L\0\xc7\x03L\0Z\x03L\0\xb1\x03L\x01\xe4\x03L\x01\\\x03L\0C\x03L\0\xe8\x03L\0\xa0\x04\xe0\0\xc8\b\xf3\0\xc8\x01\xb3\0d\x01\xe5\0d\x03\x11\0\xc8\x03\x81\0d\x03\xe5\0d\x04\xad\0\xc8\x05\x8a\0\xc8\x05\x91\0\xc8\x03\x8f\0d\b\xc8\x01,\x03\xba\0\xc8\x04\r\x01,\0A\xfdi\x07\xbb\x01,\x061\0d\x07\xc7\0\xc8\x05K\0d\x05\xd2\0\xc8\x06\x13\0\xc8\x06\x13\0\xc8\x07\xee\0\xfa\x07N\0\xfa\x05\x9f\xffL\x06\x04\xffL\x03\xac\xff$\x03\x9d\xff\x0e\x04\x02\xffB\x04_\xffB\x03\xd0\xff7\x05\xb8\xffL\x06%\xffL\x02\xf7\xff\x01\x03\x14\xfe\xe0\x04\x85\xffG\x056\xffB\x05;\xffL\x05;\xffL\x06|\xffL\x06U\xffL\x05x\xffL\x04\xd8\xffL\x06O\xffL\x05\xe2\xffL\b\x9d\xffL\x07\xa6\xffL\x05\xef\xffL\x06j\xffL\x05\x98\xffL\x05\xd9\xffL\x05I\xffL\x06\x1e\xffE\x05Q\xffL\x04\xb6\x01^\x06\x85\x01^\x07x\x01^\x06o\x01^\0\0\0\x02\0\x01\0\0\0\0\0\x14\0\x03\0\x01\0\0\x01\x1a\0\0\x01\x06\0\0\x01\0\0\0\0\0\0\0\x01\x02\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\x03\x04\x05\x06\x07\b\t\n\x0b\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`a\0\x84\x85\x87\x89\x91\x96\x9c\xa1\xa0\xa2\xa4\xa3\xa5\xa7\xa9\xa8\xaa\xab\xad\xac\xae\xaf\xb1\xb3\xb2\xb4\xb6\xb5\xba\xb9\xbb\xbc\xd2pcdh\xd4v\x9fnj\xdbti\0\x86\x98\0q\xde\xdffu\0\0\0\0\0kz\0\xa6\xb8\x7fbm\xdd\0\0\0l{\xd5\x03\x80\x83\x95\0\0\xca\xcb\xcf\xd0\xcc\xcd\xb7\0\xbf\0\xd8e\xd6\xd7\0\0\xd3w\xce\xd1\0\x82\x8a\x81\x8b\x88\x8d\x8e\x8f\x8c\x93\x94\0\x92\x9a\x9b\x99\xc0\xc1\xc8o\xc4\xc5\xc6x\xc9\xc7\xc2\0\x04\0\xf0\0\0\x006\0 \0\x04\0\x16\0~\0\xa0\0\xac\0\xad\0\xff\x011\x02\xc7\x02\xc9\x02\xdd\x03~ \x14 \x1a \x1e \" & 0 : D \xa4 \xac!\"\"\x12\"\x15\"\x1a\"e\xe0s\xff\xff\0\0\0 \0\xa0\0\xa1\0\xad\0\xae\x011\x02\xc6\x02\xc9\x02\xd8\x03~ \x13 \x18 \x1c   & 0 9 D \xa4 \xac!\"\"\x12\"\x15\"\x19\"d\xe0P\xff\xff\xff\xe3\0\0\xff\xc1\0\0\xff\xc0\xff\x8f\xfd\xfb\xfd\xfa\xfd\xec\xfc\xa0\xe0\xb7\xe0\xb4\xe0\xb3\xe0\xb2\xe0\xaf\xe0\x96\xe0\x9d\xe0\x94\xe05\xe0.\xdf\xb9\xde\xca\xde\xc3\0\0\xdez \x90\0\x01\0\0\x004\0\0\x002\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\0\0\0\0\x03\0\x10\0w\0\xdd\0\0@;RQPONMLKJIHGFEDCBA@?>=<;:98765/.-,(&%$#\"\x1f\x18\x14\x11\x10\x0f\r\x0b\n\t\b\x07\x06\x05\x04\x03\x02\x01\0,E#F` \xb0&`\xb0\x04&#HH-,E#F#a \xb0&a\xb0\x04&#HH-,E#F`\xb0 a \xb0F`\xb0\x04&#HH-,E#F#a\xb0 ` \xb0&a\xb0 a\xb0\x04&#HH-,E#F`\xb0@a \xb0f`\xb0\x04&#HH-,E#F#a\xb0@` \xb0&a\xb0@a\xb0\x04&#HH-,\x01\x10 <\0<-, E# \xb0\xcdD# \xb8\x01ZQX# \xb0\x8dD#Y \xb0\xedQX# \xb0MD#Y \xb0\x04&QX# \xb0\rD#Y!!-,  E\x18hD \xb0\x01` E\xb0Fvh\x8aE`D-,\x01\xb1\x0b\nC#Ce\n-,\0\xb1\n\x0bC#C\x0b-,\0\xb0(#p\xb1\x01(>\x01\xb0(#p\xb1\x02(E:\xb1\x02\0\b\r-, E\xb0\x03%Ead\xb0PQXED\x1b!!Y-, E\xb0\0C`D-,\x01\xb0\x06C\xb0\x07Ce\n-, i\xb0@a\xb0\0\x8b \xb1,\xc0\x8a\x8c\xb8\x10\0b`+\fd#da\\X\xb0\x03aY-,\x8a\x03E\x8a\x8a\x87\xb0\x11+\xb0)#D\xb0)z\xe4\x18-,Ee\xb0,#DE\xb0+#D-,KRXED\x1b!!Y-,\x01\xb0\x05%\x10# \x8a\xf5\0\xb0\x01`#\xed\xec-,\x01\xb0\x05%\x10# \x8a\xf5\0\xb0\x01a#\xed\xec-,\x01\xb0\x06%\x10\xf5\0\xed\xec-, \xb0\x01`\x01\x10 <\0<-, \xb0\x01a\x01\x10 <\0<-,\0\xb0\x07C\xb0\x06C\x0b-,!!\fd#d\x8b\xb8@\0b-,!\xb0\x80QX\fd#d\x8b\xb8 \0b\x1b\xb2\0@/+Y\xb0\x02`-,!\xb0\xc0QX\fd#d\x8b\xb8\x15Ub\x1b\xb2\0\x80/+Y\xb0\x02`-,\fd#d\x8b\xb8@\0b`#!-,E#E`#E`#E`#vh\x18\xb0\x80b -,\xb0\x04&\xb0\x04&\xb0\x04%\xb0\x04%E#E \xb0\x03&`bch \xb0\x03&ae\x8a#DD-, E\xb0\0TX\xb0@D E\xb0@aD\x1b!!Y-,E\xb10/E#Ea`\xb0\x01`iD-,KQX\xb0/#p\xb0\x14#B\x1b!!Y-,KQX \xb0\x03%EiSXD\x1b!!Y\x1b!!Y-,E\xb0\x14C\xb0\0`c\xb0\x01`iD-,\xb0/ED-,E# E\x8a`D-,E#E`D-,K#QX\xb9\x003\xff\xe0\xb14 \x1b\xb33\x004\0YDD-,\xb0\x16CX\xb0\x03&E\x8aXdf\xb0\x1f`\x1bd\xb0 `f X\x1b!\xb0@Y\xb0\x01aY#XeY\xb0)#D#\x10\xb0)\xe0\x1b!!!!!Y-,\xb0\x16CX\xb0\x04%Ed\xb0 `f X\x1b!\xb0@Y\xb0\x01a#XeY\xb0)#D\xb0\x04%\xb0\x07%\b X\x02\x1b\x03Y\xb0\x05%\x10\xb0\x04% F\xb0\x04%#B<\xb0\x07%\x10\xb0\x06% F\xb0\x04%\xb0\x01`#B< X\x01\x1b\0Y\xb0\x05%\x10\xb0\x04%\xb0)\xe0\xb0\x07%\x10\xb0\x06%\xb0)\xe0\xb0\x04%\xb0\x07%\b X\x02\x1b\x03Y\xb0\x04%\xb0\x03%CH\xb0\x06%\xb0\x03%\xb0\x01`CH\x1b!Y!!!!!!!-,\xb0\x16CX\xb0\x04%Ed\xb0 `f X\x1b!\xb0@Y\xb0\x01a#X\x1beY\xb0)#D\xb0\x05%\xb0\b%\b X\x02\x1b\x03Y\xb0\x04%\x10\xb0\x05% F\xb0\x04%#B<\xb0\x04%\xb0\x07%\b\xb0\x07%\x10\xb0\x06% F\xb0\x04%\xb0\x01`#B< X\x01\x1b\0Y\xb0\x04%\x10\xb0\x05%\xb0)\xe0\xb0) EeD\xb0\x07%\x10\xb0\x06%\xb0)\xe0\xb0\x05%\xb0\b%\b X\x02\x1b\x03Y\xb0\x05%\xb0\x03%CH\xb0\x04%\xb0\x07%\b\xb0\x06%\xb0\x03%\xb0\x01`CH\x1b!Y!!!!!!!-,\x02\xb0\x04%  F\xb0\x04%#B\xb0\x05%\b\xb0\x03%EH!!!!-,\x02\xb0\x03% \xb0\x04%\b\xb0\x02%CH!!!-,E# E\x18 \xb0\0P X#e#Y#h \xb0@PX!\xb0@Y#XeY\x8a`D-,KS#KQZX E\x8a`D\x1b!!Y-,KTX E\x8a`D\x1b!!Y-,KS#KQZX8\x1b!!Y-,KTX8\x1b!!Y-,-,-,-,-, \x8a\b#KS\x8aKQZX#8\x1b!!Y-,\0 \x8aI\xb0\0QX\xb0@# \x8a8\x124\x1b!!Y-,F#F`\x8a\x8aF# F\x8a`\x8aa\xb8\xff\x80b# \x10#\x8a\xb1@@\x8apE` \xb0\0PX\xb0\x01a\xb8\xff\xba\x8b\x1b\xb0F\x8cY\xb0\x10`h\x01:-, \x8a#Id\x8a#SX<\x1b!Y-,KRX}\x1bzY-\0@\xf4wB\b\x1fvB\b\x1fuC\b\x1ftC\b\x1fsC\b\x1frC\b\x1fqB\b\x1fpB\b\x1foB\b\x1fnB\b\x1fjB\b\x1fiB\b\x1fhC\b\x1fgC\b\x1ffC\b\x1feC\b\x1fdB\b\x1fcB\b\x1fbB\b\x1faB\b\x1fZB\b\x1fYB\b\x1fXC\b\x1fWC\b\x1fVC\b\x1fUC\b\x1fTB\b\x1fSB\b\x1fRB\b\x1fQB\b\x1fMB\b\x1fLB\b\x1fKC\b\x1fJC\b\x1fIC\b\x1fHC\b\x1fGB\b\x1fFB\b\x1fEB\b\x1fDB\b\x1fCA\b\x1fBA\b\x1f#\x0eE\"\fE!\nE \bE\x1f\x06E\x1e\x04E\x1d\x02E\x1c\0E\x1a\b\x18\b\x16\b\x14\b\x12\b\x10\b\x0e\b\f\b\n\b\b\b\x06\b\x04\b\x02\b\0\b\x01\0\x01\x01\0\t\x01\x02\0\b\0((\0\0\0\x12\x11\b\x02@7\x0f?\xb8\x01\0\xb1\x16\x01K\xb8\x07\xffRK\xb0\bP[X\xb1\x01\x01\x8eY\xb0\x12K\0KTB\xb9\0\x01\x01\xff\x85\x8dB\x01\x1dK\xb0\x1dSX\xb0`\x1dYK\xb0\x80SX\xb0\0\x1d\xb1\x16\0BY+\xb1\x02\0B\xb2\x17\x11\x01\x88 \xb0\"Q\x8a#x\xb0@Rx\xb1\n \x88\xb8\x10\0Ux\xb1\x02\x01B\xb0\x03\x1c!!\x01EiS#C\\ZB\x01KPX\xb1\b\0BYC\\X\xb1\b\0BY\x16\x10p>\xb8@\0 \xb0$Ec\xb0\x02E \xb0\0TX!\xb8\x06\0Yb\xb0\x12CX\x1b\xb8\x02\0`\xb8\x04\0b#\xb8\x02\0`\xb8\x04\0b\xb0\x0b+#Y\xb0\x0b#B\xb0\n#B\0??\x18+\x10<\x01/\x06\f\xb0\x06#B\xb0\x07#B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\x06)\0\0\x06)\0\0\x05\xfe\0(\x04!\0\0\0\0\xff\xc9\0\0\xff\xcb\0\0\xff\xc3\xfe\0\xff\xdb\x06\xfc\0\x10\x01F\xff\xf0\x03H\0\0\x06o\0\0\x02\xf0\0\0\x06/\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\0\0\0\0\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\0\0\0\0\0\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\0\0\0\0\0\0\xc4\0\xd1\0\xe1\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\x93\0\0\0\0\0\0\0\0\0\x93\0\xcf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\0\x93\0\x93\0\x93\x01\x04\0\0\0\x93\0\x93\0\x93\0\x93\x01\xc9\x01\xe6\0\0\0\x8d\0\0\0\x8d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\0\xb0\0q\0q\0\x8f\0\x8f\0\\\0\\\0\0\0\0\0\xc2\0\xc2\0\xc2\0\xc2\x01\b\x01@\x01\xcc\x02\x8c\x03N\x03\xf8\x04\x18\x04l\x04\xc6\x05&\x05d\x05\xa2\x05\xc6\x05\xf2\x06\x18\x06\x86\x06\x9e\x07\n\x07\xaa\b\0\bn\b\xd0\b\xfc\t\x96\t\xee\nB\n\xa6\n\xdc\x0b\x16\x0bP\x0b\xce\f\xae\f\xec\rb\r\xca\x0e\x12\x0ed\x0e\xa4\x0f\x1e\x0fb\x0f\x9e\x0f\xf0\x10@\x10n\x10\xba\x10\xf4\x11\\\x11\xb0\x12,\x12\x8c\x13\x1c\x13L\x13\x90\x13\xc6\x14 \x14\x84\x14\xd8\x15\x1c\x15R\x15p\x15\xa8\x15\xe6\x16\x06\x162\x16\xcc\x17^\x17\xd0\x18n\x18\xe8\x19\x96\x1aV\x1a\xde\x1bd\x1c\b\x1c\xa2\x1d\x14\x1d\xce\x1e^\x1e\xe0\x1ft \x06 j!$!\xb2\"@\"\x96#\x1c#\x8e$:$\xa2%\x12%0%\x9e%\xe2&&&\x9a'T'\xec(f(\xa2)n)\xc0*z*\xe2+L+|,*,J,\xa0,\xf8-V-\xf8. .\x88.\xe2/\x10/j/\x94/\xee0J0\xe01\x8c2\xbe3@3\xa44\x044t4\xf65\x806\x106~787\xae8\"8\xa49@9\xa2:\0:n:\xf6;^;\xdc<h<\xf0=\x88>2>\xe4?8@\x04@n@\xd4AJA\xd8BNB\xb2C^CjCvC\x82C\x8eC\x9aC\xa6D\x98D\xa4D\xb0D\xbcD\xc8D\xd4D\xe0D\xecD\xf8E\x04E\xa4E\xb0E\xbcE\xc8E\xd4E\xe0E\xecFXG\bG\x14G G,G8GDG\x9eG\xaaH\fHDHzH\x9aH\xd4I\x02I\\I\xacI\xf6JBJdJ\x84J\xc6K\x06KFK\xc2L:L\xb4L\xfaMdM\x94N\fNFN~N\xb0OnP\x06P~P\x9eP\xd6Q&QzQ\xbeR\nR\x9cS.S\xdcT\x92U,U\xdaV\x84WDW\xe4X\x88Y\x0eY\xa8Z\x1eZ\xb2[:[\xcc\\j]$]\x84]\xda^J^\xba_@_\xb2`N`\xfaa\x90a\xf8b\xb0cBc~c\xe0d d\x82\0\0\0\x02\x01\"\0\xcf\x05\x9e\x055\0g\0\x87\0\0\0\x06\x07\x0e\x01\x07\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x1e\x01\x17\x16\x17\x16\x1d\x01\x0e\x03#\"&'.\x01'\x0e\x01#\"&'\x0e\x01\x07\x0e\x01#\"'&=\x0167>\x017&'&547>\x017.\x01'&=\x01>\x0332\x16\x17\x1e\x01\x17>\x013632\x16\x17>\x017>\x0132\x1e\x01\x17\x16\x15\x14\x07\x01654'.\x02'\x0e\x01#.\x01#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x02\x05\x9c\n\n\x1c=!\x1c\n\x06\x03\t3\"\x197\x13\x04\x02\x01\x02\x12\x1b$\x12\x18&\f\f(\fH\xcbc<i\x1f\x0f5\x1a\x0f#\x12'\x1a\x15\x03\x19\x196\x151\x18\x11\x02\bT:\x0f%\x11\r\x01\x12\x1b#\x13\x14$\f\x10\"\b2\x87@\x18\x18[\x8e)\r.\x15\x0f(\x15\x13!\x18\x06\x05\x01\xfe\xf1\x02\x07\x0b3R.\x05\x17\x1c\x0f\x11\x14:{hG\x06\x02\x0e\x11F^6R\x8fpG\x04\xcf\x18\n%J$9G+*\x1d\x1fS\x861\x19A,\n\n\x07\x06\x06\x11\x1e\x16\r\x15\x1a\x1c.\x0b12\"\x15\x14;\x1a\x10\x10\x1c\x15\x1e\x07\x1d\x19\x19;\x1cDZ?@\x19\x18S\x9b<\x16;\x1d\x15\x14\x05\x11\x1f\x18\x0e\x14\x14\x1a6\r\x1d+\n<%\x107\x1c\x16\x13\x0e\x16\x0f\x0b\f\x05\x04\xfe1\x15\x15&%9Z=\t\x03\x04\x03\x016Zs;\x12\x120-?_7#M~\0\0\0\x02\x01\x9a\xff\xff\x03\"\x07\t\0\x11\0-\0\0\x01\x0e\x01#\"&'\x13>\x0332\x17\x16\x1d\x01\x02\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x02\xa4\x03;,!/\x02\x7f\x03\x12\x1a!\x10-\x19\x15\x80\x1b(2\x18\x190\"\t\x07\x01\x01\x03\x1c(1\x18\x191\"\t\x06\x01\x01\x02\x18*0+'\x04\xa0\x15\"\x17\x0b\x17\x13+\x04\xf9\xb94#\x13\x13$\x1b\x13\x17\b\t\x0f#4#\x13\x13$\x1b\x13\x17\b\t\x0f\0\0\x02\0\xc8\x04u\x03-\x06\xfb\0\x10\0!\0\0\x01\x0e\x01#\"'&7\x13>\x0132\x17\x16\x1d\x01\x01\x0e\x01#\"'&=\x01\x13>\x0132\x17\x16\x07\x02\xf3\x04:!#\x19\x17\x019\x04;\"#\x1a\x14\xfeL\x04:\"#\x1a\x14;\x04:\"#\x1a\x16\x01\x04\xc7(*\x16\x12,\x01\xd6)+\x16\x12)\x04\xfe0)*\x16\x11*\x04\x01\xd9(*\x16\x12,\0\x02\0\xc8\0)\x05\xd9\x05\xdf\0\\\0`\0\0\0\x06#\x0f\x0132\x17\x16\x1d\x01\x0e\x01+\x01\x03\x0e\x01#\"'&7\x13\x07\x03\x0e\x01#\"'&547\x13#\".\x01'&=\x01>\x01;\x017#\"'&=\x01>\x01;\x01\x13>\x0132\x1e\x01\x17\x16\x1d\x01\x06\x15\x06\x07\x033\x13>\x0132\x17\x16\x1d\x01\x07\x0332\x17\x16\x1d\x01\x05\x07!7\x05\xd6.+\xef/\xda,\x15\r\x02/+\xf8q\x0b2\x1b!\x19\x17\x04g\xf5q\x047 !\x19\x15\x01t\xd4\x16 \x12\x03\x02\x03.*\xee(\xdc+\x14\x0e\x03.*\xf3d\r.\x1b\x11\x1f\x16\x06\x04\x01\x01\x02W\xf8_\t3\x1d#\x19\x14\x01^\xdd,\x15\r\xfd\f/\x01\x01+\x03\x9b3\x01\xbc\x1c\x14\x18\t\x1d3\xfe^\x1f\x1e\x16\x12:\x01\x8b\x01\xfeb')\x16\x11\x1e\x05\x07\x01\xa9\x11\x17\x0f\n\x0b\x06\x1d2\xa9\x1c\x15\x1a\x06\x1d3\x01\x8a\x1d\x1e\r\x15\x0e\f\r\x06\x05\x05\x06\x05\xfe\x9d\x01\x8f#!\x16\x13\x1d\b\r\xfe\x86\x1c\x14\x18\bO\xb6\xb6\0\0\x03\x01,\xfe\xe5\x05\xc4\bg\0\r\0\x1c\0\x86\0\0\x01\x13\x06\x07\x0e\x03\x07\x14\x17\x16\x17\x16\x1367>\x017654'.\x01'&'7\x16\x17\x1e\x03\x17\x16\x15\x14\x07\x0e\x03\x07\x06\x07\x06\x15\x0e\x01#\"'&57\".\x03'&547>\x0132\x17\x16\x1d\x01\x14\x17\x1e\x03\x17\x13&'.\x03'&547>\x057\x13>\x0132\x17\x16\x1d\x01\x06\x07\x16\x17\x1e\x02\x17\x16\x17\x16\x1d\x01\x0e\x03#\"'.\x02'\x03^,\x13\x12(I9$\x05\x17\x1a0.\xa1E6?R\b\x02\x12\x17V<\x12\x13\x11('4aQ8\f\b\x03\tDf\x84G+,\x12\x04<\"!\x19\x16\x11Ffe_C\x12\x0e\x02\x03;\"#\x1a\x15\x0b\x0e1?Ae>\x0e\x0e8fZ@\x0f\x0b\x02\x066SlwD\x04\x17\x03;\"#\x1a\x15\x0b\x0b\x1e\x1c8bV)\x16\t\x04\x01\x0f\x18#\x13\x1b\x14%GID\x04B\x01\xfb\b\n\x15>CI7/!) \x1f\xfcn\x0f\x1f$wZ\x16\x14)/>O!\t\n\xc7\x13\x13\x1aFXcF*\x1e\x1c d\x98mJ\x15\r\t\xcd\x02+0\x19\x14,\xc0\x16+@V5\x1d,\x0f\x117.\x18\x15%\x14\x18\x15\x1b+\"\x19\r\x02\xc6\x06\x06\x177CW8(/\x13\x16=zl\\C\x15\x01\x01\b//\x19\x15&\n\x83w\x03\x05\f&4\x1d\x0e\x16\x0e\x10\t\x11\"\x1c\x12\x11\x1a*\x1d\f\0\0\0\x05\0\xc8\xff\xfa\x07.\x07\x12\0\x13\x001\0N\0l\0\x89\0\0\0\x06\x01\x0e\x01#\".\x027\x007>\x0132\x1e\x01\x17\0\x0e\x02#\".\x01'&547>\x0732\x1e\x01\x17\x16\x15\x14\x07'654'.\x02'&+\x01\x0e\x03\x07\x06\x15\x14\x17\x1e\x0232>\x02\0\x0e\x02#\".\x01'&547>\x0732\x1e\x01\x17\x16\x15\x14\x07'654'.\x02'&+\x01\x0e\x03\x07\x06\x15\x14\x17\x1e\x0232>\x02\x06\x89\x14\xfbU\x0f+\x17\x13!\x18\b\r\x04\xaf\x1e\x10\x19\x0f\x13\"\x16\x06\xfd\tHo\x8cJV~N\x0f\x0b\x02\x03\x18+<P;=?\x1eVxG\r\b\x02\xa3\x02\x05\t'9\x15\x13\"\x06'U;\x13\x03\x02\x07\n,@*.N=&\x043Ho\x8cJV~N\x0f\x0b\x02\x03\x18+<P;=?\x1eVxG\r\b\x02\xa3\x02\x05\t'9\x15\x13\"\x06'U;\x13\x03\x02\x07\n,@*.N=&\x06J!\xfa\x02\x18\x18\x0e\x161#\x06\x18\x15\t\n\x10\x1a\x0f\xfe\xd6\x80Z0CjD-0\x16\x15 KH?8\x18\r\x04EjA,+\x15\x15\x02\x11\x11\x1c\x19(8\x1f\x06\x05\x01/K0\x1b\x10\x10\x1e\x1d); \x1b2I\xfb\x8f\x80Z0CjD-0\x16\x15 KH?8\x18\r\x04EjA,+\x15\x15\x02\x11\x11\x1c\x19(8\x1f\x06\x05\x01/K0\x1b\x10\x10\x1e\x1d); \x1b2I\0\0\0\0\x03\x01,\xff\xc6\x07T\x07\x10\0P\0h\0z\0\0$\x06#\".\x01'\x0e\x03#\".\x03'&547>\x037.\x02'&547>\x0332\x1e\x01\x17\x16\x15\x14\x07\x0e\x05\x07\x16\x1767632\x17\x16\x15\x14\x07\x0e\x03\x15\x1e\x0232\x17\x16\x1d\x01\x01654'.\x02#\"\x0e\x02\x07\x06\x15\x14\x17\x16\x17>\x03\x02\x03\x0e\x03\x07\x06\x15\x14\x17\x1e\x023267\x07Q0-P\x8bz\x9d*~\x8d\x99O9rfU;\x0e\n\x02\tHn\x8cE\f\"\x1b\x07\x04\x01\tP|\x9dTDuQ\x15\x0e\x01\x07+@S_i*\x88\xcf\x1d/*A\r\x0e:\x06\x17#&(\x86]g=.\x16\x0e\xfdX\x01\t\n'5\x1c1ZG.\x06\x01\x05\x0b7+u`B\xf6\xac'iT8\x06\x01\x12\x17Qg4\x88\xcdG\x02<\/N}+[A$\x1e9Pg=)0\x13\x16d\xa6\x8dt-'^`3\x1f\"\x12\x12c\xa2t@9aA17\x11\x11R\x84jSD7\x15\xe4\xca5\x8b}\x04\x184\x12\x13JY[D\x02t@%!\x18\x1d\t\x05\x86\x07\b\x1d\x19\x1f)\x18#?^;\f\f\x1a\x1cau\x13@Xy\xfc\xb8\x01%\x19Yjw?\r\f0'1F%bL\0\0\0\x01\0\xc8\x04\x85\x01\xb4\x07\x05\0\x11\0\0\x01\x0e\x01#\"'&=\x01\x13>\x0132\x17\x16\x1d\x01\x01y\x04;\"#\x19\x14;\x04:\"\"\x1a\x15\x04\xd8)*\x16\x11*\x04\x01\xd9(*\x16\x11)\x04\0\0\x01\0\xc8\xffl\x03\xa9\x07\xde\x006\0\0\0\x07\x0e\x03\x07\x0e\x02\x02\x1e\x02\x17\x1e\x01\x17\x16\x17\x16\x0e\x01#\"&'.\x03'&'&547>\x037>\x017632\x1e\x01\x17\x16\x1d\x01\x03\xa7\x186{r_\x1b&;\x0b\f\x15'9)\x1bI*\x11\b\x05\x034'\x194\x19+WK=\x11\x11\b\x04\b\r2SsN={1!'\x13!\x17\x06\x04\x07p\x1a>y\x7f\x8aOk\xc5j\xfe\x86qnuE,W \x10\x11\x0f.-\x16\x18+s\x80\x85>B\x875:Wa\x9f\xd6\xce\xc0WE{6#\x0f\x18\x0f\b\x10\t\0\0\0\x01\0\xc8\xffl\x03\x89\x07\xde\0>\0\0\0\x0e\x03\x07\x0e\x03\x07\x0e\x01#\"'&57467>\x017>\x065654'&'.\x03'&>\x0332\x17\x1e\x01\x17\x1e\x02\x17\x16\x15\x14\x07\x03\x80\n\x11\x1b* \x1dVfm5\x1d6\x18(\x16\x14\x01\x15\x18-[#6R=*\x1f\x16\f\x05\x05\t\x12\fCWc+\r\x01\x12\x1a\"\x13)\x1c$c1:N)\x03\x01\b\x03\x92G\x87\x84\x84C=\x85\x80s+\x18\x15\x16\x14\x17\x01\x18\"\x10\x1fX,Eunq\x80\x96_\x027441bkO\x8a\x7fy>\x14/\x1e\x17\x0f$6{EW\xc0\xcek\x19\x19RS\0\x01\0d\x03\xcb\x04\x02\x06\xfc\0@\0\0\0\x06\x07\x05\x1e\x01\x07\x06#\"'.\x01'\x07\x0e\x01#\".\x01'&=\x016?\x01#\"'&5463\x17'&>\x0332\x16\x1f\x0167>\x0132\x17\x16\x06\x0f\x0172\x17\x16\x1d\x01\x04\x01*(\xff\0\x86\x01\x17\x14\x1f\x04\x05%)w\xa7\x10)\x18\x11\x1e\x16\x06\x04\x02\n\xab\xde+\x14\r.*\xf3\x8b\x0b\x01\x12\x19!\x11\x14\"\f\x87\x01\xc9\x0e\"\x12$\x19\x13\x02\x16\xb6\xe8+\x14\r\x05I/\x03\x01\xf6\"\x1b\x18\x01\x04 \xea\xd7\x19\x17\r\x14\x0e\x0b\r\x05\x13\x0e\xd3\x1b\x14\x18\x182\x02\xdc\x12)\x1c\x15\r\x12\x14\xf2\x02\xfb\x10\x10\x1a\x14<\x18\xd1\x01\x1b\x14\x18\x01\0\x01\0d\0\xe8\x04\xf8\x05;\0&\0\0\0\x06#!\x02\x07\x0e\x01#\"'&7\x13!\"'&=\x01>\x013!\x13>\x0132\x17\x16\x15\x03!2\x17\x16\x1d\x01\x04\xf5..\xfeN \x10\f1\x1b#\x1b\x16\b&\xfe|.\x15\x0e\x030-\x01\x7f*\x03:\"#\x1a\x15#\x01\xac/\x15\r\x02\xed-\xfe\x89&\x1f\x1c\x17\x13C\x01j\x1d\x15\x19\b\x1f5\x01\x81**\x16\x13+\xfe~\x1d\x15\x19\x0e\0\x01\0\xc8\xfew\x02I\0\xcf\0'\0\0\x04\x06\x07\x0e\x01\x07\x06#\"'&5>\x017>\x017\".\x01'&54?\x01>\x0332\x16\x17\x16\x17\x15\x14\x07\x02E\b\b\x1e~S\x1b\x1f#\x13\x0e\x02\x16\x144T\x13\x07+\x1e\x07\x06\x01\x01\x03\x1b(1\x181J\x07\x03\x01\x02\x01+\x18W\x9c=\x15\x1a\x13\x16\x1c#\x10%d2\x14!\x15\x11\x13\b\b\x0e\x1f/ \x11<2\x14\x14\b\x0f\x11\0\0\x01\0d\x02\xb6\x03\xc5\x03\\\0\x14\0\0\x01\x15\x14\x07\x06\x07!\"'&5\"54763!2\x17\x16\x03\xc5\x17\x18.\xfdN.\x15\x0e\x01\x18\x18-\x02\xb3.\x15\r\x03\x0b\x03\x1e\x19\x1a\x01\x1d\x15 \x01\x1f\x1a\x1a\x1d\x15\0\0\0\x01\x01,\xff\xfb\x02F\x01\x13\0\x1b\0\0$\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x02@\x1c*3\x1a\x1b3$\t\x06\x01\x02\x03\x1b*4\x1a\x1b2$\n\x06\x01\x02_1\"\x11\x11#\x19\x12\x16\b\t\x0e 1\"\x11\x11#\x19\x12\x16\b\t\x0e\0\x01\0\xc8\xfe\x7f\x04L\b\x03\0\x15\0\0\x01\x0e\x01#\".\x01'&547\x01>\x0132\x17\x16\x15\x14\x07\x01x\r1\x1b\x13!\x19\x06\x04\x07\x02\xcf\n7\x1c#\x1b\x13\x01\xfe\xcb&&\x0e\x1a\x13\x0b\x0e\x12\x15\b\xba('\x1b\x13,\b\t\0\x02\x01,\xff\xf9\x05\xea\x07\x0f\0)\0L\0\0\0\x0e\x04#\".\x02'.\x025&547>\x037>\x03732\x17\x1e\x02\x17\x16\x1d\x01\x06\x07#6=\x01.\x01'&$\x0e\x02\x07\x0e\x03\x07\x0e\x01\x17\x1e\x01\x17\x1e\x0332>\x04\x05\xd8+Jg\x87\xe7fO\x80fO\x1e\x1f&\x14\x01\x07\b\x15\x19 \x14\x1eh\x87\xa4\xaf\x04\xabPQZ1\n\b\x02\t\xb2\n\x02.:6\xfe\xf9mIA\x17'5$\x17\b\x05\x01\x05\x04\x11\x0e\x120EbIE\xaf`J4\x1f\x02\xe5\xbe\xb9\xa7\x82L,NkC>\x98\xa8N\x05\x05HG`\x8ev`.K\x92rG\x01IH\xa5\xbfeVU\"hatn$~\xd7qf\x10**<!8z\x8a\x9c\\4e7<l&5iW4;g\x88\x91\x90\0\0\0\x01\x01^\xff\xf7\x02\x82\x07\x0e\0\n\0\0\x007\x16\x17\x03\x06+\x01\"'\x13\x01\xd4P[\x03s\x10O\x03M\x02l\x06\xf8\x16\x0eS\xf9\xa9_`\x06d\0\x01\x01^\xff\xf8\x05\xc5\x07\b\0H\0\0$\x06#\x04#\"&'&'&=\x01>\x017>\x01\0>\x027654'.\x02#\"\x0e\x02\x07\x06#\".\x01'&54767>\x0332\x1e\x01\x17\x16\x15\x14\x07\x0e\x03\0\x07\x052\x17\x16\x1d\x01\x05\xaf1-\xfd\tO$A\x16%\b\x05\x02\x1b!1]\x01\xa2\x82mL\t\x02\x0b\x10DgA4XRU0\x1d\x1c\x14 \x15\x05\x04\x01\x03%)ct\x86Nk\xa8n\x19\x11\x03\x0bV|\x96\xfe\x98_\x02\xd8.\x16\x0e5<\x01\x04\f\x10\x19\x12\x11\n\x1b.\x1e-\\\x01x\x87\x9e\xb8h\x18\x141)<Q,\x1b0A%\x18\x13\x1d\x11\r\f\x06\x06)\x1e#LA*P\x8b\\AI\x1d ~\xdf\xc0\xa0\xfe\xc7[\x02 \x18\x1d\t\0\0\0\0\x01\x01^\xff\xff\x05\xa1\x07\x10\0s\0\0\x01#\"/\x01\"'.\x01'&=\x01>\x017676;\x0167>\x0276=\x01.\x02#\"\x0e\x02\x07\x0e\x01#\"&'547>\x0332\x1e\x04\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x16\x17\x16\x17\x16\x15\x14\x07\x0e\x05#\".\x02'&=\x01>\x0132\x16\x17\x1e\x0332>\x027654'.\x01'&\x03\x9a$#\x1e5\r\x0f\x13\x16\x04\x02\x02\r\x14\n\x0f\\:\"C:LH\x17\x0f\f\x044\xd3\\7WF6\x14\r#\x14&<\x03\x0b\x1eQh\x85R@2\xb5sc$\x07\x02\n\x0b$-(A30=\x1c\x12\x03\bBc\x7f\x8a\x8eBR\x85hQ\x1e\x0b\x03<&\x14#\r\x146FW7\\\xa1wL\x07\x02\x12\x19gM6\x03r\x01\x02\x06\b\x18\x0f\x07\t\x06\x13(\x13\f\t\x02\x05\x13\x19L)(\x1f!\x10'\x99Z\x19-=&\x15\x168$\b\x16\x144ZD'\x02&ct\x877\x12\x13)/*O=:\"\x1e8J`;N #L\x97vS4\x19'DZ4\x14\x16\b$8\x16\x15&=-\x19/X\x82=\x18\x18B6?a\x1a\x11\0\0\0\0\x01\x01^\xff\xf8\x06\x16\x07\b\x006\0\0\x01&5476\x01>\x0176;\x01\x1e\x02\x17\x16\x15\x14\x07\x01!\x13>\x0132\x17\x16\x15\x14\x07\x03!\x16\x17\x16\x1d\x01\x0e\x01#!\x03\x0e\x01#\"'&7\x13!\"\x01l\x0e\x02\b\x01\xa1\b\x1c\x13\x10\x11\x04\x12 \x16\x05\x03\x05\xfe\x8e\x01\xd49\x04:\"#\x1b\x15\x017\x01\x03*\x15\x0e\x021-\xfe\xf8\"\x04:\"\"\x19\x17\x01\"\xfd\xb2/\x01\xa7\x13\x19\t\x0b%\x04\xb5\x19\x1f\b\x07\x01\x10\x1c\x10\x0b\x0b\x11\x10\xfb\xaa\x01\x92,.\x18\x14#\x06\x06\xfen\x06\x1e\x17\x1b\n :\xfe\xce,-\x18\x130\x019\0\x01\x01^\xff\xff\x05\xeb\x07\n\0L\0\0\0\x0e\x04#\".\x02'&=\x01>\x0332\x16\x17\x1e\x0332>\x027654'.\x02#\"\x0e\x02\x07\x06'&5\x13>\x013%2\x17\x16\x1d\x01\x0e\x01\x07!\x03>\x0232\x1e\x01\x17\x16\x15\x14\x07\x05\x9b@`}\x8b\x96JK\x83lT\x1e\t\x01\x12\x1c\"\x13\x16%\x0b\x134EV7b\xa3xK\t\x04\t\x0eO\x81]0KIL1F\x17\x10a\x055'\x02\xd4.\x15\x0e\x03/,\xfd\x82JK?E-\x93\xc5r\x12\x0b\x04\x01\xe7\xa5\x83b> (If=\x15\x12\x07\x12 \x17\r\x15\x17&C5\x1e:j\x99V(%5,FW(\n\x13\x19\x0f\x10&\x14\x1e\x02\xf9\"6\x01\x1f\x16\x1b\t!2\x06\xfd\xe4\x15\x0f\x05R\x93d@D*-\0\0\0\0\x02\x01^\xff\xff\x05\xa7\x07\f\0+\0A\0\0\0\x0e\x02#\".\x03'&547>\x02\x12\x0067632\x17\x1e\x03\x0e\x01\x04\x06\x076\x1e\x02\x17\x16\x15\x14\x07#6.\x02\x0e\x03\x07\x06\x15\x14\x17\x1e\x0232>\x02\x05\x98Y\x94\xc6zX\x97yZ8\x0b\b\x03\x0b=T\x9f\x01\x0b\xe6\x1f\x10\x0f\f\n\x17\x16\x06\x03\x04!\xfe\xe7\xacy\xe0\xe2\xa0g\x16\x14\x03\xb1\x02\x1aG\xd0\xfaWO\r\x04\x03\x16\x1bf\x88JT\x85^:\x01\xbc\xd3\x97S0Qn~D),\x1a\x1aw\xc9\xb3\x01\x12\x01\x13\xad\t\x05\x03\b\x1a\x0f\r:\x1f\xe6\xb8\xcff\x14V\x92aDO\x1e [j\x83@a=vP*\x17\x19@7Je56i\x94\0\0\x01\x01^\xff\xf7\x05x\x07\b\0\x18\0\0\0\x07\x01\x06+\x01.\x017\x01!\"'&=\x01>\x013!\x16\x17\x16\x1d\x01\x05w\x0e\xfd%#*\x02+@\x10\x02\xa1\xfd*.\x15\x0e\x030-\x03p'\x15\x0e\x06\x9f \xf9\xa5-\x014C\x05\xdf \x18\x1c\n!;\x04\x19\x13\x1a\x03\0\0\x03\x01^\xff\xf5\x06\x0f\x07\x0b\x008\0R\0n\0\0\0\x0e\x04#\".\x01'&547>\x037.\x02'&547>\x05732\x17\x16\x17\x16\x15\x14\x07\x0e\x03\x07\x1e\x02\x17\x16\x15\x14\x07\x03654'.\x02#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x02\x17>\x03\x03654'.\x02'\x0e\x05\x07\x06\x15\x14\x17\x1e\x0232>\x02\x05\xceDf\x7f\x85\x839n\xc5\x8f&\x1e\x03\x077t\xb5sS\x83G\f\x07\x02\x0b;Vjl_@\r?y\x86YM\x02\r:Zt11qN\x14\r\x02z\x01\x10\x15=P\xa41n^A\n\x01\x13\x16^\x88L6qX9-\x02\x11\x17Ts9,qkbL0\x05\x02\x15\x1ab\x86JU\x97vJ\x01}\x8ajL1\x17:tZDX\x19\x1bd~vq5%X]3!%\x13\x16dw^I.\x11\x03\x14\x17dXq\x11\x11o\x87hR\x1a\x1c\\uJ3<\x185\x03\xba\t\t&\x1c\".,&C]R\t\t(\x1d%>>\"\x16@Oa\xfc\x9b\x14.8,;ZE\x1a\x12.3>HUL\x13\x12;,8D\x1f)Lm\0\0\0\x02\x01^\xff\xfc\x05\x87\x07\b\0(\0;\0\0$\x06#\"'&7\x13\x0e\x01#\".\x01'&54747>\x0532\x16\x1767632\x17\x16\x1d\x01\x0b\x01.\x01#\"\x0e\x03\x17\x1e\x0232>\x027\x04\xdb=\"\"\x19\x14\x029/\x9f`}\xc3|\x19\x07\x01\x02\x06>l\x87\x92\x99I)P\\\x12\"\x0f\x0f\x16\x17'\xa7!7_2W\xa8\x8aU\n\x05\x12X\x83P1bSK\n+/\x1a\x14$\x02\x93\x15)_\xabw;3\x10\x10\x0f\x0eI\xac\x82aA \r\x1f\x1b\f\x05\t\x101\x02\xf9\x9b\x05\xaf/\x1d6f\xa0nIVu;\x11)=@\0\0\x02\x01,\xff\xfb\x02\x98\x04F\0\x1b\x007\0\0\0\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x02\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x02\x92\x1c*3\x1a\x1b3$\t\x06\x01\x02\x03\x1b*4\x1a\x1b2$\n\x06\x01\x02U\x1c*3\x1a\x1b3$\t\x06\x01\x02\x03\x1b*4\x1a\x1b2$\n\x06\x01\x02\x03\x921\"\x11\x11#\x19\x12\x16\b\t\x0f 1!\x11\x11\"\x19\x12\x16\b\t\x0f\xfc\xad1\"\x11\x11#\x19\x12\x16\b\t\x0e 1\"\x11\x11#\x19\x12\x16\b\t\x0e\0\0\0\0\x02\x01,\xfe\x95\x02\xfd\x04<\0\x1b\0C\0\0\0\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x02\x07\x0e\x01\x07\x06#\"'&=\x01>\x017>\x017\".\x01'&54?\x01>\x0332\x16\x17\x16\x17\x15\x14\x07\x02\xf7\x1d*4\x1a\x1a3#\t\x06\x01\x02\x03\x1b)5\x1a\x1a2$\n\x07\x01\x02S\x10\x1e}R\x1f\x1b#\x14\r\x01\x16\x145S\x14\x07+\x1f\x07\x06\x01\x01\x03\x1b'1\x1a1H\t\x03\x01\x02\x03\x881\"\x11\x11#\x19\x12\x16\b\t\x0f 1!\x11\x11\"\x19\x12\x17\x07\t\x0f\xfca/W\x9c=\x15\x1a\x13\x16\t\x13#\x10%d2\x14 \x16\x11\x13\b\b\x0e\x1f/ \x11<2\x14\x14\b\x0f\x11\0\0\x01\0d\x01\x02\x04\x82\x052\0\x1e\0\0\0\x06\x07\t\x01\x16\x17\x16\x1d\x01\x0e\x03#\"'\x01&=\x0167\x016;\x01\x16\x17\x16\x15\x04\x7f+\x18\xfdH\x02y\x1a\n\x07\x01\x13\x1d(\x16 \x1b\xfd\x10*\x025\x03\\\"\x19\t\x1b\x19\x13\x04\xbf.\n\xfe\x81\xfe\x96\x0f\x12\x0e\x0f\x06\x11\x1f\x19\x0f\x12\x01\xb2\x1b%\x04'\x1d\x01\xd7\r\x03\x1c\x18\"\0\0\0\x02\0d\x01\xf2\x05\"\x043\0\x12\0$\0\0\x01\x15\x14\x07\x06\x07!\"'&=\x01>\x013!\x16\x17\x16\x02\x06#!\"'&=\x01>\x013!2\x17\x16\x1d\x01\x05\"\x17\x18,\xfc\x1d.\x15\x0e\x030-\x03\xd91\x15\x0e50-\xfc%,\x15\x0e\x030+\x03\xdb.\x15\x0e\x03\xe1\x04\x1d\x18\x1b\x01\x1d\x14\x19\t\x1f5\x01\x1c\x16\xfe'5\x1d\x15\x19\t\x1e5\x1d\x15\x19\t\0\x01\x01,\0\xf8\x05R\x05E\0!\0\0\0\x06\x01\x06#\".\x01'&=\x01>\x017\t\x01&=\x01>\x0332\x16\x17\x01\x16\x17\x16\x1d\x01\x05P=\xfc\xae\x1c\x1a\x16%\x1a\x06\x04\x01\x1f\x1e\x02\xd9\xfdl\x1b\x02\x14\x1f)\x16\x13%\x0e\x02\xd9\x19\n\b\x02\xed8\xfeO\f\x10\x19\x10\t\x10\x07\x13&\r\x01d\x01\xbb\x17\x1d\x06\x11\x1e\x18\x0e\x0f\r\xfe\x1c\x0e\x0f\x0e\x12\x05\0\0\0\x02\x01,\xff\xf5\x04\xae\x07\b\0<\0X\0\0\0\x0e\x02\x07\x03\x0e\x01#\"'&7\x13>\x03;\x012>\x027654'.\x02#\"\x0e\x02\x07\x0e\x01#\"'&=\x01>\x0532\x1e\x01\x17\x16\x15\x14\x07\0\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x04\xa3Kx\xa0N\x19\x04:\"\"\x19\x17\x01\x1e\x01\r\x1d8+\x11/^M5\x06\x02\x07\x0b6R9?qX;\n\x078 #\x1a\x14\x072Odru9b\x94^\x15\r\x03\xfe)\x1c(1\x18\x191\"\t\x06\x01\x01\x03\x1b(2\x18\x190\"\n\x06\x01\x01\x04\xe1\xb5\x93_\x03\xfe\xe8-/\x19\x141\x01Q\r)+\x1f6ZwA\x15\x15&$3G&%D^9),\x19\x134\x05Fu_G0\x19J\x7fU9>\x1c\x1f\xfb\x1f/\"\x11\x11#\x18\x12\x15\x07\t\r!/\"\x11\x11#\x18\x12\x15\x07\t\r\0\0\x02\0\xc8\0\x05\x07:\x06\xb9\0\x88\0\xa5\0\0\0\x0e\x02\x07\x0e\x01#\"&'\x0e\x01#\".\x01'&547>\x0332\x16\x177>\x0132\x17\x16\x15\x14\x07\x15\x06\x07\x0e\x01\x07\x06\x15\x14\x17\x1e\x02>\x027>\x017654'.\x04#\"\x0e\x04\x07\x06\x15\x14\x17\x1e\x0432>\x027>\x0132\x1e\x01\x17\x16\x1d\x01\x0e\x01\x07\x0e\x03#\".\x03'&547>\x0532\x1e\x03\x17\x16\x15\x14\x07$&#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x02767467>\x017\x07,2U|S\x18F)G^\x10&\x92UK\x8ck\x1c\x14\x02\nZ\x90\xb8g-]\x1b\x05\n2\x1d$\x1a\x17\x01\x01\x02$?\x0b\x02\x03\x06\n.&\x1b\x18\x07Xh\r\x05\n\x11Jesx5`\xbb\xab\x94rI\x0b\x03\x11\x16a\x8b\xa6\xbc`BscR\x1e\f\x17\t\x19!\x12\x02\x01\x03'!\x19`z\x8dFy\xe8\xcd\xaat\x1a\x13\x04\fT\x84\xb3\xd4\xf2\x83Q\xa9\x9a\x83Y\x13\x0b\x06\xfdf;>CuZ:\x07\x01\n\r5P2!:0$\x0e\x07\x02\x01\x02\b#\x15\x03\xb4\xa9\x9c\x863\x0e\x1e<\x1c!7-YC1>\x14\x16h\xb7\x8aQ\r\f\x11\"!\x16\x13\x1f\x06\x05\x07\x05\x05y\xfbu\x13\x11\x15\x10\x1f,\f\t\x12\x13\x07N\xcb\x872+>2TsD$\f<l\x97\xb5\xccl\x1d\x1dC:Q~[<\x1c\x11\x17\x19\b\x04\x03\x12\x1b\x0e\n\t\b\x1b*\t\b\x1b\x1c\x14(Q{\xa4hEQ%'w\xef\xd8\xbb\x8aO\x19;f\x9ai=G4;\"\x135]{E\f\x0b\x1f\x19#/\x19\x0f\x18!\x13\x05\x05\x0f\x1e\x11Q\xa7Q\0\0\x02\0\xc8\xff\xf4\x06d\x07\t\0\x1f\0\"\0\0$\x06#\"&'\x03!\x01\x0e\x01#\".\x01'&5476\x01>\x0132\x16\x17\x01\x16\x1d\x01\t\x01\x05\x06`<#\x1a-\x07\x8e\xfdo\xfe\xda\x0f,\x15\x13!\x18\x06\x04\x01\x01\x03B\x161\x18\x140\t\x01\xa5\x07\xfd\xdf\xfe\xb0\x02\x03$0\x1f#\x026\xfd\xc2\x1b\x17\x10\x18\x11\x0b\f\x07\x04\x15\x06D7\" /\xf9\xc8 \b\r\x05r\xfdb\x01\0\x03\x01,\xff\xf9\x05\x9e\x07\b\0*\0=\0O\0\0\0\x0e\x03\x07\x06#\"'&#\"'&54\x13>\x013!2\x1e\x01\x17\x16\x15\x14\x07\x0e\x03\x07\x1e\x02\x17\x16\x15\x14\x07\x03654'.\x02#\"\x05\x0e\x03\x07\x04>\x01\x12'.\x02#!\x0e\x03\x07\x0432>\x02\x05\x97>`|\x8bJ(VLq\xf0\x1c#\x11\x01\xa8\x04;\"\x01\xbc\\\x9ai\x1a\x11\x03\x07'<P\x1f,jL\x14\t\x01\xd6\x02\n\r>Y9\\\xfe\xf6\n\r\x0f\x0f\b\x01}\xa9X3\x18\x1eh\x8cL\xfe\xb0\x06\x11\x10\x10\x14\x01\x19+^\xa2xL\x01|\x97mI)\b\x05\x04\x07)\x03\x0f\x9f\x05\xce-/O\x8b\\CJ\x1e OqU=\x13\x19e\x80J&5\x16\x19\x039\x13\x14-*;W2\x07~\x89\x84\x86A\x19Rr\xfdm8ClF7\x7f~\x81\xc7\x0b\x1aBu\0\0\x01\0\x96\xff\xf9\x05\xb0\x07\x0e\0H\0\0\0\x06\x07\x0e\x03#\".\x01'&547>\x0532\x1e\x02\x17\x16\x17\x16\x1d\x01\x0e\x01#\"&'.\x03#\"\x0e\x01\x02\x07\x06\x15\x14\x17\x1e\x0232>\x027>\x0132\x1e\x01\x17\x16\x15\x14\x07\x05\x96\n\f:\x92\xa6\xb8_\x9a\xf0\x9e\"\x17\x05\x0b;c\x8a\xb6\xe0\x87E\x86rY\x18\t\t\x05\x032\x1f\x14/\x0e\x10;O`5\x9a\xe7\xa1_\x0f\x05\x15\x1cy\xadhM\x8e\x80m+\x0f'\x13\x13\"\x16\x07\x04\x01\x01`\x1c\x0eMvP*\x83\xe4\x9bhr69f\xf0\xe1\xbd\x89M.Lb2\x10\x17\x13\x14\x0b$/\x11\x1e\x1fH>(\x7f\xdc\xfe\xdd\x8f1/bTz\xa6V!@X7\x14\x15\x11\x1b\x12\r\r\x07\x04\0\0\0\0\x02\0\xfa\xff\xfa\x06\x1f\x07\x0e\0\x1c\0,\0\0\0\x0e\x03\x07\x06#\"'\"'&=\x01\x127>\x0132\f\x01\x16\x17\x16\x15\x14\x07'654'.\x02\x05\x03\x16>\x04\x06\bh\x84\xcb\xe0v2Ut\xb5#\x1a\x14\x92\n\x04:!\x1d\x01\xc7\x01?\xc8'\x18\t\xb2\b\x11\x1c\x9b\xfe\xfe\x96\x82\xd1\xcd\xb6\x9bbN\x02\x9e\xfe\xd1\x86D\b\x03\x06\x1a\x13/\x04\x05\xe1o-1\x06]\xe4\xafm\x8diu\x03lanV\x8c\xab@\x0b\xfa}\x0b\f>m\x99\xc3\0\0\0\0\x01\0\xfa\xff\xfb\x05r\x07\b\x004\0\0\0\x06#\x05\x03\x052\x17\x16\x1d\x01\x0e\x01#%\x03$32\x17\x16\x1d\x01\x0e\x01#\"\x05\x06# '&'&=\x01>\x017\x134>\x0232\x052\x17\x16\x1d\x01\x05o/.\xfdA@\x02/.\x15\x0e\x03/-\xfd\xc6=\x02\x91L.\x16\x0e\x03)-R\xfey(%\xfe\xc1\x1f\r\x04\x04\x01\x04\x06\xa3\x13\x1d$\x13#\x02\xee/\x15\x0e\x06\x85<\x04\xfd\x99\x02!\x17\x1d\n#<\x02\xfd\x93\x02 \x18\x1d\t#6\x02\x01\x14\r\x10\f\x0f\x07\x12\x17\f\x06\t)#\x1d\x13\x01!\x17\x1d\n\0\0\x01\0\xfa\xff\xfb\x05F\x07\t\0'\0\0\0\x06#\x05\x03$\x16\x17\x16\x17\x16\x1d\x01\x0e\x01#\"%\x03\x0e\x01#\"'&=\x01\x13>\x01;\x012$32\x17\x16\x1d\x01\x05C0-\xfd?%\x01q\xaa\x10%\x12\f\x032*\x13\xfd\xf1A\x04;\"#\x1a\x14}\x030-9\x10\x02\x92C.\x15\x0e\x06\x87<\x03\xfd\x9a\x01\x05\x03\t\x1c\x16\x1c\x06$:\x04\xfd7/1\x1a\x14/\x04\x06O\";\x01!\x19\x1f\x06\0\0\x01\0\xfa\xff\xe9\x07\x17\x07\t\0V\0\0\0\x06+\x01\x07\x02\x0e\x02#\"&7\x0e\x02\"$&'&'47>\x0532\x04\x17\x16\x17\x16\x1d\x01\x0e\x03#\"&'.\x03#\"\x0e\x04\x07\x06\x15\x16\x17\x1e\x03>\x027\x06#\"'&5>\x0176%2\x17\x16\x1d\x01\x07\x14/.\xad\x12\x19\x10\x1a\"\x1e7 \b@\xbb\x8d\xaa\xfe\xf7\xad'\x1b\x02\x05\n?f\x8c\xaf\xd0w\xc2\x01\x0eY\b\x03\x01\x01\x12\x1b#\x13\x14$\f Pb|ML\x92\x85tX:\t\x04\x02\x17 \x8a\xc6\xb1\xbeq,\x18\xd0\x16.\x15\x0f\x030,\x16\x02//\x15\x0e\x02\xdd;\xf4\xfe\x8d$\x1c\x12KtV@\x14r\xd3\x91fa07g\xf2\xe2\xce\x9f_\x97\xa0\x0f\f\x0b\t\x04\x13\"\x1a\x0f\x15\x16<V7\x1cFv\xa4\xbb\xd4a0+PRr\x94H\x0f[qL\xe3\x02\x1f\x18%!6\x05\x02\x01 \x17\x1c\t\0\x01\0\xfa\xff\xf9\x06V\x07\x0b\0)\0\0%\x0e\x01\x07\x06#\"'.\x027\x13\x05\x03\x0e\x01#\"'&5\x13>\x0132\x17\x16\x1d\x01\x03!\x13>\x0132\x17\x16\x1d\x01\x05\xc8\x05&\x19\x0b\n\f\n\x12\x1c\x19\x05E\xfc\x8e>\x04:\"#\x1a\x15\x83\x03:\"#\x1a\x155\x03q;\x049\"#\x1b\x14M$+\x03\x02\x02\x04\x11$)\x02\xfb\x02\xfd\b,1\x19\x16#\x06W-1\x18\x18$\n\xfdh\x02\x9c-0\x18\x15.\x04\0\0\0\0\x01\0\xfa\xff\xfa\x03\xc8\x07\x13\0'\0\0\x01#\"'&=\x01>\x013%2\x17\x16\x1d\x01\x0e\x01+\x01\x0332\x17\x16\x1d\x01\x0e\x01#\x05\"'&=\x01>\x01;\x01\x026s.\x15\x0e\x030-\x01\xa7,\x15\x0e\x030+\x83p\x8a,\x15\x0e\x030+\xfeY.\x15\x0e\x030-j\x06W \x17\x1d\t\"<\x01 \x18\x1c\n$9\xfa^ \x17\x1d\n\";\x01 \x18\x1c\t#;\0\0\x01\0\xfa\xff\xfb\x05\xa2\x07\b\x006\0\0\x01\x07\x02\x0e\x01\x07\x0e\x03#\".\x01'&'547>\x01\x172\x16\x17\x1e\x04>\x03\x137#\"'&=\x01>\x013%2\x17\x16\x1d\x01\x0e\x01#\x04\xac\te\x18!\x19-ou=IK^\x86\x17\x12\x03\x04\x042-\x1d,\x06\x05\x02[\x0eXaP:1]\n\xa7.\x15\x0e\x030-\x01\xf0,\x15\x0e\x030+\x06Qf\xfb\xe2j\\$Ai-\x11\x1faF8S\x15,\x11\x153\x02##(\x80<\x05\x07\x1c5Mg\x047e!\x17\x1b\t\":\x01 \x16\x1c\n\"9\0\0\x01\0\xfa\xff\xf3\x06\x05\x07\x12\x000\0\0$\x0e\x02#\"&'\x01\x03\x0e\x01#\"'&5476\x12\x13>\x0132\x17\x16\x15\x03\x01>\x0132\x17\x16\x1d\x01\x0e\x01\x07\t\x01\x16\x17\x16\x1d\x01\x05\x95\x0f\x18#\x13\f\x16\x0b\xfc\xf4S\x04:\"#\x1a\x15\x01\x04g\\\x04:\"#\x1a\x16I\x03J\x10\x1c\x10'\x19\x13\x02\x11\x13\xfc\x83\x03\x0e\x19\t\x05E!\x1d\x12\x07\x06\x02\xf3\xfd\\-1\x1b\x14#\x06\b0\x03>\x02\xf4-0\x19\x15#\xfd\x98\x02\x9e\f\x0f \x1b\x1f\t\x13\"\x0f\xfd9\xfd\x05\x11\x15\x12\x13\x06\0\0\0\x01\0\xfa\xff\xff\x04\xe7\x07\x13\0\x1a\0\0$\x06#$#\"'&56\x13>\x0132\x17\x16\x15\x14\x07\x03%\x16\x17\x16\x1d\x01\x04\xe40-\xfd\0=/\x13\x0e\x02\xc7\x04:!#\x1b\x15\x01\xaf\x02\xd22\x10\x0e<=\x02!\x1a&\x1a\x067.2\x19\x17%\x06\x07\xfa\x0b\x03\x04\x1a\x1b\x1f\x07\0\0\0\x01\0\xfa\xff\xf6\x07j\x07&\0-\0\0$\x06#\"&'\x13\x01\x0e\x01\x07\x06#\"&'\x01\x03\x0e\x01#\"'&=\x01\x13>\x0332\x17\t\x0167>\x0132\x17\x16\x15\x03\x07;;#\x1c-\x06\x13\xfd\xe5\x07\x10\x0b\"#\x17)\x0b\xfee\x8e\x079\"#\x19\x13\xbe\x01\x12\x1b\"\x13'\x1c\x01\xda\x02~\x0e\f\x0e%\x15#\x1a\x15,&0$\"\x04\xba\xfbQ\x10\x16\n\x1b\x1a\x1c\x04\xc6\xfb[,.\x18\x10.\x05\x06m\x12#\x18\x10'\xfa\\\x05\x8b\x1c\n\x10\x12\x19\x15.\xf9\x84\0\0\0\x01\0\xfa\xff\xf7\x06\x82\x07\f\0#\0\0%\x06+\x01\".\x01\x015\x03\x0e\x01#\"'&574\x13>\x0232\x16\x17\x01\x13>\x0132\x17\x16\x15\x05\xee\x0e|\x01\x1d&\x1b\xfd3\x8d\x0b5\x1d#\x1a\x17\x01\x9d\x042:*\x18*\f\x02\xd3~\x03;!#\x1a\x15|\x85\x15\x1e\x05\x86\x03\xfa\x99&&\x1a\x14\x19\x01\x19\x067*4\x16\x1a\x1b\xfaI\x05\x8d,/\x19\x15-\0\x02\0\xfa\xff\xfd\x06\xba\x07\x0e\0%\0I\0\0\0\x0e\x04#\"$&'&547>\x05767632\x17\x1e\x04\x17\x16\x15\x14\x07'654'.\x04'&'\"\x07\x0e\x05\x07\x06\x15\x14\x17\x1e\x0232>\x04\x06\xadCj\x8e\xac\xc9l\xa8\xfe\xfc\xaa&\x1b\x05\n:]\x81\x8a\xbakO+\x19'\x19\x1eL\x9byV4\n\x05\x03\xb1\x03\x03\x06%8L]?\x15,3Cf\x7f|iO2\t\x04\x15\x1c\x82\xc3~L\x90\x84oX6\x03\x1a\xda\xc9\xaf\x80K\x7f\xdf\x99iy28f\xd4\xc6\xaf\x91U\x1d\x11\x07\x04\x01\x05Y\x95\xbc\xc6`92%!\x01\"$$'I\x91\x87mM\x0b\x04\t\x10\x16<l\x8c\xa2\xb6]-+`Uw\xaaZ6c\x87\xa2\xb5\0\0\0\0\x02\0\xfa\xff\xfd\x05\x91\x07\x0b\0$\x006\0\0\0\x0e\x04#\"&'\x03\x0e\x01#\"'&=\x01\x1a\x017>\x013:\x01632\x1e\x01\x17\x16\x15\x14\x07'654'.\x02#\x05\x03\x1e\x0132>\x02\x05\x84Bg\x84\x93\x9cLE\x85*<\x04;\"#\x1a\x14E_\n\x04:\"\x13\xf6f-s\xb3\x8b#\x19\x03\xb2\x02\x10\x16[\x87S\xfe\xceL!tQj\xaf\x81N\x04T\xa0xR1\x15\x0e\x0f\xfd\x97,/\x18\x14-\x04\x02\xa5\x03<q,/\x04L\x9dnS_\"%\x02\x18\x19@9Mh:\t\xfd7\x13\x12&S\x85\0\0\0\0\x02\0\xfa\xffZ\x06\xba\x07\b\0-\0W\0\0\x04\x0e\x02#\"/\x01\x0e\x01#\"$&'&547>\x0672\x1e\x03\x17\x16\x15\x14\x07\x0e\x03\x07\x17\x16\x1d\x01\x03654'.\x01'&'\"\x07\"\x0e\x04\x07\x06\x15\x14\x17\x1e\x023267'&>\x02\x16\x17\x13>\x03\x06:\x10\x1a$\x13\x1c\x18\xe2;\xa0U\xa8\xfe\xfb\xab&\x1b\x05\n9]m\x9c\xb9\xd3v`\x9bzV5\n\x06\x03\t8ZzA\xbc\x1e5\x03\r\x14VM:n\x1d!\x9f\xb5}UN2\t\x04\x15\x1c\x83\xc4~-Y\x1c\xd3\x1e\x0e\x1c%9\x1f\xef/eN3V\"\x1c\x12\x17\xe8!0|\xdc\x99j{48j\xd3\xc3\xb5\x82S1\x03X\x8f\xb8\xc3a:2%!f\xc9\xba\xa5;\xc5\x1e$\x07\x03\xd8\"&JHo\xbd]D\n\x06U_\x90\xa0\xb5^/+cSy\xa4U\x13\f\xef=F\x19\t\x04%\xfe\xfb'\x82\x9a\xab\0\x02\0\xfa\xff\xf9\x05~\x07\x12\0)\0=\0\0$\x0e\x02#\"'\x01\x03\x0e\x01#\"'&=\x016\x13>\x013!2\x1e\x01\x17\x16\x15\x14\x07\x0e\x03\x07\x01\x16\x17\x16\x1d\x01\x03654'.\x02'\x05\x06\x02\x07\x1e\x0132>\x02\x05^\x10\x19#\x13\x1d\x18\xfd5S\x04;\"#\x1a\x14\x04\xb1\x04:\"\x01\x9c{\xb9u\x1a\x10\x03\fn\xa5\xc9`\x02\n\x15\t\x05\x96\x03\x0b\x0fMwS\xfe\xbe\x18\x1f\x0f |J_\xa3zLP\"\x1c\x12\x13\x02\xde\xfde-0\x1a\x13-\x042\x06--/Z\x9dhHQ#%\x88\xc1~?\x05\xfd\xe5\x10\x14\x10\x12\x04\x04q\x1c\x1c52Gf9\x03\x03\xc4\xfe\xbc\x93\x1b#(R\x80\0\0\x01\0\xfa\xff\xfe\x05\x92\x07\x12\0k\0\0\0\x0e\x04#\".\x03'&547>\x0132\x17\x16\x1d\x01\x14\x17\x1e\x0432>\x027654'.\x02'.\x04'&547>\x0532\x1e\x02\x17\x16\x17\x16\x1d\x01\x0e\x03#\"'.\x03#\"\x0e\x04\x07\x14\x17\x1e\x02\x17\x1e\x04\x17\x16\x15\x14\x07\x05LDf\x84\x8f\x95F-fe_C\x12\x0e\x02\x03;\"#\x1a\x15\x0b\x0e1?A9\x12_\xaa~R\b\x02\x12\x17VxC6ofZ@\x0f\x0b\x02\x066Slw~=BpbV)\x16\t\x04\x01\x0f\x18#\x13\x1b\x14%GIR1#POI9$\x05\x17\x1a`\x83G6iaQ8\f\b\x03\x01\x89\x98mJ+\x11\x16+@V5\x1d,\x0f\x117.\x18\x15%\x14\x18\x15\x1b+\"\x19\r\x1eHwZ\x16\x14)/>OA\x1c\x17/7CW8(/\x13\x16=zl\\C'\x17&4\x1d\x0e\x16\x0e\x10\t\x11\"\x1c\x12\x11\x1a*\x1d\x10\x1a*>CI7/!)A7\x1f\x194FXcF*\x1e\x1c \0\0\0\0\x01\0\xf0\xff\xf2\x06U\x07\x0b\0\x1b\0\0\0\x06#!\x03\x0e\x01#\"'&547\x13!\"'&5>\x013%2\x17\x16\x15\x06R1-\xfd\xe4\x8f\x04:\"#\x1a\x15\x01\x8c\xfe\x1d.\x15\x0e\x030-\x04\xb3.\x15\x0f\x06\x8a;\xfa\0-0\x1a\x14$\x05\b\x05\xfc!\x17'#;\x01 \x19$\0\0\0\0\x01\0\xfa\0\0\x05\xfb\x07\x12\0,\0\0\0\x0e\x03#\".\x02'&'54\x13>\x0132\x17\x16\x07\x03\x16\x17\x1e\x0332>\x03\x13>\x0132\x17\x16\x1d\x01\x05\xacFh\x97\xc8\x82U\xa5\x8fk\x1a\x0e\x07q\x04;\"#\x1a\x15\x01v\x03\x10\x0fDayD^\x90iI0N\x04;\"#\x1a\x14\x02\x14\xbe\x9fuB/\\\x86W/>\nv\x04c+/\x17\x160\xfb\x83V74ZA&,Qo\x87\x04\x83-.\x19\x12-\x04\0\0\x01\0\xfa\xff\xf6\x06\x12\x07\x12\0\x1e\0\0\0\x07\x01\x0e\x01#\"&'\x01&547>\x0132\x16\x17\x16\t\x01>\x0132\x17\x16\x1d\x01\x06\x10\x07\xfd?5=\x14\x1a0\x1b\xfe\xa1\x04\x01\x04<# +\x06\x05\x01)\x02\x8a\r/\x1b$\x1b\x15\x06\xa8\r\xf9\xc3V\x12\x15F\x06'\x19\x14\x07\b-1&'*\xfaw\x05\xbe\"\x1f\x19\x15\"\t\0\0\x01\0\xfa\xff\xf8\bb\x07\x0e\x006\0\0\0\x15\x06\x07\0\x07\x0e\x01#\".\x02'&\x03\x01\x0e\x01#\"'.\x01/\x01\x03>\x0332\x16\x17\x13\x0167632\x17\x16\x17\x13\x01>\x0132\x17\x16\x1d\x01\ba\x01\x02\xfd\xe5\x0f\n4\x1b\x1b&\x16\x11\x03\x0b\xce\xfd\xfd\x0f8\x1d\x1b\x10\x12!\b\x19\xb7\x02\x12\x1b#\x13\x14)\t\xa4\x02$\x12#\x13\x15\x10\x13(\n\xd3\x01\xc3\x0b3\x1c#\x1b\x15\x06\xaa\x06\x06\x06\xf9\xe43%$\f\x1c$\x12H\x04}\xfb!&&\n\x03\x1e\x17W\x06\x1a\x1a!\x18\x10\x16\x19\xfac\x05k:\x17\r\b\x13B\xfa\xb4\x05c\"\"\x19\x16\"\n\0\0\0\0\x01\0\xfa\xff\xfc\x05\xea\x07\f\0>\0\0$\x0e\x02#\"&'\t\x01\x06#\"'\".\x01'&547>\x017\t\x01&'&=\x01>\x0332\x17\x16\t\x01632\x1e\x01\x17\x16\x15\x14\x07\x0e\x01\x07\t\x01\x16\x17\x16\x15\x14\x07\x05\x86\x11\x15\"\x12\x161\n\xfe\x9e\xfe\x1e\x1b%\x06\x07\x12!\x13\x06\x04\x01\x01\n\x0b\x02\x04\xfe\x89\x0b\x04\x02\x01\x12\x18&\x13&\x18+\x010\x01\xc5\"(\x13!\x14\x06\x03\x01\x01\n\x0b\xfe\x16\x01\x9a\x04\x01\x01\x01@#\x12\x0f\x15\x1a\x02\xe1\xfd\x15\"\x01\x11\x14\x11\r\f\x07\x05\f\x1e\r\x031\x02\xb3\x0f\x11\x0b\x0b\b\x13#\x15\r\x1c<\xfd\xc5\x02s\x1e\x11\x13\x11\x0e\f\x06\x05\f\x1f\x10\xfdP\xfc\xb8\f\n\x06\x05\x06\x04\0\x01\0\xfa\xff\xf9\x05h\x07\x12\x004\0\0%\x06\x07\x06#\"'.\x01'&'&=\x014767\t\x01&'47>\x0332\x17\x16\t\x0167632\x17\x1e\x01\x17\x16\x17\x16\x1d\x01\x14\x07\x06\x07\x02,\x1a(\x07\x07\x0b\n\x12\x1a\t\x05\x02\x01\x02\x02\t\x01W\xfe\x12\x03\x03\x04\x06\x16\x1f\x1a\x07\x1d\x194\x01\x96\x01m\x1a(\b\t\t\n\x11\x1a\t\x05\x01\x01\x01\x03\b,)\t\x01\x03\x05\x15\x0e\x0b\n\x07\x04\b\x07\x0b\r\x0f\x02\xe6\x03/\n\x11\x15\f\x18\x15\x17\x03\x16.\xfd_\x02\xaa&\b\x02\x02\x06\x13\x0e\x0b\r\x03\x06\b\x07\t\x10\x11\0\0\x01\0\xfa\xff\xfd\x063\x07\x0b\0)\0\0\0\x07\x01%2\x1e\x01\x17\x16\x1d\x01\x0e\x03\x07\x06#\x04#\".\x01'&=\x01>\x017\x01!.\x0163\x052\x17\x16\x1d\x01\x062/\xfc\x1d\x03)\x17 \x12\x03\x01\x01\f\x16!\x15\x16\x15\xfck\x1d\x14'\x1e\x07\x06\x01\x04\x03\x04\x07\xfd%F\x1e;X\x03}1\x15\x13\x06\x918\xfah\x02\x14\x1b\x12\x0b\x0b\t\x10\"\x1c\x13\x01\x02\x02\x07\x13\x11\r\x10\t\x0b\x10\x0b\x05\xce\x13\\Z\x01\x1a\x1a \x03\0\0\x01\x01,\xff;\x04\\\x07\x82\0 \0\0\0\x06#\x05\x03!2\x17\x16\x0e\x01#%#\".\x01'&=\x01\x13>\x033!2\x17\x16\x1d\x01\x04Y/.\xfe}\x93\x01?.\x15\r\x0b/-\xfe\x9a+\x13 \x16\x05\x03\xa5\x01\x11\x19!\x13\x01\xdb/\x15\r\x07\x0f5\x02\xf9\x0e\x1d\x15E4\x01\x0f\x19\x0e\b\x0f\b\x07\x9d\x11\x1c\x18\x0f\x1d\x15\x19\t\0\0\0\x01\0\xc8\xfe\xa7\x02\xd2\b3\0\r\0\0\0\x06#\"&'\x01>\x0132\x16\x17\x01\x02\xce<\"\x1d-\x06\xfe\xa8\x03=\"\x1e/\x03\x01X\xfe\xdb4'&\b\xcb@4()\xf7&\0\0\0\x01\0\xc8\xff>\x03\xf8\x07|\0\"\0\0\0\x07\x03\x0e\x03#\x05\"=\x01>\x013\x05\x13\x05\"'&=\x01>\x013!2\x1e\x01\x17\x16\x15\x14\x07\x03\xf6\b\xd7\x02\x10\x1a\"\x13\xfe\xa8\x96\x03>7\x01.\xcc\xfe\x98/\x13\x0e\x020-\x01\x8a\x1c5*\x0b\x07\x01\x07\x04-\xf8\xbd\x10\x1c\x18\x0f\x03N\b#/\x01\x06\xf0\x01\x1d\x15\x19\t\x1f5\b\x18\x15\x10\x14\b\t\0\x01\0z\x04}\x04W\x06\xea\0$\0\0\0\x0e\x02#\"'\t\x01\x0e\x01#\".\x01'&54767\x016;\x01632\x17\x01\x16\x17\x16\x15\x14\x07\x04U\x12\x1a\"\x12%\x1c\xfe\xcd\xfe\xa4\x160\x1a\x13\x15\x18\x06\x05\x01\x03\r\x01\xae\" \x07\x06\x06#\"\x01p\f\x05\x03\x01\x04\xd5\x1e\x17\x10\x1d\x01r\xfe\x9e\x1d#\x0b\x1a\x11\r\x0f\x06\x05\x1d\x16\x01\xbc \x01\x1f\xfeS\x0f\x0e\n\t\x05\x04\0\0\0\x01\xff\xbb\xff\x8e\x03\xb1\xff\xf6\0\x10\0\0\x04\x06\x07!&'&=\x01>\x013!2\x17\x16\x17\x03\xad\x17&\xfc\x87\"\r\r\x02\x1c+\x03r!\f\r\x01R\x1e\x02\x01\x10\f\x15\x03\x14\x1f\x0e\x10\x15\0\0\0\x01\x013\x05?\x03\r\x06\xad\0\x19\0\0\0\x0e\x02#\"'%&'&5474>\x0232\x17\x05\x16\x17\x16\x15\x03\x0b\x0f\x19#\x13\x1b\x18\xfe\xe4\x1b\t\x07\x01\x0f\x18$\x13\x14\x15\x011\x13\t\x05\x05\x86\x1e\x19\x10\x11\xbd\r\x16\x0e\x13\x01\x02\x14\x1d\x18\x10\x07\xcd\x0e\x12\x0e\x14\0\0\0\x02\xffL\xff\xf7\x07\n\x04b\0\x18\0j\0\0\x01.\x03#\"\x0e\x03\x15\x14\x17\x1e\x0232>\x027\x13&\0\x06\x07\x06#\"'&'67>\x017>\x01767>\x0232\x16\x17>\x0232\x17\x16\x15\x03\x15\x14\x17\x16\x17\x16;\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'.\x01'&5\x06\x07\x0e\x02#\"&'&'\x06\x04\x95\x12*>T4M\x81e?\x13\n\x13@eC>bTF*)\x06\xfb\xe9\x824\x0f\r\"\x19#\x07\x06B]\x98\x191b7\x0f%-\x95\xcav_\xa2$\x02\t;\"#\x1a\x11U\x03\x03\x1c\x17;\nEy.%\x0f\r-\t\x01#G$\x1a\x1e:?\x1f\x1d\x1e\x1b8o\x16\x15\x1d\x1f*asEw\xa831\fN\x03\x0b\x1e@-\x19=k\x92P(#2je8$?G5\x01c\x14\xfdND\x05\x02\x0b\x0e=<\x1a\x13w\x195u`UPf\x9d]I!\t@+\x16\x10&\xfdO\x10 \x1a$)$\x03W(\x04\x10!\b\x06$-<\x1c\x15\f\x1a\t\x04\x04\t?/)\x01\x1d\x18#3\x1baNL?a\0\0\0\0\x02\xffL\xff\xd2\x06\x90\x07\b\0\x16\0`\0\0\x01\"\x0e\x01\x07\x03\x1e\x0332>\x027654'.\x02\x01\x13>\x0132\x17\x16\x15\x03>\x0332\x1e\x01\x17\x16\x15\x14\x07\x06\x07\x06\x07>\x0176\x16\x17\x16\x15\x14\x07\x0e\x01\x04.\x03'\x07\x0e\x01#\".\x01'&67\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017>\x01\x03v5iZR*\x1fOU^8>r\\=\x07\x03\t\x10M{\xfd\xad[\x03;!#\x1a\x15=$=Qa(\x81\xbfv\x17\x0f\x04\n/\"NC\x99_/h\t\x02\x11x\xb3\xfe\xa9\xf1i\\R\x14\f\x10*\x18\x1a\x17\x18\x06\x04\x01\x17A1S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199S\x03\xb2&=\x85\xfe[\x197)\x188^}B\"[7.Ig7\xfe\xa9\x04Z)*\x16\x13!\xfd.\x1f\x1f\x1d\x13X\x99gCKc)e[\\:\x01+B'\x1a,\r\x0b\x1d\x16fD\f\r\x13!/\x0eZ\x1a\x18\x05\x17\x10\n\x1e\xcfA)FD\x05\x02\x0b\x0e=<\x1a\x13w\x197k\0\0\0\0\x01\xffL\xff\xd9\x05\xd2\x04T\0M\0\0\x04.\x01'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676767>\x0232\x1e\x02\x17\x16\x17\x16\x1d\x01\x0e\x01#\"&'.\x01#\"\x06\x07\x06\x15\x14\x17\x1e\x03>\x0176\x16\x17\x16\x15\x14\x07\x0e\x02\x07\x06#\"'\x02\xa4\xban\x0fTCS\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911-:\x0f(/\x9f\xd9\x84$KID\x1b\x0e\b\x05\x039#\x0f\x1b\x0e\x1f[0\xbb\xd9\x14\x04\x07\fGv\xaa\xa7\x9fT9h\t\x02\x11xxnd$&FP\fN\x8fO\\9FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;5XeUk\x98Q\x11 .\x1c\x0f\x12\r\x0e\x07\"4\x0b\x0f$/\xd6\xc6-'1'GZ)\x1b\x13%=2\x1a,\r\x0b\x1d\x16f4\x17\t\x03\x0b\0\x02\xffL\xff\xeb\x06\xfe\x07\x0f\0\x16\0l\0\0\x01.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x02%67>\x0232\x1e\x02\x17\x13>\x0132\x17\x16\x15\x14\x07\x03\x16\x17\x16\x17367632\x17\x16\x17\x16\x15\x14\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&/\x01\x06\x07\x0e\x02#\".\x01'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x04\xa6\f<GE\x14_\x97oD\n\x02\x0f\x13QpBNkIf\xfc\xcd\x11#0\xa3\xdc\x87\x17=B(-6\x04:\"\"\x1b\x15\x01g\x03\x1c\x11'\x0bEy.%\x0f\r-\t\x01#G$\x1a\x1e\x1d\x14\x1d.\x17\x1c\x1a\x19,68\x16\x05\x19\x18%Z{Vq\xb4v\x18LKS\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911 \x03P\x0f\"\x19\x0f6f\x95s\x17\x1681Eb6\x182\x97\xd9hJh\x97S\b\x11\r\x17\x02\xa8)+\x16\x13 \x05\x07\xfa[$)\x1b\x06\x03V'\x04\x10 \b\x06#-;\x1b\x15\f\f\t\f\b\x03\x01\x0b\x1e\x1f.\t\x16\x11\x1b1\x1aZ\x97Rd?FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;$\0\0\x02\xff8\xff\xe4\x05\n\x04N\0\x13\0P\0\0\0>\x01&'.\x02#\"\x0e\x01\x07\x0e\x02\x17>\x02\0&'\x0e\x02+\x01&'>\x027&7>\x0532\x1e\x01\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x06\x07\x04\x07\x1e\x02>\x0176\x16\x17\x16\x15\x14\x07\x0e\x02\x07\x06#\"'\x03R/\x0b\x05\x07\t#.\x1bF\x90\x930'\x1e\f\x0f\xd1\xde<\xfe\xf1\xd0JYwX\x17,H\x07\t\x80dd\x17\n\x06)U\x85\xa1\x9aM:qW\x17\x14\x01\t>7!%\x01\x01\xfe\xe7\xda[\xa5qz\x9fT9h\t\x02\x11xxp`:<()\x02\xbbM0#\x11\x13\x1b\r [B:]\x83Yj\x81,\xfdZOT>=\x10\x06O;\x1c/S\x88AF\xb7\x89pL\x15\"B/'/\f\fX\x90+\"\x17\x02\x01\xb4_?\x1a\x01\x02%=2\x1a,\r\x0b\x1d\x16f4\x11\x04\x03\x01\0\0\0\0\x03\xff$\xfc\xea\x04\x88\x07\b\0\x14\0)\0{\0\0\x05\x0e\x03\x07\x06\x16\x17\x1e\x01\x172767>\x04\x0167>\x0276.\x02\x0e\n>\x04767632\x17\x1e\x01\x17\x16\x15\x14\x0e\x03\x07\x06\x07\x03>\x0272\x17\x14\x07\x0e\x01\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&5>\x04%7\x0e\x07'&'4>\x0476?\x01\x01Sp|\\'\t\t\x01\t\r.>.\x17\x1b\"$\x1b\"\n\n\x01\0\x14IwcG\n\b\x01\x17+p(+#\x1b\x1e\n\t\n\f\xb0\b\x0e\x0f<C;2=0C\x15\x16_]\x1e!\rCZ=Yb\xc1\x12U'\x923W\x02=B\xd2^\x0f\x130C;2=0C\x15\x16_]\x1e#\x03FP>T\x01\x19\x0b\"F2o\"\x1c3A'J\x02\x87JA5M$//D~DMOX\x1e\x1a7\x11\x19+\x02\x0b\f\x1f*@YOL\x04\x1b\x18I\x8c\x8a\x99GS:*/\x05\x15\x1f)@}O=LqS\x94\xa8w\xc3g)#\x18\x12\x02\x07F69L\x0b\x87\xd4\x88Whn\xd5\xfeh\r\x05\x16\x0bZ9\x18\t\x15+\xe2k\xa1g)#\x17\x13\x02\x07F6>?K\x9e`/9\xa6\xf83O/N\x14\f\x16\f\x04\tH@$$3+O0=Ce\0\x03\xffL\xfc\xea\x05\xe2\x04Z\0\x15\0'\0\x81\0\0\x01.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x01\x03\x0e\x04\x16\x17\x1e\x016767>\x03\x0167>\x0232\x16\x1767632\x17\x16\x07\x03>\x01\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&>\x04%7\x0e\x01#\"'&'&'&'3&'&/\x01\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x04\xb0$7=K.V\x93rJ\t\x02\f\x11MuOf\x86\x88\x16GSfZ>\x06\t\r8b\x17\x1b\"$\x1b\"\x15\xfc\xf9\x15\x1e\"\xa3\xd8\x80X\x99&\x100\t\t$\x1e%\fI'EA\n\x04\x05\r\x1c\x15I/\"\x130C;2=0C\x15\x16_]\x1e#\x03FPE`\x01\x05\x015\xb8\x8374\r\f\x1c\x1c(#\x01-$B!\x0b8;S\x824\x0f\r\"\x19#\x07\x06B]\x98\x19110\x03\"%1!\x10Bt\xe5\\\x19\x162%6A\x1c>\x92\xfe- 5GN\x89H\x11\x194\x07\x0b\f\x1f*@c_\x03\\]XT\xa4e&&K\x06\x01\x13\x19V\xfc\xc3\x0b\f\x17 \x10\x10\x10\x10!\x15\x05\x11\x13\xffk\xabg)#\x17\x13\x02\x07F6>\x8a\xa8`7>\x97\x18*G\x07\x02\x02\x05\x07\t\x10\x14\x1e5V\x1e@2FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;2\0\0\0\0\x01\xffL\xff\xf3\x06\xf6\x07\x16\0[\0\0\x01\x12\x13>\x0132\x16\x17\x03>\x0232\x1e\x01\x17\x16\x1d\x01\x03\x1e\x01367632\x17\x16\x17\x16\x15\x14\x07\x0e\x03#\"'.\x02'&'&5\x134'.\x02#\"\x0e\x02\x07\x03\x0e\x01#\"'&57\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x01o\x1e:\x03=\"\x1d.\x041UdvF[\x80R\x16\x12\t\x0b:EEy.%\x0f\r-\t\x01#0U^X\x1d\x1e\x1b&O2\x19\x1d\f\t\x15\b\r.C1Gr_S1)\x04;\"#\x19\x15\x12F-S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*#\x02U\x01\x05\x03k%, \"\xfc\xd7N9 ;eB=O\r\xfe!7\x1a\x03V'\x04\x10 \b\x06#-/<+\x07\x04\x06\x1a*\x1e\"$.&\x01\xb8'-2H':h\x91y\xfeF(*\x16\x12\x1f\xc6P%FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976-\0\0\0\x02\xffG\xff\xf8\x03\xd1\x06%\0\x1a\0\\\0\0\x01\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x1d\x01\x07\x0e\x03\x03\x13>\x0332\x16\x17\x03\x06\x07\x15\x14\x17\x1e\x02;\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'.\x02'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x02\f\x15*\x1c\b\x05\x01\x01\x02\x17\"+\x15\x15*\x1c\b\x04\x01\x03\x16\"+\xc5A\x02\x13\x1b#\x11 /\x02N\x06\x02\x05\x05\x05\x1d;\nEy.%\x0f\r-\t\x01#G$\x1a\x1e:?\x1f\x1d\x1e\x1b8o0\x03D.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*'\x05@\x0e\x1d\x15\r\x12\x07\b\x0b\x1b(\x1b\x0e\x0e\x1c\x14\x10\x13\x0b\r\x1a(\x1c\x0e\xfc\xf8\x01\xd1\x13\x1e\x14\x0b%\"\xfd\xd4>8\x19)\" \x1c&\x03W(\x04\x10!\b\x06$-<\x1c\x15\f\x1a\t\x04\x04\t?mHH&FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976.\0\x03\xff\x01\xfc\xeb\x03\x0b\x05\xed\0\x19\0*\0o\0\0\x01\".\x01'&=\x017>\x0332\x1e\x01\x17\x16\x1d\x01\x07\x0e\x03\x03\x0e\x04\x07\x06\x1e\x02>\x04?\x01\x06\x07\x0e\x02\x07\x06\x07\x06#\"'.\x02'&547>\x04%7\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x135>\x0132\x17\x16\x15\x03676\x16\x17\x16\x15\x14\x07\x06\x07\x01\xfd\x15)\x1d\x07\x05\x02\x02\x17!+\x15\x15*\x1e\b\x04\x02\x02\x17\",\xd5\x1fdsZ(\b\b\x010oC@!!\n\f\xbb\x1a\t\n/C;2=0C\x15\x16_]>\x05\x04\x02\x03IP?K\x01\x13\x11N.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*&A!\x04:\"#\x19\x15>TB1;\n\x04\x03\x07\x1f\x05\b\x0e\x1d\x15\x0f\x13\x0b\r\x1a(\x1b\x0e\x0e\x1c\x14\x10\x13\x0b\r\x1a(\x1c\x0e\xfa\x83\x0e>BNN()9@\x11\x13@IhKE\xa3\xdd56\xb0g)#\x14\x13\x02\x07C[3\x1e\x1e\x12\x12.\x8f`4*\xa1\xc3S&FD\x05\x02\x0b\x0e=<\x1a\x13w\x19760a\x01\xc3\x02*)\x16\x13#\xfch\x1c\x10\x0b\x1b \x10\x10\x10\x12!\x12\0\0\0\0\x02\xffG\xff\xec\x05|\x07\x11\0\x10\0i\0\0\x01\x07\x1632767654'&'&#\"\x01\x13>\x0132\x16\x17\x0367632\x17\x1e\x03\x17\x0e\x02\x07\x06#\x1e\x02\x17\x1e\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x06.\x05'&5\x03\x0e\x01+\x01&'&57\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x024\x10;;H(GQB\x02\fZ\x07\x07c\xfejb\x03;#\x1d(\x02<5bFF\x18\x19NN/3\x01\ni|[Q?::C:-,R~.%\x0f\r-\t\x01#G$\x1a\x1e:BGRj2A\\:\x15\x13&\x04;\"\x02\x15\x19\x15\x19S/S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*/\x039\x8d\x06\t\x0f6,7\n\x0bJ\x0b\x01\xfe\x9e\x04`%,\"$\xfd5!%\x1a\x03\f%&YdUeK\x1d\x1aiFO1(\r\x05R'\x04\x10 \b\x06#-;\x1b\x15\f\x19\x0f\x02\x0bH9KrR\x1c\x19\x01\xfez(+\x02\x16\x12 \xd9]'FD\x05\x02\x0b\x0e=<\x1a\x13w\x19762\0\0\x01\xffF\xff\xf8\x03\xe9\x07\0\0J\0\0%&'&'7&'.\x01'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x13>\x0132\x17\x16\x07\x03\x0e\x01\x1e\x02;\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'&'\x15&'&\x01\xae%\x13\x07\x05\x01\x04\x02\t\x03\x01Y/S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*#Gm\x078\"#\x1a\x15\x01p\x04\n\x04\n(;\nEy.%\x0f\r-\t\x01#:1\x1a\x1e:?\x1f\x1d\x1e\x1b\x1e\x1f\x15\x15\x124\x1d*\x0f\x11\x01\x0e\x0b\x1e!\x19['FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976,b\x04k)(\x16\x13-\xfbN,\x80=7.\x03W(\x04\x10!\b\x06$-6\"\x15\f\x1a\t\x04\x04\x05\x0b\x01\b\f\n\0\0\0\0\x01\xffB\xff\xed\b\xf9\x04P\0\x81\0\0\x01\x13>\x0132\x17\x16\x15\x07>\x0232\x16\x17>\x0332\x1e\x02\x17\x16\x15\x03\x1e\x01\x17\x16;\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x03\x07\x06#\"'&'\x07&'&'&'&'&5\x13.\x02#\"\x0e\x02\x07\x06\x07\x03\x0e\x01#\"'&5\x13.\x03#\"\x0e\x03\x07\x03\x0e\x01#\"'&57\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x01d0\x04;!#\x1a\x15\x03G`nAQo\x1d)Bel7PsK(\b\x07\x10\x01\x0e%\x14%\nEy.%\x0f\r-\t\x01#AD\x1e:?\x1f\x1d\x1e\x1b%$\x01\x10\x0f8\x16\x01\x01\x16\x03\t\x12\x01!F:!SU2\"\r\b&\x03:\"#\x1a\x15)\x02\x0f\x1c(\x1b?gN0G\x107\x04;\"#\x1a\x15\x10;.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*.\x02R\x01\xa5)*\x16\x12 GC6\x17U/&(&\x152Vr@.k\xfe\xa3\x16G\x11\b\x03W(\x04\x10!\b\x06$-D)\f\x1a\t\x04\x04\x06\x0f\x01\x07\t\x1f-\x01\x020\x16\x1f/\x01k\x80tG\x15.#4!w\xfd\xd3)+\x17\x13!\x02Ja^;\x1f5^E\x8f+\xfe.)*\x16\x12 \xc0D&FD\x05\x02\x0b\x0e=<\x1a\x13w\x19762\0\0\x01\xffG\xff\xf3\x06\xc8\x04`\0b\0\0\x01\x13>\x0132\x16\x17\x15>\x0232\x1e\x02\x17\x16\x1d\x01\x03\x16\x17\x16;\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'.\x02'&5\x134'.\x01#\"\x0e\x02\x07\x06\x07\x0e\x01\x07\x0e\x01#\"'&767\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x01t\x16\x03=\"\x1d1\x03zZ\x8bHJh?!\x06\x04\x17\x03\x1c\x17;\nSs&%\x0f\r-\t\x01#A%\x1f\x1dE:\x17\x17\" 8o-\x04\t\x1a\f\f:4D}tC \x12\x07\x0e\x1f\x0f\x04;\"#\x19\x15\x01\n\rC,S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*6\x02c\x01\xa9'-$#:I!\x170Nd4+*\x16\xfe8#*$\x0b\\&\x04\x10+\b\x07#.?\x1a\x14\f \x05\x03\x05\t?\\\x1e\x1f0\x01\xdc7/19>^yJN\x1bi\xcfk),\x17\x13-IaF%FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976A\0\0\0\x02\xffL\xff\xf3\x05\xa0\x04V\0\x1b\0U\0\0\0'.\x02\x0e\x03\x07\x06\x15\x14\x17\x16\x17\x16327567>\x0276\x16\x07\x0e\x01\x07\x06\x07\x06\x07\x06#\".\x01'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767>\x027>\x02;\x01\x1e\x02\x17\x16\x17\x06\x07#\x1e\x01\x06\x07\x06\x04\xa5\x12\x11[\x89\x85|R7\b\x03;\x1d,Bf*'\x17\x17?fO\x05\x03\x95'-\x92d!$/3\x1b\x1cz\xb6q\x17HGS\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911(7\f=p[-\x7fZ1\x18=\x88Q|G\x01\x01F0\t)\x01\x03\x01\x02\xf00,M\x1d\x1dIi\x91S\"\x1f\x81L%\x16\x1c\x0b\x02\b\x0b o\x86\\D\xb7Yg\xa12\x11\r\x0e\x07\x03N\x8cPV<FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;/]A\xa2\xa85\x1a,\x0b\x01\x14\x19\x16\x0e<<\x15\x1a\x7fq=\r\0\0\0\0\x02\xffL\xfc\xf8\x06,\x04T\0I\0a\0\0\x01\x0e\x01#\"'&7\x13\x06\x07\x0e\x01\x07\x06#\"'&'67>\x01767673\x13>\x0132\x17\x16\x15\x07>\x0132\x1e\x01\x17\x16\x15\x14\x07\x06\x07\x06\x07'\x06\x07>\x0176\x16\x17\x16\x15\x14\x07\x0e\x01\x04.\x02'\x0167654'.\x02#\"\x0e\x01\x07\x06\x07\x03\x1e\x03>\x01\x01\xc3\x04;\"\x0e\x1a\x1f\x016K1S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*(J\x02\x16\x03;\x18#\x1a\x15\x05\"\xb3wp\xa8h\x16\x0e\x03\x0e?\x15\x16\x01!'4\x99_/h\t\x02\x11x\xb3\xfe\xa9\x8di\\R\x02S\x1e\b\x03\t\x0eBeCEp[ \x18\x0b\x1b\x1fWM^\x8bZ\xfdK(+\x17\x12,\x03\xa8A)FD\x05\x02\x0b\x0e=<\x1a\x13w\x19764l\x01\xa8)+\x16\x14!;%cY\x87Y;A\x1f \xbfl%\x1e\x019(\x01+B'\x1a,\r\x0b\x1d\x16fD\f\r\x13\x17.\x01YJy\x19\x19,';T7AfI4W\xfe\xea\x19:\x1c\x18)[\0\x02\xffL\xfd\x02\x06\xe3\x04m\0\x19\0d\0\0\x01.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x027\x13&\x0167>\x0232\x1e\x02\x1767>\x0272\x17\x16\x15\x14\x07\x03672\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'&6\x13\x0e\x03#\".\x02'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x04\x88\x166CI&I\x7fdA\b\x03\t\x0eCd@6\\QK0D\x13\xfc\xc5\f+,\x92\xc9w/\\WN\t\x02\x01\x02\t+0#\x1b\x10\x01s~\xeaS\x10\x032\xad}c@:%\x04\x04\"\x1d!\x06FC0Xe8S\x81`@\x13VNS\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911+\x03U\x12#\x1a\x0f;h\x8eR\x1e\x1d2/Jn@\x1c3B3\x01\xd5\x0e\xfe\xf9b_d\x9b_\x11\x1c*\x06\b\r\r\"*\x01\x16\x0f\x16\r\x0f\xfb\xd3\xa5<=\r\f0)B\xae\xfa\xf57\x02\x01\x13\x15o\x02\xe13\x1b#\x143Xr?eAFD\x05\x02\x0b\x0e=<\x1a\x13w\x195;3\0\x01\xffL\xff\xf7\x04\x1c\x04R\0?\0\0\x01\x06\x075\x06\x07\x03\x06\x07\x06#\"'&'7\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x1367\x16\x17\x0767676\x1e\x02\x17\x16\x15\x14\x07\x15\x0e\x01\"&\x0e\x01\x07\x06\x02i\x0e\x10\x13\x1d\"\x1e\x19\x10\x13\x0b\r!\x18\rW.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*$>!\x06RT\t\x02\x0b\x0bB#'aq<\x1a\x17\x01\x0e6r^39$\x06\x02\xcb\x19$\x01+J\xfe\x14(\t\x06\x02\x063\xda[&FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976.[\x01\xbbI\x0f\x04>^\x0e\rP\x13\x16\x03*\x17\x16\x14'\x06\x06\x04#\x0b\r'B5\t\0\x01\xffL\xff\xe3\x06h\x04d\0\x83\0\0%&'&'&=\x01>\x0132\x1e\x0232>\x047654'.\x02'.\x01'&'\x06\x07\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017>\x0176?\x01>\x0332\x1e\x02\x17\x16\x17\x16\x15\x14\x07\x0e\x03#\"'.\x01#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x02\x17\x1e\x02\x17\x16\x15\x14\x07\x0e\x01\x07\x16676\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x06#\"'.\x01'&'\x01\xfc\r\n\x1d\f\t\x034'\x1aG\x19]3\x129?@4\"\x04\x01\f\x0f9O/B\x8c8\x1c\x07\x89|<.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x194S>\x03\x02\x88\x06W|\x90B0ecZ#\r\x06\x03\x01\x01\x11\x1a#\x13 \x1b!\x86U\x1dOH3\x03\x01\x12\x15Ji7=w\\\x18\x14\x02\x07)\x1f-\x99_/h\t\x02\x11x\xb3\xabSFM>yi.+'6\x06\x05\x0f\x14\x0f\x13\x07\x1f7\x1f\x0b\x1c\x06\x0e\x18$2#\x07\b\x1e\x15\x1a$\x1a\f\x12'#\x10\x07\xcf\x9f<&FD\x05\x02\x0b\x0e=<\x1a\x13w\x192i\\\x03\x04\xdc>tY6\x07\x17*\"\x0e\x0f\f\n\x06\x04\x10\x1d\x18\x10\x1a!\x19\x1c-8\x1a\x05\x05\x1d\x13\x18!\x1a\x0f\x10.L7*9\x10\x13?R\x18\x02+B'\x1a,\r\x0b\x1d\x16fD\x06\x03\x04\x06\x13\x11\x0f\x16\0\x01\xffL\xff\xf8\x04!\x06\x98\0`\0\0\x01\x03\x0e\x01\x1e\x02;\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'&'\x15&'&'&'&'7&'.\x01'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x13#\"'&=\x01>\x01;\x01\x13>\x0132\x17\x16\x07\x0332\x17\x16\x17\x15\x0e\x01#\x02H*\x04\n\x04\n(;<Ey.%\x0f\r-\t\x01#:1\x1a\x1e:?\x1fO\x1e\x1b\x1e\x1f\x15\x15\x12\x0e%\x13\x07\x05\x01\x04\x02\t\x03\x01Y/S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*#G)\x1d.\x15\x0e\x030-&H\x04:\"#\x1a\x19\x04G\xe3.\x15\x0e\x01\x030-\x03p\xfe\x88,\x80=7.\x03W(\x04\x10!\b\x06$-6\"\x15\f\x1a\t\x04\x04\x05\x0b\x01\b\f\n\x0b\x1d*\x0f\x11\x01\x0e\x0b\x1e!\x19['FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976,b\x01+\x1d\x15\x19\t\x1f5\x02-**\x16\x11.\xfd\xd4\x1d\x15\x14\t#5\0\x01\xffL\xff\xf5\x06\xe2\x04S\0`\0\0%\x07.\x01'\x07\x0e\x02#\".\x02'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x13>\x0132\x17\x16\x07\x03\x06\x1d\x01\x1e\x0232>\x027\x13>\x0132\x17\x16\x07\x03\x14\x17\x16\x17\x16;\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'&'&\x04\xa6\x01%\x1a\n01q|B[\x82R*\x0bHJS\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911.=@\x04;\"#\x1a\x15\x01@\b\x02'QGD\x80fB\x18&\x07?\x1a#\x1b\x17\x012\x02\x07\x13\x17;\nEy.%\x0f\r-\t\x01#G$\x1a\x1e:?\x1f\x1d\x1e\x1b87\x0e5\x01%4\x18*)<!.QkAV?FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;6h\x01\xb0\"*\x16\x12,\xfe\x16QA\x19H[*9_{k\x01\xd5B\x1d\x16\x13*\xfd5\x1e\x11\x19\x1b$\x03W(\x04\x10!\b\x06$-<\x1c\x15\f\x1a\t\x04\x04\t \x07\0\0\0\x01\xffL\xff\xeb\x06\x04\x04T\x005\0\0%\x0e\x01#\"&'\x03\x07\x06\x07\x0e\x02\x07\x0e\x01\x07\x06#\"'&'67>\x0376767&>\x0132\x16\x17\x13\x0167\x1e\x02\x17\x06\x07\x06'\x03\x9d\x0f.\x1f\x1a+\x0b\xd8\x14\x1d'(d5*S\x824\x0f\r\"\x19#\x07\x06B]\x98R;\n9\x1d\x1a#\x01\x19(\"\x1c+\b\xf5\x01}01+<a\x05\x01IB'0\"#!\x1e\x02zRNYQw5#FD\x05\x02\x0b\x0e=<\x1a\x13wPR\x16~dZ\xb5'8\x1c\x1f\x1f\xfd\x1c\x02\xd06\x01\x04\x19\x1d7<\x17\x03\x0b\0\0\x01\xffL\xff\xee\x07[\x04[\0W\0\0\x017>\x0332\x16\x17\x07\x17\x07\x03\x06\x16>\x017\x13>\x0132\x17\x16\x15\x03\x06\x16>\x017\x13>\x017\x1e\x02\x17\x06\x07\x06'\x03\x0e\x04&'\x06\x07\x06#\"'&'&'5\x06\x07\x0e\x01\x07\x0e\x01\x07\x06#\"'&'67>\x037676\x01\xa3\x10\x02\x13\x1b#\x11 /\x02\x01\x01\x028\x01K\x93\x7f\x18:\x03:\"#\x1a\x15%\fH\xa5u\x15,\nJ;+<a\x05\x01I?''\x0fZdg\xa2\xa7&j`4$(\x1aNHF!\f\r25*S\x824\x0f\r\"\x19#\x07\x06B]\x98R;\n9\x1d\x14\x03\x8b~\x13\x1e\x14\x0b%\"\x07\x03\x0b\xfd\xe9\x9a\x9b\b\xb9|\x02\x19)+\x17\x13!\xfe$\xd9\x99\x04\xa2\xa5\x01\xacO0\x01\x04\x19\x1d7<\x17\x03\n\xfen\x84\xcba7\rPb\x99\x15\f\t\x13=:\xa5\x18\x10\x0f<5#FD\x05\x02\x0b\x0e=<\x1a\x13wPR\x16~dE\0\0\x01\xffL\xff\xef\x05\x95\x04U\0J\0\0\t\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x0e\x01\x07\t\x01\x16\x17\x16\x1d\x01\x0e\x03#\"&'\t\x01\x06#\"'&=\x01>\x017\x01'\x0e\x06\x07\x06#\"'&'67>\x04767&>\x0132\x16\x17\x03u\x01\x85\x11%\x12\x13!\x16\x06\x03\x02\n\x0e\xfeY\x016\r\x05\x02\x02\x11\x10#\x13\x10!\f\xfe\xd0\xfe\x97\"('\x1a\x14\x01\t\n\x01\x96\xc3%4AXB\x80\x824\x0f\r\"\x19#\x07\x06B]\x98R;C\x1d\x1a#\x01\x19(\"\x1c\x1b\x18\x02\xa9\x01\x8a\x12\x10\x0f\x19\x0f\f\x0e\x05\r\x1b\f\xfeT\xfeb\r\x0f\n\f\x06\x11\x1d\x12\x10\x0f\x0f\x01\x89\xfev'\x1c\x15\x1d\b\n\x18\r\x01\xba\xfc\x88\x91\x8c|NvD\x05\x02\x0b\x0e=<\x1a\x13wPR\x94dZ\xb5'8\x1c\x16(\0\0\x02\xffL\xfc\xea\x05\xc2\x04W\0\x11\0t\0\0\x05\x0e\x04\x16\x17\x1e\x016767>\x03\x135\x0e\x01#\".\x01'&'\x07\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x13>\x0132\x17\x16\x07\x03\x06\x15\x14\x17\x1e\x0332>\x027\x13>\x0132\x17\x16\x0f\x01\x03>\x01\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&>\x0376\x04[GSfZ>\x06\t\r8b\x17\x1b\"$\x1b\"\x15\r&\xbdwe\x8dZ\x18\x15\x02;<.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*&E.\x04:\"\"\x1b\x15\x014\x01\x02\x03\x1b5UAHz_@\f+\x04:!#\x1a\x16\x01\n?)EA\n\x04\x05\r\x1c\x15I/\"\x130C;2=0C\x15\x16_]\x1e#\x03FPE0/j 5GN\x89H\x11\x194\x07\x0b\f\x1f*@c_\x01^''V;eB8+F<&FD\x05\x02\x0b\x0e=<\x1a\x13w\x19761e\x01\xb8(+\x16\x13,\xfd\xfe\x19\x19\x1d\x1d4^D(6`\x82H\x02\r)*\x16\x12-T\xfc\xed\f\f\x17 \x10\x10\x10\x10!\x15\x05\x11\x13\xffk\xabg)#\x17\x13\x02\x07F6>\x8a\xa8`7\x1f\x1f\0\x01\xffL\xff\xfa\x05q\x04S\0A\0\0\0>\x01767>\x017!2\x17\x16\x1d\x01\x0e\x01\x07\x01!2\x17\x16\x15\x14\x07\x0e\x01\x07\x06#!\"'&'5&?\x01\x01!\x02\x07\x06\x07\x0e\x01\x07\x0e\x01\x07\x0e\x01\x07\x06#\"'&'67>\x02\x01\x10*H\x19\x18\x1f\x012,\x02\xd5C\x18\x10\x01\x0f\x10\xfd@\x02\\-\x13\r\x01\x03,\x1d\x12\x12\xfd\x052\x13\x0e\x03\x04E6\x02z\xfe\r8\x14\x1d\x1f(B\x1d25*S\x824\x0f\r\"\x19#\x07\x06B]\x98R\x01\xbeB\x8b[V\x98<<\x07\x1f\x12\x1a\b\x10\"\x11\xfc\xe9\x1f\x15\x1a\x05\x0b )\x01\x01\x14\x0e\x19\x052H<\x02\xbb\xfe\xf7=R/Bc#<5#FD\x05\x02\x0b\x0e=<\x1a\x13wP\0\0\x01\0d\xffC\x03\xa3\x07\xce\0L\0\0\x04\x06+\x01\".\x02'&'&\x12'.\x01#'\".\x01'&=\x01>\x037>\x03\x1267>\x03;\x012\x17\x16\x1d\x01\x0e\x01+\x01\"\x06\x07\x0e\x01\x02\x0e\x01\x07\x1e\x02\x02\x17\x16\x17\x1e\x01;\x012\x17\x16\x1d\x01\x02\xd70.x\x1d=<1\x11$\x07\bj\x07\b*(H\x10 \x18\x06\x05\x01\x10\"7((4 \x10\x13(/\x0e/AT0d/\x15\r\x020.b!(\r\x1f'\x1e\x17&\x1a!\x1b\x05`\x05\x07\x18\x132'G/\x15\r\x885\x11\x1d%\x15+6I\x02j\"&0\x06\x0b\x16\x0f\n\f\x07\x13!\x1a\x03\x01\x01\x1f2D\x028v2\x0f+&\x1c\x1d\x15\x19\t\x1f5\x11\n\x17_\xfd\xa5TA\x19'?R\xfdt\x18$\r\n\n\x1d\x15\x19\t\0\0\0\x01\0d\xfe\xed\x01\xda\bo\0\x0f\0\0\x04\x06#\"'&5\x13>\x0132\x17\x16\x15\x03\x01\x12<\"!\x19\x16\xc4\x03;\"#\x1a\x15\xc4\xe30\x19\x14,\b\xcb//\x19\x150\xf77\0\0\x01\0d\xffC\x03\xa4\x07\xce\0I\0\0\0\x0e\x02\x07\x0e\x02\x02\x06\x07\x0e\x03+\x01\"'&=\x01>\x01;\x01267>\x01\x12>\x017.\x02\x12'&'.\x01+\x01\"'&=\x01>\x01;\x012\x1e\x02\x17\x16\x17\x16\x15\x02\x17\x1e\x013\x17\x16\x17\x14\x07\x03\xa1\x0e\x1e1#09\"$(1\x0e0BT0a/\x13\x0e\x03/-[%1\x0e\x1e \x1f\x17'\x19\x13\x1e\x0fa\x04\x07\x18\x0e\x1e\x15u/\x13\x0e\x03/-\x84+B1$\f\x1f\b\x05d\x07\b''g1\b\x01\x03y\x1d\x17\x0f\x01\x02\x1a/\xfd}}1\x0e)&\x19\x1d\x15\x19\t\x1f5\x19\b\x15[\x02[TA\x19\x1fDU\x02\x91\x17&\x0e\t\x04\x1d\x15\x19\t\x1f5\x15\x1f$\x10,5\x1f \xfd\x8c '/\x02\f:\x05\x07\0\0\0\0\x01\0d\x04\x9e\x04\xf0\x06\xa8\0.\0\0\0\x0e\x02#\".\x04#\"\x06\x0f\x01\x0e\x01#\"&'>\x0332\x1e\x0432>\x027>\x0132\x17\x16\x1d\x01\x04\xe35W\x82ZAdOA?@%7J\b\x02\x04;\"!/\x02\b+PwSAeP@?>%*?,\x1b\x06\b8 #\x1a\x14\x06\b\x93zP+>I:&TH2&+'%it`=+>I:&6Q^\x1f,&\x16\x12.\x04\0\0\0\0\x02\0d\xff\xf5\x01\xf7\x06\xdf\0\x1a\0+\0\0\0\x0e\x02#\".\x01'&=\x017>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x03\x0e\x03#\"'&5\x13>\x0132\x16\x17\x01\xf2\x1b(1\x18\x1a0#\b\x06\x02\x03\x1a(2\x19\x190\"\t\x06\x01\x02\xdd\x03\x12\x1b \x10#\x19\x17\x94\x03:\"!0\x01\x063. \x11\x11!\x18\x11\x17\f\x10\x1e/ \x10\x10!\x18\x11\x15\x07\t\x0f\xf9\xf4\x13\x1e\x15\n\x16\x12'\x04\xbc&+'#\0\0\0\x02\0d\xfe\xe1\x04\x04\x05A\0B\0L\0\0$\x07\x0e\x03\x0f\x01\x0e\x01#\"'&?\x01.\x02'&547>\x03?\x01>\x0132\x17\x16\x0f\x01\x1e\x01\x17\x16\x17\x16\x1d\x01\x0e\x01#\"&'.\x01'\x03>\x017>\x0132\x17\x16\x1d\x01\0\x06\x07\x06\x15\x14\x17\x16\x17\x13\x03\xdd\x1a\"GP^+\x11\x04:!#\x1a\x16\x01\x11c\x99Y\x0e\t\x05\fL|\xaa_\x11\x04;\"#\x1a\x15\x01\x104\x893\x0e\b\x05\x039#\x0f\x1a\x0f\x1cQ\x1bX&_4\x0f#\x12'\x1a\x14\xfd\xe3\x96\x11\x04%2nT\xcb\x1a$;.\x1f\x04\xcd(+\x17\x12,\xcc\x0bX\x8d]5:-0s\xc0\x93`\x11\x9b**\x16\x12-\x8f\x05A5\x0f\x12\r\r\x07\"4\x0b\x0e\"-\x02\xfc\xf7\x0585\x10\x10\x1b\x17\x1c\b\x02\xa1\xc8\xa6+&tAX\x10\x02\xf7\0\0\x02\0d\xff\xdd\x05\xc7\x07\x13\0w\0\x88\0\0%\x0e\x03#\".\x02'\x0e\x03#\".\x01'&547>\x0332\x16\x17.\x01'#\"'&=\x01>\x01;\x01&'&547>\x0332\x1e\x02\x17\x16\x17\x16\x15\x14\x07\x0e\x01#\"'.\x03#\"\x0e\x02\x17\x16\x17!2\x17\x16\x1d\x01\x0e\x01#!\x1e\x01\x17\x1e\x01\x17\x1e\x0332>\x027>\x0132\x1e\x01\x17\x16\x15\x14%.\x01#\"\x0e\x03\x1e\x0232>\x02\x05\xbe\x12DWa/<f\\W\x19\x10So\x86F@jH\x12\r\x02\x07Soz0*T\x0f\r4\x18\xdd.\x15\x0f\x03/-\xa2\x07\x04\x02\x02\tDw\xaepR\x81iS%\r\x06\x03\x01\x03, \x1c\x1a0KIS<9cLB\f\x07\x0b\x01\xae/\x15\x0e\x030.\xfe\x98\x1a9\x06<o.\x10\x1e!&\x17\x12+(\x1f\x06\x0e.\x1b\x12 \x18\x06\x06\xfc\xb2#Y3'?.\x1c\x03\x0e\x1e)\x181T@*\xd8/S>$6Sc\x1a5tO%7`<,2\x11\x12T{O%\x15\x07@\xb3U \x19\x1f\x07\x1c;+1\x16\x17\x17\x16_\xbb\x92[\x1d:U8\x14\x18\x0f\x0f\x07\b$ \x17(M)\x0e*R\x8d\x972/ \x19\x1f\x07#2l\xeci.t6\x12\x1f\x16\x0e\x12\x1c\"\x0f# \x0e\x1a\x11\x0e\x0f\x13\x95\x17\x1f\x19'1=1'\x16\x193U\0\0\x01\0d\xff\xd1\x05\xcd\x07\x1c\0m\0\0\0\x07\x0e\x03#\".\x027\x06'&=\x01>\x01\x17>\x017#\"'&=\x01>\x013\x17>\x0332\x1e\x02\x17\x16\x17\x16\x1d\x01\x0e\x03#\"&'.\x03#\"\x0e\x02\x07%2\x17\x16\x1d\x01\x0e\x01#!\x0e\x01\x073%2\x17\x16\x1d\x01\x0e\x01#\x05\x1e\x0332>\x027632\x1e\x01\x17\x16\x15\x14\x07\x05\x9a\x15:~\x8f\xa5_\x88\xd0\x8fM\b\x87\x15\x0e\x02.s\x03\x0f\bO.\x15\x0f\x030-o&\x7f\xb5\xed\x96C}hM\x15\x07\t\x07\x02\x13\x1c \x10\x0f'\n\x112BT5k\xab\x85a\x1d\x02y.\x15\x0e\x030-\xfdc\x07\x0f\x04\x01\x02].\x15\x0e\x030-\xfd\xad\x05>i\x90YM{hZ+ )\x13!\x17\x07\x04\x01\x010\x1fLwS*f\xb6\xf5\x92\b!\x18\x1c\x0b E\x051k+!\x18\x1d\n#=\x02|\xe5\xaa`1M`0\x11\x16\x14\x11\x04\x17#\x18\x0e\x11\x15 NA*@u\xa5W\x02!\x18\x1c\x0b#=)h+\x01!\x18\x1d\n$<\x01k\xb8\x7f@!>Y:)\x11\x1b\x12\r\x0e\x05\x05\0\0\x01\0d\0\x01\x05g\x06a\0N\0\0\0\x06\x07\x01!2\x17\x16\x1d\x01\x0e\x01#!\x07%2\x17\x16\x1d\x01\x0e\x01\x07\x05\x03\x0e\x01#\"'&5\x13\x04'&'&=\x01>\x013%7\x05\"'&=\x01>\x013!\x01&'5>\x0332\x16\x17\x16\t\x01>\x0132\x17\x16\x1d\x01\x05g\x04\x02\xfe(\x011.\x15\x0f\x031-\xfeV\x15\x01\x96.\x15\x0e\x03--\xfeh\x16\x03;\"#\x1a\x15\x17\xfe\xa0\x1e*\x13\x0e\x0211\x01t\x11\xfe\x99/\x13\x0e\x020-\x01\x10\xfe\xd0\x06\x01\x01\x12\x1c\"\x13\x16'\n*\x01\x18\x01\xff\r/\x1d#\x1b\x16\x06\t\f\x07\xfd{\x1d\x16\x1b\x06\x1f4\xc4\x02\x1d\x16\x1b\x06\x1f2\x02\x04\xfe\xf8**\x16\x13+\x01\x0f\x05\x02\x04\x1c\x14\x18\b\x1f5\x04\xbd\x02\x1d\x15\x19\t\x1f4\x02t\n\f\x12\x11\x1e\x16\r\x17\x18`\xfd\xa5\x02\xb0\x1f\x1f\x17\x14\x1f\b\0\0\0\x02\0d\xff[\x01\xf0\b\x01\0\x10\0%\0\0\0\x06#\"'&7\x13>\x0132\x17\x16\x1d\x01\x0b\x02\x0e\x01#\"'&=\x01\x13>\x0132\x17\x16\x1d\x0125\x01\xaa;\"#\x19\x15\x01A\x04;\"#\x1a\x14BIO\x04;\"#\x1a\x14L\x04:\"#\x1a\x16\x01\x04\xdf+\x17\x12,\x02\xa5(+\x16\x12)\x04\xfd[\xfdq\xfd6(+\x17\x11)\x04\x02\xbf(*\x16\x12 \x03\x02\0\x02\0d\xff,\x04\xa1\x07\x07\0z\0\x96\0\0\0\x0e\x02\x07\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x0e\x03#\".\x02'&=\x01>\x0332\x16\x17\x1e\x0332>\x0276=\x01.\x02'.\x03'.\x01'&'&547>\x037&'&547>\x0332\x16\x17\x16\x17\x16\x1d\x01\x0e\x03#\"'.\x01#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x02\x17\x1e\x04\x17\x16\x15\x14\x07'654'.\x04'\x0e\x03\x07\x06\x15\x14\x17\x1e\x02\x17>\x03\x04]-J^'G*\x1f\x02\x0524$\\cc/0sre!\x10\x02\x12\x1b#\x13\x13\"\r\x0e8K[0>cG*\x04\x02\x01\x07\f\n\x19apo&Qr\"\x1c\x0e\t\x02\b>Zl*3\"\x1c\x02\bS\x80\xa3Uf\xb2C\x12\t\x05\x02\x11\x1a#\x13\x19\x1c+zM/^N2\x05\x01\n\x0b,A&/jg^B\x0f\n\x03\xb2\x02\x07\f0CPZ\"\x1db[B\x06\x01\x1a\x1dh\x87=\x1d]T>\x02\xcabWK\x13\"E5P\x15\x187{1!4#\x13\n ;0\x16\x17\x05\x11\x1e\x18\x0e\x13\x11\x17\x1e\x13\b\x1f4C%\x13\x0f\n\x12\x1c\x16\x0b\x1c*#\x1f\x13&Q1)2 )\x12\x15Nt\\H\x1c#?0G\x13\x15M\x85b8=8\r\x12\x0e\x0e\x04\x11\x1e\x19\x10\x13\"/\x1c4H.\x06\x07\x1b\x16\x1b-&\x11\x13)3D^?)1\x1a\x1e\x02\x12\x11!\x1a*=-%!\x0f\x12;K\\9\t\t/#+?/\x13\x061DR\0\x02\x01\x1a\x05\x9d\x03\xd9\x06\xa3\0\x1a\x007\0\0\0\x0e\x02#\".\x01'&=\x01>\x0332\x163\x1e\x02\x17\x16\x1d\x01\x04\x0e\x02#\".\x01'&547>\x0372632\x1e\x01\x17\x16\x15\x14\x07\x03\xd6\x1f.6\x1b+.\x16\x01\x01\x03\x1d-6\x1c\b\f\x04\x1e#\x15\x03\x02\xfeS\x0e\x1d6)\x1b3(\n\b\x01\x01\x0f\x1b)\x1d\x04\x0b\t\x1c5(\x0b\x06\x01\x06\t2%\x15%.\x17\f\n\x0b#/\x1c\x0b\x02\x04\x1c#\x12\x0f\x0b\b\x0b-,%\x16%\x1a\x12\x16\x07\b\x0f%#\x1b\x04\x02\x0b\x1d\x18\x11\x18\x07\t\0\0\0\x03\0d\0\x05\x06\xa2\x06[\0 \0C\0\x89\0\0\0\x0e\x04#\"$&'&547>\x05$32\x1e\x03\x17\x16\x15\x14\x07'654'.\x03'&#\"\x07\x0e\x05\x07\x06\x15\x14\x17\x1e\x0232>\x04\x04\x07\x0e\x03#\".\x01'&547>\x0532\x1e\x02\x17\x16\x17\x16\x1d\x01\x0e\x01#\"'.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x027632\x1e\x01\x17\x16\x15\x14\x07\x06\x95Gq\x98\xba\xd9w\xb8\xfe\xe3\xbb*\x1d\x04\n9_\x83\xa6\xc2\x01--g\xae\x87c@\f\b\x03\xb1\x02\x05\n.GKQ@Z\x19\x1b}\xe4\x87pS5\t\x04\x1a!\x93\xdc\x8bT\xa0\x91|_;\xfe\xf9 \t<]yEc\x99c\x16\x0f\x03\x06*BZq\x85K%F:0\x0f\x12\x06\x04\x033$\x18\x19\r\x1f#$\x0f?pY:\b\x03\t\f8U90O=-\x0f\x19\x1b\x12\x1d\x13\x04\x04\x01\x02\xd0\xc6\xb4\x9csBp\xc8\x89cq+.^\xbf\xb2\x9exd\x1fQ\x84\xa7\xb3W91\x1c\x1c\x01\x19\x19()D\x81xl2&\x03\x0eN\\~\x94\xa5T$$\\Nm\x95Q1Wz\x90\xa1\xd2\x1d\b6;/I}T9?\x1a\x1d<\x7fwjO/\x12\x1b\x1e\r\f\x10\r\f\x05\x1d2\x11\n\x14\x11\n?l\x8dM\x19\x18*%9N)#/.\n\x11\x0f\x17\f\x0b\t\x06\x04\0\0\0\x02\0y\x03\x1d\x03\xd8\x06\xa2\x001\0F\0\0\0\x06\x07\x06#\"&'.\x015\x0e\x03#\".\x01'&'&547>\x0332\x1e\x01\x17>\x0332\x16\x17\x16\x15\x14\x07\x06\x02\x17\x02.\x03#\"\x0e\x02\x07\x14\x17\x1e\x023267\x13\x03\xaf\x1f\x18\x13\x14\x18(\b\x04\t\x0e78=!Z\xa1v \x14\x02\x01\x04\x05T{\xa6_\x1dA@3\b\x12\x19!\x10\x1d-\x02\x01\x05\x07C%\xb8\x1d&2.\x0b5cO6\x07\x10\x15If8\x15:j0\x03R$\n\x07\x19\x1b\x0f\x1d\x01\x05\x17\x15\x0f;lKE%\x0b\x0b\x1e'5\xac`C\x05\x0f\x1d\x1e\x1c\x15\x0b!\"\x06\t\x14\"0\xfd\xe6E\x02\"\x10\x0e\b\x04$CaU*$->\"\x078\x01x\0\0\0\x02\0d\0\xc4\x04\x8f\x03\xdf\0\x1f\0@\0\0\0\x06\x07\x01\x05\x16\x0e\x03#\"&'$'&>\x017\x01>\x0132\x1e\x01\x17\x16\x15\x14\x07\0\x0e\x02#\"&'\0'&547676%>\x0132\x17\x16\x15\x14\x07\x0e\x01\x07\x05\x01\x16\x04\x8c\x19\x1a\xfe\xcc\x01\x14\x06\x02\x12\x12#\x12\x19(\x13\xfe\xf2\x13\x11\x01\x10\x0e\x01\x93\f\x16\x0b\x15!\x13\x06\x03\x01\xfd\xd0\x12\x14\"\x12\x19'\x13\xfe\xd9\x14\x12\x01\x01#'\x01\x15\"G\x1c'\x11\x0b\x01\x02\x12\x14\xfe\xe0\x01\x17\x04\x03p$\x0f\xfe\xff\xfb\x11$\x1d\x10\f\x19\x14\xf3\x1a\x18-\x19\r\x01X\x06\x07\x10\x1a\x0f\x0b\x0b\x05\x05\xfd\x7f\x1e\x14\r\x19\x16\x01\x03\x17\x14\x1a\x02\x03\x1c\x1c!\xf1'.\x1f\x15\x17\x07\x05\x14&\f\xfc\xfe\xf3\n\0\0\0\x01\0d\x01\xf7\x04\xd9\x04Q\0\x1b\0\0\0\x0e\x02#\".\x01'\x13\x05\"'&547>\x013\x052\x16\x17\x16\x1d\x01\x03\x04\xba\x12\x1d$\x13\x13!\x13\x04\x18\xfc\x94.\x15\x0e\x01\x010-\x03\xc3#&\x06\x04\x1e\x02@ \x19\x10\x12#\x1b\x01h\x05\x1d\x13\x1c\x03\x03 5\x03!\x11\x0e\x15\x07\xfe^\0\0\0\x04\0d\0\x05\x06\xa2\x06K\0\"\0C\0k\0y\0\0\0\x0e\x04#\"$&'&547>\x057632\x17\x1e\x03\x17\x16\x15\x14\x07'654'.\x03'&'#\x0e\x04\x07\x06\x15\x14\x17\x1e\x0232>\x04\0\x06#\"&'&\x01\x03\x0e\x01#\"'&7\x13>\x0132632\x1e\x01\x17\x16\x15\x14\x07\x0e\x03\x07\x01\x16\x1d\x01\x036'&#\"\x06\x07\x03>\x04\x06\x95Gq\x98\xba\xd9w\xb8\xfe\xe3\xbb*\x1d\x04\n9_\x83\xa6\xcc\xb551sY~\x87c@\f\b\x03\xb1\x02\x05\n.G\\5/\xa13\xce\xf0pS5\t\x04\x1a!\x93\xdc\x8bT\xa0\x91|_;\xfe\xee6!\x15$\n\x0e\xfe\xba\x1a\x045  \x18\x13\x01R\x047\x1f\x0e\x9b3ErN\x13\f\x02\x063Ob9\x01\x1e\t\xa7\x0b(!N)T\x1e\x13QJD5#\x02\xd0\xc6\xb4\x9csBp\xc8\x89cq+.^\xbf\xb2\x9ex^\x10\x05\x1b&\x84\xa7\xb3W91\x1c\x1c\x01\x19\x19()D\x81xb$\x1f\n\x10\x96~\x94\xa5T$$\\Nm\x95Q1Wz\x90\xa1\xfe\x9d,\x12\x14\x18\x01H\xfe\xb6%'\x15\x10)\x03<#'\b(L5%-\x11\x13;YB*\f\xfe\xd2\x11\x11\x06\x02dD\x1e$\x03\b\xfe\xf3\x06\r\x14\x1f,\0\0\x01\0Z\x05\x1c\x03_\x05\xc3\0\x11\0\0\0\x06#!\"'&=\x01>\x013!2\x17\x16\x1d\x01\x03\\0+\xfd\xaa.\x15\x0e\x030-\x02V,\x15\x0e\x05P4\x1d\x15\x19\b\x1f5\x1d\x15\x19\t\0\0\0\x02\0\xc8\x05\x07\x03\x9b\x07\xd3\0\x1d\0;\0\0\0\x0e\x02#\".\x01'&547>\x0732\x1e\x01\x17\x16\x15\x14\x07'654'.\x02+\x01\"\x06\x07\x0e\x03\x07\x06\x15\x14\x17\x1e\x0232>\x02\x03\x91Ho\x8cJV~N\x0f\x0b\x02\x03\x18+<P;=?\x1eVxG\r\b\x02\xa3\x02\x05\t'9&\x04\x143\x0f>/\x1a\x13\x03\x02\x07\n,@*.N=&\x06\x11\x80Z0CjD-0\x16\x15 KH?8\x18\r\x04EjA,+\x15\x15\x02\x11\x11\x1c\x19(8\x1f\x02\x05\x160#0\x1b\x10\x10\x1e\x1d); \x1b2I\0\0\0\0\x02\0d\0\0\x04\xf8\x05;\0&\x008\0\0\0\x06#!\x02\x07\x0e\x01#\"'&7\x13!\"'&=\x01>\x013!\x13>\x0132\x17\x16\x15\x03!2\x17\x16\x1d\x01\x02\x06#\x05\"'&'5>\x013!2\x17\x16\x1d\x01\x04\xf5..\xfeN \x10\f1\x1b#\x1b\x16\b&\xfe|.\x15\x0e\x030-\x01\x7f*\x03:\"#\x1a\x15#\x01\xac/\x15\r\x140,\xfc5.\x15\x0e\b\x030+\x03\xd3/\x15\x0e\x02\xed-\xfe\x89&\x1f\x1c\x17\x13C\x01j\x1d\x15\x19\b\x1f5\x01\x81**\x16\x13+\xfe~\x1d\x15\x19\x0e\xfd,5\x03\x1d\x15\x1d\b\x1f5\x1d\x15\x19\t\0\0\x01\0d\x04\f\x03\0\x06\xfa\0A\0\0\0\x06#%\"'&5>\x017>\x057654'.\x02#\"\x0e\x02\x07\x0e\x01#\"'&=\x01467>\x0332\x1e\x01\x17\x16\x15\x14\x07\x0e\x03\x07%2\x17\x16\x1d\x01\x02\xfe)%\xfe\x02'\x15\x12\x02\x14\x12\x1eZeeR4\x04\x01\x06\x07\"4&\x1c:/%\b\x0b(\x14\x1e\x16\x11\x03\x03\x17J[_*;iK\x13\r\x02\x07Lky\x1e\x01''\x12\x0b\x047+\x02\x13\x0f\x1a\x0f \x0e\x1759>AD\"\t\t\x12\x11\x17 \x12\x12\x1e$\x11\x17\x16\x14\x11\x18\x07\x06\r\x07-G1\x1a$E2$+\x0f\x11DlVE\x12\x03\x18\x12\x14\x07\0\0\x01\0d\x03\xa9\x02\x9b\x07\t\0u\0\0\x01#.\x01'.\x025467676;\x0167>\x027654'.\x03'\"\x0e\x02\x07\x0e\x01#\"'&547547>\x0332\x1e\x04\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x16\x17\x16\x17\x16\x15\x14\x07\x0e\x05#\".\x035467632\x17\x16\x17\x1e\x0332>\x027654'.\x01'&\x01\x982\x17\x0b\b\f\f\x0f\x10\x17\x15\x12\x13\x1b\b\x1f\x17\x12%\n\x04\x01\x01\x01&\x1f!'\x19*\x18\x1b\n\x07\x14\f\x14\x1b\x16\x04\x06\x0f*4F) \x1bFB2\"\x02\x01\x03\x06\x12\x18\x15\x1b\x15\x18\x1f\x0f\t\x02\x04\"2@GH\"*D6)\x1f\n\x19\r\x11\x07\b\x18\x07\n\x1b!+\x19,G#\x17\x06\n\x05\x0e&\x11\x1a\x05*\x01\x01\x03\x05\n\x13 \x1a\x10\x07\x05\x01\x05\x02\r\r#\x13\f\t\x0b\x07\b\x12)\x18\x10\x04\f\x11\x1b\x12\x0b\x0b\x12\x0e\x14\t\n\x01\f\t\x19*\"\x12\x01\x1a'8G\x1d\b\b\x12\r\x15%\x1d\x1c\r\r\x19#. &\x0f\x10,H6(\x19\f\x12\")'\x16\x15\x1e\f\x07\x01\x07\r\x11\x1b\x14\x0b%&\x1d\x1c\x16\x11\x0f\n\x19\x14\x05\t\0\0\0\0\x01\x01?\x05:\x03M\x06\xa5\0\x16\0\0\x01\x15\x14\x07\x06\x07\x05\x06#\"'&'547%>\x0132\x1e\x01\x03M\b\f\x15\xfe\x8b\x14\x12!\x17\x0f\x03F\x01G\x0e\x1b\f\x14!\x13\x06[\x0f\x16\r\x11\r\xcc\x05\x11\x16(\x03&$\xbe\n\x07\x10\x1a\0\0\x01\0d\xfd\xa4\x054\x04e\0E\0\0$\x0e\x02#\".\x01'\x0e\x03#\"&'\x03\x0e\x01#\"'&547\x1376\x13>\x0132\x17\x16\x15\x14\x07\x02\x1632>\x01\x13>\x0132\x16\x17\x16\x07\x02\x17\x06\x163267632\x17\x16\x1d\x01\x052\x17+?)BTD\x02\fbow8Av\x1a9\x04;!#\x1a\x15\x01E\n\x047\x04:\"#\x1a\x15\x01B/\xa2k\x8d\x802\x045#\x1c.\t\x12\x18/\x02\f6\x18\n\x18\r\x16\x11&\x13\x0e[)\"\x163i\x1f\x11M5\x1c\x1e\x12\xfd\xc1(+\x17\x12 \x05\x07\x02\xb4_,\x02\xd6(*\x16\x12 \x05\x07\xfdU\xb3U\x95\x02s)1#\x1f;\xb5\xfew\x18\xacD\n\x03\x07\x18\x12\x17\x06\0\0\0\x02\0d\xffp\x05\x98\x07O\0.\x009\0\0\0\x06#'\x03\x0e\x01#\"'&7\x13'\x03\x0e\x01#\"'&5\x13.\x04'&547>\x037$32\x1e\x01\x17\x16\x1d\x01\x04\x0e\x01\x07\x06\x15\x14\x17\x16\x17\x13\x05\x964'N\xbd\x049\"#\x19\x17\x01\xbc\xc6\xcb\x03;\"\"\x1a\x15b0\x81xiG\x12\f\x03\x0e|\xbe\xea{\x01\x7f\x86$3\x1f\x05\x04\xfd\x03\x94{\r\x038AwV\x06\xd84\x04\xf9\x1b)*\x16\x12-\x06\xe8\x01\xf9\")+\x17\x13*\x03\x95\x03\x1c2MeB+3\x17\x1a\x8c\xc6\x80<\x03\x05\x0f\x1a\x17\x13\r\x07J1\xb2\x84\x19\x19l<H\t\x02\x93\0\x01\0d\x02u\x01~\x03\x8d\0\x1b\0\0\0\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x01x\x1c*3\x1a\x1b3$\t\x06\x01\x02\x03\x1b*4\x1a\x1b2$\n\x06\x01\x02\x02\xd91\"\x11\x11#\x19\x12\x16\b\t\x0e 1\"\x11\x11#\x19\x12\x16\b\t\x0e\0\0\0\0\x01\0\xd5\xfdi\x02\xe6\xff\xe1\0>\0\0\0\x0e\x02#\".\x03'&=\x01>\x0332\x17\x1e\x01326754'&#\".\x01'&547>\x037>\x0132\x1e\x01\x17\x14\x06\x07\x1e\x02\x17\x16\x15\x14\x07\x02\xdfC]k.\x1e.(%*\t\x05\x01\x0f\x18$\x13\x19\x18\x16$\x16<?\x03\x13\x16F\x13 \x16\x05\x04\x01\x03\b\x0e\x16\x10\x10-\x18\x13!\x18\x06(\x01\x1cJ8\x0f\t\x01\xfe\x12Z7\x18\n\x12\x17\x1c\x13\r\x0e\b\x10\x1f\x19\x10\x10\x0e\x18)\x19\x07\x1a\x0f\x10\x0f\x19\x0e\n\x0b\x05\x05\x1e/-0\x1e\x1a\x18\f\x17\x0f\x1ac\x04\x06\x1f6'\x1c$\f\x0e\0\0\0\x01\0d\x03\x90\x01M\x06\xfa\0\x19\0\0\x13632\x1e\x01\x17\x16\x1d\x01\x07\x03\x15\x0e\x03#\"'&=\x01\x1376\xb8\x1e(\x12 \x14\x06\x03\x01>\x01\x0f\x1a \x10!\x19\x161\x0b\x04\x06\xe1\x19\x0f\x17\x0e\f\r\x05\n\xfdA\x02\x13\x1c\x14\n\x15\x13$\x03\x02:\x880\0\x02\0x\x03:\x04\x07\x06\x9a\0\x1f\0=\0\0\0\x0e\x04#\".\x01'&547>\x037632\x17\x1e\x02\x17\x16\x15\x14\x07'654'.\x02'&#\"\x07\x0e\x03\x07\x06\x15\x14\x17\x1e\x0232>\x02\x03\xfd6Qgqt6M\x8fk\x1e\x17\x02\x06?i\x94]>/5#UgQ\x11\x0b\x03\xab\x02\x07\f1D8&)\x14\x15?KA.\x05\x01\x10\x12BR(@v]>\x04\x8ev\\B+\x15GrJ9<\x11\x11C\x99\x84Y\n\x03\x04\x19J{K23\x19\x19\x02\x12\x13\"!/H+\n\x07\x02\x05.Ng7\b\t#$,G,!?_\0\0\0\0\x02\0d\0\xc4\x04x\x03\xe1\0\x19\x005\0\0\0\x07\x01\x0e\x01#\".\x01'&7\t\x01&>\x0132\x17\x01\x16\x17\x16\x1d\x01\x04\x07\x01\x06#\".\x01'&54767\x01'&>\x0332\x16\x17\x01\x16\x04v3\xfe\xab\x18*\x16\x13 \x19\x06\n\x13\x01O\xfe\xf9\n\x03/%\x1d\x17\x01H\x10\x06\x04\xfe\x04\"\xfe\xb2:\x17\x13!\x19\x06\x04\x01\x01\x0b\x012\xec*\x04\x0e\x19#\x13\f\x17\n\x01O\x15\x02&/\xfe\xf7\x12\x18\x0e\x16\x10&\x1e\x01\r\x01\x1c\",.\x14\xfe\xac\x0f\f\n\x10\b\x13\x1d\xfe\xf52\f\x17\x0f\n\f\x05\x05\x12\x11\x01\x05\xf7(0\x1e\x19\x10\b\x05\xfe\xa7\x19\0\0\0\0\x03\0d\xff|\x06\xe3\x06x\0\x1b\x000\0c\0\0\0\x06\x01\x0e\x01#\".\x01'&=\x0167\x007>\x0132\x1e\x01\x17\x16\x15\x14\x07%632\x1e\x01\x17\x16\x07\x03\x0e\x03#\"'&5\x136\0\x13676;\x01\x1e\x02\x17\x16\x15\x14\x07\x0337>\x0132\x17\x16\x0f\x0172\x17\x16\x1d\x01\x0e\x01#\x0f\x01\x0e\x01#\"'&57%\"'&7#\x05\xca\x14\xfbU\x0f+\x17\x13!\x18\x06\x04\x02\r\x04\xaf\x1e\x0f\x1b\x0e\x13\"\x16\x06\x03\x01\xfb\xde\x1e(\x12 \x14\x06\x03\x01>\x01\x0f\x1a \x10!\x19\x16<\x04\x02\x1e\xc1\x12#\x0f\x0e\x05\x12\x1d\x15\x04\x02\x05\xa6\xf5\x12\x048 !\x19\x15\x01\x12\x8d+\x15\r\x02/*\x8f\n\x039 !\x19\x14\n\xfe\xa4-\x19\x13\x01\x01\x05\xd2!\xfa\x02\x18\x18\x0e\x16\x10\f\r\x05\x11\x15\x06\x18\x15\t\n\x10\x1a\x0f\x0b\x0b\x05\x05}\x19\x0f\x17\x0e\f\x1c\xfd?\x13\x1c\x14\n\x15\x13'\x02\xc20\xfaz\x02m+\f\x05\x01\x10\x18\x10\b\n\x0e\x10\xfd\xbf\xb9&(\x15\x11*\xb3\x01\x1b\x15\x17\b\x1d3\x02a'(\x15\x12\x1fg\x01\x1c\x16!\0\x03\0d\xff\x83\x06l\x06F\0C\0^\0w\0\0\x04\x06#%\"'&=\x01>\x017>\x057654'.\x02#\"\x0e\x02\x07\x0e\x01#\"'&=\x01>\x017>\x0332\x1e\x01\x17\x16\x15\x14\x07\x0e\x03\x07%2\x17\x16\x15\x14\x07\x02\x06\x01\x0e\x01#\".\x01'&567\x007>\x0132\x1e\x01\x17\x16\x15\x14\x07%632\x1e\x01\x17\x16\x1d\x01\x07\x03\x15\x0e\x03#\"'&=\x01\x136\x06i-+\xfd\xb1-\x18\x14\x01\x18\x14$hrt_<\x04\x01\x06\b&=+!A8)\n\r.\x17#\x19\x14\x01\x02\x05\x19Whm0EyV\x16\x0f\x02\x07X}\x8a#\x01V,\x14\x0e\x01\xa1\x14\xfbU\x0f+\x17\x13!\x18\x06\x04\x02\r\x04\xaf\x1e\x0f\x1b\x0e\x13\"\x16\x06\x03\x01\xfb\xca\x1e(\x12 \x14\x06\x03\x01>\x01\x0f\x1a \x10!\x19\x16<\x04\x012\x02\x16\x12\x17\x06\x12%\x10\x1a=AHKN(\n\n\x16\x13\x1a&\x15\x16\")\x13\x1c\x18\x16\x13\x1c\b\x07\x10\x074R8\x1e)P9*2\x11\x13O|cP\x15\x04\x1c\x14\x17\x06\x04\x05\xb7!\xfa\x02\x18\x18\x0e\x16\x10\f\x12\x11\x15\x06\x18\x15\t\n\x10\x1a\x0f\x0b\x0b\x05\x05K\x19\x0f\x17\x0e\f\r\x05\n\xfdA\x02\x13\x1c\x14\n\x15\x13$\x03\x02\xc20\0\0\0\x03\0d\xff\x83\x07\0\x06\xd1\0\x14\0\x8a\0\xe2\0\0\x05\x0e\x01#\".\x01'&5476\x01>\x0132\x1e\x01\x07\x01#.\x01'.\x025467676;\x0167>\x027654'.\x03'\"\x0e\x02\x07\x0e\x01#\"'&547547>\x0332\x1e\x04\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x16\x17\x16\x17\x16\x15\x14\x07\x0e\x05#\".\x035467632\x17\x16\x17\x1e\x0332>\x027654'.\x01'&\x01#67>\x027676;\x01\x1e\x02\x17\x16\x15\x14\x07\x0e\x02\x07\x06\x0f\x01\x1f\x01326;\x012?\x01>\x0132\x17\x16\x15\x14\x0f\x016;\x012\x17\x16\x1d\x01\x0e\x01+\x01\"\x0f\x01\x0e\x01#\"'&=\x017\x06+\x01\"\x06#\"&#\"'&=\x017#\x01N\x10+\x17\x13 \x19\x06\x04\x01\x01\x04\xda\x10\x19\x0f\x13\".\x11\xfb\xbd:\x1b\r\t\x0e\r\x12\x13\x1a\x19\x14\x16 \t$\x1b\x15*\f\x04\x02\x01\x02,#'-\x1d1\x1b \x0b\b\x17\x0e\x18\x1f\x19\x04\x07\x120=P0%\x1fRL:'\x03\x01\x04\x07\x15\x1b\x19\x1f\x18\x1c$\x11\x0b\x02\x05':KRS'1O>0$\f\x1c\x10\x13\b\n\x1b\t\x0b\x1f'1\x1e2S(\x1b\x07\f\x06\x10-\x13\x1e\x01\xcb\x02\x1b\x18\x1d87\x1d\x12#\x0f\x0e\x05\x12\x1d\x15\x04\x02\x05\x17'(\x16\x12\x16\x02 \x14&\x1c1\x14\x15\x18\r\x12\x048 !\x19\x15\x01\x12-\x1fA+\x15\r\x02/*A\x1f/\n\x039 !\x19\x14\n\t\x1a\x15\rG.*U#-\x19\x13\x01\x01M\x18\x18\x0e\x16\x10\n\x0b\x06\x04\x10\x06B\t\n\x10&3\xfe\xd4\x01\x01\x03\x06\f\x16%\x1e\x12\t\x06\x01\x05\x03\x0f\x0f)\x15\x0f\n\r\b\t\x15/\x1c\x13\x04\r\x14 \x14\r\r\x15\x10\x18\n\x0b\x02\r\x0b\x1d1'\x15\x01\x1e.@S!\n\t\x15\x0f\x18+\" \x0f\x0f\x1e(5&,\x11\x123T?.\x1d\x0e\x15'0-\x1a\x18#\x0e\b\x01\t\x0e\x14 \x17\r+,\" \x1a\x14\x11\f\x1d\x17\x06\n\xfb\xecMK\\\xbf\xb9N+\f\x05\x01\x10\x18\x10\b\n\x0e\x10?\x9a\xa2LA5\x04\x01\x02\x02\x01\xb9&(\x15\x11\x1e\x05\x07\xb3\x01\x1b\x15\x17\b\x1d3\x02a'(\x15\x12\x1f\t^\x01\x04\x06\x1c\x16\x17\x06\x04\0\x02\0d\0\t\x03\xe7\x06\x8d\0\x1b\0\\\0\0\0\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x12\x0e\x04#\".\x01'&547>\x05?\x01>\x0132\x17\x16\x1d\x01\x03\x0e\x03+\x01\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x027>\x0132\x17\x16\x15\x14\x07\x03L\x1c'2\x18\x1b.$\b\x06\x01\x01\x03\x1a(2\x19\x190\"\n\x06\x01\x01\x912Oequ9c\x95^\x14\r\x02\x06%=Pbp1\x19\x03;!#\x1a\x15\x1f\x01\f\x1f6,\x10/^N5\x06\x02\t\n5S9?pX:\n\b8 #\x1b\x14\x01\x05\xe1. \x11\x11!\x18\x10\x14\b\b\x0f\x1f/ \x10\x10!\x18\x11\x15\x07\b\x0f\xfbJkTA+\x16BrL4:\x18\x195mdYD(\x02\xfa)+\x16\x14!\t\xfe\xd1\f%&\x1c0Ql9\x11\x10%!.@\"!=T3%'\x16\x12\"\x07\t\0\0\0\0\x03\0\xc8\xff\xf4\x06d\b\xef\0\x1f\0\"\0<\0\0$\x06#\"&'\x03!\x01\x0e\x01#\".\x01'&5476\x01>\x0132\x16\x17\x01\x16\x1d\x01\t\x01\x05\x12\x0e\x02#\"'%&'&5474>\x0232\x17\x05\x16\x17\x16\x15\x06`<#\x1a-\x07\x8e\xfdo\xfe\xda\x0f,\x15\x13!\x18\x06\x04\x01\x01\x03B\x161\x18\x140\t\x01\xa5\x07\xfd\xdf\xfe\xb0\x02\x03n\x0f\x19#\x13\x1b\x18\xfe\xe4\x1b\t\x07\x01\x0f\x18$\x13\x14\x15\x011\x13\t\x05$0\x1f#\x026\xfd\xc2\x1b\x17\x10\x18\x11\x0b\f\x07\x04\x15\x06D7\" /\xf9\xc8 \b\r\x05r\xfdb\x01\x04\xa8\x1e\x19\x10\x11\xbd\r\x16\x0e\x13\x01\x02\x14\x1d\x18\x10\x07\xcd\x0e\x12\x0e\x14\0\0\0\0\x03\0\xc8\xff\xf4\x06d\b\xf3\0\x1f\0\"\x009\0\0$\x06#\"&'\x03!\x01\x0e\x01#\".\x01'&5476\x01>\x0132\x16\x17\x01\x16\x1d\x01\t\x01\x05\x13\x15\x14\x07\x06\x07\x05\x06#\"'&'547%>\x0132\x1e\x01\x06`<#\x1a-\x07\x8e\xfdo\xfe\xda\x0f,\x15\x13!\x18\x06\x04\x01\x01\x03B\x161\x18\x140\t\x01\xa5\x07\xfd\xdf\xfe\xb0\x02\x03{\b\f\x15\xfe\x8b\x14\x12!\x17\x0f\x03F\x01G\x0e\x1b\f\x14!\x13$0\x1f#\x026\xfd\xc2\x1b\x17\x10\x18\x11\x0b\f\x07\x04\x15\x06D7\" /\xf9\xc8 \b\r\x05r\xfdb\x01\x05\x89\x0f\x16\r\x11\r\xcc\x05\x11\x16(\x03&$\xbe\n\x07\x10\x1a\0\0\0\x03\0\xc8\xff\xf4\x06d\t\x03\0\x1f\0\"\0E\0\0$\x06#\"&'\x03!\x01\x0e\x01#\".\x01'&5476\x01>\x0132\x16\x17\x01\x16\x1d\x01\t\x01\x05\x12\x0e\x02#\"&/\x01\x07\x0e\x01#\".\x01'&547>\x01?\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x06`<#\x1a-\x07\x8e\xfdo\xfe\xda\x0f,\x15\x13!\x18\x06\x04\x01\x01\x03B\x161\x18\x140\t\x01\xa5\x07\xfd\xdf\xfe\xb0\x02\x03\x8d\x12\x1c\"\x13\x16\x1e\x12\x83\xa1\x0f\"\x10\x13\"\x16\x05\x04\x01\x01\x0e\x10\xa0\x1930).\x1b\xad\b$0\x1f#\x026\xfd\xc2\x1b\x17\x10\x18\x11\x0b\f\x07\x04\x15\x06D7\" /\xf9\xc8 \b\r\x05r\xfdb\x01\x04\x84\x1d\x16\r\x15\x17\xb3\xb9\r\x0f\x10\x19\x0f\n\x0b\x05\x05\x0e\x1d\r\xb4\x1f3\x1a$\xe7\x11\x11\x07\0\0\0\0\x03\0\xc8\xff\xf4\x06d\b\xfe\0\x1f\0\"\0W\0\0$\x06#\"&'\x03!\x01\x0e\x01#\".\x01'&5476\x01>\x0132\x16\x17\x01\x16\x1d\x01\t\x01\x05\x12\x0e\x02#\".\x04#\x0e\x01\x07\x0e\x03#\"'&5475>\x0332\x1e\x0432>\x027>\x0132\x17\x16\x15\x14\x07\x06`<#\x1a-\x07\x8e\xfdo\xfe\xda\x0f,\x15\x13!\x18\x06\x04\x01\x01\x03B\x161\x18\x140\t\x01\xa5\x07\xfd\xdf\xfe\xb0\x02\x03\xff >fH,E4*& \f\x13\x13\x05\x02\x12\x1b!\x10#\x1a\x15\x01\x05!8Q5,F5*$!\x12\n\x17\x18\x13\x04\x04;\"#\x1a\x14\x01$0\x1f#\x026\xfd\xc2\x1b\x17\x10\x18\x11\x0b\f\x07\x04\x15\x06D7\" /\xf9\xc8 \b\r\x05r\xfdb\x01\x05`dX>\x19$)!\x14\r3\x1d\x13\x1d\x14\x0b\x17\x12\x1e\x05\x06\x06*XI1\x19%)!\x14\t\x1a2)(+\x16\x13\x1f\x06\x07\0\0\0\x04\0\xc8\xff\xf4\x06d\b\xcd\0\x1f\0\"\0=\0Z\0\0$\x06#\"&'\x03!\x01\x0e\x01#\".\x01'&5476\x01>\x0132\x16\x17\x01\x16\x1d\x01\t\x01\x05\x12\x0e\x02#\".\x01'&=\x01>\x0332\x163\x1e\x02\x17\x16\x1d\x01\x04\x0e\x02#\".\x01'&547>\x0372632\x1e\x01\x17\x16\x15\x14\x07\x06`<#\x1a-\x07\x8e\xfdo\xfe\xda\x0f,\x15\x13!\x18\x06\x04\x01\x01\x03B\x161\x18\x140\t\x01\xa5\x07\xfd\xdf\xfe\xb0\x02\x03\xdd\x1f.6\x1b+.\x16\x01\x01\x03\x1d-6\x1c\b\f\x04\x1e#\x15\x03\x02\xfeS\x0e\x1d6)\x1b3(\n\b\x01\x01\x0f\x1b)\x1d\x04\x0b\t\x1c5(\x0b\x06\x01$0\x1f#\x026\xfd\xc2\x1b\x17\x10\x18\x11\x0b\f\x07\x04\x15\x06D7\" /\xf9\xc8 \b\r\x05r\xfdb\x01\x05\x132%\x15%.\x17\f\n\x0b#/\x1c\x0b\x02\x04\x1c#\x12\x0f\x0b\b\x0b-,%\x16%\x1a\x12\x16\x07\b\x0f%#\x1b\x04\x02\x0b\x1d\x18\x11\x18\x07\t\0\0\0\0\x04\0\xc8\xff\xf4\x06d\t3\0\x1f\0\"\0B\0`\0\0$\x06#\"&'\x03!\x01\x0e\x01#\".\x01'&5476\x01>\x0132\x16\x17\x01\x16\x1d\x01\t\x01\x05\x12\x0e\x02#\".\x01'&547>\x047>\x0332\x1e\x01\x17\x16\x15\x14\x07'654'&#\"\x06\x07\x06\x072\x15\x07\x0e\x02\x07\x15\x14\x17\x1e\x0232>\x02\x06`<#\x1a-\x07\x8e\xfdo\xfe\xda\x0f,\x15\x13!\x18\x06\x04\x01\x01\x03B\x161\x18\x140\t\x01\xa5\x07\xfd\xdf\xfe\xb0\x02\x03S>\\m48U4\n\b\x01\x02\x0f\x16!\x1a\t\x168:5\x169V5\f\x07\x02\x95\x01\x12\x15&\x101\f#\x17\x02\x01\x03\n\t\x01\x04\x05\x17\x1b\x0e\x1f7,\x1b$0\x1f#\x026\xfd\xc2\x1b\x17\x10\x18\x11\x0b\f\x07\x04\x15\x06D7\" /\xf9\xc8 \b\r\x05r\xfdb\x01\x04\xe2aB#/J-\x1f!\f\f\x13*)& \b\x16\x1c\x0f\x04)C,\x1c \x0e\x10\x02\t\t&\x14\x18\x05\x06\x0f&\x01\x01\x03\x0e\x12\b\x0e\x13\x10\x15\x1d\x0e\x12 -\0\x02\0\xc8\xff\xfa\b\xe7\x07\t\0=\0C\0\0\0\x06#\x05\x03%2\x17\x16\x1d\x01\x0e\x01%\x06\x03\x052\x17\x16\x1d\x01\x0e\x01#\x04#\"'&'&547\x13!\0\x07\x0e\x01#\".\x01'&54767\0>\x02!2\x17\x16\x1d\x01\x04\x07\x06\x01!\x13\b\xe40-\xfdaC\x02\n/\x15\x0e\x03/\xfd\xc0\x0f/\x02\xb4.\x16\x0e\x030-\xfc\xff\x0f/\x15\f\x05\x04\x01A\xfd\xfc\xfe\xbb\"\x10&\x13\x13!\x16\x06\x04\x01\x02\x16\x03\x99BL]\x030.\x16\x0e\xfc5\x14\x19\xfeG\x01\xadU\x06\x87<\x03\xfdu\x03!\x18\x1c\n#=\x10\x9f\xfeK\x01\x1f\x19\x1d\t#<\x01&\r\x12\r\r\x07\x06\x02\x0f\xfd\xd2+\x12\x14\x11\x1c\x11\f\r\x07\x04\x1b\x1f\x06.-\x15\x03!\x17\x1e\t[\n\x17\xfd\b\x03\x19\0\0\0\x02\0\x96\xfdK\x05\xb0\x07\x0e\0H\0\x87\0\0\0\x06\x07\x0e\x03#\".\x01'&547>\x0532\x1e\x02\x17\x16\x17\x16\x1d\x01\x0e\x01#\"&'.\x03#\"\x0e\x01\x02\x07\x06\x15\x14\x17\x1e\x0232>\x027>\x0132\x1e\x01\x17\x16\x15\x14\x07\0\x0e\x02#\".\x03'&=\x01>\x0332\x17\x1e\x01326754'&#\".\x01'&547>\x037>\x0132\x1e\x01\x17\x14\x06\x07\x1e\x02\x17\x16\x15\x14\x07\x05\x96\n\f:\x92\xa6\xb8_\x9a\xf0\x9e\"\x17\x05\x0b;c\x8a\xb6\xe0\x87E\x86rY\x18\t\t\x05\x032\x1f\x14/\x0e\x10;O`5\x9a\xe7\xa1_\x0f\x05\x15\x1cy\xadhM\x8e\x80m+\x0f'\x13\x13\"\x16\x07\x04\x01\xfezC]k.\x1e.(%*\t\x05\x01\x0f\x18$\x13\x19\x18\x16$\x16<?\x03\x13\x16F\x13 \x16\x05\x04\x01\x03\b\x0e\x16\x10\x10-\x18\x13!\x18\x06(\x01\x1cJ8\x0f\t\x01\x01`\x1c\x0eMvP*\x83\xe4\x9bhr69f\xf0\xe1\xbd\x89M.Lb2\x10\x17\x13\x14\x0b$/\x11\x1e\x1fH>(\x7f\xdc\xfe\xdd\x8f1/bTz\xa6V!@X7\x14\x15\x11\x1b\x12\r\r\x07\x04\xfc\x87Z7\x18\n\x12\x17\x1c\x13\r\x0e\b\x10\x1f\x19\x10\x10\x0e\x18)\x19\x07\x1a\x0f\x10\x0f\x19\x0e\n\x0b\x05\x05\x1e/-0\x1e\x1a\x18\f\x17\x0f\x1ac\x04\x06\x1f6'\x1c$\f\x0e\0\0\x02\0\xfa\xff\xfb\x05r\b\xef\x004\0N\0\0\0\x06#\x05\x03\x052\x17\x16\x1d\x01\x0e\x01#%\x03$32\x17\x16\x1d\x01\x0e\x01#\"\x05\x06# '&'&=\x01>\x017\x134>\x0232\x052\x17\x16\x1d\x01\x02\x0e\x02#\"'%&'&5474>\x0232\x17\x05\x16\x17\x16\x15\x05o/.\xfdA@\x02/.\x15\x0e\x03/-\xfd\xc6=\x02\x91L.\x16\x0e\x03)-R\xfey(%\xfe\xc1\x1f\r\x04\x04\x01\x04\x06\xa3\x13\x1d$\x13#\x02\xee/\x15\x0e\xce\x0f\x19#\x13\x1b\x18\xfe\xe4\x1b\t\x07\x01\x0f\x18$\x13\x14\x15\x011\x13\t\x05\x06\x85<\x04\xfd\x99\x02!\x17\x1d\n#<\x02\xfd\x93\x02 \x18\x1d\t#6\x02\x01\x14\r\x10\f\x0f\x07\x12\x17\f\x06\t)#\x1d\x13\x01!\x17\x1d\n\x01 \x1e\x19\x10\x11\xbd\r\x16\x0e\x13\x01\x02\x14\x1d\x18\x10\x07\xcd\x0e\x12\x0e\x14\0\x02\0\xfa\xff\xfb\x05r\b\xef\x004\0K\0\0\0\x06#\x05\x03\x052\x17\x16\x1d\x01\x0e\x01#%\x03$32\x17\x16\x1d\x01\x0e\x01#\"\x05\x06# '&'&=\x01>\x017\x134>\x0232\x052\x17\x16\x1d\x01\x03\x15\x14\x07\x06\x07\x05\x06#\"'&'547%>\x0132\x1e\x01\x05o/.\xfdA@\x02/.\x15\x0e\x03/-\xfd\xc6=\x02\x91L.\x16\x0e\x03)-R\xfey(%\xfe\xc1\x1f\r\x04\x04\x01\x04\x06\xa3\x13\x1d$\x13#\x02\xee/\x15\x0e\xa3\b\f\x15\xfe\x8b\x14\x12!\x17\x0f\x03F\x01G\x0e\x1b\f\x14!\x13\x06\x85<\x04\xfd\x99\x02!\x17\x1d\n#<\x02\xfd\x93\x02 \x18\x1d\t#6\x02\x01\x14\r\x10\f\x0f\x07\x12\x17\f\x06\t)#\x1d\x13\x01!\x17\x1d\n\x01\xfd\x0f\x16\r\x11\r\xcc\x05\x11\x16(\x03&$\xbe\n\x07\x10\x1a\0\0\0\0\x02\0\xfa\xff\xfb\x05r\t\x17\x004\0W\0\0\0\x06#\x05\x03\x052\x17\x16\x1d\x01\x0e\x01#%\x03$32\x17\x16\x1d\x01\x0e\x01#\"\x05\x06# '&'&=\x01>\x017\x134>\x0232\x052\x17\x16\x1d\x01\x02\x0e\x02#\"&/\x01\x07\x0e\x01#\".\x01'&547>\x01?\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x05o/.\xfdA@\x02/.\x15\x0e\x03/-\xfd\xc6=\x02\x91L.\x16\x0e\x03)-R\xfey(%\xfe\xc1\x1f\r\x04\x04\x01\x04\x06\xa3\x13\x1d$\x13#\x02\xee/\x15\x0e\x93\x12\x1c\"\x13\x16\x1e\x12\x83\xa1\x0f\"\x10\x13\"\x16\x05\x04\x01\x01\x0e\x10\xa0\x1930).\x1b\xad\b\x06\x85<\x04\xfd\x99\x02!\x17\x1d\n#<\x02\xfd\x93\x02 \x18\x1d\t#6\x02\x01\x14\r\x10\f\x0f\x07\x12\x17\f\x06\t)#\x1d\x13\x01!\x17\x1d\n\x01\x10\x1d\x16\r\x15\x17\xb3\xb9\r\x0f\x10\x19\x0f\n\x0b\x05\x05\x0e\x1d\r\xb4\x1f3\x1a$\xe7\x11\x11\x07\0\x03\0\xfa\xff\xfb\x05r\b\xd1\x004\0O\0l\0\0\0\x06#\x05\x03\x052\x17\x16\x1d\x01\x0e\x01#%\x03$32\x17\x16\x1d\x01\x0e\x01#\"\x05\x06# '&'&=\x01>\x017\x134>\x0232\x052\x17\x16\x1d\x01\x02\x0e\x02#\".\x01'&=\x01>\x0332\x163\x1e\x02\x17\x16\x1d\x01\x04\x0e\x02#\".\x01'&547>\x0372632\x1e\x01\x17\x16\x15\x14\x07\x05o/.\xfdA@\x02/.\x15\x0e\x03/-\xfd\xc6=\x02\x91L.\x16\x0e\x03)-R\xfey(%\xfe\xc1\x1f\r\x04\x04\x01\x04\x06\xa3\x13\x1d$\x13#\x02\xee/\x15\x0eU\x1f.6\x1b+.\x16\x01\x01\x03\x1d-6\x1c\b\f\x04\x1e#\x15\x03\x02\xfeS\x0e\x1d6)\x1b3(\n\b\x01\x01\x0f\x1b)\x1d\x04\x0b\t\x1c5(\x0b\x06\x01\x06\x85<\x04\xfd\x99\x02!\x17\x1d\n#<\x02\xfd\x93\x02 \x18\x1d\t#6\x02\x01\x14\r\x10\f\x0f\x07\x12\x17\f\x06\t)#\x1d\x13\x01!\x17\x1d\n\x01\x8f2%\x15%.\x17\f\n\x0b#/\x1c\x0b\x02\x04\x1c#\x12\x0f\x0b\b\x0b-,%\x16%\x1a\x12\x16\x07\b\x0f%#\x1b\x04\x02\x0b\x1d\x18\x11\x18\x07\t\0\x02\0\xfa\xff\xfa\x03\xc8\b\xef\0'\0A\0\0\x01#\"'&=\x01>\x013%2\x17\x16\x1d\x01\x0e\x01+\x01\x0332\x17\x16\x1d\x01\x0e\x01#\x05\"'&=\x01>\x01;\x01\0\x0e\x02#\"'%&'&5474>\x0232\x17\x05\x16\x17\x16\x15\x026s.\x15\x0e\x030-\x01\xa7,\x15\x0e\x030+\x83p\x8a,\x15\x0e\x030+\xfeY.\x15\x0e\x030-j\x01\xeb\x0f\x19#\x13\x1b\x18\xfe\xe4\x1b\t\x07\x01\x0f\x18$\x13\x14\x15\x011\x13\t\x05\x06W \x17\x1d\t\"<\x01 \x18\x1c\n$9\xfa^ \x17\x1d\n\";\x01 \x18\x1c\t#;\x07\x13\x1e\x19\x10\x11\xbd\r\x16\x0e\x13\x01\x02\x14\x1d\x18\x10\x07\xcd\x0e\x12\x0e\x14\0\0\0\0\x02\0\xfa\xff\xfa\x03\xc8\b\xff\0'\0>\0\0\x01#\"'&=\x01>\x013%2\x17\x16\x1d\x01\x0e\x01+\x01\x0332\x17\x16\x1d\x01\x0e\x01#\x05\"'&=\x01>\x01;\x01\x01\x15\x14\x07\x06\x07\x05\x06#\"'&'547%>\x0132\x1e\x01\x026s.\x15\x0e\x030-\x01\xa7,\x15\x0e\x030+\x83p\x8a,\x15\x0e\x030+\xfeY.\x15\x0e\x030-j\x02\x02\b\f\x15\xfe\x8b\x14\x12!\x17\x0f\x03F\x01G\x0e\x1b\f\x14!\x13\x06W \x17\x1d\t\"<\x01 \x18\x1c\n$9\xfa^ \x17\x1d\n\";\x01 \x18\x1c\t#;\b\0\x0f\x16\r\x11\r\xcc\x05\x11\x16(\x03&$\xbe\n\x07\x10\x1a\0\0\0\x02\0\xfa\xff\xfa\x03\xd9\t\x1f\0'\0J\0\0\x01#\"'&=\x01>\x013%2\x17\x16\x1d\x01\x0e\x01+\x01\x0332\x17\x16\x1d\x01\x0e\x01#\x05\"'&=\x01>\x01;\x01\0\x0e\x02#\"&/\x01\x07\x0e\x01#\".\x01'&547>\x01?\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x026s.\x15\x0e\x030-\x01\xa7,\x15\x0e\x030+\x83p\x8a,\x15\x0e\x030+\xfeY.\x15\x0e\x030-j\x02\x14\x12\x1c\"\x13\x16\x1e\x12\x83\xa1\x0f\"\x10\x13\"\x16\x05\x04\x01\x01\x0e\x10\xa0\x1930).\x1b\xad\b\x06W \x17\x1d\t\"<\x01 \x18\x1c\n$9\xfa^ \x17\x1d\n\";\x01 \x18\x1c\t#;\x07\x0b\x1d\x16\r\x15\x17\xb3\xb9\r\x0f\x10\x19\x0f\n\x0b\x05\x05\x0e\x1d\r\xb4\x1f3\x1a$\xe7\x11\x11\x07\0\0\0\0\x03\0\xfa\xff\xfa\x04'\b\xc1\0'\0B\0_\0\0\x01#\"'&=\x01>\x013%2\x17\x16\x1d\x01\x0e\x01+\x01\x0332\x17\x16\x1d\x01\x0e\x01#\x05\"'&=\x01>\x01;\x01\0\x0e\x02#\".\x01'&=\x01>\x0332\x163\x1e\x02\x17\x16\x1d\x01\x04\x0e\x02#\".\x01'&547>\x0372632\x1e\x01\x17\x16\x15\x14\x07\x026s.\x15\x0e\x030-\x01\xa7,\x15\x0e\x030+\x83p\x8a,\x15\x0e\x030+\xfeY.\x15\x0e\x030-j\x02`\x1f.6\x1b+.\x16\x01\x01\x03\x1d-6\x1c\b\f\x04\x1e#\x15\x03\x02\xfeS\x0e\x1d6)\x1b3(\n\b\x01\x01\x0f\x1b)\x1d\x04\x0b\t\x1c5(\x0b\x06\x01\x06W \x17\x1d\t\"<\x01 \x18\x1c\n$9\xfa^ \x17\x1d\n\";\x01 \x18\x1c\t#;\x07r2%\x15%.\x17\f\n\x0b#/\x1c\x0b\x02\x04\x1c#\x12\x0f\x0b\b\x0b-,%\x16%\x1a\x12\x16\x07\b\x0f%#\x1b\x04\x02\x0b\x1d\x18\x11\x18\x07\t\0\0\0\0\x02\0\xc8\xff\xff\x06\\\x07\n\0'\0E\0\0\0\x0e\x04#\"'\"'&7\x13'\"'&=\x01>\x013\x17\x13632\x1763 \x17\x1e\x01\x17\x16\x15\x14\x0f\x01654'.\x01$\x07#\x03!2\x17\x16\x1d\x01\x0e\x01#!\x03\x1632>\x04\x06Ei\x9f\xcb\xe2\xeeq\x1d\x8e#\x1a\x15\x01So.\x15\x0e\x030-q:\x1aN\x11\x13*(\x01t\x91\x9f\xc8'\x18\t\xb2\b\x11\x1d\x94\xfe\xfc\xb7\xb6)\x01?/\x15\x0e\x03/.\xfe\xbfL6\x19j\xcd\xb8\x9fyO\x02\xc3\xff\xbe\x86^#\x03\x19\x142\x02\xec\x01!\x17\x1c\n#:\x01\x02\xc0B\x03\x0139\xda\xafl\x8dUa\x06WLpV\x8c\xb1D\f\xfd\xc9!\x17\x1c\n#:\xfdj\x02!Lj\x95\xc3\0\0\0\x02\0\xfa\xff\xf7\x06\x82\t\x12\0#\0X\0\0%\x06+\x01\".\x01\x015\x03\x0e\x01#\"'&574\x13>\x0232\x16\x17\x01\x13>\x0132\x17\x16\x15\x02\x0e\x02#\".\x04#\x0e\x01\x07\x0e\x03#\"'&5475>\x0332\x1e\x0432>\x027>\x0132\x17\x16\x15\x14\x07\x05\xee\x0e|\x01\x1d&\x1b\xfd3\x8d\x0b5\x1d#\x1a\x17\x01\x9d\x042:*\x18*\f\x02\xd3~\x03;!#\x1a\x15\xbd >fH,E4*& \f\x13\x13\x05\x02\x12\x1b!\x10#\x1a\x15\x01\x05!8Q5,F5*$!\x12\n\x17\x18\x13\x04\x04;\"#\x1a\x14\x01|\x85\x15\x1e\x05\x86\x03\xfa\x99&&\x1a\x14\x19\x01\x19\x067*4\x16\x1a\x1b\xfaI\x05\x8d,/\x19\x15-\x01\xe7dX>\x19$)!\x14\r3\x1d\x13\x1d\x14\x0b\x17\x12\x1e\x05\x06\x06*XI1\x19%)!\x14\t\x1a2)(+\x16\x13\x1f\x06\x07\0\0\0\x03\0\xfa\xff\xfd\x06\xba\t\x03\0%\0I\0c\0\0\0\x0e\x04#\"$&'&547>\x05767632\x17\x1e\x04\x17\x16\x15\x14\x07'654'.\x04'&'\"\x07\x0e\x05\x07\x06\x15\x14\x17\x1e\x0232>\x04\x02\x0e\x02#\"'%&'&5474>\x0232\x17\x05\x16\x17\x16\x15\x06\xadCj\x8e\xac\xc9l\xa8\xfe\xfc\xaa&\x1b\x05\n:]\x81\x8a\xbakO+\x19'\x19\x1eL\x9byV4\n\x05\x03\xb1\x03\x03\x06%8L]?\x15,3Cf\x7f|iO2\t\x04\x15\x1c\x82\xc3~L\x90\x84oX6\xd5\x0f\x19#\x13\x1b\x18\xfe\xe4\x1b\t\x07\x01\x0f\x18$\x13\x14\x15\x011\x13\t\x05\x03\x1a\xda\xc9\xaf\x80K\x7f\xdf\x99iy28f\xd4\xc6\xaf\x91U\x1d\x11\x07\x04\x01\x05Y\x95\xbc\xc6`92%!\x01\"$$'I\x91\x87mM\x0b\x04\t\x10\x16<l\x8c\xa2\xb6]-+`Uw\xaaZ6c\x87\xa2\xb5\x04\xb0\x1e\x19\x10\x11\xbd\r\x16\x0e\x13\x01\x02\x14\x1d\x18\x10\x07\xcd\x0e\x12\x0e\x14\0\0\0\x03\0\xfa\xff\xfd\x06\xba\b\xf7\0%\0I\0`\0\0\0\x0e\x04#\"$&'&547>\x05767632\x17\x1e\x04\x17\x16\x15\x14\x07'654'.\x04'&'\"\x07\x0e\x05\x07\x06\x15\x14\x17\x1e\x0232>\x04\x03\x15\x14\x07\x06\x07\x05\x06#\"'&'547%>\x0132\x1e\x01\x06\xadCj\x8e\xac\xc9l\xa8\xfe\xfc\xaa&\x1b\x05\n:]\x81\x8a\xbakO+\x19'\x19\x1eL\x9byV4\n\x05\x03\xb1\x03\x03\x06%8L]?\x15,3Cf\x7f|iO2\t\x04\x15\x1c\x82\xc3~L\x90\x84oX6\xb8\b\f\x15\xfe\x8b\x14\x12!\x17\x0f\x03F\x01G\x0e\x1b\f\x14!\x13\x03\x1a\xda\xc9\xaf\x80K\x7f\xdf\x99iy28f\xd4\xc6\xaf\x91U\x1d\x11\x07\x04\x01\x05Y\x95\xbc\xc6`92%!\x01\"$$'I\x91\x87mM\x0b\x04\t\x10\x16<l\x8c\xa2\xb6]-+`Uw\xaaZ6c\x87\xa2\xb5\x05\x81\x0f\x16\r\x11\r\xcc\x05\x11\x16(\x03&$\xbe\n\x07\x10\x1a\0\0\x03\0\xfa\xff\xfd\x06\xba\t\x1f\0%\0I\0l\0\0\0\x0e\x04#\"$&'&547>\x05767632\x17\x1e\x04\x17\x16\x15\x14\x07'654'.\x04'&'\"\x07\x0e\x05\x07\x06\x15\x14\x17\x1e\x0232>\x04\x02\x0e\x02#\"&/\x01\x07\x0e\x01#\".\x01'&547>\x01?\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x06\xadCj\x8e\xac\xc9l\xa8\xfe\xfc\xaa&\x1b\x05\n:]\x81\x8a\xbakO+\x19'\x19\x1eL\x9byV4\n\x05\x03\xb1\x03\x03\x06%8L]?\x15,3Cf\x7f|iO2\t\x04\x15\x1c\x82\xc3~L\x90\x84oX6v\x12\x1c\"\x13\x16\x1e\x12\x83\xa1\x0f\"\x10\x13\"\x16\x05\x04\x01\x01\x0e\x10\xa0\x1930).\x1b\xad\b\x03\x1a\xda\xc9\xaf\x80K\x7f\xdf\x99iy28f\xd4\xc6\xaf\x91U\x1d\x11\x07\x04\x01\x05Y\x95\xbc\xc6`92%!\x01\"$$'I\x91\x87mM\x0b\x04\t\x10\x16<l\x8c\xa2\xb6]-+`Uw\xaaZ6c\x87\xa2\xb5\x04\x94\x1d\x16\r\x15\x17\xb3\xb9\r\x0f\x10\x19\x0f\n\x0b\x05\x05\x0e\x1d\r\xb4\x1f3\x1a$\xe7\x11\x11\x07\0\0\0\x03\0\xfa\xff\xfd\x06\xba\t\"\0%\0I\0~\0\0\0\x0e\x04#\"$&'&547>\x05767632\x17\x1e\x04\x17\x16\x15\x14\x07'654'.\x04'&'\"\x07\x0e\x05\x07\x06\x15\x14\x17\x1e\x0232>\x04\x02\x0e\x02#\".\x04#\x0e\x01\x07\x0e\x03#\"'&5475>\x0332\x1e\x0432>\x027>\x0132\x17\x16\x15\x14\x07\x06\xadCj\x8e\xac\xc9l\xa8\xfe\xfc\xaa&\x1b\x05\n:]\x81\x8a\xbakO+\x19'\x19\x1eL\x9byV4\n\x05\x03\xb1\x03\x03\x06%8L]?\x15,3Cf\x7f|iO2\t\x04\x15\x1c\x82\xc3~L\x90\x84oX6  >fH,E4*& \f\x13\x13\x05\x02\x12\x1b!\x10#\x1a\x15\x01\x05!8Q5,F5*$!\x12\n\x17\x18\x13\x04\x04;\"#\x1a\x14\x01\x03\x1a\xda\xc9\xaf\x80K\x7f\xdf\x99iy28f\xd4\xc6\xaf\x91U\x1d\x11\x07\x04\x01\x05Y\x95\xbc\xc6`92%!\x01\"$$'I\x91\x87mM\x0b\x04\t\x10\x16<l\x8c\xa2\xb6]-+`Uw\xaaZ6c\x87\xa2\xb5\x05xdX>\x19$)!\x14\r3\x1d\x13\x1d\x14\x0b\x17\x12\x1e\x05\x06\x06*XI1\x19%)!\x14\t\x1a2)(+\x16\x13\x1f\x06\x07\0\0\x04\0\xfa\xff\xfd\x06\xba\b\xe5\0%\0I\0d\0\x81\0\0\0\x0e\x04#\"$&'&547>\x05767632\x17\x1e\x04\x17\x16\x15\x14\x07'654'.\x04'&'\"\x07\x0e\x05\x07\x06\x15\x14\x17\x1e\x0232>\x04\x02\x0e\x02#\".\x01'&=\x01>\x0332\x163\x1e\x02\x17\x16\x1d\x01\x04\x0e\x02#\".\x01'&547>\x0372632\x1e\x01\x17\x16\x15\x14\x07\x06\xadCj\x8e\xac\xc9l\xa8\xfe\xfc\xaa&\x1b\x05\n:]\x81\x8a\xbakO+\x19'\x19\x1eL\x9byV4\n\x05\x03\xb1\x03\x03\x06%8L]?\x15,3Cf\x7f|iO2\t\x04\x15\x1c\x82\xc3~L\x90\x84oX6T\x1f.6\x1b+.\x16\x01\x01\x03\x1d-6\x1c\b\f\x04\x1e#\x15\x03\x02\xfeS\x0e\x1d6)\x1b3(\n\b\x01\x01\x0f\x1b)\x1d\x04\x0b\t\x1c5(\x0b\x06\x01\x03\x1a\xda\xc9\xaf\x80K\x7f\xdf\x99iy28f\xd4\xc6\xaf\x91U\x1d\x11\x07\x04\x01\x05Y\x95\xbc\xc6`92%!\x01\"$$'I\x91\x87mM\x0b\x04\t\x10\x16<l\x8c\xa2\xb6]-+`Uw\xaaZ6c\x87\xa2\xb5\x05\x1f2%\x15%.\x17\f\n\x0b#/\x1c\x0b\x02\x04\x1c#\x12\x0f\x0b\b\x0b-,%\x16%\x1a\x12\x16\x07\b\x0f%#\x1b\x04\x02\x0b\x1d\x18\x11\x18\x07\t\0\0\0\x01\0\xc8\x01\r\x04\xe9\x05\x06\x002\0\0\0\x06\x07\t\x01\x16\x1d\x01\x0e\x03#\"'\t\x01\x06#\"'&=\x0167\t\x01&'&=\x01>\x0332\x17\t\x01632\x1e\x01\x17\x16\x1d\x01\x04\xe7\f\f\xfey\x011\x16\x02\x12\x10\"\x13'\x17\xfe\xd9\xfe\x88\x1f (\x17\x13\x03 \x01x\xfe\xe2\t\x03\x03\x01\x12\x1b$\x13)\x18\x01\x07\x01i '\x13\"\x17\x06\x04\x04\xa3\x19\f\xfe\x8d\xfe\x96\x17\x1d\x05\x10\x1e\x17\x10\x1d\x01U\xfe\xa0\x18\x1c\x17\x1c\b \x1c\x01s\x01f\f\r\t\n\x05\x11\x1f\x18\x0e%\xfe\xbd\x01J$\x0f\x18\x10\r\r\x05\0\0\0\0\x03\0\xc8\xfe\xf4\x06\x88\x07\xde\0\x1d\0>\0\x8e\0\0\x01\x06\x07\x0e\x05\x07\x06\x15\x14\x17\x16\x17\x16\x1767>\x0376\x1a\x01767\x06\x07\x06\n\x01\x07\x0e\x03\x07\x06\x07\x1632>\x047654'.\x03'&'>\x017>\x0132\x17\x16\x15\x14\x07\x14\x0e\x02\x07\x06\x07\x16\x17\x1e\x02\x17\x16\x15\x14\x07\x0e\x05#\"'\x06\x07\x06\x07\x0e\x01#\".\x01'&5474676767&'.\x01'&547>\x057>\x013\x04@*2f\x8f~iO2\t\x04\x15\x1cA7O\x04\x05\n\x17\x17\x19\r+]b3$\xd0&$2a[-\f\x18\x19\x17\n\x07\x07),L\x90\x84oX6\t\x03\x03\x06%8L.\x07b\x15\x18\t\n7\x1c#\x1b\x16\x01\x03\t\x1c\x0e\x04\x04E8<V4\n\x05\x03\nCj\x8e\xac\xc9lC<\x0f\x10\x12\x11\r1\x1b\x13!\x19\x06\x04\x01\x03\x03\x11\x12\x10\x11\x02\x02\x82\xaa&\x1b\x05\n:]\x81\x9c\xbakOU'\x06I\x04\x0b\x16:g\x8c\xa4\xb8].+aVxVH,\x11\x10&BDH*\x97\x01\x1b\x01\x17\x8db;hb\x8b\xfe\xef\xfe\xe8\x94+JFB%\x1c\x19\x067d\x88\xa3\xb6^\"%%&K\x92\x88n&\x06\xf8'; %%\x19\x16!\x06\x06\x03\n(A\x1f\t\t+DK\xbe\xc7b92%\"o\xdb\xcb\xb0\x82K\n,-48$#\r\x19\x11\x0b\x0f\x05\x06\x05\f\x066511\x01\x01@\xe0\x9bkz37h\xd5\xc8\xb0\x8aU\x1d\x12\x0e\0\0\x02\0\xfa\0\0\x05\xfb\t\x1b\0,\0F\0\0\0\x0e\x03#\".\x02'&'54\x13>\x0132\x17\x16\x07\x03\x16\x17\x1e\x0332>\x03\x13>\x0132\x17\x16\x1d\x01\0\x0e\x02#\"'%&'&5474>\x0232\x17\x05\x16\x17\x16\x15\x05\xacFh\x97\xc8\x82U\xa5\x8fk\x1a\x0e\x07q\x04;\"#\x1a\x15\x01v\x03\x10\x0fDayD^\x90iI0N\x04;\"#\x1a\x14\xfe\xc2\x0f\x19#\x13\x1b\x18\xfe\xe4\x1b\t\x07\x01\x0f\x18$\x13\x14\x15\x011\x13\t\x05\x02\x14\xbe\x9fuB/\\\x86W/>\nv\x04c+/\x17\x160\xfb\x83V74ZA&,Qo\x87\x04\x83-.\x19\x12-\x04\x01I\x1e\x19\x10\x11\xbd\r\x16\x0e\x13\x01\x02\x14\x1d\x18\x10\x07\xcd\x0e\x12\x0e\x14\0\0\0\0\x02\0\xfa\0\0\x05\xfb\t\x0f\0,\0C\0\0\0\x0e\x03#\".\x02'&'54\x13>\x0132\x17\x16\x07\x03\x16\x17\x1e\x0332>\x03\x13>\x0132\x17\x16\x1d\x01\x01\x15\x14\x07\x06\x07\x05\x06#\"'&'547%>\x0132\x1e\x01\x05\xacFh\x97\xc8\x82U\xa5\x8fk\x1a\x0e\x07q\x04;\"#\x1a\x15\x01v\x03\x10\x0fDayD^\x90iI0N\x04;\"#\x1a\x14\xfe\xfa\b\f\x15\xfe\x8b\x14\x12!\x17\x0f\x03F\x01G\x0e\x1b\f\x14!\x13\x02\x14\xbe\x9fuB/\\\x86W/>\nv\x04c+/\x17\x160\xfb\x83V74ZA&,Qo\x87\x04\x83-.\x19\x12-\x04\x02\x1a\x0f\x16\r\x11\r\xcc\x05\x11\x16(\x03&$\xbe\n\x07\x10\x1a\0\0\0\x02\0\xfa\0\0\x05\xfb\t/\0,\0O\0\0\0\x0e\x03#\".\x02'&'54\x13>\x0132\x17\x16\x07\x03\x16\x17\x1e\x0332>\x03\x13>\x0132\x17\x16\x1d\x01\0\x0e\x02#\"&/\x01\x07\x0e\x01#\".\x01'&547>\x01?\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x05\xacFh\x97\xc8\x82U\xa5\x8fk\x1a\x0e\x07q\x04;\"#\x1a\x15\x01v\x03\x10\x0fDayD^\x90iI0N\x04;\"#\x1a\x14\xfe\xfa\x12\x1c\"\x13\x16\x1e\x12\x83\xa1\x0f\"\x10\x13\"\x16\x05\x04\x01\x01\x0e\x10\xa0\x1930).\x1b\xad\b\x02\x14\xbe\x9fuB/\\\x86W/>\nv\x04c+/\x17\x160\xfb\x83V74ZA&,Qo\x87\x04\x83-.\x19\x12-\x04\x01%\x1d\x16\r\x15\x17\xb3\xb9\r\x0f\x10\x19\x0f\n\x0b\x05\x05\x0e\x1d\r\xb4\x1f3\x1a$\xe7\x11\x11\x07\0\0\0\0\x03\0\xfa\0\0\x05\xfb\b\xcd\0,\0G\0d\0\0\0\x0e\x03#\".\x02'&'54\x13>\x0132\x17\x16\x07\x03\x16\x17\x1e\x0332>\x03\x13>\x0132\x17\x16\x1d\x01\x02\x0e\x02#\".\x01'&=\x01>\x0332\x163\x1e\x02\x17\x16\x1d\x01\x04\x0e\x02#\".\x01'&547>\x0372632\x1e\x01\x17\x16\x15\x14\x07\x05\xacFh\x97\xc8\x82U\xa5\x8fk\x1a\x0e\x07q\x04;\"#\x1a\x15\x01v\x03\x10\x0fDayD^\x90iI0N\x04;\"#\x1a\x14\xda\x1f.6\x1b+.\x16\x01\x01\x03\x1d-6\x1c\b\f\x04\x1e#\x15\x03\x02\xfeS\x0e\x1d6)\x1b3(\n\b\x01\x01\x0f\x1b)\x1d\x04\x0b\t\x1c5(\x0b\x06\x01\x02\x14\xbe\x9fuB/\\\x86W/>\nv\x04c+/\x17\x160\xfb\x83V74ZA&,Qo\x87\x04\x83-.\x19\x12-\x04\x01\x882%\x15%.\x17\f\n\x0b#/\x1c\x0b\x02\x04\x1c#\x12\x0f\x0b\b\x0b-,%\x16%\x1a\x12\x16\x07\b\x0f%#\x1b\x04\x02\x0b\x1d\x18\x11\x18\x07\t\0\x02\0\xfa\xff\xf9\x05h\b\xcf\x004\0K\0\0%\x06\x07\x06#\"'.\x01'&'&=\x014767\t\x01&'47>\x0332\x17\x16\t\x0167632\x17\x1e\x01\x17\x16\x17\x16\x1d\x01\x14\x07\x06\x07\x03\x15\x14\x07\x06\x07\x05\x06#\"'&'547%>\x0132\x1e\x01\x02,\x1a(\x07\x07\x0b\n\x12\x1a\t\x05\x02\x01\x02\x02\t\x01W\xfe\x12\x03\x03\x04\x06\x16\x1f\x1a\x07\x1d\x194\x01\x96\x01m\x1a(\b\t\t\n\x11\x1a\t\x05\x01\x01\x01\x03\b\xe0\b\f\x15\xfe\x8b\x14\x12!\x17\x0f\x03F\x01G\x0e\x1b\f\x14!\x13,)\t\x01\x03\x05\x15\x0e\x0b\n\x07\x04\b\x07\x0b\r\x0f\x02\xe6\x03/\n\x11\x15\f\x18\x15\x17\x03\x16.\xfd_\x02\xaa&\b\x02\x02\x06\x13\x0e\x0b\r\x03\x06\b\x07\t\x10\x11\x02\x01\x0f\x16\r\x11\r\xcc\x05\x11\x16(\x03&$\xbe\n\x07\x10\x1a\0\0\0\0\x02\0\xc8\xff\xfd\x05\x18\x06\xc6\0,\0B\0\0\0\x0e\x02\x07\x0e\x01#\"&'\x03\x0e\x01#\"'&547\x13>\x0132\x17\x16\x1d\x01\x07\x05\x1e\x03\x17\x1e\x02\x17\x16\x15\x14\x07#654'.\x02'&%\x03\x1e\x013267>\x03\x05\x0fIgw4j\xc9k,B\x16\x18\x04;\"#\x19\x15\x01\x82\x03;\"#\x1a\x15\x11\x01\xa3\x17*-/\x16@V3\t\x04\x02\xb1\x02\x05\b-F1\x14\xfe>?\x18A*Y\xbcV\"J>)\x02\xe0\x87tU\x0f\x1e\x18\t\x02\xfe\xfa(+\x17\x12\x1f\x06\x07\x06 )+\x16\x14!\t\xcb\x02\x05\x06\x06\t\b\x18m\x86G+%\xa7\x18\x15\xa1\"\"7]<\x07\x04\t\xfc\xff\x03\n\x19\x17\t=OP\0\x01\0\0\xfeG\x05\xf2\x07\x0b\0~\0\0\0\x0e\x02#\"&'&5475>\x0332\x16\x17\x1e\x0332>\x027654'.\x02#\"'&547>\x0332>\x027654'&#\"\x06\x0f\x01\x0e\x03\x07\x0e\x05#\".\x01'&=\x01>\x0132\x1e\x0232>\x0276\x12>\x01?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x07\x0e\x01\x07\x1e\x02\x17\x16\x15\x14\x07\x05\xe3]\x8d\xb1_|\x95\x17\x03\x01\x02\x11\x1b\"\x11\x1c+\x07\x05\x14 /\"BpU7\x06\x04\x14\x1bv\xb0n+\x12\x0f\x01\x01\x10\x1d(\x19H}[;\x06\x02-3f\xa4\xa8\x13\x12\b\x16\x14\x12\x04\n\x1a+?]\x81U%G8\x11\x0f\x032*\x15\x19\x18\"\x1e$C8*\x0b\x0f\x1f\x1b\x14\x05\x12\fJ\x86\xc2\x84\\\x8d[\x15\r\x02\x0bhJEr<\x07\x02\x05\x01\x80\xba\x82Fyd\t\x06\x05\x01\n\x13!\x17\r\x1e \x16$\x1a\x0e/TxG=%P7NS\x1b\x1b\x14\x18\x05\x04\x11#\x1d\x14#Db@\x10-U39\xbc\xe8\xcaR\xb6\xa9\xa2*c\xc3\xb1\x99qB\x11 \x16\x14\x15\x06&;\r\x0b\t7i\x97[\x7f\x01\x01\xf6\xb40\xc7\x80\xf0\x97T?mJ4<\x196t\x9e,\x17g\x89T#&3M\0\0\xff\xff\xffL\xff\xf7\x07\n\x06\x97\x02\"\0D\0\0\0\x03\0C\x01\x14\xff\xea\xff\xff\xffL\xff\xf7\x07\n\x06\x95\x02\"\0D\0\0\0\x03\0t\x01a\xff\xf0\xff\xff\xffL\xff\xf7\x07\n\x06\xad\x02\"\0D\0\0\0\x03\0\xc1\x01)\0\0\xff\xff\xffL\xff\xf7\x07\n\x06\x90\x02\"\0D\0\0\0\x03\0\xc8\x01(\xff\xe0\xff\xff\xffL\xff\xf7\x07\n\x06w\x02\"\0D\0\0\0\x03\0i\x012\xff\xd4\xff\xff\xffL\xff\xf7\x07\n\x06\xd1\x02\"\0D\0\0\0\x03\0\xc6\x01@\0$\0\x03\xffL\xff\xe4\x0b\x15\x04b\0\x18\0,\0\xa9\0\0\x01.\x03#\"\x0e\x03\x15\x14\x17\x1e\x0232>\x027\x13&\x04>\x01&'.\x02#\"\x0e\x01\x07\x0e\x02\x17>\x02\x01#\x06\x07\x06#\"'.\x01'&5\x06\x07\x0e\x02#\"&'&'\x0e\x02\x07\x06#\"'&'67>\x017>\x01767>\x0232\x16\x17>\x0232\x17\x16\x15\x03\x15\x14\x17\x16\x17\x16;\x016767&7>\x0532\x1e\x01\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x06\x07\x04\x07\x1e\x02>\x0176\x16\x17\x16\x15\x14\x07\x0e\x02\x07\x06#\"'.\x01'\x06\x07\x06\x04\x95\x12*>T4M\x81e?\x13\n\x13@eC>bTF*)\x06\x04\xc3/\x0b\x05\x07\t#.\x1bF\x90\x930'\x1e\f\x0f\xd1\xde<\xfd\x02\x01\x1d?\x1f\x1d\x1e\x1b8o\x16\x15\x1d\x1f*asEw\xa831\fN\xa5\x824\x0f\r\"\x19#\x07\x06B]\x98\x191b7\x0f%-\x95\xcav_\xa2$\x02\t;\"#\x1a\x11U\x03\x03\x1c\x17;\n4S*=\x17\n\x06)U\x85\xa1\x9aM:qW\x17\x14\x01\t>7!%\x01\x01\xfe\xe7\xda[\xa5qz\x9fT9h\t\x02\x11xxp`:<()f\xd0JY;#\x03\x0b\x1e@-\x19=k\x92P(#2je8$?G5\x01c\x14<M0#\x11\x13\x1b\r [B:]\x83Yj\x81,\xfd\x84\r\t\x04\x04\t?/)\x01\x1d\x18#3\x1baNL?a\x8bD\x05\x02\x0b\x0e=<\x1a\x13w\x195u`UPf\x9d]I!\t@+\x16\x10&\xfdO\x10 \x1a$)$\x023\x1c3\x88AF\xb7\x89pL\x15\"B/'/\f\fX\x90+\"\x17\x02\x01\xb4_?\x1a\x01\x02%=2\x1a,\r\x0b\x1d\x16f4\x11\x04\x03\x01\x03OT>\x1e\x12\xff\xff\xffL\xfd%\x05\xd2\x04T\x02\"\0F\0\0\0\x03\0x\x01f\xff\xbc\xff\xff\xff8\xff\xe4\x05\n\x06u\x02\"\0H\0\0\0\x02\0Cv\xc8\0\0\xff\xff\xff8\xff\xe4\x05\n\x06\x89\x02\"\0H\0\0\0\x02\0to\xe4\0\0\xff\xff\xff8\xff\xe4\x05\n\x06\x8d\x02\"\0H\0\0\0\x02\0\xc1S\xe0\0\0\xff\xff\xff8\xff\xe4\x05\n\x063\x02\"\0H\0\0\0\x02\0i`\x90\0\0\xff\xff\xffG\xff\xf8\x03\xd1\x06\x8c\x02\"\0\xc0\0\0\0\x03\0C\xff\x7f\xff\xdf\xff\xff\xffG\xff\xf8\x03\xd1\x06\xa5\x02\"\0\xc0\0\0\0\x02\0t\x9e\0\0\0\xff\xff\xffG\xff\xf8\x03\xd1\x06\x8f\x02\"\0\xc0\0\0\0\x03\0\xc1\xff|\xff\xe2\xff\xff\xffG\xff\xf8\x03\xd1\x06Z\x02\"\0\xc0\0\0\0\x02\0i\x84\xb7\0\0\0\x02\0\xc8\xff\xf9\x04\xd6\x06_\0P\0r\0\0\0\x0e\x02\x07\x0e\x03#\".\x01'&547>\x0332\x17.\x01'\x07\x06#\".\x01'&=\x016?\x01.\x01'&'&=\x01>\x0332\x17\x1e\x01\x177632\x1e\x01\x17\x16\x1d\x01\x0e\x01\x0f\x01\x1e\x02\x17\x16\x15\x14\x07#654'.\x02'.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x027>\x01\x04\xcd\r\x18(\x1e&hx~9s\xbb~\x1d\x14\x04\x0bd\xa0\xd0t`-\x17c0\xa0\x1c\x1b\x14 \x16\x05\x04\x03+z\x19H%\x1a\t\x06\x02\x0f\x18#\x13\x14\x176e$\x96\x1c\x1e\x14 \x16\x06\x03\x02\x14\x12|J\x81V\x12\n\x05\xb1\x04\x01\x05\x0e\n\x07\x1c9:?!J\x8anI\b\x03\x0f\x13TyK<nX?\r\t\x12\x02\x04\\[W(3P6\x1cR\x92dEN!$n\xc7\x99[\x13(|-l\x14\x10\x1a\x0f\f\x0e\x05%\x1cS\x13-\x14\r\x15\x10\x11\x04\x11\x1e\x19\x10\f\x1cC\x1dl\x16\x10\x1a\x0f\f\x0e\x05\x10 \r[I\xbb\xd1rDF24*)\x1b\x1aB7\x06\x05\x12!\x1a\x10<i\x8fP\x1a\x1980Fa4\x1f?]>(N\xff\xff\xffG\xff\xf3\x06\xc8\x06\x94\x02\"\0Q\0\0\0\x03\0\xc8\x01\x0b\xff\xe4\xff\xff\xffL\xff\xf3\x05\xa0\x06\x87\x02\"\0R\0\0\0\x03\0C\x01!\xff\xda\xff\xff\xffL\xff\xf3\x05\xa0\x06d\x02\"\0R\0\0\0\x03\0t\x01!\xff\xbf\xff\xff\xffL\xff\xf3\x05\xa0\x06\x8f\x02\"\0R\0\0\0\x03\0\xc1\x01\b\xff\xe2\xff\xff\xffL\xff\xf3\x05\xa0\x06\x88\x02\"\0R\0\0\0\x03\0\xc8\x01\x10\xff\xd8\xff\xff\xffL\xff\xf3\x05\xa0\x06A\x02\"\0R\0\0\0\x03\0i\x01\x12\xff\x9e\0\x03\0\xc8\x01\x11\x05\\\x05\x06\0\x1b\0-\0H\0\0\0\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\0\x06#!\"'&=\x01>\x013!2\x17\x16\x1d\x01\0\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x1d\x01\x07\x03\xc0\x1b(1\x19\x1a0#\b\x06\x01\x01\x03\x1a)2\x1a\x1a.\"\t\x06\x01\x01\x01\x96/.\xfc\x1d.\x15\x0e\x030-\x03\xe3/\x15\r\xfe\x19\x1a(2\x19\x1b.#\t\x06\x01\x02\x02\x1b)1\x1a\x190\"\t\x05\x02\x04Z/ \x11\x11!\x18\x11\x14\b\b\x0e\x1f/ \x11\x11!\x18\x11\x15\x07\b\x0e\xfez4\x1d\x15\x19\b\x1f5\x1d\x15\x19\t\xfe^. \x11\x11!\x18\x10\x15\x07\t\x0f\x1e/ \x10\x10!\x18\x12\x17\f\x10\0\0\0\0\x03\xffL\xfe\x8b\x05\xa0\x06\x8c\0\x10\0 \0s\0\0%67567>\x0276&'&'&'\x01\x13\"\x07\x0e\x03\x07\x06\x15\x14\x17\x16\x17\x16\x17\x03\x0e\x01#\".\x01'&547\x13&'.\x01'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767>\x027>\x02;\x01\x13>\x0132\x17\x16\x15\x14\x07\x03\x16\x17\x16\x17\x16\x17\x06\x07#\x1e\x01\x06\x07\x0e\x01\x07\x0e\x01\x07\x06\x07\x06\x07\x06\x03\\\x15\x15\x17\x17?fO\x05\x03\x0b\x12\x11-\x07\b\xfec\xf7#!C|R7\b\x03;\x1d,\r\x8a[\r1\x1b\x13!\x19\x06\x04\x07T\x17\x15[q\x17HGS\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911(7\f=p[-\x7fZ1'\x9d\n7\x1c#\x1b\x13\x01\x9a\x1b\x14(|G\x01\x01F0\t)\x01\x03\x01\x11'-\x92d!$/3\x18\xa0\x03\x06\x02\b\x0b o\x86\\D}0,'\x05\x05\xfd3\x02\xff\x07\x0fIi\x91S\"\x1f\x81L%\x16\x06\xc1\xfe\xe4&&\x0e\x1a\x13\x0b\x0e\x12\x15\x01\x04\x07\t'\x8cPV<FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;/]A\xa2\xa85\x1a,\x0b\x01\xe7('\x1b\x13,\b\t\xfe\x1f\x05\x06\r\x16\x0e<<\x15\x1a\x7fq=\rgYg\xa12\x11\r\x0e\x07\x03\xff\xff\xffL\xff\xf5\x06\xe2\x06`\x02\"\0X\0\0\0\x03\0C\x01W\xff\xb3\xff\xff\xffL\xff\xf5\x06\xe2\x06\x96\x02\"\0X\0\0\0\x03\0t\x01L\xff\xf1\xff\xff\xffL\xff\xf5\x06\xe2\x06\xad\x02\"\0X\0\0\0\x03\0\xc1\x01*\0\0\xff\xff\xffL\xff\xf5\x06\xe2\x06v\x02\"\0X\0\0\0\x03\0i\x01\x1d\xff\xd3\xff\xff\xffL\xfc\xea\x05\xc2\x06\x8c\x02\"\0\\\0\0\0\x03\0t\x01P\xff\xe7\0\x02\0\xc8\xfe\r\x04\xf5\x06_\0'\0<\0\0\0\x0e\x02#\".\x01'\x03\x0e\x01#\"'&=\x01\x13>\x0132\x16\x17\x03>\x0232\x1e\x03\x17\x16\x15\x14\x07#654'.\x02#\"\x0e\x02\x07\x03\x1e\x02326\x04\xe5e\xa8\xea\x8f\x1015H2\x04;\x17#\x1a\x14\xc8\x030.\x19*\n3Z]k=Ly\\=$\x06\x03\x02\xb1\x02\t\x0e=[:=`Tb .A00\x12\xd3\xed\x01\xb8\xd5\x97Q\x04\t\x18\xfe@(+\x17\x11)\x04\x07\xab$.\x19\x1c\xfdzE+\x18,Jan9 \x1e\x19\x19\x18\x16-);W0#6ee\xfeo\x1d\n\x07\xd4\0\xff\xff\xffL\xfc\xea\x05\xc2\x06N\x02\"\0\\\0\0\0\x03\0i\x01!\xff\xab\0\x01\xffG\xff\xf8\x03\xd1\x04Y\0A\0\0\x01\x13>\x0332\x16\x17\x03\x06\x07\x15\x14\x17\x1e\x02;\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'.\x02'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x01\\A\x02\x13\x1b#\x11 /\x02N\x06\x02\x05\x05\x05\x1d;\nEy.%\x0f\r-\t\x01#G$\x1a\x1e:?\x1f\x1d\x1e\x1b8o0\x03D.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*'\x028\x01\xd1\x13\x1e\x14\x0b%\"\xfd\xd4>8\x19)\" \x1c&\x03W(\x04\x10!\b\x06$-<\x1c\x15\f\x1a\t\x04\x04\t?mHH&FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976.\0\0\x01\x019\x05\x0e\x03\x9c\x06\xad\0\"\0\0\0\x0e\x02#\"&/\x01\x07\x0e\x01#\".\x01'&547>\x01?\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x03\x9b\x12\x1c\"\x13\x16\x1e\x12\x83\xa1\x0f\"\x10\x13\"\x16\x05\x04\x01\x01\x0e\x10\xa0\x1930).\x1b\xad\b\x05N\x1d\x16\r\x15\x17\xb3\xb9\r\x0f\x10\x19\x0f\n\x0b\x05\x05\x0e\x1d\r\xb4\x1f3\x1a$\xe7\x11\x11\x07\0\0\0\x01\0\xc7\x04\x99\x03*\x060\0!\0\0\0\x06\x07\x0e\x01#\".\x01'&'&=\x01>\x027632\x17\x16\x1f\x017>\x02\x17\x16\x1d\x01\x03)\x0e\x10\xba31(.\x1b\xae\x05\x01\x01\x02\x11\x1b \n\t\x14\x0f\x15\x11\x83\xa1\x11\x1f9\x19\x13\x05\xc8\x1c\x0f\xd13\x1a$\xe1\f\t\x05\x07\b\x11\x1e\x17\x07\x02\n\x0e\x1a\xaf\xb9\x0e\x14\x02\x1b\x17\x1c\b\0\x01\0Z\x05\x1c\x03_\x05\xc3\0\x11\0\0\0\x06#!\"'&=\x01>\x013!2\x17\x16\x1d\x01\x03\\0+\xfd\xaa.\x15\x0e\x030-\x02V,\x15\x0e\x05P4\x1d\x15\x19\b\x1f5\x1d\x15\x19\t\0\0\0\x01\0\xb1\x05\x12\x03k\x06\xab\0%\0\0\0\x0e\x02#\".\x02'4&5>\x0132\x16\x17\x1e\x0332>\x027>\x0132\x17\x16\x15\x14\x07\x03cLm|85o[?\x06\x01\x04=\" -\x04\x01\x1b.7\x1e ?3 \x02\x04;\"#\x1a\x15\x01\x06\x11wW1+Lf<\x05\b\x03&,##\x132+\x1d\x1f09\x16)*\x16\x12 \x05\x07\0\0\0\0\x01\x01\xe4\x05\x95\x02\xfa\x06\x99\0\x1c\0\0\0\x0e\x02#\".\x01'&547>\x0372632\x1e\x01\x17\x16\x15\x14\x07\x02\xf8\x0f\x1d6(\x1c4(\n\b\x01\x01\x0f\x1b*\x1e\x04\t\t\x1d5)\x0b\x06\x01\x06\x13-,%\x16%\x1a\x12\x16\x07\b\x0f%#\x1b\x04\x02\x0b\x1d\x18\x11\x18\x07\t\0\0\x02\x01\\\x04\xb6\x03r\x06\xad\0\x1f\0=\0\0\0\x0e\x02#\".\x01'&547>\x047>\x0332\x1e\x01\x17\x16\x15\x14\x07'654'&#\"\x06\x07\x06\x072\x15\x07\x0e\x02\x07\x15\x14\x17\x1e\x0232>\x02\x03j>\\m48U4\n\b\x01\x02\x0f\x16!\x1a\t\x168:5\x169V5\f\x07\x02\x95\x01\x12\x15&\x101\f#\x17\x02\x01\x03\n\t\x01\x04\x05\x17\x1b\x0e\x1f7,\x1b\x05|aB#/J-\x1f!\f\f\x13*)& \b\x16\x1c\x0f\x04)C,\x1c \x0e\x10\x02\t\t&\x14\x18\x05\x06\x0f&\x01\x01\x03\x0e\x12\b\x0e\x13\x10\x15\x1d\x0e\x12 -\0\0\0\0\x01\0C\xfd\x8a\x028\xff\xd5\x006\0\0\0\x07\x0e\x03#\".\x01'&547>\x037632\x17\x16\x1d\x01\x0e\x01\x07\x0e\x03\x07\x06\x15\x14\x17\x1632>\x01?\x01632\x1e\x01\x17\x16\x1d\x01\x026\x15\x13;AC\x1c6\\B\x10\f\x02\x05,EU.\x16\x12)\x17\x12\x02\x1d\x1c\x17-'\x19\x02\x01\x13\x13&\x0e \x1a\x07\x06#)\x13!\x17\x06\x04\xfe\x01\x16\x17$\x19\r%B/!&\x0f\x103dVE\x16\x07\x1d\x18\x1b\x06\x14)\f\n&16\x1b\x06\x07\x1e\x13\x15\b\t\x04\x04'\x0f\x18\x10\r\r\x05\0\0\x01\0\xe8\x05'\x03\xf7\x06\xb0\x004\0\0\0\x0e\x02#\".\x04#\x0e\x01\x07\x0e\x03#\"'&5475>\x0332\x1e\x0432>\x027>\x0132\x17\x16\x15\x14\x07\x03\xf2 >fH,E4*& \f\x13\x13\x05\x02\x12\x1b!\x10#\x1a\x15\x01\x05!8Q5,F5*$!\x12\n\x17\x18\x13\x04\x04;\"#\x1a\x14\x01\x062dX>\x19$)!\x14\r3\x1d\x13\x1d\x14\x0b\x17\x12\x1e\x05\x06\x06*XI1\x19%)!\x14\t\x1a2)(+\x16\x13\x1f\x06\x07\0\0\x02\0\xa0\x04\xd5\x03D\x06z\0\x16\x000\0\0\x01\x06#\".\x01'&54767\x13632\x16\x17\x16\x15\x14\x07\x04\x0f\x01\x0e\x01#\".\x01'&5476767>\x0132\x17\x16\x1d\x01\x02\x94\"0\x13 \x18\x05\x06\x01\x02\r\xbc\x17\x1c\x14$\x14\r\x05\xfe\xb3\x16\x8e\x0e2\x19\x12!\x18\x06\x04\x01\x01\b\x97\x17\x11$\x12'\x1b\x14\x05\x04/\x0e\x16\x10\n\f\x05\x04\x12\x15\x01\x12\x14\x0b\x14\r\x14\f\x0f\x0f\x1b\xd2\x1d\x1e\f\x17\x10\n\f\x05\x05\x0f\r\xed\x19\x12\x10\x1b\x17\x1d\x07\0\0\x01\0\xc8\x02\xb7\x04\xe0\x03\\\0\x12\0\0\0\x06#! '&'&=\x01>\x013!\x16\x17\x16\x15\x04\xdd)+\xfe\x10\xfer\x07%\r\n\x032*\x03p-\x10\f\x02\xe92\x01\t\x19\x12\x14\x07 5\x06\x1b\x14\x18\0\x01\0\xc8\x02\xb4\b\xf3\x03[\0\x11\0\0\0\x06#!\"'&=\x01>\x013!2\x17\x16\x1d\x01\b\xf02,\xf8\x89/\x15\x0f\x031,\x07w/\x15\x10\x02\xe95\x1d\x15\x1a\b\x1f4\x1c\x16\x19\b\0\0\0\x01\0d\x04\xa5\x01\xe5\x06\xfd\0)\0\0\0\x06\x07\x0e\x01\x072\x1e\x01\x17\x16\x15\x14\x0f\x01\x0e\x03#\"&'&'547>\x017>\x017>\x0132\x17\x16\x1d\x01\x01\xe3\x15\x145T\x13\x06+ \b\x04\x01\x01\x03\x1a'2\x191H\t\x03\x01\x01\x02\x0b\t\x1d|S\x0f\x1c\x0f#\x14\r\x06\xa0#\x0f)b3\x12!\x17\x10\x13\b\t\f 0 \x11<1\x14\x14\r\r\r\x15*\x19V\x9b=\n\f\x1a\x14\x18\x06\0\0\0\0\x01\0d\x04\xad\x01\xe5\x07\x04\0(\0\0\0\x06\x07\x0e\x01\x07\x06#\"'&54767>\x017\".\x01'&54?\x01>\x0332\x16\x17\x16\x17\x15\x14\x07\x01\xe1\b\b\x1e~S\x1b\x1f#\x12\x0f\x01\x03(4T\x13\x07+\x1e\x07\x06\x01\x01\x03\x1b(1\x181J\x07\x03\x01\x02\x065)\x1aV\x9d=\x15\x1a\x12\x16\x06\x04(\x1e%d2\x14!\x15\x11\x12\b\b\x0f\x1f/ \x10;2\x12\x15\b\x10\x11\0\0\0\x01\0\xc8\xfew\x02I\0\xcf\0)\0\0\x04\x06\x07\x0e\x01\x07\x06#\"'&547>\x017>\x017\".\x01'&54?\x01>\x0332\x16\x17\x16\x17\x15\x14\x07\x02E\b\b\x1e~S\x1b\x1f#\x13\x0e\x01\x01\x16\x144T\x13\x07+\x1e\x07\x06\x01\x01\x03\x1b(1\x181J\x07\x03\x01\x02\x01+\x18W\x9c=\x15\x1a\x13\x16\x06\x04\x12#\x10%d2\x14!\x15\x11\x13\b\b\x0e\x1f/ \x11<2\x14\x14\b\x0f\x11\0\x02\0d\x04\xa5\x03\x81\x06\xfd\0*\0T\0\0\0\x06\x07\x0e\x01\x072\x1e\x01\x17\x16\x15\x14\x0f\x01\x0e\x03#\"&'&5&547>\x017>\x017>\x0132\x17\x16\x1d\x01\x04\x06\x07\x0e\x01\x072\x1e\x01\x17\x16\x15\x14\x0f\x01\x0e\x03#\"&'&'547>\x017>\x017>\x0132\x17\x16\x1d\x01\x03\x7f\x14\x154U\x14\x06+!\b\x04\x01\x01\x03\x1a'3\x191G\n\x03\x01\x02\x02\n\t\x1f{S\x0f\x1b\x0f#\x13\x0f\xfeb\x15\x145T\x13\x06+ \b\x04\x01\x01\x03\x1a'2\x191H\t\x03\x01\x01\x02\x0b\t\x1d|S\x0f\x1c\x0f#\x14\r\x06\xa0#\x10(b3\x12 \x18\x10\x13\b\t\f 0 \x11<1\x15\x12\x04\x05\x0f\x11\x14*\x19V\x9b=\n\f\x1a\x14\x18\x06\x11#\x0f)b3\x12!\x17\x10\x13\b\t\f 0 \x11<1\x14\x14\r\r\r\x15*\x19V\x9b=\n\f\x1a\x14\x18\x06\0\0\x02\0d\x04\xa3\x03\x81\x06\xfa\0(\0Q\0\0\0\x06\x07\x0e\x01\x07\x0e\x01#\"'&=\x0167>\x017\".\x01'&54?\x01>\x0332\x16\x17\x16\x17\x15\x14\x07\x04\x06\x07\x0e\x01\x07\x06#\"'&54767>\x017\".\x01'&54?\x01>\x0332\x16\x17\x16\x17\x15\x14\x07\x03}\b\b }R\x0e\x1d\x0f\"\x12\x0f\x03'5S\x14\x07+\x1f\x07\x06\x01\x01\x03\x1c(1\x181J\x07\x03\x01\x02\xfeb\b\b\x1e~S\x1b\x1f#\x12\x0f\x01\x03(4T\x13\x07+\x1e\x07\x06\x01\x01\x03\x1b(1\x181J\x07\x03\x01\x02\x06+)\x1aV\x9d=\n\x0b\x18\x14\x16\t(\x1f%d2\x14 \x16\x11\x12\b\b\x0f\x1f/ \x10;2\x12\x15\b\x10\x11\x12)\x1aV\x9d=\x15\x1a\x12\x16\x06\x04(\x1e%d2\x14!\x15\x11\x12\b\b\x0f\x1f/ \x10;2\x12\x15\b\x10\x11\0\0\x02\0\xc8\xfey\x03\xe5\0\xd1\0)\0S\0\0$\x06\x07\x0e\x01\x07\x0e\x01#\"'&=\x01>\x017>\x017\".\x01'&54?\x01>\x0332\x16\x17\x16\x17\x15\x14\x07\x04\x06\x07\x0e\x01\x07\x06#\"'&547>\x017>\x017\".\x01'&54?\x01>\x0332\x16\x17\x16\x17\x15\x14\x07\x03\xe1\b\b }R\x0e\x1d\x0f\"\x14\r\x01\x15\x145S\x14\x06,\x1f\b\x05\x01\x01\x03\x1c(1\x181J\x07\x03\x01\x02\xfeb\b\b\x1e~S\x1a #\x13\x0e\x01\x01\x16\x144T\x13\x06,\x1e\b\x05\x01\x01\x03\x1b(1\x181J\x07\x03\x01\x02\x01+\x1aV\x9a<\f\x0b\x1a\x13\x16\t\x11%\x10%c3\x13!\x17\x10\x13\b\b\x0e\x1f/ \x11<2\x14\x14\b\x0f\x11\x12+\x1aV\x9a<\x17\x1a\x13\x16\x06\x04\x10%\x10%c3\x13!\x17\x10\x13\b\b\x0e\x1f/ \x11<2\x14\x14\b\x0f\x11\0\x01\0\xc8\xfe\xc4\x05&\x06v\0,\0\0\0\x06#%\x03\x0e\x01#\"'&=\x01\x13\x05\"'&=\x01>\x013%\x15\x125>\x0132\x17\x16\x15\x14\x07\x06\x02\x15\x052\x17\x16\x1d\x01\x05#1-\xfe\x80Y\x03;\"#\x1a\x15Y\xfe\x86.\x15\x0e\x030-\x01\x7f,\x04;\"#\x1a\x15\x01\x01*\x01z.\x16\x0e\x03\xf55\x07\xfbQ)+\x17\x13!\t\x04\xac\x04\x1d\x15\x19\t\x1f5\x04\x02\x01\xb1\x07**\x16\x12 \x06\x07\x0f\xfe`\x04\x06\x1d\x15\x1a\b\0\x01\0\xc8\xfe\x80\x05-\x06O\0C\0\0\0\x06#%\x03\x0532\x17\x1e\x01\x17\x16\x1d\x01\x0e\x01\x07%\x03\x0e\x01#\"'&547\x13\x04#\"'&=\x01>\x0132%\x13%\"'&=\x01>\x013\x05\x13>\x0132\x17\x16\x07\x03\x052\x17\x16\x1d\x01\x05*/-\xfe\x9f(\x019\t\x13\x10\x0f\x12\x03\x02\x030-\xfe\xc88\x04:\"#\x1a\x15\x018\xfe\xad\x1b.\x15\x0e\x030-\x19\x01R)\xfe\xb0.\x15\x0e\x021-\x01[,\x04;\"#\x1a\x14\x01-\x01V.\x15\x0e\x03\xe85\x05\xfd\xdd\x05\x07\t\x1a\x0e\f\t\x07\x1e3\x02\x04\xfd\xe6(+\x17\x12 \x05\x07\x02\x15\x01\x1d\x15\x19\b\x1f5\x02\x02+\x05\x1d\x15\x19\t\x1e5\x06\x01\x99(+\x16\x13,\xfed\x03\x1d\x15\x19\t\0\0\0\x01\0d\x01'\x03+\x03\xe1\0\x1d\0\0\0\x0e\x02#\"&/\x01.\x02'&547>\x0332\x1e\x01\x17\x16\x15\x14\x07\x03#3Z\x81U:w0\x05&/\x1b\x04\x02\x01\x079`\x87SI\x80\\\x17\x10\x02\x02P~iB\x14+\x0b\x15>G$\x15\x13\x0e\x0eD\x83g@.Y?/7\x13\x15\0\0\0\x03\x01,\xff\xd3\x07\x9c\0\xeb\0\x1b\x007\0S\0\0$\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x04\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x04\x0e\x02#\".\x01'&54?\x01>\x0332\x1e\x01\x17\x16\x15\x14\x0f\x01\x07\x96\x1c*3\x1a\x1b3$\t\x06\x01\x02\x03\x1b*4\x1a\x1b2$\n\x06\x01\x02\xfdS\x1c*3\x1a\x1b3$\t\x06\x01\x02\x03\x1b*5\x1b\x1a1$\n\x06\x01\x02\xfdQ\x1c*3\x1a\x1b3$\t\x06\x01\x02\x03\x1b*4\x1a\x1b2$\n\x06\x01\x0271\"\x11\x11#\x19\x12\x16\b\t\x0e 1\"\x11\x11#\x19\x12\x16\b\t\x0e 1\"\x11\x11#\x19\x12\x16\b\t\x0e 1\"\x11\x11#\x19\x12\x16\b\t\x0e 1\"\x11\x11#\x19\x12\x16\b\t\x0e 1\"\x11\x11#\x19\x12\x16\b\t\x0e\0\x01\0\xc8\0\xc2\x02\xf2\x03\xdf\0\"\0\0\0\x0e\x02#\"&'\0'&=\x01676\x00632\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x05\x16\x17\x1e\x01\x15\x02\xc3\x12\x1c\"\x12\x19'\x0b\xfe\xd9\x14\x13\x03#'\x017G\x1c'\x11\x0b\x01\x02\x12\x14\x03\xfe\xf5\xf6\x0f\x04\x01\x01\x03\x1e\x16\r\x19\x18\x01\x03\x17\x16\x18\x04\x1d\x1c!\x01\x18.\x1f\x15\x17\x07\x05\x14&\f\x03\xf5\xec%\n\x13\b\0\x01\x01,\0\xcd\x03E\x03\xdd\0!\0\0\0\x06\x05\x0e\x01#\"'&=\x0167\x01'&'&=\x01>\x0332\x16\x17\x01\x16\x17\x16\x1d\x01\x03B2\xfe\xd3\x1e,\x19$\x1a\x16\x02\t\x014\xef\x16\b\x07\x01\x0f\x18$\x13\f\x17\n\x01N\f\x05\x03\x02'5\xf7\x16\x18\x18\x14\x1d\b\x11\x13\x01\x05\xf7\x0f\x13\x0e\x0f\b\x10\x1f\x19\x10\b\x06\xfe\xa8\x0e\f\n\x0b\x05\0\0\x01\xfdi\xff\x83\x02\xd1\x06;\0\x1c\0\0\0\x06\x07\x01\x0e\x01#\".\x01'&547676\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x02\xcf\x14\x1a\xfbp\x0f+\x18\x13!\x18\x06\x04\x01\x01\x0e\x14\x04\xb9\x0f\x1b\x0e\x13\"\x15\x06\x03\x05\xd2!\"\xfa$\x18\x18\x0e\x16\x10\n\x0b\x06\x04\x11\x14#\x06\n\t\n\x10\x1a\x0f\f\x0e\x05\0\0\x02\x01,\xff\xd3\x06\x8f\x07\t\0w\0\x8a\0\0%\x0e\x03#\".\x02'\x0e\x03#\".\x01'&547>\x0332\x16\x17.\x01/\x01\"'&=\x01>\x013\x17&'&547>\x0332\x1e\x02\x17\x16\x17\x16\x15\x14\x07\x0e\x01#\"'.\x03#\"\x0e\x02\x17\x16\x17!2\x17\x16\x1d\x01\x0e\x01#%\x1e\x01\x17\x1e\x01\x17\x1e\x0332>\x027>\x0132\x1e\x01\x17\x16\x15\x14%5.\x01#\"\x0e\x03\x1e\x0232>\x027\x06\x86\x12DWa/<f\\W\x19\x10So\x86F@jH\x12\r\x02\x07Soz0*T\x0f\r4\x17\xde.\x15\x0f\x031-\xa0\x07\x04\x02\x02\tDw\xaepR\x81iS%\r\x06\x03\x01\x03, \x1c\x1a0KIS<9cLB\f\x07\x0b\x01\xae/\x15\x0e\x030.\xfe\x96\x1c9\x06<o.\x10\x1e!&\x17\x12+(\x1f\x06\x0e.\x1b\x12 \x18\x06\x06\xfc\xb2#Y3'?.\x1c\x03\x0e\x1e)\x181T@*\x05\xce/S>$6Sc\x1a5tO%7`<,2\x11\x12T{O%\x15\x07@\xb3P\x05 \x19\x1f\x07\"<\x01%1\x16\x17\x17\x16_\xbb\x92[\x1d:U8\x14\x18\x0f\x0f\x07\b$ \x17(M)\x0e*R\x8d\x972/ \x19\x1f\x07#<\x03e\xeci.t6\x12\x1f\x16\x0e\x12\x1c\"\x0f# \x0e\x1a\x11\x0e\x0f\x13\x92\x03\x17\x1f\x19'1=1'\x16\x193U=\0\0\x01\0d\xff\xdb\x05\xcd\x07&\0m\0\0\0\x07\x0e\x03#\".\x027\x06'&=\x01>\x01\x17>\x017#\"'&=\x01>\x013\x17>\x0332\x1e\x02\x17\x16\x17\x16\x1d\x01\x0e\x03#\"&'.\x03#\"\x0e\x02\x07%2\x17\x16\x1d\x01\x0e\x01#!\x0e\x01\x073%2\x17\x16\x1d\x01\x0e\x01#\x05\x1e\x0332>\x027632\x1e\x01\x17\x16\x15\x14\x07\x05\x9a\x15:~\x8f\xa5_\x88\xd0\x8fM\b\x87\x15\x0e\x02.s\x03\x0f\bO.\x15\x0f\x030-o&\x7f\xb5\xed\x96C}hM\x15\x07\t\x07\x02\x13\x1c \x10\x0f'\n\x112BT5k\xab\x85a\x1d\x02y.\x15\x0e\x030-\xfdc\x07\x0f\x04\x01\x02].\x15\x0e\x030-\xfd\xad\x05>i\x90YM{hZ+ )\x13!\x17\x07\x04\x01\x01:\x1fLwS*f\xb6\xf5\x92\b!\x18\x1c\x0b E\x051k+!\x18\x1d\n#=\x02|\xe5\xaa`1M`0\x11\x16\x14\x11\x04\x17#\x18\x0e\x11\x15 NA*@u\xa5W\x02!\x18\x1c\x0b#=)h+\x01!\x18\x1d\n$<\x01k\xb8\x7f@!>Y:)\x11\x1b\x12\r\x0e\x05\x05\0\0\x02\0\xc8\x03v\x07c\x07\r\0-\0K\0\0\0\x06#\"&'\x0b\x01\x0e\x01\x07\x0e\x01#\"&'.\x01'\x0b\x01\x0e\x01#\"'&5\x127>\x0132\x16\x17\x13\x01>\x0132\x16\x17\x13\0\x06\x07%\x03\x0e\x01#\"'&=\x01\x13#\"'&=\x01>\x013\x052\x17\x16\x15\x14\x07\x07`7\x1f\x1a'\x07)\xfc\x03\x06\x05\x0f%\x13\x14$\x0b\x03\x04\x02\x82|\f+\x19 \x19\x14\xc4\x13\x0f+\x19\x1a%\x07\x97\x01\x13\r/\x1a\x1b&\tH\xfcu$#\xfe\xe8P\x035\x1f \x17\x13O\xc5)\x14\r\x02-(\x02s(\x14\r\x01\x03\x9e(\x19\x1d\x02\x04\xfe\x05\x06\x0b\x07\x13\x10\x11\x14\x06\n\x06\x01\xf8\xfd\xfe\x1c\x19\x15\x12\"\x02\xec&\x1c #\x1f\xfd\xde\x02# !!\x1c\xfc\xee\x02\xd8*\x06\x01\xfdm$(\x15\x12\x1c\t\x02\x94\x1a\x13\x16\b\x1d1\x02\x1c\x14\x17\x06\x04\0\0\0\x01\0d\x02\xbb\x04\xe7\x03f\0\x11\0\0\0\x06#\x05\"'&'5>\x013!2\x17\x16\x1d\x01\x04\xe40,\xfc5.\x15\x0e\b\x030+\x03\xd3/\x15\x0e\x02\xf35\x03\x1d\x15\x1d\b\x1f5\x1d\x15\x19\t\0\x01\0\xc8\xff\xf6\x05m\x07\x11\0\x1f\0\0\0\x07\0\x01\x0e\x01#\"&'\x03&547>\x0132\x16\x1f\x01\0\x01>\x0132\x17\x16\x1d\x01\x05l\x07\xfeb\xfe\xdd5)\x14\x1a0/\xe7\n\x03\b<# +\x14\x96\x01\x10\x01\x8c\r/\x1b$\x1b\x14\x06\xb2\x17\xfd\x10\xfc\xb3V\x12\x15F\x01# \x17\f\n\x1c1&#\xb7\x03\x0f\x02\xb3\"\x1f\x19\x14\x17\x02\0\0\x02\0\xc8\0\0\x05K\x051\0\x1e\x000\0\0\0\x06\x07\t\x01\x16\x17\x16\x1d\x01\x0e\x03#\"'\x01&=\x0167\x016;\x01\x16\x17\x16\x15\x12\x06#\x05\"'&'5>\x013!2\x17\x16\x1d\x01\x04\xe3+\x18\xfdH\x02y\x1a\n\x07\x01\x13\x1d(\x16 \x1b\xfd\x10*\x025\x03\\\"\x19\t\x1b\x19\x13b0,\xfc5.\x15\x0e\b\x030+\x03\xd3/\x15\x0e\x04\xbe.\n\xfe\x81\xfe\x96\x0f\x12\x0e\x0f\x06\x11\x1f\x19\x0f\x12\x01\xb2\x1b%\x04'\x1d\x01\xd7\r\x03\x1c\x18\"\xfb`5\x03\x1d\x15\x1d\b\x1f5\x1d\x15\x19\t\0\0\0\0\x02\0\xc8\0\0\x05K\x05N\0!\x003\0\0\0\x06\x01\x06#\".\x01'&=\x01>\x017\t\x01&=\x01>\x0332\x16\x17\x01\x16\x17\x16\x1d\x01\x12\x06#\x05\"'&'5>\x013!2\x17\x16\x1d\x01\x04\xec=\xfc\xae\x1c\x1a\x16%\x1a\x06\x04\x01\x1f\x1e\x02\xd9\xfdl\x1b\x02\x14\x1f)\x16\x13%\x0e\x02\xd9\x19\n\bZ0,\xfc5.\x15\x0e\b\x030+\x03\xd3/\x15\x0e\x02\xf68\xfeO\f\x10\x19\x10\t\x10\x07\x13&\r\x01d\x01\xbb\x17\x1d\x06\x11\x1e\x18\x0e\x0f\r\xfe\x1c\x0e\x0f\x0e\x12\x05\xfd,5\x03\x1d\x15\x1d\b\x1f5\x1d\x15\x19\t\0\0\0\0\x01\0\xfa\xff\xfe\x06\xd6\x07\x12\0'\0\0$\x06#\"&'\x13\x01\x06#\x06'\x01\x03\x0e\x01#\"'&=\x01\x13>\x0332\x17\t\x01>\x0132\x17\x16\x15\x03\x06\xa8;#\x1c-\x06&\xfe\x13$-)\"\xfe\x8e{\x079\"#\x19\x13\x8a\x05\x12\x1b\"\x13'\x1c\x01\xc5\x02I\x0e%\x15#\x1a\x15+.0$\"\x05P\xfd|-\x04:\x02X\xfa\xe7,.\x18\x10.\x05\x06\x18N#\x18\x10'\xfd\x16\x02\xf7\x10\x12\x19\x15.\xf9\xa0\0\0\0\0\x01\0\xfa\xff\xfe\x07\x80\x07\r\0+\0\0\t\x01\x06\x07\x06\"'&'\x03\x01\x06\x07\x06#\"'&'\x03>\x0332\x16\x17\x13\x01>\x01\x16\x17\x13\x01>\x0132\x17\x16\x15\x14\x07|\xfem\x1f'\x1a$\x102#\xec\xfe`'(\f\f\x1a\x17\"\x05\xbb\x02\x12\x1b#\x13\x14)\x13\x98\x01\x94\x1c1=\x17\xf9\x01^\x0b3\x1c#\x1b\x15\x06\x9a\xf9\xc8F\x10\f\x03\bS\x02\xd8\xfd\x0e<\b\x02\r\x12#\x06j\x1a!\x18\x10\x16'\xfa\x97\x02\xda+\x1b\x153\xfd\b\x05\x80\"\"\x19\x13\"\x10\0\0\0\0\x02\xffL\xff\xd2\x06\x90\x07\b\0\x16\0`\0\0\x01\"\x0e\x01\x07\x03\x1e\x0332>\x027654'.\x02\x01\x13>\x0132\x17\x16\x15\x03>\x0332\x1e\x01\x17\x16\x15\x14\x07\x06\x07\x06\x07>\x0176\x16\x17\x16\x15\x14\x07\x0e\x01\x04.\x03'\x07\x0e\x01#\".\x01'&67\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017>\x01\x03v5iZR*\x1fOU^8>r\\=\x07\x03\t\x10M{\xfd\xad[\x03;!#\x1a\x15=$=Qa(\x81\xbfv\x17\x0f\x04\n/\"NC\x99_/h\t\x02\x11x\xb3\xfe\xa9\xf1i\\R\x14\f\x10*\x18\x1a\x17\x18\x06\x04\x01\x17A1S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199S\x03\xb2&=\x85\xfe[\x197)\x188^}B\"[7.Ig7\xfe\xa9\x04Z)*\x16\x13!\xfd.\x1f\x1f\x1d\x13X\x99gCKc)e[\\:\x01+B'\x1a,\r\x0b\x1d\x16fD\f\r\x13!/\x0eZ\x1a\x18\x05\x17\x10\n\x1e\xcfA)FD\x05\x02\x0b\x0e=<\x1a\x13w\x197k\0\0\0\0\x01\xffL\xff\xf3\x05\xb4\x07\b\0_\0\0\x015\x176\x1e\x01\x17\x16\x17\x06\x07#\x1e\x01\x06\x07\x0e\x01\x07\x0e\x01\x07\x06\x07\x06\x07\x06#\"&'&'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017>\x017\x13>\x0132\x17\x16\x15\x037\x03\x06\x07\x06\x15\x14\x17\x16\x17\x1632767>\x0276&'.\x01/\x01#&'&5476\x03\xc1B\x14\x88Q|G\x01\x01F0\t)\x01\x03\x01\x11'-\x92d!$/3\x1b\x1cz\xb682!o1S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199SL[\x03;!#\x1a\x15@\x01#\x02\x02\x03;\x1d,Bf*'\x17\x17?fO\x05\x03\x0b\x12\x11[D4\x02\"\x18\x19\x19\x18\x04T\x01\x01\x01\x14\x19\x16\x0e<<\x15\x1a\x7fq=\rgYg\xa12\x11\r\x0e\x07\x03NF>Qb)FD\x05\x02\x0b\x0e=<\x1a\x13w\x197kp\x04Z)*\x16\x13!\xfd\x17\x01\xfeP\x11\x12\"\x1f\x81L%\x16\x1c\r\b\x0b o\x86\\D}0,M\x0f\x06\x01\x18\x18\"\"\x19\x17\0\0\0\x03\xff$\xfc\xea\x04\x88\x07\b\0\x14\0)\0{\0\0\x05\x0e\x03\x07\x06\x16\x17\x1e\x01\x172767>\x04\x0167>\x0276.\x02\x0e\n>\x04767632\x17\x1e\x01\x17\x16\x15\x14\x0e\x03\x07\x06\x07\x03>\x0272\x17\x14\x07\x0e\x01\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&5>\x04%7\x0e\x07'&'4>\x0476?\x01\x01Sp|\\'\t\t\x01\t\r.>.\x17\x1b\"$\x1b\"\n\n\x01\0\x14IwcG\n\b\x01\x17+p(+#\x1b\x1e\n\t\n\f\xb0\b\x0e\x0f<C;2=0C\x15\x16_]\x1e!\rCZ=Yb\xc1\x12U'\x923W\x02=B\xd2^\x0f\x130C;2=0C\x15\x16_]\x1e#\x03FP>T\x01\x19\x0b\"F2o\"\x1c3A'J\x02\x87JA5M$//D~DMOX\x1e\x1a7\x11\x19+\x02\x0b\f\x1f*@YOL\x04\x1b\x18I\x8c\x8a\x99GS:*/\x05\x15\x1f)@}O=LqS\x94\xa8w\xc3g)#\x18\x12\x02\x07F69L\x0b\x87\xd4\x88Whn\xd5\xfeh\r\x05\x16\x0bZ9\x18\t\x15+\xe2k\xa1g)#\x17\x13\x02\x07F6>?K\x9e`/9\xa6\xf83O/N\x14\f\x16\f\x04\tH@$$3+O0=Ce\0\x02\xff\x0e\xfc\xf4\x04o\x06\xfe\0\x18\0}\0\0\x05\x0e\x03\x07\x06\x1d\x01\x16\x17\x1e\x01\x17\x1632767>\x037\x127\x12>\x02767632\x17\x1e\x01\x17\x16\x15\x14\x07\x06\x07\x06#\"'&5&'&'.\x01\x0e\x07\x03>\x0272\x17\x14\x07\x06\x07\x0e\x01\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&547>\x047\x13\x0e\x01\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x01Eo\x87Z'\t\t\x01\t\r.5\x06\x03.\x17\x1b\"$\x1b\"\n\f\x1f\x196\x130C;2=0C\x15\x16_]\x1e!\x01\x117\n\t(\x12\x16\x01\t\x0e\x17\x13_@%#\x1b\x1e\n\t\nFY'\x932W\x02=BiT\\\x13\x18\x130C;2=0C\x15\x16_]\x1e#\x01\x02FPCm\xed\x13\x1e9,S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*\x1f\xa0,:NX\x1e\x1a\x18\x05\x1a\x11\x19+\x01\x01\x0b\f\x1f*@YOA\x03\x14Z\x02\x90k\xa1g)#\x18\x12\x02\x07F69L\x0b\n5\x06\x01\x16\x1a!\x19\x11\x19\x18\x11\x04\x1b\x1c)@UO=j\xfb\xf5\x15\x05\x1b\x06Z9\x18\t\n\t)\x0b\xd1k\xa1g)#\x17\x13\x02\x07F6>?\x05\x04B\x9e`(Bm\x01\x0208%FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976)\0\0\x01\xffB\xfc\xf4\x04\xa2\x07\x01\0i\0\0\x01\x06\x07\x0e\x06'&'4>\x0476?\x0167#&'673\x13>\x0176767632\x17\x1e\x01\x17\x16\x15\x14\x07\x06\x07.\x03'.\x01\x0e\x02\x033\x16\x17\x06\x07#\x03\x0e\x03\x07\x06\x07\x06#\"'.\x01'&'&547>\x01\x1e\x05767>\x027\x12\x01\x91D\"#2o\"\x1c3A'J\x02\x87JA5M$//Q\x07\x06qT\x07\rJ\x80\x13\r<!!;2=0C\x15\x16_]\x1e!\x01\x11J#$\n\x17\x17\x13q_2>\x05\xd4E\x01\x01F\xe6C\x12\x130C;2=0C\x15\x16_]\x1e\x0f\x04\x01\x0f\x145+%\x0b\x15\x1cl\x17\x1b'!$\x1d\x10\x19\x01f`%(/N\x14\f\x16\f\x04\tH@$$3+O0=C\x81d[\x01Q@\x0e\x01\x04q\x9d23)#\x18\x12\x02\x07F69L\x0b\n5\x07\x05-8*\x18\x11\x01EX\xa8\xfe\xf5\x10<<\x15\xfc(\xc2k\xa1g)#\x17\x13\x02\x07F@.$\x07\x07\x1d\x1b\x1b\r\f:/#\x11\x02\x0b\f!!?U\x92\x01P\0\0\x03\xffB\xfc\xea\x04\x96\x06\xfe\0\x11\0\x1e\0v\0\0\x017>\x027>\x01'.\x01\x0e\x06\x02\x16>\x02.\x01\x03\x0e\x01\x1e\x02\x0367>\x05767632\x17\x1e\x01\x17\x16\x15\x14\x07\x0e\x04\x07\x15\x17\x1e\x02\x17\x166\x17\x16\x07\x06\x07\x06\x07#\"'.\x01'\x1e\x02\x0e\x01\x07\x06\x07\x06#\"&'.\x02\x12\x13\x06\x07\x0e\x06'&'4>\x0476\x02ZRh\x8c8\n\b\x021\x13@1@6\x1b\x1e\n\x17MWe!\x0f\x18H\x90(\x13\x04\x0b\x13X\x06\x02\x02\b\x16\x130C;2=0C\x15\x16_]\x1e!\x01\x054pE\xac\xb3\x1dz|4,#:\x1b<\x02\x0e@\t\x12\x1a\x13\x1970/?7\r\x14\x17/+6( xk-(%\x0e\x0e?>!#2o\"\x1c3A'J\x02\x87JA5M$I\x033bs\xb4\xbc0+H4\x11\x03\x02\x1f>@UO\xad\xf9dM!Va\xba\xa4\x01!\xdb\xbc\x8fMR\x04t\xeb\x1c\x1e\x94\xcck\xa1g)#\x18\x12\x02\x07F69L\x0b\nY\xb9\xbdS\xcd\xb9e\x1b~n\x1a\t\x02\x05\x03\x1b?8\x17\x02\x01\x02\x06\b\x19\x8f\x8b\xed`T/,\x15\x10_99u\xa8\x01\x1a\x01aM%(/N\x14\f\x16\f\x04\tH@$$3+O0G\0\0\0\x02\xff7\xfc\xf4\x04\\\x04V\0\x16\0u\0\0\x05\x0e\x03\x07\x06\x15\x16\x17\x1e\x01\x17\x1632767>\x03\x1367>\x01767632\x17\x1e\x01\x17\x16\x15\x14\x07\x06\x07\x06'&5&'&'.\x01\x0e\x04\x07\x06\x03>\x02\x1e\x01\x0e\x03\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&547>\x047\x13\x06\x07\x0e\x06'&'4>\x04767\x01qo\x8aZ'\t\t\x01\t\r.5\x06\x03.\x17\x1b\"$\x1b\"\x13;\x0e\x17\x18C;2=0C\x15\x16_]\x1e!\x01\x1176\x12\x16\x06\t\x0e\x17\x13_@%#\x1b\x1e\x06\x06\x1cp\x8bcS$\x03\x1a\x93\x99\x93\x1d\x130C;2=0C\x15\x16_]\x1e#\x01\x02FPCm\xf2\x18?\x1c#2o\"\x1c3A'J\x02\x87JA5M$//\x8f5BNX\x1e\x1a\x1d\x1a\x11\x19+\x01\x01\x0b\f\x1f*@YV\x03\xadbEHg)#\x18\x12\x02\x07F69L\x0b\n5\x06\x01\x16\x1a!\x19\x11\x19\x18\x11\x04\x1b\x1c)@N3D\xfe\0\x1d\x1d\x1e\f58/%\x1d \xc8k\xa1g)#\x17\x13\x02\x07F6>?\x05\x04B\x9e`(Bu\x01=[\x1f(/N\x14\f\x16\f\x04\tH@$$3+O0=C\0\0\0\x03\xffL\xfc\xea\x05\xe2\x04Z\0\x15\0'\0\x81\0\0\x01.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x01\x03\x0e\x04\x16\x17\x1e\x016767>\x03\x0167>\x0232\x16\x1767632\x17\x16\x07\x03>\x01\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&>\x04%7\x0e\x01#\"'&'&'&'3&'&/\x01\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x04\xb0$7=K.V\x93rJ\t\x02\f\x11MuOf\x86\x88\x16GSfZ>\x06\t\r8b\x17\x1b\"$\x1b\"\x15\xfc\xf9\x15\x1e\"\xa3\xd8\x80X\x99&\x100\t\t$\x1e%\fI'EA\n\x04\x05\r\x1c\x15I/\"\x130C;2=0C\x15\x16_]\x1e#\x03FPE`\x01\x05\x015\xb8\x8374\r\f\x1c\x1c(#\x01-$B!\x0b8;S\x824\x0f\r\"\x19#\x07\x06B]\x98\x19110\x03\"%1!\x10Bt\xe5\\\x19\x162%6A\x1c>\x92\xfe- 5GN\x89H\x11\x194\x07\x0b\f\x1f*@c_\x03\\]XT\xa4e&&K\x06\x01\x13\x19V\xfc\xc3\x0b\f\x17 \x10\x10\x10\x10!\x15\x05\x11\x13\xffk\xabg)#\x17\x13\x02\x07F6>\x8a\xa8`7>\x97\x18*G\x07\x02\x02\x05\x07\t\x10\x14\x1e5V\x1e@2FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;2\0\0\0\0\x02\xffL\xfc\xfd\x05\x8f\x04`\0\x16\0n\0\0\x01.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x02$>\x0232\x16\x177>\x0232\x17\x16\x15\x03\x02\x07\x0e\x03#\".\x02'&=\x01>\x0332\x17\x1e\x033267>\x01\x13\x0e\x01#\"'&'&'&'3&'&/\x01\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x04\xba\x187=K.V\x93rJ\t\x02\f\x11MuOf\x86W0\xfc\xe1Q\x92\xd8\x80X\x99&\x02\t\x1b(\x11\x1b!\x1b`B-\x1ck\x84\x91DFj[Q-!\x02\x10\x19#\x13\x1d\x18(AAH1|\x9a\x1c\x0f\x1c@-\xb8\x8374\r\f\x1c\x1c(#\x01-$B!\x0bK>S\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911+8\x03)\x1e;!\x10Bt\xef\\\x19\x162%6A\x1c>\x80\xcb\x87\xc0\x90e0&\x0f*\x18\x07\x16\x12/\xfc>\xfe\t\\>]>\x1e\x17,<%\x1b \x06\x11\x1e\x19\x10\x12!1!\x10P;\"K\x01\xc2&G\x07\x02\x02\x05\x07\t\x10\x14\x1e5V2R4FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;3T\0\0\0\0\x03\xff\x01\xfc\xeb\x03\x0b\x05\xed\0\x19\0*\0o\0\0\x01\".\x01'&=\x017>\x0332\x1e\x01\x17\x16\x1d\x01\x07\x0e\x03\x03\x0e\x04\x07\x06\x1e\x02>\x04?\x01\x06\x07\x0e\x02\x07\x06\x07\x06#\"'.\x02'&547>\x04%7\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x135>\x0132\x17\x16\x15\x03676\x16\x17\x16\x15\x14\x07\x06\x07\x01\xfd\x15)\x1d\x07\x05\x02\x02\x17!+\x15\x15*\x1e\b\x04\x02\x02\x17\",\xd5\x1fdsZ(\b\b\x010oC@!!\n\f\xbb\x1a\t\n/C;2=0C\x15\x16_]>\x05\x04\x02\x03IP?K\x01\x13\x11N.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*&A!\x04:\"#\x19\x15>TB1;\n\x04\x03\x07\x1f\x05\b\x0e\x1d\x15\x0f\x13\x0b\r\x1a(\x1b\x0e\x0e\x1c\x14\x10\x13\x0b\r\x1a(\x1c\x0e\xfa\x83\x0e>BNN()9@\x11\x13@IhKE\xa3\xdd56\xb0g)#\x14\x13\x02\x07C[3\x1e\x1e\x12\x12.\x8f`4*\xa1\xc3S&FD\x05\x02\x0b\x0e=<\x1a\x13w\x19760a\x01\xc3\x02*)\x16\x13#\xfch\x1c\x10\x0b\x1b \x10\x10\x10\x12!\x12\0\0\0\0\x02\xfe\xe0\xfc\xfb\x02~\x06%\0\x19\0[\0\0\x01\".\x01'&=\x017>\x0332\x1e\x01\x17\x16\x1d\x01\x07\x0e\x03\x03\x13>\x0132\x17\x16\x15\x03\x0e\x04\x07\x06+\x01.\x03'&'&=\x01>\x0332\x16\x17\x1e\x03>\x037\x13\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x02\0\x15)\x1d\x07\x05\x02\x02\x17!+\x15\x15*\x1e\b\x04\x02\x02\x17\",\xab!\x04:\"#\x19\x15Z\x04\"4Rz?>V\x06Z.' \x0f\x13\t\t\x01\x0f\x19\"\x12\x0b\x19\b\x0f\x15\x14.Y\x85P0\x03\x18?5S\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911+\x05@\x0e\x1d\x15\x0f\x13\x0b\r\x1a(\x1b\x0e\x0e\x1c\x14\x10\x13\x0b\r\x1a(\x1c\x0e\xfd\x05\x01\xc7*)\x16\x13#\xfb\x97p\x98\x94~^\x1c\x1b\x01\x0e\x15\x19\f\x10\x15\x12\x10\x06\x10\x1f\x19\x10\b\x06\x0b\x14\x10\x0e\x05L\x85\xb6w\x01ZC-FD\x05\x02\x0b\x0e=<\x1a\x13w\x195;3\0\0\0\0\x02\xffG\xff\xec\x05|\x07\x11\0\x10\0i\0\0\x01\x07\x1632767654'&'&#\"\x01\x13>\x0132\x16\x17\x0367632\x17\x1e\x03\x17\x0e\x02\x07\x06#\x1e\x02\x17\x1e\x0167632\x17\x16\x17\x16\x15\x14\x07\x0e\x06.\x05'&5\x03\x0e\x01+\x01&'&57\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x024\x10;;H(GQB\x02\fZ\x07\x07c\xfejb\x03;#\x1d(\x02<5bFF\x18\x19NN/3\x01\ni|[Q?::C:-,R~.%\x0f\r-\t\x01#G$\x1a\x1e:BGRj2A\\:\x15\x13&\x04;\"\x02\x15\x19\x15\x19S/S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*/\x039\x8d\x06\t\x0f6,7\n\x0bJ\x0b\x01\xfe\x9e\x04`%,\"$\xfd5!%\x1a\x03\f%&YdUeK\x1d\x1aiFO1(\r\x05R'\x04\x10 \b\x06#-;\x1b\x15\f\x19\x0f\x02\x0bH9KrR\x1c\x19\x01\xfez(+\x02\x16\x12 \xd9]'FD\x05\x02\x0b\x0e=<\x1a\x13w\x19762\0\0\x01\xffB\xff\xec\x06+\x07\n\0N\0\0\x01\x13>\x0132\x16\x17\x03\x01>\x0132\x17\x16\x14\x0e\x01\x07\x01\x1e\x02\x17\x15367632\x17\x16\x17\x16\x15\x14\x07\x0e\x06.\x02'\x03\x0e\x01#&'&7\x13\x06\x07\x0e\x06'&'4>\x0476\x01\xa8Y\x031#\x1d2\x02U\x01\xee\x18'\x15+\x1c\x0e\x03\x10 \xfe\x10\xb2\xc8L!\x18Oo.%\x0f\r-\t\x01#?,\x1a(0:$t\x8b\xd1\xcb/\x04;\"\x13\x1a\x15\x01\x1c5\x1d#2o\"\x1c3A'J\x02\x87JA5M$?\x02\xa2\x04\x19%*#$\xfcN\x01\x1f\x11\x12\x1d\x10&\x14\x1a\x1c\xfe\xce\xc7\xd5=\x03\x01\x04U'\x04\x10 \b\x06#-7\x1f\x15\x13\x12\x0b\x02\be\xec\xda\xfe\x14(+\x02\x17\x12,\x01\rN!(/N\x14\f\x16\f\x04\tH@$$3+O0I\0\0\0\0\x02\xffL\xfc\xf8\x06,\x04T\0I\0a\0\0\x01\x0e\x01#\"'&7\x13\x06\x07\x0e\x01\x07\x06#\"'&'67>\x01767673\x13>\x0132\x17\x16\x15\x07>\x0132\x1e\x01\x17\x16\x15\x14\x07\x06\x07\x06\x07'\x06\x07>\x0176\x16\x17\x16\x15\x14\x07\x0e\x01\x04.\x02'\x0167654'.\x02#\"\x0e\x01\x07\x06\x07\x03\x1e\x03>\x01\x01\xc3\x04;\"\x0e\x1a\x1f\x016K1S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*(J\x02\x16\x03;\x18#\x1a\x15\x05\"\xb3wp\xa8h\x16\x0e\x03\x0e?\x15\x16\x01!'4\x99_/h\t\x02\x11x\xb3\xfe\xa9\x8di\\R\x02S\x1e\b\x03\t\x0eBeCEp[ \x18\x0b\x1b\x1fWM^\x8bZ\xfdK(+\x17\x12,\x03\xa8A)FD\x05\x02\x0b\x0e=<\x1a\x13w\x19764l\x01\xa8)+\x16\x14!;%cY\x87Y;A\x1f \xbfl%\x1e\x019(\x01+B'\x1a,\r\x0b\x1d\x16fD\f\r\x13\x17.\x01YJy\x19\x19,';T7AfI4W\xfe\xea\x19:\x1c\x18)[\0\x01\xffL\xfc\xf8\x06,\x04T\0Y\0\0$>\x01767654'.\x02#\"\x0e\x01\x07\x06\x07\x03\x0e\x01#\"'&7\x13\x06\x07\x0e\x01\x07\x06#\"'&'67>\x01767673\x13>\x0132\x17\x16\x15\x07>\x0132\x1e\x01\x17\x16\x15\x14\x07\x06\x07\x06\x07'\x0e\x01\x16676\x16\x17\x16\x15\x14\x07\x0e\x01\x04\x03\x91#d0\x1e\b\x03\t\x0eBeCEp[ \x18\x0bZ\x04;\"\x0e\x1a\x1f\x016K1S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*(J\x02\x16\x03;\x18#\x1a\x15\x05\"\xb3wp\xa8h\x16\x0e\x03\x0e?\x15\x16\x01!=J\x99_/h\t\x02\x11x\xb3\xfe\xf4j\x84vvJ=\x19\x19,';T7AfI4W\xfb\x1a(+\x17\x12,\x03\xa8A)FD\x05\x02\x0b\x0e=<\x1a\x13w\x19764l\x01\xa8)+\x16\x14!;%cY\x87Y;A\x1f \x83l%\x1e\x019]\x06+B'\x1a,\r\x0b\x1d\x16fD\x05\0\0\0\x02\xffL\xfd\x02\x06\xe3\x04m\0\x19\0d\0\0\x01.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x027\x13&\x0167>\x0232\x1e\x02\x1767>\x0272\x17\x16\x15\x14\x07\x03672\x17\x16\x15\x14\x07\x0e\x04\x07\x06#\"'&6\x13\x0e\x03#\".\x02'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x04\x88\x166CI&I\x7fdA\b\x03\t\x0eCd@6\\QK0D\x13\xfc\xc5\f+,\x92\xc9w/\\WN\t\x02\x01\x02\t+0#\x1b\x10\x01s~\xeaS\x10\x032\xad}c@:%\x04\x04\"\x1d!\x06FC0Xe8S\x81`@\x13VNS\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911+\x03U\x12#\x1a\x0f;h\x8eR\x1e\x1d2/Jn@\x1c3B3\x01\xd5\x0e\xfe\xf9b_d\x9b_\x11\x1c*\x06\b\r\r\"*\x01\x16\x0f\x16\r\x0f\xfb\xd3\xa5<=\r\f0)B\xae\xfa\xf57\x02\x01\x13\x15o\x02\xe13\x1b#\x143Xr?eAFD\x05\x02\x0b\x0e=<\x1a\x13w\x195;3\0\x02\xffL\xfc\xf6\x065\x04m\0\x19\0m\0\0\x01.\x03#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x0232>\x027\x13&\x137>\x017632\x17\x1e\x02\x17\x16\x15\x14\x07\x06\x07\x01\x0e\x03#\"'&547\x13\x0e\x03#\".\x02'\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676767>\x0232\x1e\x02\x177>\x0272\x17\x16\x15\x14\x07\x04\x88\x166CI&I\x7fdA\b\x03\t\x0eCd@6\\QKO-\x1bN\xb1\n\x18\f\x0b\t\b\t\x13\x1b\x13\x02\x01\x05\x07\x10\xfe\xfb\x1e8\x1d\x13\x0e#\x1a\x15\x01@I0Xe8S\x81`@\x13VNS\x824\x0f\r\"\x19#\x07\x06B]\x98\x1911+5\f+,\x92\xc9w/\\WN\t\x03\x02\t+0#\x1b\x10\x01\x03U\x12#\x1a\x0f;h\x8eR\x1e\x1d2/Jn@\x1c3BP\x01\xb4\x12\xfa\xdc\xf3\f\r\x04\x03\x01\x04\x15\x1c\x10\x04\x05\x0e\x0e\x12\x12\xfe\xb3',\x0b\x02\x16\x12 \x06\x07\x03<@\x1b#\x143Xr?eAFD\x05\x02\x0b\x0e=<\x1a\x13w\x195;3Pb_d\x9b_\x11\x1c*\x06\x15\r\"*\x01\x16\x0f\x16\r\x0f\0\x01\xffL\xff\xe3\x06h\x04d\0\x83\0\0%&'&'&=\x01>\x0132\x1e\x0232>\x047654'.\x02'.\x01'&'\x06\x07\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017>\x0176?\x01>\x0332\x1e\x02\x17\x16\x17\x16\x15\x14\x07\x0e\x03#\"'.\x01#\"\x0e\x02\x07\x06\x15\x14\x17\x1e\x02\x17\x1e\x02\x17\x16\x15\x14\x07\x0e\x01\x07\x16676\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x06#\"'.\x01'&'\x01\xfc\r\n\x1d\f\t\x034'\x1aG\x19]3\x129?@4\"\x04\x01\f\x0f9O/B\x8c8\x1c\x07\x89|<.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x194S>\x03\x02\x88\x06W|\x90B0ecZ#\r\x06\x03\x01\x01\x11\x1a#\x13 \x1b!\x86U\x1dOH3\x03\x01\x12\x15Ji7=w\\\x18\x14\x02\x07)\x1f-\x99_/h\t\x02\x11x\xb3\xabSFM>yi.+'6\x06\x05\x0f\x14\x0f\x13\x07\x1f7\x1f\x0b\x1c\x06\x0e\x18$2#\x07\b\x1e\x15\x1a$\x1a\f\x12'#\x10\x07\xcf\x9f<&FD\x05\x02\x0b\x0e=<\x1a\x13w\x192i\\\x03\x04\xdc>tY6\x07\x17*\"\x0e\x0f\f\n\x06\x04\x10\x1d\x18\x10\x1a!\x19\x1c-8\x1a\x05\x05\x1d\x13\x18!\x1a\x0f\x10.L7*9\x10\x13?R\x18\x02+B'\x1a,\r\x0b\x1d\x16fD\x06\x03\x04\x06\x13\x11\x0f\x16\0\x01\xffL\xff\xe3\x05\xc8\x04[\0=\0\0\x01>\x01732\x17\x1e\x02\x07\x02\x0e\x01\x07\x16676\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x06#\"'.\x03>\x01\x1e\x03>\x02\x13\x06\x07\0\x07\x0e\x02\"'&'67>\x017\x03\x8f-E\x1b\t\x14\f\x0e\x1d\n\x02\x13\x1c*\x1e-\x99_/h\t\x02\x11x\xb3\xabSFM>\x83\x82\\\x10\r@4-Y\x86lB2\x16\xd8\x84\xfe\x91.SyL/\x19#\x07\x06B]\x98M\x04\n)'\x01\x04\x05$$\x17\xfd\x8b\x7fF$\x02+B'\x1a,\r\x0b\x1d\x16fD\x06\x03\x04\x06Ha4;\x1d\x0f\x1eS\n%=S\x02\x06\xbb\x81\xfe\x9a&F>\r\x0b\x0e=<\x1a\x13wK\0\x01\xffL\xff\xeb\x06\x04\x04T\x005\0\0%\x0e\x01#\"&'\x03\x07\x06\x07\x0e\x02\x07\x0e\x01\x07\x06#\"'&'67>\x0376767&>\x0132\x16\x17\x13\x0167\x1e\x02\x17\x06\x07\x06'\x03\x9d\x0f.\x1f\x1a+\x0b\xd8\x14\x1d'(d5*S\x824\x0f\r\"\x19#\x07\x06B]\x98R;\n9\x1d\x1a#\x01\x19(\"\x1c+\b\xf5\x01}01+<a\x05\x01IB'0\"#!\x1e\x02zRNYQw5#FD\x05\x02\x0b\x0e=<\x1a\x13wPR\x16~dZ\xb5'8\x1c\x1f\x1f\xfd\x1c\x02\xd06\x01\x04\x19\x1d7<\x17\x03\x0b\0\0\x01\xffL\xff\xf6\x05\x97\x04T\0F\0\0\x017\x16\x07\x03\x1e\x0167\x13>\x017\x1e\x02\x17\x06\x07\x06'\x03\x0e\x02\x07\x06#\"'.\x01'&'\x06\x07\x0e\x01\x07\x0e\x01\x07\x06#\"'&'67>\x037676?\x0167&>\x0132\x17\x16\x17\x02c\x01\x01\x02\x02\x0e\xc6\x9d)@\nJ;+<a\x05\x01I?'3\x1eP\x8a6%*\x15\x16D\xab.*\x0f$+25*S\x824\x0f\r\"\x19#\x07\x06B]\x98R;\n9\x1d\x14\x1a\x02\x06\x07\x01\x19(\"\x1c\x16\x14\b\x04\x15\x01\x13\x17\xfd\xde\xb6kR\xb8\x02\x06O0\x01\x04\x19\x1d7<\x17\x03\n\xfe2\x8f\xa1r\r\t\x03\x06iYQ\x84D3<5#FD\x05\x02\x0b\x0e=<\x1a\x13wPR\x16~dG\x86\x01\x1f\"'8\x1c\x0f\x10\x1d\0\0\0\x01\xffL\xff\xef\bR\x04`\0F\0\0%\x06#\"'\"&'\x03\0\x06#\"&'\x03\x0e\x01\x07\x0e\x02\x07\x0e\x01\x07\x06#\"'&'67>\x0376767&>\x0132\x16\x17\x13\x01>\x0132\x16\x17\x16\x13\x0167\x1e\x02\x17\x06\x07\x06'\x05\xfc/-\b\b\x1e\x1d\x10\x95\xfe\x986\x1d\x1f*\x07\x90\x10\x1d'(d5*S\x824\x0f\r\"\x19#\x07\x06B]\x98R;\n9\x1d\x1a#\x01\x19(\"\x1c+\b\xb9\x01Y\x0f+\x1b\x19+\n\x07\x9c\x01h01+<a\x05\x01IB'?J\x02\x1d(\x02\xbb\xfd!).%\x02WGNYQw5#FD\x05\x02\x0b\x0e=<\x1a\x13wPR\x16~dZ\xb5'8\x1c\x1f\x1f\xfd\x0e\x02\xf8\x1f%\x1e\x1c\x11\xfd\x12\x02\xdb6\x01\x04\x19\x1d7<\x17\x03\x0b\0\0\x01\xffL\xff\xee\x07[\x04[\0W\0\0\x017>\x0332\x16\x17\x07\x17\x07\x03\x06\x16>\x017\x13>\x0132\x17\x16\x15\x03\x06\x16>\x017\x13>\x017\x1e\x02\x17\x06\x07\x06'\x03\x0e\x04&'\x06\x07\x06#\"'&'&'5\x06\x07\x0e\x01\x07\x0e\x01\x07\x06#\"'&'67>\x037676\x01\xa3\x10\x02\x13\x1b#\x11 /\x02\x01\x01\x028\x01K\x93\x7f\x18:\x03:\"#\x1a\x15%\fH\xa5u\x15,\nJ;+<a\x05\x01I?''\x0fZdg\xa2\xa7&j`4$(\x1aNHF!\f\r25*S\x824\x0f\r\"\x19#\x07\x06B]\x98R;\n9\x1d\x14\x03\x8b~\x13\x1e\x14\x0b%\"\x07\x03\x0b\xfd\xe9\x9a\x9b\b\xb9|\x02\x19)+\x17\x13!\xfe$\xd9\x99\x04\xa2\xa5\x01\xacO0\x01\x04\x19\x1d7<\x17\x03\n\xfen\x84\xcba7\rPb\x99\x15\f\t\x13=:\xa5\x18\x10\x0f<5#FD\x05\x02\x0b\x0e=<\x1a\x13wPR\x16~dE\0\0\x01\xffL\xff\xef\x05\x95\x04U\0J\0\0\t\x01>\x0132\x1e\x01\x17\x16\x1d\x01\x0e\x01\x07\t\x01\x16\x17\x16\x1d\x01\x0e\x03#\"&'\t\x01\x06#\"'&=\x01>\x017\x01'\x0e\x06\x07\x06#\"'&'67>\x04767&>\x0132\x16\x17\x03u\x01\x85\x11%\x12\x13!\x16\x06\x03\x02\n\x0e\xfeY\x016\r\x05\x02\x02\x11\x10#\x13\x10!\f\xfe\xd0\xfe\x97\"('\x1a\x14\x01\t\n\x01\x96\xc3%4AXB\x80\x824\x0f\r\"\x19#\x07\x06B]\x98R;C\x1d\x1a#\x01\x19(\"\x1c\x1b\x18\x02\xa9\x01\x8a\x12\x10\x0f\x19\x0f\f\x0e\x05\r\x1b\f\xfeT\xfeb\r\x0f\n\f\x06\x11\x1d\x12\x10\x0f\x0f\x01\x89\xfev'\x1c\x15\x1d\b\n\x18\r\x01\xba\xfc\x88\x91\x8c|NvD\x05\x02\x0b\x0e=<\x1a\x13wPR\x94dZ\xb5'8\x1c\x16(\0\0\x01\xffL\xff\xf6\x07d\x04[\0l\0\0\x04'&'&'\x06\x07\x06\x07\x06\x07\x06#&547 7676754'&#\"\x07\"\x0e\x02\x07\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017>\x037>\x0272\x1e\x02\x1767632\x17\x16\x17\x15\x06\x07\x06\x07\x06\x11\x14\x17\x16\x17\x16327367632\x17\x16\x17\x16\x15\x14\x07\x0e\x04\x07\x06\x05\xd0$\x97Sc\x13J/\rU,Xa'bN\x01\ng\x07$\"\x14\x1f:]\b\x19TmZ~s<.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x194SK\x81\x15$YJ\x88%g\x865\f}\xc1lA\x15\x11E\x0b\nL\xf6Q\x97\x82\x1f\x1a\x1c\x17\x0f\x19\x11Ey.%\x0f\r-\t\x01#G$\x1a\x1e:?\x16\b\x04\x07FL:q\x0f\x10 \x17\x06\f\tG1(\x99\x07:P|\x1b\xc6+S\x01\x95\xd1\xbd\x93<&FD\x05\x02\x0b\x0e=<\x1a\x13w\x192ia\xfe3KT2\x13\x0fEi#\x9f)\x19\x02\x0bF\x178\x0f\x07i~\xfe\xfc\xb3B\x10\x06\x04\x01\x03W(\x04\x10!\b\x06$-<\x1c\x15\f\x1a\t\x03\0\x02\xffL\xfc\xea\x05\xc2\x04W\0\x11\0t\0\0\x05\x0e\x04\x16\x17\x1e\x016767>\x03\x135\x0e\x01#\".\x01'&'\x07\x06\x07\x0e\x01\x07\x06#\"'&'67>\x0176767\x13>\x0132\x17\x16\x07\x03\x06\x15\x14\x17\x1e\x0332>\x027\x13>\x0132\x17\x16\x0f\x01\x03>\x01\x16\x17\x16\x15\x14\x07\x0e\x01\x07\x06\x07\x0e\x03\x07\x06\x07\x06#\"'.\x01'&>\x0376\x04[GSfZ>\x06\t\r8b\x17\x1b\"$\x1b\"\x15\r&\xbdwe\x8dZ\x18\x15\x02;<.S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199*&E.\x04:\"\"\x1b\x15\x014\x01\x02\x03\x1b5UAHz_@\f+\x04:!#\x1a\x16\x01\n?)EA\n\x04\x05\r\x1c\x15I/\"\x130C;2=0C\x15\x16_]\x1e#\x03FPE0/j 5GN\x89H\x11\x194\x07\x0b\f\x1f*@c_\x01^''V;eB8+F<&FD\x05\x02\x0b\x0e=<\x1a\x13w\x19761e\x01\xb8(+\x16\x13,\xfd\xfe\x19\x19\x1d\x1d4^D(6`\x82H\x02\r)*\x16\x12-T\xfc\xed\f\f\x17 \x10\x10\x10\x10!\x15\x05\x11\x13\xffk\xabg)#\x17\x13\x02\x07F6>\x8a\xa8`7\x1f\x1f\0\x01\xffL\xfd\x03\x05C\x04V\0h\0\0\x01\x13>\x0132\x17\x16\x15\x14\x07\x02\x07\x06\x15\x14\x17\x1e\x0332>\x0274\x13>\x0132\x17\x16\x15\x14\x07\x03\x0e\x01\x07\x0e\x03#\".\x02'&=\x01>\x0332\x16\x17\x1e\x0332>\x02767\x13\x0e\x01#\".\x01'&'\x07\x06\x07\x0e\x01\x07\x06#\"'&'67>\x017676\x01b0\x04:\"\"\x1b\x15\x011\x03\x01\x02\x03\x1b5UAHz_@\f+\x04:!#\x1a\x16\x01d\t6%$_|\x99\\/qpb \x0e\x01\x12\x1a\"\x12\x15!\r\x0e5IT+AfQ?\x18A\x11\x15-\xbdwe\x8dZ\x18\x15\x04%E-S\x824\x0f\r\"\x19#\x07\x06B]\x98\x199* \x02@\x01\xba(+\x16\x13 \x05\x07\xfe?7\x19\x19\x1d\x1d4^D(6`\x82H\t\x02\x04)*\x16\x12!\x05\x07\xfbt\xbb\x8597\\B$\r\"9+\x14\x17\b\x11\x1e\x18\x0f\x11\x12\x13\x1d\x16\f\x17);%O\xc1\x01\x16,V;eB8%/N%FD\x05\x02\x0b\x0e=<\x1a\x13w\x1976)\0\x01\xffL\xff\xfa\x05q\x04S\0A\0\0\0>\x01767>\x017!2\x17\x16\x1d\x01\x0e\x01\x07\x01!2\x17\x16\x15\x14\x07\x0e\x01\x07\x06#!\"'&'5&?\x01\x01!\x02\x07\x06\x07\x0e\x01\x07\x0e\x01\x07\x0e\x01\x07\x06#\"'&'67>\x02\x01\x10*H\x19\x18\x1f\x012,\x02\xd5C\x18\x10\x01\x0f\x10\xfd@\x02\\-\x13\r\x01\x03,\x1d\x12\x12\xfd\x052\x13\x0e\x03\x04E6\x02z\xfe\r8\x14\x1d\x1f(B\x1d25*S\x824\x0f\r\"\x19#\x07\x06B]\x98R\x01\xbeB\x8b[V\x98<<\x07\x1f\x12\x1a\b\x10\"\x11\xfc\xe9\x1f\x15\x1a\x05\x0b )\x01\x01\x14\x0e\x19\x052H<\x02\xbb\xfe\xf7=R/Bc#<5#FD\x05\x02\x0b\x0e=<\x1a\x13wP\0\0\x02\xffE\xfc\xec\x06#\x04X\0\x14\0\x81\0\0\x05\x0e\x04\x07\x06\x17\x1e\x023267>\x03&7\x06#\x16\x15\x14\x0e\x02\x07\x06\x07\x06#\"'.\x01'&5>\x03767&\x07&'5>\x0176767.\x02'&'#\x06\x07\x06\x07\x15\x0e\x01\x07\x0e\x01\x07\x0e\x06'&'4>\x04767>\x0632\x1e\x01\x17\x16\x15\x06\x07\x06\x07\x16\x1767>\x0172\x17\x14\x07\x06\x07\x06\x04mgKWX'\t\t\n\r.;\x03.F0>9\"\x06\x03\x81\x01\x018\x1a=P;2gBC\x15\x16_]\x1e#\x03FP7+>\x7f_\xb8X\x02\f\x80h\x86Ib\x11\x0b\f*--JR\x81Y$\x1f$#\x1fH\\\x16#2o\"\x1c3A'J\x02\x87JA5M$\x1a\x1bH%\x18;-<\xb8xN\xd8i\x1c*\x04\x185\xa0\"\"1\x0e\x13\x923W\x02=Bi\x12`8(@\\X\x1e\x1aH\x19+\x02\x11\x1b4@YgJ\xb6\x01\x9cNOh\x83_)#\x1d\r\x02\x07F6>?K\x9e`6%6C\x15\x0f\r2\x18O\x15\x19=I\x89{].D)-\n\x07\x8f-8\x01IU-on\x19(/N\x14\f\x16\f\x04\tH@$$3+O0\"$ifEn><b:~>ka]U\xa0\x98\x0e\"\b\x02\x02\x16\x0bZ9\x18\t\n\x02\0\0\x02\xffL\xfc\xe8\x05Q\x04P\0\f\0`\0\0\x05\x0e\x03\x1e\x023>\x03\x007>\x017>\x013!2\x17\x1e\x01\x06\x07\x016\x17\x16\x1767>\x0172\x17\x14\x07\x06\x07\x16\x0e\x03\x07\x06#.\x02'&5>\x037&\x07&'567'\x01!\x02\x06\x07\x0e\x02\x07\x0e\x01\x07\x06#\"'&'67>\x0376\x03\xc0a\x86Y.\x014K\x03v|4\x0b\xfda\x0f\b'\x19\x010*\x02\xbd+\x17\x12\x03\t\x1a\xfd\xce\xa09\x1e\x1b)\r\x13\x923W\x02=AhK\x144ImTP9DU]\x1e#\x03;Gd\x91O\xa8D\x02\x07\x18\x01\x02?\xfe!?R\r(d5*S\x824\x0f\r\"\x19#\x07\x06B]\x98R;\n\x1dJ;bloWM\n\x03g\x7f\xd6\x03F5\x1b\x86s99\x17\x1b.*-\xfd\x1c\x02\x1a\x0e\x11\x06\x02\x02\x16\x0bZ9\x18\t\n\xaa\xd9\x96fL\x1d\x1b\x02\x15F6>?_\x92i[\\\x0e\r\x1e2\x18-\x17\x01\x02\xe7\xfe\xee\xc2\x1fQw5#FD\x05\x02\x0b\x0e=<\x1a\x13wPR\x168\0\x01\x01^\xff\xfc\x03\xee\x07\x0f\0#\0\0\x05&'&'&73\x13\x07\x06'&'&=\x0167\x01672\x17\x16\x07\x033\x16\x17\x16\x1d\x01\x0e\x01#\x01\xbb\"\x14\x18\x02\x04I\xa6Y\xc6(\x1b$\x14\x10\x03%\x01B1/*\x13\x13\x04j\x900\x10\x14\x0340\x04\x03\x11\x18$H\x17\x05B\x9f\x1b\x06\x07\x1d\x17\x1f\n%\x1f\x01\n#\x01\x19\x1a/\xf9\xff\x05\x16\x19\x1e\b!5\0\0\x01\x01^\xff\xff\x05\xbd\x07\x0e\0A\0\0\x01\x16\x17\x16\x17\x16\x17\x16\x15\x14\x07\x0e\x05#\".\x02'&=\x01>\x0132\x16\x17\x1e\x0332>\x027654'.\x01'&\x07.\x01>\x017\x01\x05&67!\x16\x17\x14\x07\x03~\xf7]30=\x1c\x12\x03\bBc\x7f\x8a\x8eBR\x85hQ\x1e\x0b\x03<&\x14#\r\x146FW7\\\xa1wL\x07\x02\x12\x19gMz\xd1-\x1e\x02\r*\x02\x13\xfd(J\tY\x03kF\x07\x0f\x04\x14\x14<\x1e8J`;N #L\x97vS4\x19'DZ4\x14\x16\b$8\x16\x15&=-\x19/X\x82=\x18\x18B6?a\x1a!\x06\x066\"(&\x02C\x01\x11\x91\t\x11G\x1b \0\x02\x01^\xff\xee\x06\xb0\x07\n\0\x02\0$\0\0\t\x01!\x01\x033\x16\x17\x16\x1d\x01\x0e\x01+\x01\x03\x0e\x01#\"'&7\x13!\"'&547\x01>\x0172\x16\x04\xf7\xfdz\x02D\x01\bS\xf9*\x15\x0e\x021-\xfe\x19\x04:\"\"\x19\x17\x01\x18\xfd\x12/\x14\x11\r\x03\xa8\x13#&,'\x05\x81\xfc\xbd\x04O\xfb\xb1\x06\x1e\x17\x1b\n :\xfe\xc3,-\x18\x130\x01C\x1b\x16\x1b\x18\x1c\x04\xb7\x1f'\x01:\0\0\x02\x01^\xff\xff\x05\xa7\x07\f\0+\0A\0\0\0>\x0232\x1e\x03\x17\x16\x15\x14\x07\x0e\x02\x02\0\x06\x07\x06#\"'.\x03>\x01$67\x06.\x02'&5473\x06\x1e\x02>\x037654'.\x02#\"\x0e\x02\x01mY\x94\xc6zX\x97yZ8\x0b\b\x03\x0b=T\x9f\xfe\xf5\xe6\x1f\x10\x0f\f\n\x17\x16\x06\x03\x04!\x01\x19\xacy\xe0\xe2\xa0g\x16\x14\x03\xb1\x02\x1aG\xd0\xfaWO\r\x04\x03\x16\x1bf\x88JT\x85^:\x05O\xd3\x97S0Qn~D),\x1a\x1aw\xc9\xb3\xfe\xee\xfe\xed\xad\t\x05\x03\b\x1a\x0f\r:\x1f\xe6\xb8\xcff\x14V\x92aDO\x1e [j\x83@a=vP*\x17\x19@7Je56i\x94\0\0\0\0\x01\0\0\x15\x86\0\x01\x03\x94\f\0\0\t\tx\0\b\0E\0\xb6\0\b\0I\0\x14\0\f\0\x11\xff^\0\f\0\x18\xfe\xf4\0\r\x003\xff3\0\r\x005\xff\xae\0\r\x008\xffN\0\r\0\xae\xffN\0\x0e\0\x11\xff^\0\x0e\0\x18\xfe\xf4\0\x10\0\x11\0-\0\x10\0\x12\xff\xd3\0\x11\0\f\xff\xd3\0\x11\0\x0e\xff\xd3\0\x11\0\x11\0D\0\x11\0\x12\xff\xd3\0\x11\0\x13\xff\xe9\0\x11\0\x14\xff\xd3\0\x11\0\x18\xff\xbc\0\x12\0\x11\0\x17\0\x12\0\x12\0\x17\0\x12\0\x14\xff\xd3\0\x13\0\x11\0\x17\0\x13\0\x18\xff\xe9\0\x14\0\x11\xff\xe9\0\x14\0\x18\xff\xbc\0\x15\0\x11\xff\xe9\0\x15\0\x18\xff\xd3\0\x16\0\x11\xff\xe9\0\x16\0\x18\xff\xd3\0\x17\0\x18\xff\xe9\0\x18\0\f\0F\0\x18\0\x0e\0F\0\x18\0\x11\0-\0\x18\0\x15\0\x17\0 \0)\0m\0 \x003\xff;\0 \x005\xff\xe5\0 \x007\0=\0 \x008\xff\x9a\0 \x009\0)\0 \0E\xff\xd7\0 \0S\xff\xf2\0 \0Y\0R\0 \0\xae\xff\x9a\0 \0\xbd\xff\x93\0 \0\xc0\xff\x9a\0 \0\xce\xff\xd7\0 \0\xcf\xff\xd7\0 \0\xdb\xff\x9a\0!\x003\xff\xc3\0!\x008\xff\xf2\0!\0\xae\xff\xf2\0!\0\xdb\xff\xf2\0\"\0 \0\x1b\0\"\0)\0)\0\"\x009\0=\0\"\0Y\0)\0\"\0r\0\x1b\0\"\0s\0\x1b\0\"\0t\0\x1b\0\"\0u\0\x1b\0\"\0v\0\x1b\0\"\0w\0\x1b\0#\0 \xff\xe5\0#\x003\xff\xc3\0#\x005\xff\xf2\0#\x007\xff\xec\0#\x008\xff\xe5\0#\0r\xff\xe5\0#\0s\xff\xe5\0#\0t\xff\xe5\0#\0u\xff\xe5\0#\0v\xff\xe5\0#\0w\xff\xe5\0#\0x\xff\x98\0#\0\xae\xff\xe5\0#\0\xdb\xff\xe5\0$\x005\x007\0$\x007\0)\0$\0Y\0R\0%\0\f\xff?\0%\0\x0e\xff?\0%\0 \xffj\0%\0)\xfe\xf6\0%\x003\0R\0%\x005\0=\0%\x006\0)\0%\x008\0R\0%\0@\xff\xae\0%\0B\xff\xae\0%\0D\xff\xae\0%\0N\xff\xae\0%\0T\xff\xae\0%\0r\xffj\0%\0s\xffj\0%\0t\xffj\0%\0u\xffj\0%\0v\xffj\0%\0w\xffj\0%\0x\xff#\0%\0\x8e\xff\xae\0%\0\x8f\xff\xae\0%\0\x90\xff\xae\0%\0\x91\xff\xae\0%\0\x92\xff\xae\0%\0\x93\xff\xae\0%\0\x94\xff\xae\0%\0\x95\xff\xae\0%\0\x96\xff\xae\0%\0\x97\xff\xae\0%\0\x98\xff\xae\0%\0\x99\xff\xae\0%\0\x9f\xff\xae\0%\0\xa0\xff\xae\0%\0\xa1\xff\xae\0%\0\xa2\xff\xae\0%\0\xa3\xff\xae\0%\0\xa5\xff\xae\0%\0\xa6\xff\xae\0%\0\xa7\xff\xae\0%\0\xa8\xff\xae\0%\0\xa9\xff\xae\0%\0\xad\xff\xae\0%\0\xae\0R\0%\0\xbd\0R\0%\0\xc0\0R\0%\0\xdb\0R\0&\x003\xff\xae\0&\x008\xff\xbc\0&\0\xae\xff\xbc\0)\0 \xff\xd7\0)\0r\xff\xd7\0)\0s\xff\xd7\0)\0t\xff\xd7\0)\0u\xff\xd7\0)\0v\xff\xd7\0)\0w\xff\xd7\0*\0\f\0=\0*\0 \0=\0*\0\"\xff\xbc\0*\0&\xff\xbc\0*\0.\xff\xbc\0*\x000\xff\xc3\0*\x003\0=\0*\x007\0R\0*\x008\0R\0*\x009\0\x8f\0*\0r\0=\0*\0s\0=\0*\0t\0=\0*\0u\0=\0*\0v\0=\0*\0w\0=\0*\0y\xff\xbc\0*\0\x83\xff\xbc\0*\0\x84\xff\xbc\0*\0\x85\xff\xbc\0*\0\x86\xff\xbc\0*\0\x87\xff\xbc\0*\0\x88\xff\xbc\0*\0\xac\xff\xbc\0*\0\xae\0R\0*\0\xdb\0R\0+\0 \0L\0+\0\"\xff\xd7\0+\0&\xff\xc3\0+\0.\xff\xbc\0+\x000\xff\xc3\0+\x003\xfe\xc5\0+\x004\xff\xa0\0+\x005\xff?\0+\x006\xff\xa0\0+\x007\0=\0+\x008\xfe\xd3\0+\x009\0f\0+\0r\0L\0+\0s\0L\0+\0t\0L\0+\0u\0L\0+\0v\0L\0+\0w\0L\0+\0y\xff\xd7\0+\0\x83\xff\xbc\0+\0\x84\xff\xbc\0+\0\x85\xff\xbc\0+\0\x86\xff\xbc\0+\0\x87\xff\xbc\0+\0\x88\xff\xbc\0+\0\x89\xff\xa0\0+\0\x8a\xff\xa0\0+\0\x8b\xff\xa0\0+\0\x8c\xff\xa0\0+\0\xac\xff\xbc\0+\0\xae\xfe\xd3\0+\0\xbd\xff?\0+\0\xc0\xffH\0+\0\xdb\xfe\xd3\0.\0)\xff\x9a\0.\x003\xffh\0.\x005\xff\xe5\0.\x006\0\x1b\0.\x007\xff\xd7\0.\0x\xff\xd9\0/\0 \xff\x85\0/\0)\xfe{\0/\0@\xff\xc3\0/\0D\xff\xc3\0/\0N\xff\xc3\0/\0r\xff\x85\0/\0s\xff\x85\0/\0t\xff\x85\0/\0u\xff\x85\0/\0v\xff\x85\0/\0w\xff\x85\0/\0x\xffd\0/\0\x8e\xff\xc3\0/\0\x8f\xff\xc3\0/\0\x90\xff\xc3\0/\0\x91\xff\xc3\0/\0\x92\xff\xc3\0/\0\x93\xff\xc3\0/\0\x94\xff\xc3\0/\0\x96\xff\xc3\0/\0\x97\xff\xc3\0/\0\x98\xff\xc3\0/\0\x99\xff\xc3\0/\0\x9f\xff\xc3\0/\0\xa0\xff\xc3\0/\0\xa1\xff\xc3\0/\0\xa2\xff\xc3\0/\0\xa3\xff\xc3\0/\0\xa5\xff\xc3\0/\0\xad\xff\xc3\x000\x003\xffq\x000\x008\xff\xc3\x000\0\xae\xff\xc3\x000\0\xdb\xff\xc3\x003\0\f\xff\\\x003\0\r\xff3\x003\0\x0e\xff\\\x003\0\x19\xff\\\x003\0\x1a\xff\\\x003\0 \xfe\xf6\x003\0\"\xff?\x003\0&\xffq\x003\0)\xfe{\x003\0.\xff?\x003\x000\xffH\x003\x002\xff\xc3\x003\x005\0)\x003\x006\0\x14\x003\x008\0=\x003\0@\xfe\xaa\x003\0B\xfe\xaa\x003\0D\xfe\xaa\x003\0H\xff\xae\x003\0N\xfe\xaa\x003\0Q\xfe\xaa\x003\0R\xfe\xaa\x003\0T\xfe\xaa\x003\0U\xfe\xaa\x003\0V\xfe\xaa\x003\0X\xfe\xaa\x003\0r\xfe\xf6\x003\0s\xfe\xf6\x003\0t\xfe\xf6\x003\0u\xfe\xf6\x003\0v\xfe\xf6\x003\0w\xfe\xf6\x003\0x\xfe\xa2\x003\0y\xff?\x003\0\x83\xff?\x003\0\x84\xff?\x003\0\x85\xff?\x003\0\x86\xff?\x003\0\x87\xff?\x003\0\x88\xff?\x003\0\x8e\xfe\xaa\x003\0\x8f\xfe\xaa\x003\0\x90\xfe\xaa\x003\0\x91\xfe\xaa\x003\0\x92\xfe\xaa\x003\0\x93\xfe\xaa\x003\0\x94\xfe\xaa\x003\0\x95\xfe\xaa\x003\0\x96\xfe\xaa\x003\0\x97\xfe\xaa\x003\0\x98\xfe\xaa\x003\0\x99\xfe\xaa\x003\0\x9a\xff\xae\x003\0\x9b\xff\xae\x003\0\x9c\xff\xae\x003\0\x9d\xff\xae\x003\0\x9f\xfe\xaa\x003\0\xa0\xfe\xaa\x003\0\xa1\xfe\xaa\x003\0\xa2\xfe\xaa\x003\0\xa3\xfe\xaa\x003\0\xa5\xfe\xaa\x003\0\xa6\xfe\xaa\x003\0\xa7\xfe\xaa\x003\0\xa8\xfe\xaa\x003\0\xa9\xfe\xaa\x003\0\xaa\xfe\xaa\x003\0\xac\xff?\x003\0\xad\xfe\xaa\x003\0\xae\0=\x003\0\xb1\xfe\xaa\x003\0\xb6\xfe\xaa\x003\0\xbd\x007\x003\0\xdb\0=\x003\0\xde\xfe\xaa\x004\0x\xff\xb2\x005\0\f\xff\\\x005\0\r\xffw\x005\0\x0e\xff\\\x005\0 \xff\xac\x005\0)\xff3\x005\0.\xff\xd7\x005\x003\0)\x005\0@\xff\x85\x005\0D\xff\x85\x005\0N\xff\x85\x005\0Q\xff\xbc\x005\0R\xff\x85\x005\0T\xff\xbc\x005\0X\xff\xbc\x005\0r\xff\xac\x005\0s\xff\xac\x005\0t\xff\xac\x005\0u\xff\xac\x005\0v\xff\xac\x005\0w\xff\xac\x005\0x\xff;\x005\0\x83\xff\xd7\x005\0\x84\xff\xd7\x005\0\x85\xff\xd7\x005\0\x86\xff\xd7\x005\0\x87\xff\xd7\x005\0\x88\xff\xd7\x005\0\x8e\xff\x85\x005\0\x8f\xff\x85\x005\0\x90\xff\x85\x005\0\x91\xff\x85\x005\0\x92\xff\x85\x005\0\x93\xff\x85\x005\0\x94\xff\x85\x005\0\x96\xff\x85\x005\0\x97\xff\x85\x005\0\x98\xff\x85\x005\0\x99\xff\x85\x005\0\x9f\xff\x85\x005\0\xa0\xff\x85\x005\0\xa1\xff\x85\x005\0\xa2\xff\x85\x005\0\xa3\xff\x85\x005\0\xa5\xff\x85\x005\0\xa6\xff\xbc\x005\0\xa7\xff\xbc\x005\0\xa8\xff\xbc\x005\0\xa9\xff\xbc\x005\0\xaa\xff\xbc\x005\0\xac\xff\xd7\x005\0\xad\xff\x85\x005\0\xb6\xff\x85\x005\0\xde\xff\xbc\x006\0&\0\x1b\x006\0)\xff\xd7\x006\0.\0\x1b\x006\x003\0\x14\x006\0@\xff\xbc\x006\0D\xff\xbc\x006\0H\xff\xd7\x006\0N\xff\xbc\x006\0Q\xff\xe5\x006\0R\xff\xc9\x006\0T\xff\xe5\x006\0X\xff\xe5\x006\0x\xff\xb2\x006\0\x83\0\x1b\x006\0\x84\0\x1b\x006\0\x85\0\x1b\x006\0\x86\0\x1b\x006\0\x87\0\x1b\x006\0\x88\0\x1b\x006\0\x8e\xff\xbc\x006\0\x8f\xff\xbc\x006\0\x90\xff\xbc\x006\0\x91\xff\xbc\x006\0\x92\xff\xbc\x006\0\x93\xff\xbc\x006\0\x94\xff\xbc\x006\0\x96\xff\xbc\x006\0\x97\xff\xbc\x006\0\x98\xff\xbc\x006\0\x99\xff\xbc\x006\0\x9a\xff\xd7\x006\0\x9b\xff\xd7\x006\0\x9c\xff\xd7\x006\0\x9d\xff\xd7\x006\0\x9f\xff\xbc\x006\0\xa0\xff\xbc\x006\0\xa1\xff\xbc\x006\0\xa2\xff\xbc\x006\0\xa3\xff\xbc\x006\0\xa5\xff\xbc\x006\0\xa6\xff\xe5\x006\0\xa7\xff\xe5\x006\0\xa8\xff\xe5\x006\0\xa9\xff\xe5\x006\0\xaa\xff\xe5\x006\0\xac\0\x1b\x006\0\xad\xff\xbc\x006\0\xde\xff\xe5\x007\0 \0=\x007\0\"\xff\xbc\x007\0&\xff\xd7\x007\0.\xff\xd7\x007\x000\xff\xd7\x007\0r\0=\x007\0s\0=\x007\0t\0=\x007\0u\0=\x007\0v\0=\x007\0w\0=\x007\0y\xff\xbc\x007\0\x83\xff\xd7\x007\0\x84\xff\xd7\x007\0\x85\xff\xd7\x007\0\x86\xff\xd7\x007\0\x87\xff\xd7\x007\0\x88\xff\xd7\x007\0\xac\xff\xd7\x008\0\f\xff%\x008\0\r\xffV\x008\0\x0e\xff%\x008\0\x19\xff\x85\x008\0\x1a\xff\x85\x008\0 \xff3\x008\0\"\xff\xb4\x008\0&\xff\xae\x008\0)\xfef\x008\0.\xff\xbc\x008\x000\xff\xc3\x008\x002\xff\xa0\x008\x003\0=\x008\0@\xff3\x008\0C\xff3\x008\0D\xff3\x008\0H\xff\xc9\x008\0N\xff3\x008\0T\xff3\x008\0U\xff\xa0\x008\0r\xff3\x008\0s\xff3\x008\0t\xff3\x008\0u\xff3\x008\0v\xff3\x008\0w\xff3\x008\0x\xfe\xfc\x008\0y\xff\xb4\x008\0\x83\xff\xbc\x008\0\x84\xff\xbc\x008\0\x85\xff\xbc\x008\0\x86\xff\xbc\x008\0\x87\xff\xbc\x008\0\x88\xff\xbc\x008\0\x8e\xff3\x008\0\x8f\xff3\x008\0\x90\xff3\x008\0\x91\xff3\x008\0\x92\xff3\x008\0\x93\xff3\x008\0\x94\xff3\x008\0\x96\xff3\x008\0\x97\xff3\x008\0\x98\xff3\x008\0\x99\xff3\x008\0\x9a\xff\xc9\x008\0\x9b\xff\xc9\x008\0\x9c\xff\xc9\x008\0\x9d\xff\xc9\x008\0\x9f\xff3\x008\0\xa0\xff3\x008\0\xa1\xff3\x008\0\xa2\xff3\x008\0\xa3\xff3\x008\0\xa5\xff3\x008\0\xa6\xff3\x008\0\xa7\xff3\x008\0\xa8\xff3\x008\0\xa9\xff3\x008\0\xab\xff\xc9\x008\0\xac\xff\xbc\x008\0\xad\xff3\x008\0\xbd\0R\x009\0 \0=\x009\0r\0=\x009\0s\0=\x009\0t\0=\x009\0u\0=\x009\0v\0=\x009\0w\0=\0:\0E\0\xa0\0@\0E\xff\xd7\0@\0S\xff\xe5\0@\0\xce\xff\xd7\0@\0\xcf\xff\xd7\0D\0U\x007\0D\0V\0\x1b\0D\0W\0\x1b\0E\0\x01\0o\0E\0\t\0D\0E\0\x1e\0\xe3\0E\0@\xff\xc9\0E\0B\xff\xd7\0E\0D\xff\xae\0E\0E\xff\x93\0E\0G\xff\xec\0E\0H\xff\xae\0E\0I\0R\0E\0J\xff\xec\0E\0K\xff\xe3\0E\0N\xff\xae\0E\0\x8e\xff\xc9\0E\0\x8f\xff\xc9\0E\0\x90\xff\xc9\0E\0\x91\xff\xc9\0E\0\x92\xff\xc9\0E\0\x93\xff\xc9\0E\0\x94\xff\xc9\0E\0\x95\xff\xd7\0E\0\x96\xff\xae\0E\0\x97\xff\xae\0E\0\x98\xff\xae\0E\0\x99\xff\xae\0E\0\x9f\xff\xae\0E\0\xa0\xff\xae\0E\0\xa1\xff\xae\0E\0\xa2\xff\xae\0E\0\xa3\xff\xae\0E\0\xa5\xff\xae\0E\0\xab\xff\xae\0E\0\xad\xff\xae\0E\0\xbd\0\xdb\0E\0\xc0\0\xb6\0E\0\xce\xff\x93\0E\0\xcf\xff\x93\0I\0I\0\xa4\0J\0@\xff\xe5\0J\0B\xff\xec\0J\0D\xff\xe5\0J\0F\xff\xec\0J\0N\xff\xe5\0J\0P\xff\xec\0J\0\x8e\xff\xe5\0J\0\x8f\xff\xe5\0J\0\x90\xff\xe5\0J\0\x91\xff\xe5\0J\0\x92\xff\xe5\0J\0\x93\xff\xe5\0J\0\x94\xff\xe5\0J\0\x95\xff\xec\0J\0\x96\xff\xe5\0J\0\x97\xff\xe5\0J\0\x98\xff\xe5\0J\0\x99\xff\xe5\0J\0\x9f\xff\xe5\0J\0\xa0\xff\xe5\0J\0\xa1\xff\xe5\0J\0\xa2\xff\xe5\0J\0\xa3\xff\xe5\0J\0\xa5\xff\xe5\0J\0\xad\xff\xe5\0J\0\xb1\xff\xec\0K\0A\0=\0K\0G\0=\0K\0J\0=\0K\0K\0D\0K\0Y\0)\0N\0E\xff\xd7\0N\0\xce\xff\xd7\0N\0\xcf\xff\xd7\0Q\0\f\xffj\0Q\0\x0e\xffj\0Q\0@\xff\xd7\0Q\0B\xff\xc9\0Q\0C\xff\xc9\0Q\0D\xff\xa0\0Q\0F\xff\xa0\0Q\0H\xff\xd7\0Q\0K\xff\xd7\0Q\0N\xff\xbc\0Q\0P\xff\xc3\0Q\0R\xff\xbc\0Q\0Y\0=\0Q\0\x8e\xff\xd7\0Q\0\x8f\xff\xd7\0Q\0\x90\xff\xd7\0Q\0\x91\xff\xd7\0Q\0\x92\xff\xd7\0Q\0\x93\xff\xd7\0Q\0\x94\xff\xd7\0Q\0\x95\xff\xc9\0Q\0\x96\xff\xa0\0Q\0\x97\xff\xa0\0Q\0\x98\xff\xa0\0Q\0\x99\xff\xa0\0Q\0\x9a\xff\xd7\0Q\0\x9b\xff\xd7\0Q\0\x9c\xff\xd7\0Q\0\x9d\xff\xd7\0Q\0\x9f\xff\xbc\0Q\0\xa0\xff\xbc\0Q\0\xa1\xff\xbc\0Q\0\xa2\xff\xbc\0Q\0\xa3\xff\xbc\0Q\0\xa5\xff\xbc\0Q\0\xab\xff\xd7\0Q\0\xad\xff\xbc\0Q\0\xbd\0\x89\0Q\0\xc0\0\x89\0S\0D\0\x1b\0S\0S\xff\xc9\0S\0\x96\0\x1b\0S\0\x97\0\x1b\0S\0\x98\0\x1b\0S\0\x99\0\x1b\0U\0\f\xff\xae\0U\0\x0e\xff\xae\0U\0@\xff\xf2\0U\0D\xff\xe3\0U\0N\xff\xe3\0U\0R\xff\xe5\0U\0\x8e\xff\xf2\0U\0\x8f\xff\xf2\0U\0\x90\xff\xf2\0U\0\x91\xff\xf2\0U\0\x92\xff\xf2\0U\0\x93\xff\xf2\0U\0\x94\xff\xf2\0U\0\x96\xff\xe3\0U\0\x97\xff\xe3\0U\0\x98\xff\xe3\0U\0\x99\xff\xe3\0U\0\x9f\xff\xe3\0U\0\xa0\xff\xe3\0U\0\xa1\xff\xe3\0U\0\xa2\xff\xe3\0U\0\xa3\xff\xe3\0U\0\xa5\xff\xe3\0U\0\xad\xff\xe3\0V\0\f\xff\xae\0V\0\x0e\xff\xae\0W\0@\xff\xe5\0W\0B\xff\xe5\0W\0\x8e\xff\xe5\0W\0\x8f\xff\xe5\0W\0\x90\xff\xe5\0W\0\x91\xff\xe5\0W\0\x92\xff\xe5\0W\0\x93\xff\xe5\0W\0\x94\xff\xe5\0W\0\x95\xff\xe5\0W\0\xb1\xff\xe5\0X\0I\0\x8f\0Z\0E\0\xb6\0`\0\x11\xff\xae\0`\0\x13\0=\0`\0\x14\xff\xae\0`\0\x18\xff\x85\0r\0)\0m\0r\x003\xff;\0r\x005\xff\xe5\0r\x007\0=\0r\x008\xff\x9a\0r\x009\0)\0r\0E\xff\xd7\0r\0S\xff\xf2\0r\0Y\0R\0r\0\xbd\xff\x93\0r\0\xc0\xff\x9a\0s\0)\0m\0s\x003\xff;\0s\x005\xff\xe5\0s\x007\0=\0s\x008\xff\x9a\0s\x009\0)\0s\0E\xff\xd7\0s\0S\xff\xf2\0s\0Y\0R\0s\0\xbd\xff\x93\0s\0\xc0\xff\x9a\0t\0)\0m\0t\x003\xff;\0t\x005\xff\xe5\0t\x007\0=\0t\x008\xff\x9a\0t\x009\0)\0t\0E\xff\xd7\0t\0S\xff\xf2\0t\0Y\0R\0t\0\xbd\xff\x93\0t\0\xc0\xff\x9a\0u\0)\0m\0u\x003\xff;\0u\x005\xff\xe5\0u\x007\0=\0u\x008\xff\x9a\0u\x009\0)\0u\0E\xff\xd7\0u\0S\xff\xf2\0u\0Y\0R\0u\0\xbd\xff\x93\0u\0\xc0\xff\x9a\0v\0)\0m\0v\x003\xff;\0v\x005\xff\xe5\0v\x007\0=\0v\x008\xff\x9a\0v\x009\0)\0v\0E\xff\xd7\0v\0S\xff\xf2\0v\0Y\0R\0v\0\xbd\xff\x93\0v\0\xc0\xff\x9a\0w\0)\0m\0w\x003\xff;\0w\x005\xff\xe5\0w\x007\0=\0w\x008\xff\x9a\0w\x009\0)\0w\0E\xff\xd7\0w\0S\xff\xf2\0w\0Y\0R\0w\0\xbd\xff\x93\0w\0\xc0\xff\x9a\0x\x005\x007\0x\x007\0)\0x\0Y\0R\0y\0 \0\x1b\0y\0)\0)\0y\x009\0=\0y\0Y\0)\0z\x005\x007\0z\x007\0)\0z\0Y\0R\0{\x005\x007\0{\x007\0)\0{\0Y\0R\0|\x005\x007\0|\x007\0)\0|\0Y\0R\0}\x005\x007\0}\x007\0)\0}\0Y\0R\0\x83\0)\xff\x9a\0\x83\x003\xffh\0\x83\x005\xff\xe5\0\x83\x006\0\x1b\0\x83\x007\xff\xd7\0\x83\0x\xff\xd9\0\x84\0)\xff\x9a\0\x84\x003\xffh\0\x84\x005\xff\xe5\0\x84\x006\0\x1b\0\x84\x007\xff\xd7\0\x84\0x\xff\xd9\0\x85\0)\xff\x9a\0\x85\x003\xffh\0\x85\x005\xff\xe5\0\x85\x006\0\x1b\0\x85\x007\xff\xd7\0\x85\0x\xff\xd9\0\x86\0)\xff\x9a\0\x86\x003\xffh\0\x86\x005\xff\xe5\0\x86\x006\0\x1b\0\x86\x007\xff\xd7\0\x86\0x\xff\xd9\0\x87\0)\xff\x9a\0\x87\x003\xffh\0\x87\x005\xff\xe5\0\x87\x006\0\x1b\0\x87\x007\xff\xd7\0\x87\0x\xff\xd9\0\x88\0)\xff\x9a\0\x88\x003\xffh\0\x88\x005\xff\xe5\0\x88\x006\0\x1b\0\x88\x007\xff\xd7\0\x88\0x\xff\xd9\0\x89\0x\xff\xb2\0\x8a\0x\xff\xb2\0\x8b\0x\xff\xb2\0\x8e\0E\xff\xd7\0\x8e\0S\xff\xe5\0\x8f\0E\xff\xd7\0\x8f\0S\xff\xe5\0\x90\0E\xff\xd7\0\x90\0S\xff\xe5\0\x91\0E\xff\xd7\0\x91\0S\xff\xe5\0\x92\0E\xff\xd7\0\x92\0S\xff\xe5\0\x93\0E\xff\xd7\0\x93\0S\xff\xe5\0\x94\0U\x007\0\x94\0V\0\x1b\0\x94\0W\0\x1b\0\x96\0U\x007\0\x96\0V\0\x1b\0\x96\0W\0\x1b\0\x97\0U\x007\0\x97\0V\0\x1b\0\x97\0W\0\x1b\0\x98\0U\x007\0\x98\0V\0\x1b\0\x98\0W\0\x1b\0\x99\0U\x007\0\x99\0V\0\x1b\0\x99\0W\0\x1b\0\x9f\0E\xff\xd7\0\xa0\0E\xff\xd7\0\xa1\0E\xff\xd7\0\xa2\0E\xff\xd7\0\xa3\0E\xff\xd7\0\xa5\0E\xff\xd7\0\xaa\0I\0\x8f\0\xac\x005\x007\0\xac\x007\0)\0\xad\0U\x007\0\xad\0V\0\x1b\0\xad\0W\0\x1b\0\xae\0\f\xff%\0\xae\0\r\xffV\0\xae\0\x0e\xff%\0\xae\0\x19\xff\x85\0\xae\0\x1a\xff\x85\0\xae\0 \xff3\0\xae\0\"\xff\xb4\0\xae\0&\xff\xae\0\xae\0)\xfef\0\xae\0.\xff\xbc\0\xae\x000\xff\xc3\0\xae\x002\xff\xa0\0\xae\x003\0=\0\xae\0@\xff3\0\xae\0C\xff3\0\xae\0D\xff3\0\xae\0H\xff\xc9\0\xae\0N\xff3\0\xae\0T\xff3\0\xae\0U\xff\xa0\0\xae\0x\xfe\xfc\0\xae\0\x88\xff\xbc\0\xae\0\x94\xff3\0\xae\0\xa5\xff3\0\xae\0\xac\xff\xbc\0\xae\0\xad\xff3\0\xae\0\xbd\0R\0\xbc\0 \xffN\0\xbc\0)\xfe\xcd\0\xbc\0r\xffN\0\xbc\0s\xffN\0\xbc\0t\xffN\0\xbc\0u\xffN\0\xbc\0v\xffN\0\xbc\0w\xffN\0\xbd\0 \xffj\0\xbd\x003\0D\0\xbd\x005\0R\0\xbd\0R\xff%\0\xbd\0r\xffj\0\xbd\0s\xffj\0\xbd\0t\xffj\0\xbd\0u\xffj\0\xbd\0v\xffj\0\xbd\0w\xffj\0\xbf\0 \xffH\0\xbf\0)\xfe\xcd\0\xbf\0r\xffH\0\xbf\0s\xffH\0\xbf\0t\xffH\0\xbf\0u\xffH\0\xbf\0v\xffH\0\xbf\0w\xffH\0\xdb\0\f\xff%\0\xdb\0\r\xffV\0\xdb\0\x0e\xff%\0\xdb\0\x19\xff\x85\0\xdb\0\x1a\xff\x85\0\xdb\0 \xff3\0\xdb\0\"\xff\xb4\0\xdb\0&\xff\xae\0\xdb\0)\xfef\0\xdb\0.\xff\xbc\0\xdb\x000\xff\xc3\0\xdb\x002\xff\xa0\0\xdb\x003\0=\0\xdb\0@\xff3\0\xdb\0C\xff3\0\xdb\0D\xff3\0\xdb\0H\xff\xc9\0\xdb\0N\xff3\0\xdb\0T\xff3\0\xdb\0U\xff\xa0\0\xdb\0x\xfe\xfc\0\xdb\0\x88\xff\xbc\0\xdb\0\x94\xff3\0\xdb\0\xa5\xff3\0\xdb\0\xac\xff\xbc\0\xdb\0\xad\xff3\0\xdb\0\xbd\0R\0\xde\0I\0\x8f\0\0\0\0\0\x0f\0\xba\0\x01\0\0\0\0\0\0\0$\0\0\0\x01\0\0\0\0\0\x01\0\x0f\0+\0\x01\0\0\0\0\0\x02\0\x07\0$\0\x01\0\0\0\0\0\x03\0\x1c\0+\0\x01\0\0\0\0\0\x04\0\x0f\0+\0\x01\0\0\0\0\0\x05\0+\0G\0\x01\0\0\0\0\0\x06\0\r\0r\0\x01\0\0\0\0\0\t\0\x0f\0\x7f\0\x03\0\x01\x04\t\0\0\0R\0\x8e\0\x03\0\x01\x04\t\0\x01\0\x1e\0\xee\0\x03\0\x01\x04\t\0\x02\0\x0e\0\xe0\0\x03\0\x01\x04\t\0\x03\x008\0\xee\0\x03\0\x01\x04\t\0\x04\0\x1e\0\xee\0\x03\0\x01\x04\t\0\x05\0V\x01&\0\x03\0\x01\x04\t\0\x06\0\x1a\x01|Copyright (c) , 1999. The LEGO GroupRegularXCCW Joined 23a:Version 1.00Version 1.00 March 2, 2011, initial releaseXCCWJoined23aDalton Maag Ltd\0C\0o\0p\0y\0r\0i\0g\0h\0t\0 \0(\0c\0)\0 \x002\x000\x001\x000\0 \0w\0w\0w\0.\0c\0u\0r\0s\0i\0v\0e\0w\0r\0i\0t\0i\0n\0g\0.\0o\0r\0g\0R\0e\0g\0u\0l\0a\0r\0X\0C\0C\0W\0 \0J\0o\0i\0n\0e\0d\0 \x002\x003\0a\0:\0V\0e\0r\0s\0i\0o\0n\0 \x001\0.\x000\x000\0V\0e\0r\0s\0i\0o\0n\0 \x001\0.\x000\x000\0 \0M\0a\0r\0c\0h\0 \x002\0,\0 \x002\x000\x001\x001\0,\0 \0i\0n\0i\0t\0i\0a\0l\0 \0r\0e\0l\0e\0a\0s\0e\0X\0C\0C\0W\0J\0o\0i\0n\0e\0d\x002\x003\0a\0\x02\0\0\0\0\0\0\0\0\0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x04\0\0\0\x01\0\x02\0\x03\0\x04\0\x05\0\x06\0\x07\0\b\0\t\0\n\0\x0b\0\f\0\r\0\x0e\0\x0f\0\x10\0\x11\0\x12\0\x13\0\x14\0\x15\0\x16\0\x17\0\x18\0\x19\0\x1a\0\x1b\0\x1c\0\x1d\0\x1e\0\x1f\0 \0!\0\"\0#\0$\0%\0&\0'\0(\0)\0*\0+\0,\0-\0.\0/\x000\x001\x002\x003\x004\x005\x006\x007\x008\x009\0:\0;\0<\0=\0>\0?\0@\0A\0B\0C\0D\0E\0F\0G\0H\0I\0J\0K\0L\0M\0N\0O\0P\0Q\0R\0S\0T\0U\0V\0W\0X\0Y\0Z\0[\0\\\0]\0^\0_\0`\0a\0\xa3\0\x84\0\x85\0\xbd\0\x96\0\xe8\0\x86\0\x8e\0\x8b\0\x9d\0\xa9\0\xa4\0\x8a\0\xda\0\x83\0\x93\x01\x02\x01\x03\0\x8d\0\x97\0\x88\0\xc3\0\xde\x01\x04\0\x9e\0\xaa\0\xf5\0\xf4\0\xf6\0\xa2\0\xad\0\xc9\0\xc7\0\xae\0b\0c\0\x90\0d\0\xcb\0e\0\xc8\0\xca\0\xcf\0\xcc\0\xcd\0\xce\0\xe9\0f\0\xd3\0\xd0\0\xd1\0\xaf\0g\0\xf0\0\x91\0\xd6\0\xd4\0\xd5\0h\0\xeb\0\xed\0\x89\0j\0i\0k\0m\0l\0n\0\xa0\0o\0q\0p\0r\0s\0\xb0\0\xb1\0\xbb\0\xa6\0\xea\0x\0z\0y\0{\0}\0|\0\xb8\0\xa1\0\x7f\0~\0\x80\0\x81\0\xec\0\xee\0\xba\0\xd7\0\xd8\0\xe1\x01\x05\0\xdb\0\xdc\0\xc6\0\xe0\0\xd9\0\xdf\x01\x06\0\x8f\0\xb6\0\xb7\0\xc4\0\xb4\0\xb5\0\xc5\0\x82\0\xc2\0\x87\0\xab\0\xbe\0\xbf\0\xbc\x01\x07\x01\b\0\x8c\0\xef\0\xa5\0\x94\0\x95\x01\t\x01\n\x01\x0b\x01\f\x01\r\x01\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x07uni00B2\x07uni00B3\x07uni00B9\x07uni02C9\x07dotmath\x04lira\x04Euro\x04altM\x04altW\x05altb1\x05altb2\x05altf1\x05altf2\x05altf3\x05altf4\x05altf5\x05altg1\x05altg2\x05altj1\x05altj2\x05altk1\x05altk2\x05altp1\x05altp2\x05altq1\x05altq2\x05alts1\x05alts2\x05altv1\x05altv2\x05altw1\x05altw2\x05altx1\x05altx2\x05alty1\x05alty2\x05altz1\x05altz2\x05altz3\x04alt1\x04alt3\x04alt4\x04alt9\0\0\0\0\0\x01\xff\xff\0\x03");e3();a(0,[A,eC,-1],eC);a(1,[A,d0,-2],d0);a(2,[A,cr,-3],cr);a(3,[A,dF,-4],dF);a(4,[A,d7,-5],d7);a(5,[A,dT,-6],dT);a(6,[A,dH,-7],dH);a(7,[A,ez,-8],ez);a(8,[A,ee,-9],ee);a(9,[A,es,-10],es);a(10,[A,eo,-11],eo);a(11,[A,eu,-12],eu);return}(globalThis));

(function(a){"use strict";var
b1="Stdlib__Obj",F="Stdlib__Gc",b0=129,cp="Stdlib__Random",E=116,aI="Js_of_ocaml__PerformanceObserver",by="Stdlib__Either",ab="Stdlib__Map",bf="Pdfe",bx="Pdf",co="Js_of_ocaml__Intl",bZ="Stdlib__Domain",cm=137,cn="Stdlib__Array",aa=146,aG="Assert_failure",aH="Pdfpagelabels",D="Stdlib__Lazy",ck="Js_of_ocaml__Lib_version",cl="Jsoo_runtime__",cM="Pdfspace",$="Stdlib__Format",be="Stdlib__In_channel",cj="Stdlib__Dynarray",cL="Js_of_ocaml__EventSource",C="Pdfwrite",aE=131,aF="Stdlib__BytesLabels",ci="Pdfops",cK="Stdlib__Bytes",ch="Gg",_="End_of_file",cJ="Stdlib__Condition",aB=152,aC=134,aD="Stdlib__Marshal",cg="Js_of_ocaml__CSS",bd=148,cf=122,cI="Out_of_memory",aA="Js_of_ocaml__Url",bw="Not_found",cH="Failure",bb="Label_maker_lib__Pdf_generator",bc="Pdfio",ce="Jsoo_runtime__Runtime_version",B=121,az="Otfm",cd="Stdlib__String",cG="Stdlib__Printf",ba="Stdlib",Z="Vg",bY=136,cF="Pdfgenlex",bX="Stdlib__Callback",a$="Stdlib__Filename",bW="Stdlib__Hashtbl",cb="Js_of_ocaml__Geolocation",cc="Pdftext",cE="Pdffun",ay=124,A="Invalid_argument",Y="Pdfread",bV=147,cD="Stdlib__Mutex",X="Stdlib__Option",ax=141,cC="Stdlib__ListLabels",aw=120,ca="Js_of_ocaml__Dom_html",av="Js_of_ocaml__Js",a_=132,bS="Js_of_ocaml__IntersectionObserver",bT=125,bU="Stdlib__MoreLabels",a9="Label_maker_lib__Label_layouts",W="Pdfocg",a8="Js_of_ocaml",z="Std_exit",bR="Js_of_ocaml__Jstable",cA="Match_failure",cB="Stdlib__Semaphore",y="Stdlib__StringLabels",bv=133,bQ="Js_of_ocaml__File",bP=156,x=157,bu="Js_of_ocaml__Regexp",cz=109,w=112,bO=154,b$="Stdlib__Complex",a7="Stdlib__Int64",v=140,V="Pdftree",au=118,b_="Stdlib__Sys",U="Js_of_ocaml__Dom_svg",bt="CamlinternalLazy",u="Stdlib__Scanf",t="Label_maker_lib",at="Js_of_ocaml__Worker",a6=139,cy="Stdlib__Digest",as="Stdlib__Char",b9=144,ar="Stdlib__Int32",T="Sys_error",bN="Pdfcodec",cx="Stdlib__Type",a5=107,b8="Stdlib__Unit",b7="Pdfpaper",cw="Stdlib__Nativeint",aq="Pdfst",cv="Pdfflate",ap=151,bs=126,cu="Stdlib__Stack",S="CamlinternalFormat",b6="Pdfafmdata",ao="Stack_overflow",br="Stdlib__ArrayLabels",bM="Stdlib__Printexc",b5="Pdfjpeg",s=108,R="Js_of_ocaml__WebSockets",an="Stdlib__Arg",bq="Js_of_ocaml__",bL="Js_of_ocaml__Form",am="Js_of_ocaml__Dom_events",a4="Undefined_recursive_module",Q="Js_of_ocaml__ResizeObserver",a2="CamlinternalFormatBasics",a3="Js_of_ocaml__WebGL",b4="Pdfglyphlist",a1="Stdlib__Queue",al=153,a0="Pdfcryptprimitives",r="Stdlib__Bool",P="Jsoo_runtime",bK="Division_by_zero",q="Js_of_ocaml__Dom",aZ="CamlinternalMod",aY=114,bJ=158,aX="Stdlib__Parsing",bH=119,bI="Stdlib__Weak",O=110,aW=113,bp="Dune__exe",aV="Stdlib__Effect",bG=101,p="Stdlib__Int",L=128,M="Pdftransform",N="Stdlib__StdLabels",ct="Js_of_ocaml__Typed_array",o="Stdlib__Oo",aT="Stdlib__Bigarray",aU="Stdlib__List",bo="Stdlib__Ephemeron",m=138,n=130,b3="Label_maker_lib__Font_utils",K=155,ak=145,aS="Js_of_ocaml__MutationObserver",bF=100,k=106,l="Pdfdate",aR=111,bn="Stdlib__Fun",i=117,j="Uutf",aj="Stdlib__Lexing",ai="Pdfafm",cs="Pdfmarks",h="Dune__exe__Label_maker",J=102,ah="Pdfannot",aQ="Js_of_ocaml__Json",cr="Stdlib__Atomic",aO=135,aP="Pdfstandard14",bm="Stdlib__Result",bl="Vgr_svg",bE="Pdfdest",b2=149,g="Js_of_ocaml__XmlHttpRequest",aN="Stdlib__Set",aM=123,bk="Stdlib__Buffer",bC="Js_of_ocaml__Import",bD="Pdfunits",ag="Pdfmerge",bB=150,f="Pdfpage",bj="Stdlib__Out_channel",I="Stdlib__Seq",bi="Pdfcmap",e=103,af=115,aL=127,aK="Sys_blocked_io",d=142,ae="Stdlib__Float",aJ="Stdlib__Uchar",bh=105,cq="Pdfcrypt",H="CamlinternalOO",ad=143,bA="Pdfutil",bz="Pdfimage",ac=104,G="Js_of_ocaml__Firebug",bg="Js_of_ocaml__Sys_js",c=a.jsoo_runtime,b=c.caml_get_global_data();b.prim_count=846;b.symbols=[0,[0,bl,K],[0,Z,bO],[0,j,bV],[0,a4,11],[0,T,10],[0,aK,9],[0,bI,61],[0,b8,31],[0,aJ,26],[0,cx,17],[0,b_,15],[0,y,75],[0,cd,30],[0,N,77],[0,cu,42],[0,aN,40],[0,I,21],[0,cB,47],[0,u,63],[0,bm,23],[0,cp,59],[0,a1,43],[0,cG,50],[0,bM,52],[0,aX,39],[0,bj,56],[0,X,22],[0,o,66],[0,b1,16],[0,cw,37],[0,cD,45],[0,bU,76],[0,aD,32],[0,ab,41],[0,cC,73],[0,aU,27],[0,aj,38],[0,D,20],[0,a7,36],[0,ar,35],[0,p,28],[0,be,55],[0,bW,60],[0,F,54],[0,bn,53],[0,$,62],[0,ae,34],[0,a$,70],[0,bo,69],[0,by,14],[0,aV,78],[0,cj,68],[0,bZ,48],[0,cy,57],[0,cJ,46],[0,b$,71],[0,as,25],[0,bX,64],[0,aF,74],[0,cK,29],[0,bk,44],[0,r,24],[0,aT,58],[0,cr,18],[0,br,72],[0,cn,33],[0,an,51],[0,ba,13],[0,z,bJ],[0,ao,8],[0,C,aM],[0,bA,aW],[0,bD,E],[0,V,aE],[0,M,af],[0,cc,d],[0,aP,ad],[0,aq,a_],[0,cM,bY],[0,Y,bT],[0,b7,i],[0,aH,n],[0,f,bv],[0,ci,aL],[0,W,ak],[0,ag,aa],[0,cs,b0],[0,b5,bs],[0,bc,aY],[0,bz,cm],[0,b4,v],[0,cF,ay],[0,cE,aO],[0,cv,B],[0,bf,w],[0,bE,L],[0,l,b9],[0,a0,au],[0,cq,aw],[0,bN,cf],[0,bi,ax],[0,ah,aC],[0,b6,a6],[0,ai,m],[0,bx,bH],[0,cI,7],[0,az,bd],[0,bw,6],[0,cA,5],[0,bb,aB],[0,a9,ap],[0,b3,bB],[0,t,b2],[0,ce,80],[0,cl,79],[0,P,81],[0,g,90],[0,at,91],[0,R,92],[0,a3,93],[0,aA,95],[0,ct,86],[0,bg,97],[0,Q,98],[0,bu,94],[0,aI,99],[0,aS,bF],[0,ck,96],[0,bR,bG],[0,aQ,J],[0,av,84],[0,co,O],[0,bS,cz],[0,bC,83],[0,cb,s],[0,bL,89],[0,G,a5],[0,bQ,87],[0,cL,k],[0,U,bh],[0,ca,88],[0,am,ac],[0,q,85],[0,cg,e],[0,bq,82],[0,a8,aR],[0,A,4],[0,ch,al],[0,cH,3],[0,_,2],[0,h,x],[0,bp,bP],[0,bK,1],[0,H,65],[0,aZ,67],[0,bt,19],[0,a2,12],[0,S,49],[0,aG,0]];var
cN=[0,h],cO=[0,cL],cP=[0,t],cQ=[0,0,[0,bb],aB,0,1],cR=[0,a9],cS=[0,az],cT=[0,b6],cU=[0,bi],cV=[0,l],cW=[0,ag],cX=[0,a$],cY=[0,bW],cZ=[0,o],c0=[0,bj],c1=[0,bM],c2=[0,u],c3=[0,N],c4=[0,bl];b.sections=[0,[0,159,[0,[0,[0,[0,[0,[0,[0,0,[0,aG],0,[0,0,[0,S],49,0,1],2],[0,a2],12,0,3],[0,bt],19,[0,[0,[0,0,[0,aZ],67,0,1],[0,H],65,0,2],[0,bK],1,[0,[0,0,[0,bp],bP,[0,0,cN,x,0,1],2],[0,_],2,0,3],4],5],[0,cH],3,[0,[0,[0,[0,0,[0,ch],al,0,1],[0,A],4,[0,0,[0,a8],aR,0,1],2],[0,bq],82,[0,0,[0,cg],e,0,1],3],[0,q],85,[0,[0,[0,0,[0,am],ac,0,1],[0,ca],88,[0,0,[0,U],bh,[0,0,cO,k,0,1],2],3],[0,bQ],87,[0,[0,0,[0,G],a5,0,1],[0,bL],89,[0,0,[0,cb],s,0,1],2],4],5],6],[0,bC],83,[0,[0,[0,[0,0,[0,bS],cz,[0,0,[0,co],O,0,1],2],[0,av],84,[0,[0,0,[0,aQ],J,0,1],[0,bR],bG,0,2],3],[0,ck],96,[0,[0,0,[0,aS],bF,0,1],[0,aI],99,0,2],4],[0,bu],94,[0,[0,0,[0,Q],98,0,1],[0,bg],97,0,2],5],7],[0,ct],86,[0,[0,[0,[0,[0,[0,0,[0,aA],95,0,1],[0,a3],93,0,2],[0,R],92,0,3],[0,at],91,[0,0,[0,g],90,0,1],4],[0,P],81,[0,[0,[0,[0,0,[0,cl],79,0,1],[0,ce],80,[0,[0,0,cP,b2,0,1],[0,b3],bB,[0,0,cR,ap,cQ,2],3],4],[0,cA],5,[0,[0,0,[0,bw],6,[0,0,cS,bd,0,1],2],[0,cI],7,0,3],5],[0,bx],bH,[0,[0,[0,0,[0,ai],m,[0,0,cT,a6,0,1],2],[0,ah],aC,[0,[0,0,cU,ax,0,1],[0,bN],cf,0,2],3],[0,cq],aw,[0,0,[0,a0],au,[0,[0,0,cV,b9,0,1],[0,bE],L,0,2],3],4],6],7],[0,bf],w,[0,[0,[0,[0,0,[0,cv],B,[0,0,[0,cE],aO,0,1],2],[0,cF],ay,[0,[0,0,[0,b4],v,0,1],[0,bz],cm,0,2],3],[0,bc],aY,[0,[0,[0,0,[0,b5],bs,0,1],[0,cs],b0,[0,[0,0,cW,aa,0,1],[0,W],ak,0,2],3],[0,ci],aL,[0,[0,0,[0,f],bv,0,1],[0,aH],n,0,2],4],5],[0,b7],i,[0,[0,[0,0,[0,Y],bT,[0,0,[0,cM],bY,0,1],2],[0,aq],a_,[0,[0,0,[0,aP],ad,0,1],[0,cc],d,0,2],3],[0,M],af,[0,[0,[0,0,[0,V],aE,0,1],[0,bD],E,0,2],[0,bA],aW,[0,[0,0,[0,C],aM,0,1],[0,ao],8,[0,0,[0,z],bJ,0,1],2],3],4],6],8],9],[0,ba],13,[0,[0,[0,[0,[0,0,[0,an],51,0,1],[0,cn],33,[0,0,[0,br],72,0,1],2],[0,cr],18,[0,0,[0,aT],58,0,1],3],[0,r],24,[0,[0,[0,0,[0,bk],44,0,1],[0,cK],29,[0,[0,0,[0,aF],74,0,1],[0,bX],64,0,2],3],[0,as],25,[0,[0,0,[0,b$],71,0,1],[0,cJ],46,[0,[0,0,[0,cy],57,0,1],[0,bZ],48,[0,0,[0,cj],68,[0,0,[0,aV],78,0,1],2],3],4],5],6],[0,by],14,[0,[0,[0,[0,[0,[0,0,[0,bo],69,[0,0,cX,70,0,1],2],[0,ae],34,[0,0,[0,$],62,0,1],3],[0,bn],53,[0,0,[0,F],54,[0,[0,0,cY,60,0,1],[0,be],55,0,2],3],4],[0,p],28,[0,0,[0,ar],35,[0,0,[0,a7],36,0,1],2],5],[0,D],20,[0,[0,[0,0,[0,aj],38,0,1],[0,aU],27,[0,[0,0,[0,cC],73,0,1],[0,ab],41,0,2],3],[0,aD],32,[0,[0,[0,0,[0,bU],76,0,1],[0,cD],45,0,2],[0,cw],37,0,3],4],6],[0,b1],16,[0,[0,[0,[0,[0,[0,0,cZ,66,0,1],[0,X],22,[0,0,c0,56,0,1],2],[0,aX],39,[0,[0,0,c1,52,0,1],[0,cG],50,0,2],3],[0,a1],43,[0,[0,0,[0,cp],59,0,1],[0,bm],23,[0,[0,0,c2,63,0,1],[0,cB],47,0,2],3],4],[0,I],21,[0,[0,0,[0,aN],40,[0,0,[0,cu],42,[0,0,c3,77,0,1],2],3],[0,cd],30,[0,0,[0,y],75,0,1],4],5],[0,b_],15,[0,[0,[0,0,[0,cx],17,0,1],[0,aJ],26,[0,0,[0,b8],31,[0,0,[0,bI],61,0,1],2],3],[0,aK],9,[0,[0,0,[0,T],10,0,1],[0,a4],11,[0,0,[0,j],bV,[0,0,[0,Z],bO,[0,0,c4,K,0,1],2],3],4],5],6],7],8],10]],0,c.caml_list_of_js_array(["%caml_format_int_special","%direct_int_div","%direct_int_mod","%direct_int_mul","%direct_obj_tag","%identity","%int_add","%int_and","%int_asr","%int_div","%int_lsl","%int_lsr","%int_mod","%int_mul","%int_neg","%int_or","%int_sub","%int_xor","BigStringReader","MlBytes","MlFakeDevice","MlFakeFd","MlFakeFd_out","MlFakeFile","MlFile","MlInt64","MlMutex","MlNat","MlNodeDevice","MlNodeFd","MlObjectTable","MlStringReader","Ml_Bigarray","Ml_Bigarray_c_1_1","UInt8ArrayReader","add_nat","bigstring_of_array_buffer","bigstring_of_typed_array","bigstring_to_array_buffer","bigstring_to_typed_array","blake2b","blit_nat","caml_MD5Final","caml_MD5Init","caml_MD5Transform","caml_MD5Update","caml_abs_float","caml_acos_float","caml_acosh_float","caml_add_float","caml_alloc_dummy","caml_alloc_dummy_float","caml_alloc_dummy_infix","caml_alloc_stack","caml_argv","caml_array_append","caml_array_blit","caml_array_bound_error","caml_array_concat","caml_array_create_float","caml_array_fill","caml_array_get","caml_array_get_addr","caml_array_get_float","caml_array_make","caml_array_of_bytes","caml_array_of_string","caml_array_of_uniform_array","caml_array_set","caml_array_set_addr","caml_array_set_float","caml_array_sub","caml_array_unsafe_get","caml_array_unsafe_get_float","caml_array_unsafe_set","caml_array_unsafe_set_addr","caml_array_unsafe_set_float","caml_asin_float","caml_asinh_float","caml_atan2_float","caml_atan_float","caml_atanh_float","caml_atomic_cas","caml_atomic_exchange","caml_atomic_fetch_add","caml_atomic_load","caml_atomic_make_contended","caml_ba_blit","caml_ba_change_layout","caml_ba_compare","caml_ba_create","caml_ba_create_buffer","caml_ba_create_from","caml_ba_create_unsafe","caml_ba_custom_name","caml_ba_deserialize","caml_ba_dim","caml_ba_dim_1","caml_ba_dim_2","caml_ba_dim_3","caml_ba_fill","caml_ba_from_typed_array","caml_ba_get_1","caml_ba_get_2","caml_ba_get_3","caml_ba_get_generic","caml_ba_get_size","caml_ba_get_size_per_element","caml_ba_hash","caml_ba_init","caml_ba_kind","caml_ba_kind_of_typed_array","caml_ba_layout","caml_ba_map_file","caml_ba_map_file_bytecode","caml_ba_num_dims","caml_ba_reshape","caml_ba_serialize","caml_ba_set_1","caml_ba_set_2","caml_ba_set_3","caml_ba_set_generic","caml_ba_slice","caml_ba_sub","caml_ba_to_typed_array","caml_ba_uint8_get16","caml_ba_uint8_get32","caml_ba_uint8_get64","caml_ba_uint8_set16","caml_ba_uint8_set32","caml_ba_uint8_set64","caml_backtrace_status","caml_bigstring_blit_ba_to_ba","caml_bigstring_blit_ba_to_bytes","caml_bigstring_blit_bytes_to_ba","caml_bigstring_blit_string_to_ba","caml_bigstring_memcmp","caml_blake2_bytes","caml_blake2_create","caml_blake2_final","caml_blake2_string","caml_blake2_update","caml_blit_bytes","caml_blit_string","caml_bswap16","caml_build_symbols","caml_bytes_bound_error","caml_bytes_compare","caml_bytes_equal","caml_bytes_get","caml_bytes_get16","caml_bytes_get32","caml_bytes_get64","caml_bytes_greaterequal","caml_bytes_greaterthan","caml_bytes_lessequal","caml_bytes_lessthan","caml_bytes_notequal","caml_bytes_of_array","caml_bytes_of_jsbytes","caml_bytes_of_string","caml_bytes_of_utf16_jsstring","caml_bytes_set","caml_bytes_set16","caml_bytes_set32","caml_bytes_set64","caml_bytes_unsafe_get","caml_bytes_unsafe_set","caml_call_gen","caml_callback","caml_cbrt_float","caml_ceil_float","caml_channel_descriptor","caml_check_bound","caml_check_bound_float","caml_check_bound_gen","caml_classify_float","caml_compare","caml_compare_val","caml_compare_val_get_custom","caml_compare_val_number_custom","caml_compare_val_tag","caml_continuation_use_and_update_handler_noexc","caml_continuation_use_noexc","caml_convert_bytes_to_array","caml_convert_raw_backtrace","caml_convert_raw_backtrace_slot","caml_convert_string_to_bytes","caml_copysign_float","caml_cos_float","caml_cosh_float","caml_create_bytes","caml_create_file","caml_create_string","caml_current_dir","caml_custom_event_index","caml_custom_identifier","caml_custom_ops","caml_decompress_input","caml_div","caml_div_float","caml_domain_dls","caml_domain_dls_compare_and_set","caml_domain_dls_get","caml_domain_dls_set","caml_domain_id","caml_domain_spawn","caml_ensure_stack_capacity","caml_ephe_blit_data","caml_ephe_blit_key","caml_ephe_check_data","caml_ephe_check_key","caml_ephe_create","caml_ephe_data_offset","caml_ephe_get_data","caml_ephe_get_data_copy","caml_ephe_get_key","caml_ephe_get_key_copy","caml_ephe_key_offset","caml_ephe_none","caml_ephe_set_data","caml_ephe_set_data_opt","caml_ephe_set_key","caml_ephe_unset_data","caml_ephe_unset_key","caml_eq_float","caml_equal","caml_erf_float","caml_erfc_float","caml_executable_name","caml_exn_with_js_backtrace","caml_exp2_float","caml_exp_float","caml_expm1_float","caml_failwith","caml_fatal_uncaught_exception","caml_fill_bytes","caml_final_register","caml_final_register_called_without_value","caml_final_release","caml_finish_formatting","caml_float_compare","caml_float_of_bytes","caml_float_of_int","caml_float_of_string","caml_floatarray_append","caml_floatarray_blit","caml_floatarray_create","caml_floatarray_fill","caml_floatarray_fill_unboxed","caml_floatarray_get","caml_floatarray_make","caml_floatarray_make_unboxed","caml_floatarray_set","caml_floatarray_sub","caml_floatarray_unsafe_get","caml_floatarray_unsafe_set","caml_floor_float","caml_fma_float","caml_fmod_float","caml_format_exception","caml_format_float","caml_format_int","caml_fresh_oo_id","caml_frexp_float","caml_fs_init","caml_gc_compaction","caml_gc_counters","caml_gc_full_major","caml_gc_get","caml_gc_major","caml_gc_major_slice","caml_gc_minor","caml_gc_minor_words","caml_gc_quick_stat","caml_gc_set","caml_gc_stat","caml_ge_float","caml_get_continuation_callstack","caml_get_current_callstack","caml_get_exception_backtrace","caml_get_exception_raw_backtrace","caml_get_global_data","caml_get_minor_free","caml_get_public_method","caml_get_root","caml_global_data","caml_gr_arc_aux","caml_gr_blit_image","caml_gr_clear_graph","caml_gr_close_graph","caml_gr_close_subwindow","caml_gr_create_image","caml_gr_current_x","caml_gr_current_y","caml_gr_display_mode","caml_gr_doc_of_state","caml_gr_draw_arc","caml_gr_draw_char","caml_gr_draw_image","caml_gr_draw_rect","caml_gr_draw_str","caml_gr_draw_string","caml_gr_dump_image","caml_gr_fill_arc","caml_gr_fill_poly","caml_gr_fill_rect","caml_gr_lineto","caml_gr_make_image","caml_gr_moveto","caml_gr_open_graph","caml_gr_open_subwindow","caml_gr_plot","caml_gr_point_color","caml_gr_remember_mode","caml_gr_resize_window","caml_gr_set_color","caml_gr_set_font","caml_gr_set_line_width","caml_gr_set_text_size","caml_gr_set_window_title","caml_gr_sigio_handler","caml_gr_sigio_signal","caml_gr_size_x","caml_gr_size_y","caml_gr_state","caml_gr_state_create","caml_gr_state_get","caml_gr_state_init","caml_gr_state_set","caml_gr_synchronize","caml_gr_text_size","caml_gr_wait_event","caml_gr_window_id","caml_greaterequal","caml_greaterthan","caml_gt_float","caml_hash","caml_hash_mix_bigstring","caml_hash_mix_bytes","caml_hash_mix_bytes_arr","caml_hash_mix_final","caml_hash_mix_float","caml_hash_mix_int","caml_hash_mix_int64","caml_hash_mix_jsbytes","caml_hash_mix_string","caml_hash_nat","caml_hexstring_of_float","caml_hypot_float","caml_input_value","caml_input_value_from_bytes","caml_input_value_from_reader","caml_input_value_to_outside_heap","caml_install_signal_handler","caml_int32_add","caml_int32_and","caml_int32_bits_of_float","caml_int32_bswap","caml_int32_compare","caml_int32_div","caml_int32_float_of_bits","caml_int32_format","caml_int32_mod","caml_int32_mul","caml_int32_neg","caml_int32_of_float","caml_int32_of_int","caml_int32_of_string","caml_int32_or","caml_int32_shift_left","caml_int32_shift_right","caml_int32_shift_right_unsigned","caml_int32_sub","caml_int32_to_float","caml_int32_to_int","caml_int32_unmarshal","caml_int32_xor","caml_int64_add","caml_int64_and","caml_int64_bits_of_float","caml_int64_bswap","caml_int64_compare","caml_int64_create_lo_hi","caml_int64_create_lo_mi_hi","caml_int64_div","caml_int64_float_of_bits","caml_int64_format","caml_int64_hash","caml_int64_hi32","caml_int64_is_negative","caml_int64_is_zero","caml_int64_lo32","caml_int64_marshal","caml_int64_mod","caml_int64_mul","caml_int64_neg","caml_int64_of_bytes","caml_int64_of_float","caml_int64_of_int","caml_int64_of_int32","caml_int64_of_nativeint","caml_int64_of_string","caml_int64_offset","caml_int64_or","caml_int64_shift_left","caml_int64_shift_right","caml_int64_shift_right_unsigned","caml_int64_sub","caml_int64_to_bytes","caml_int64_to_float","caml_int64_to_int","caml_int64_to_int32","caml_int64_to_nativeint","caml_int64_ult","caml_int64_unmarshal","caml_int64_xor","caml_int_compare","caml_int_of_float","caml_int_of_string","caml_invalid_argument","caml_is_continuation_tag","caml_is_js","caml_is_ml_bytes","caml_is_ml_string","caml_is_printable","caml_is_special_exception","caml_js_call","caml_js_delete","caml_js_equals","caml_js_error_of_exception","caml_js_error_option_of_exception","caml_js_eval_string","caml_js_expr","caml_js_from_array","caml_js_from_bool","caml_js_from_float","caml_js_from_int32","caml_js_from_nativeint","caml_js_from_string","caml_js_fun_call","caml_js_function_arity","caml_js_get","caml_js_get_console","caml_js_html_entities","caml_js_html_escape","caml_js_instanceof","caml_js_meth_call","caml_js_new","caml_js_object","caml_js_on_ie","caml_js_pure_expr","caml_js_set","caml_js_strict_equals","caml_js_to_array","caml_js_to_bool","caml_js_to_byte_string","caml_js_to_float","caml_js_to_int32","caml_js_to_nativeint","caml_js_to_string","caml_js_typeof","caml_js_var","caml_js_wrap_callback","caml_js_wrap_callback_arguments","caml_js_wrap_callback_strict","caml_js_wrap_callback_unsafe","caml_js_wrap_meth_callback","caml_js_wrap_meth_callback_arguments","caml_js_wrap_meth_callback_strict","caml_js_wrap_meth_callback_unsafe","caml_jsbytes_of_string","caml_jsoo_flags_effects","caml_jsoo_flags_use_js_string","caml_jsstring_of_string","caml_lazy_make_forward","caml_lazy_read_result","caml_lazy_reset_to_lazy","caml_lazy_update_to_forcing","caml_lazy_update_to_forward","caml_ldexp_float","caml_le_float","caml_lessequal","caml_lessthan","caml_lex_array","caml_lex_engine","caml_list_mount_point","caml_list_of_js_array","caml_list_to_js_array","caml_log10_float","caml_log1p_float","caml_log2_float","caml_log_float","caml_lt_float","caml_lxm_M","caml_lxm_daba","caml_lxm_next","caml_make_array","caml_make_float_vect","caml_make_path","caml_make_vect","caml_marshal_constants","caml_marshal_data_size","caml_marshal_header_size","caml_maybe_attach_backtrace","caml_maybe_print_stats","caml_md5_bytes","caml_md5_chan","caml_md5_string","caml_memprof_discard","caml_memprof_start","caml_memprof_stop","caml_ml_bytes_content","caml_ml_bytes_length","caml_ml_channel_get","caml_ml_channel_redirect","caml_ml_channel_restore","caml_ml_channel_size","caml_ml_channel_size_64","caml_ml_channels","caml_ml_close_channel","caml_ml_condition_broadcast","caml_ml_condition_new","caml_ml_condition_signal","caml_ml_condition_wait","caml_ml_debug_info_status","caml_ml_domain_cpu_relax","caml_ml_domain_id","caml_ml_domain_index","caml_ml_enable_runtime_warnings","caml_ml_flush","caml_ml_input","caml_ml_input_bigarray","caml_ml_input_block","caml_ml_input_char","caml_ml_input_int","caml_ml_input_scan_line","caml_ml_is_binary_mode","caml_ml_is_buffered","caml_ml_mutex_lock","caml_ml_mutex_new","caml_ml_mutex_try_lock","caml_ml_mutex_unlock","caml_ml_open_descriptor_in","caml_ml_open_descriptor_in_with_flags","caml_ml_open_descriptor_out","caml_ml_open_descriptor_out_with_flags","caml_ml_out_channels_list","caml_ml_output","caml_ml_output_bigarray","caml_ml_output_bytes","caml_ml_output_char","caml_ml_output_int","caml_ml_output_ta","caml_ml_pos_in","caml_ml_pos_in_64","caml_ml_pos_out","caml_ml_pos_out_64","caml_ml_runtime_events_are_active","caml_ml_runtime_events_path","caml_ml_runtime_events_pause","caml_ml_runtime_events_resume","caml_ml_runtime_events_start","caml_ml_runtime_warnings_enabled","caml_ml_seek_in","caml_ml_seek_in_64","caml_ml_seek_out","caml_ml_seek_out_64","caml_ml_set_binary_mode","caml_ml_set_buffered","caml_ml_set_channel_name","caml_ml_set_channel_output","caml_ml_set_channel_refill","caml_ml_string_length","caml_mod","caml_modf_float","caml_mount_autoload","caml_mul","caml_mul_float","caml_named_value","caml_named_values","caml_nativeint_add","caml_nativeint_and","caml_nativeint_bswap","caml_nativeint_compare","caml_nativeint_div","caml_nativeint_format","caml_nativeint_mod","caml_nativeint_mul","caml_nativeint_neg","caml_nativeint_of_float","caml_nativeint_of_int","caml_nativeint_of_int32","caml_nativeint_of_string","caml_nativeint_or","caml_nativeint_shift_left","caml_nativeint_shift_right","caml_nativeint_shift_right_unsigned","caml_nativeint_sub","caml_nativeint_to_float","caml_nativeint_to_int","caml_nativeint_to_int32","caml_nativeint_unmarshal","caml_nativeint_xor","caml_neg_float","caml_neq_float","caml_new_lex_engine","caml_new_string","caml_nextafter_float","caml_notequal","caml_obj_add_offset","caml_obj_block","caml_obj_compare_and_swap","caml_obj_dup","caml_obj_is_shared","caml_obj_raw_field","caml_obj_reachable_words","caml_obj_set_raw_field","caml_obj_tag","caml_obj_update_tag","caml_obj_with_tag","caml_ojs_new_arr","caml_oo_last_id","caml_output_val","caml_output_value","caml_output_value_to_buffer","caml_output_value_to_bytes","caml_output_value_to_string","caml_parse_digit","caml_parse_engine","caml_parse_format","caml_parse_sign_and_base","caml_parser_trace","caml_pos_in","caml_pos_out","caml_power_float","caml_process_pending_actions_with_root","caml_pure_js_expr","caml_raise_constant","caml_raise_end_of_file","caml_raise_no_such_file","caml_raise_not_found","caml_raise_sys_error","caml_raise_with_arg","caml_raise_with_args","caml_raise_with_string","caml_raise_zero_divide","caml_raw_backtrace_length","caml_raw_backtrace_next_slot","caml_raw_backtrace_slot","caml_read_file_content","caml_recommended_domain_count","caml_record_backtrace","caml_record_backtrace_env_flag","caml_record_backtrace_runtime_flag","caml_refill","caml_register_global","caml_register_named_value","caml_restore_raw_backtrace","caml_root","caml_round_float","caml_runtime_events_create_cursor","caml_runtime_events_free_cursor","caml_runtime_events_read_poll","caml_runtime_events_user_register","caml_runtime_events_user_resolve","caml_runtime_events_user_write","caml_runtime_parameters","caml_runtime_variant","caml_runtime_warnings","caml_seek_in","caml_seek_out","caml_set_oo_id","caml_set_parser_trace","caml_set_static_env","caml_signbit_float","caml_sin_float","caml_sinh_float","caml_sqrt_float","caml_str_repeat","caml_string_bound_error","caml_string_compare","caml_string_concat","caml_string_equal","caml_string_get","caml_string_get16","caml_string_get32","caml_string_get64","caml_string_greaterequal","caml_string_greaterthan","caml_string_hash","caml_string_lessequal","caml_string_lessthan","caml_string_notequal","caml_string_of_array","caml_string_of_bytes","caml_string_of_jsbytes","caml_string_of_jsstring","caml_string_set","caml_string_unsafe_get","caml_sub_float","caml_subarray_to_jsbytes","caml_sys_argv","caml_sys_chdir","caml_sys_close","caml_sys_const_backend_type","caml_sys_const_big_endian","caml_sys_const_int_size","caml_sys_const_max_wosize","caml_sys_const_naked_pointers_checked","caml_sys_const_ostype_cygwin","caml_sys_const_ostype_unix","caml_sys_const_ostype_win32","caml_sys_const_word_size","caml_sys_executable_name","caml_sys_exit","caml_sys_fds","caml_sys_file_exists","caml_sys_get_argv","caml_sys_get_config","caml_sys_getcwd","caml_sys_getenv","caml_sys_is_directory","caml_sys_is_regular_file","caml_sys_isatty","caml_sys_mkdir","caml_sys_modify_argv","caml_sys_open","caml_sys_open_for_node","caml_sys_random_seed","caml_sys_read_directory","caml_sys_remove","caml_sys_rename","caml_sys_rmdir","caml_sys_system_command","caml_sys_time","caml_sys_time_include_children","caml_sys_unsafe_getenv","caml_tan_float","caml_tanh_float","caml_to_js_string","caml_trailing_slash","caml_trampoline","caml_trampoline_return","caml_trunc_float","caml_uint8_array_of_bytes","caml_uint8_array_of_string","caml_uniform_array_append","caml_uniform_array_blit","caml_uniform_array_fill","caml_uniform_array_make","caml_uniform_array_sub","caml_unix_cleanup","caml_unix_closedir","caml_unix_filedescr_of_fd","caml_unix_findclose","caml_unix_findfirst","caml_unix_findnext","caml_unix_getpwuid","caml_unix_gettimeofday","caml_unix_getuid","caml_unix_gmtime","caml_unix_has_symlink","caml_unix_inet_addr_of_string","caml_unix_isatty","caml_unix_localtime","caml_unix_lstat","caml_unix_lstat_64","caml_unix_mkdir","caml_unix_mktime","caml_unix_opendir","caml_unix_readdir","caml_unix_readlink","caml_unix_rewinddir","caml_unix_rmdir","caml_unix_startup","caml_unix_stat","caml_unix_stat_64","caml_unix_symlink","caml_unix_time","caml_unix_unlink","caml_unmount","caml_update_dummy","caml_utf16_of_utf8","caml_utf8_of_utf16","caml_weak_create","caml_weak_set","caml_wrap_exception","caml_xdg_defaults","caml_xmlhttprequest_create","caml_zstd_initialize","compare_digits_nat","compare_nat","complement_nat","create_nat","decr_nat","deserialize_nat","div_digit_nat","div_helper","div_nat","fs_node_supported","incr_nat","initialize_nat","is_digit_int","is_digit_normalized","is_digit_odd","is_digit_zero","jsoo_create_file","jsoo_create_file_extern","jsoo_effect_not_supported","jsoo_floor_log2","jsoo_is_ascii","jsoo_mount_point","jsoo_static_env","jsoo_sys_getenv","jsoo_toplevel_reloc","land_digit_nat","length_nat","lor_digit_nat","lxor_digit_nat","make_unix_err_args","mult_digit_nat","mult_nat","nat_of_array","nth_digit_nat","nth_digit_nat_native","num_digits_nat","num_leading_zero_bits_in_digit","os_type","path_is_absolute","re_match","re_partial_match","re_replacement_text","re_search_backward","re_search_forward","re_string_match","resolve_fs_device","serialize_nat","set_digit_nat","set_digit_nat_native","set_to_zero_nat","shift_left_nat","shift_right_nat","square_nat","sub_nat","zstd_decompress"]),0];return}(globalThis));

//# 4 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   var CamlinternalFormatBasics = [0, concat_fmtty, erase_rel, concat_fmt];
   runtime.caml_register_global
    (0, CamlinternalFormatBasics, "CamlinternalFormatBasics");
   return;
  }
  (globalThis));

//# 179 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_false$0 = "false",
    cst_true$0 = "true",
    caml_atomic_cas = runtime.caml_atomic_cas,
    caml_atomic_load = runtime.caml_atomic_load,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_int64_float_of_bits = runtime.caml_int64_float_of_bits,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_channel_size = runtime.caml_ml_channel_size,
    caml_ml_channel_size_64 = runtime.caml_ml_channel_size_64,
    caml_ml_close_channel = runtime.caml_ml_close_channel,
    caml_ml_flush = runtime.caml_ml_flush,
    caml_ml_input = runtime.caml_ml_input,
    caml_ml_input_char = runtime.caml_ml_input_char,
    caml_ml_open_descriptor_in = runtime.caml_ml_open_descriptor_in,
    caml_ml_open_descriptor_out = runtime.caml_ml_open_descriptor_out,
    caml_ml_output = runtime.caml_ml_output,
    caml_ml_output_bytes = runtime.caml_ml_output_bytes,
    caml_ml_output_char = runtime.caml_ml_output_char,
    caml_ml_set_binary_mode = runtime.caml_ml_set_binary_mode,
    caml_ml_set_channel_name = runtime.caml_ml_set_channel_name,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_concat = runtime.caml_string_concat,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_sys_open = runtime.caml_sys_open,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Invalid_argument = global_data.Invalid_argument,
    Failure = global_data.Failure,
    Match_failure = global_data.Match_failure,
    Assert_failure = global_data.Assert_failure,
    Not_found = global_data.Not_found,
    Out_of_memory = global_data.Out_of_memory,
    Stack_overflow = global_data.Stack_overflow,
    Sys_error = global_data.Sys_error,
    End_of_file = global_data.End_of_file,
    Division_by_zero = global_data.Division_by_zero,
    Sys_blocked_io = global_data.Sys_blocked_io,
    Undefined_recursive_module = global_data.Undefined_recursive_module;
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   var Exit = [248, "Stdlib.Exit", runtime.caml_fresh_oo_id(0)];
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return runtime.caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lnot(x){return x ^ -1;}
   var
    infinity =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 32752)),
    neg_infinity =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 65520)),
    nan =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(1, 0, 32760)),
    max_float =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32751)),
    min_float =
      caml_int64_float_of_bits(runtime.caml_int64_create_lo_mi_hi(0, 0, 16)),
    epsilon_float =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 15536)),
    symbol_concat = caml_string_concat,
    cst_char_of_int = "char_of_int",
    cst_true = cst_true$0,
    cst_false = cst_false$0,
    cst_bool_of_string = "bool_of_string",
    _a_ = [0, 1],
    _b_ = [0, 0];
   function char_of_int(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(cst_char_of_int);
   }
   function string_of_bool(b){return b ? cst_true : cst_false;}
   function bool_of_string(param){
    return param !== cst_false$0
            ? param !== cst_true$0 ? invalid_arg(cst_bool_of_string) : 1
            : 0;
   }
   function bool_of_string_opt(param){
    return param !== cst_false$0 ? param !== cst_true$0 ? 0 : _a_ : _b_;
   }
   function string_of_int(n){return "" + n;}
   function int_of_string_opt(s){
    try{var _w_ = [0, caml_int_of_string(s)]; return _w_;}
    catch(_x_){
     var _v_ = caml_wrap_exception(_x_);
     if(_v_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_v_, 0);
    }
   }
   function valid_float_lexem(s1){
    var l = caml_ml_string_length(s1), i = 0;
    for(;;){
     if(l <= i) return s1 + ".";
     var match = runtime.caml_string_get(s1, i);
     a:
     {
      if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
      return s1;
     }
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function string_of_float(f){
    return valid_float_lexem(runtime.caml_format_float("%.12g", f));
   }
   function float_of_string_opt(s){
    try{var _t_ = [0, caml_float_of_string(s)]; return _t_;}
    catch(_u_){
     var _s_ = caml_wrap_exception(_u_);
     if(_s_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_s_, 0);
    }
   }
   function symbol(l1, l2){
    if(! l1) return l2;
    var _q_ = l1[2], h1 = l1[1];
    if(! _q_) return [0, h1, l2];
    var match = _q_[2], h2 = _q_[1];
    if(! match) return [0, h1, [0, h2, l2]];
    var
     tl = match[2],
     h3 = match[1],
     block = [0, h3, 24029],
     dst = block,
     offset = 1,
     l1$0 = tl;
    for(;;){
     if(l1$0){
      var _r_ = l1$0[2], h1$0 = l1$0[1];
      if(_r_){
       var match$0 = _r_[2], h2$0 = _r_[1];
       if(match$0){
        var tl$0 = match$0[2], h3$0 = match$0[1], dst$0 = [0, h3$0, 24029];
        dst[1 + offset] = [0, h1$0, [0, h2$0, dst$0]];
        dst = dst$0;
        offset = 1;
        l1$0 = tl$0;
        continue;
       }
       dst[1 + offset] = [0, h1$0, [0, h2$0, l2]];
      }
      else
       dst[1 + offset] = [0, h1$0, l2];
     }
     else
      dst[1 + offset] = l2;
     return [0, h1, [0, h2, block]];
    }
   }
   var
    stdin = caml_ml_open_descriptor_in(0),
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2),
    _c_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _d_ = [0, 1, [0, 3, [0, 4, [0, 6, 0]]]],
    cst_output = "output",
    cst_output_substring = "output_substring",
    _e_ = [0, 0, [0, 7, 0]],
    _f_ = [0, 0, [0, 6, 0]],
    cst_input = "input",
    cst_really_input = "really_input";
   function open_out_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_out(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_out(name){return open_out_gen(_c_, 438, name);}
   function open_out_bin(name){return open_out_gen(_d_, 438, name);}
   function flush_all(param){
    var param$0 = runtime.caml_ml_out_channels_list(0);
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     try{caml_ml_flush(a);}
     catch(_p_){
      var _o_ = caml_wrap_exception(_p_);
      if(_o_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_o_, 0);
     }
     param$0 = l;
    }
   }
   function output_bytes(oc, s){
    return caml_ml_output_bytes(oc, s, 0, caml_ml_bytes_length(s));
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function output(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_output_bytes(oc, s, ofs, len);
    return invalid_arg(cst_output);
   }
   function output_substring(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
     return caml_ml_output(oc, s, ofs, len);
    return invalid_arg(cst_output_substring);
   }
   function output_value(chan, v){
    return runtime.caml_output_value(chan, v, 0);
   }
   function close_out(oc){
    caml_ml_flush(oc);
    return caml_ml_close_channel(oc);
   }
   function close_out_noerr(oc){
    try{caml_ml_flush(oc);}catch(_n_){}
    try{var _l_ = caml_ml_close_channel(oc); return _l_;}catch(_m_){return 0;}
   }
   function open_in_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_in(name){return open_in_gen(_e_, 0, name);}
   function open_in_bin(name){return open_in_gen(_f_, 0, name);}
   function input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_input(ic, s, ofs, len);
    return invalid_arg(cst_input);
   }
   function unsafe_really_input(ic, s, ofs, len){
    var ofs$0 = ofs, len$0 = len;
    for(;;){
     if(0 >= len$0) return 0;
     var r = caml_ml_input(ic, s, ofs$0, len$0);
     if(0 === r) throw caml_maybe_attach_backtrace(End_of_file, 1);
     var len$1 = len$0 - r | 0, ofs$1 = ofs$0 + r | 0;
     ofs$0 = ofs$1;
     len$0 = len$1;
    }
   }
   function really_input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return unsafe_really_input(ic, s, ofs, len);
    return invalid_arg(cst_really_input);
   }
   function really_input_string(ic, len){
    var s = caml_create_bytes(len);
    really_input(ic, s, 0, len);
    return caml_string_of_bytes(s);
   }
   function input_line(chan){
    function build_result(buf, pos, param){
     var pos$0 = pos, param$0 = param;
     for(;;){
      if(! param$0) return buf;
      var tl = param$0[2], hd = param$0[1], len = caml_ml_bytes_length(hd);
      runtime.caml_blit_bytes(hd, 0, buf, pos$0 - len | 0, len);
      var pos$1 = pos$0 - len | 0;
      pos$0 = pos$1;
      param$0 = tl;
     }
    }
    var accu = 0, len = 0;
    for(;;){
     var n = runtime.caml_ml_input_scan_line(chan);
     if(0 === n){
      if(! accu) throw caml_maybe_attach_backtrace(End_of_file, 1);
      var _k_ = build_result(caml_create_bytes(len), len, accu);
     }
     else{
      if(0 >= n){
       var beg = caml_create_bytes(- n | 0);
       caml_ml_input(chan, beg, 0, - n | 0);
       var len$1 = len - n | 0, accu$0 = [0, beg, accu];
       accu = accu$0;
       len = len$1;
       continue;
      }
      var res = caml_create_bytes(n - 1 | 0);
      caml_ml_input(chan, res, 0, n - 1 | 0);
      caml_ml_input_char(chan);
      if(accu)
       var
        len$0 = (len + n | 0) - 1 | 0,
        _k_ = build_result(caml_create_bytes(len$0), len$0, [0, res, accu]);
      else
       var _k_ = res;
     }
     return caml_string_of_bytes(_k_);
    }
   }
   function close_in_noerr(ic){
    try{var _i_ = caml_ml_close_channel(ic); return _i_;}catch(_j_){return 0;}
   }
   function print_char(c){return caml_ml_output_char(stdout, c);}
   function print_string(s){return output_string(stdout, s);}
   function print_bytes(s){return output_bytes(stdout, s);}
   function print_int(i){return output_string(stdout, "" + i);}
   function print_float(f){return output_string(stdout, string_of_float(f));}
   function print_endline(s){
    output_string(stdout, s);
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function print_newline(param){
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function prerr_char(c){return caml_ml_output_char(stderr, c);}
   function prerr_string(s){return output_string(stderr, s);}
   function prerr_bytes(s){return output_bytes(stderr, s);}
   function prerr_int(i){return output_string(stderr, "" + i);}
   function prerr_float(f){return output_string(stderr, string_of_float(f));}
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function prerr_newline(param){
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function read_line(param){caml_ml_flush(stdout); return input_line(stdin);}
   function read_int(param){return caml_int_of_string(read_line(0));}
   function read_int_opt(param){return int_of_string_opt(read_line(0));}
   function read_float(param){return caml_float_of_string(read_line(0));}
   function read_float_opt(param){return float_of_string_opt(read_line(0));}
   function string_of_format(param){var str = param[2]; return str;}
   function symbol$0(_h_, param){
    var
     str2 = param[2],
     fmt2 = param[1],
     str1 = _h_[2],
     fmt1 = _h_[1],
     s2 = "%," + str2;
    return [0, caml_call2(CamlinternalFormatBasics[3], fmt1, fmt2), str1 + s2];
   }
   var exit_function = [0, flush_all];
   function at_exit(f){
    for(;;){
     var f_yet_to_run = [0, 1], old_exit = caml_atomic_load(exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
         if(caml_atomic_cas(f_yet_to_run$0, 1, 0)) caml_call1(f, 0);
         return caml_call1(old_exit$0, 0);
        },
      success = caml_atomic_cas(exit_function, old_exit, new_exit),
      _g_ = 1 - success;
     if(! _g_) return _g_;
    }
   }
   var do_domain_local_at_exit = [0, function(param){return 0;}];
   function do_at_exit(param){
    caml_call1(do_domain_local_at_exit[1], 0);
    return caml_call1(caml_atomic_load(exit_function), 0);
   }
   function exit(retcode){
    do_at_exit(0);
    return runtime.caml_sys_exit(retcode);
   }
   runtime.caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   var
    Stdlib =
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       2147483647,
       -2147483648,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol_concat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       runtime.caml_input_value,
       runtime.caml_ml_seek_in,
       runtime.caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit];
   runtime.caml_register_global(45, Stdlib, "Stdlib");
   return;
  }
  (globalThis));

//# 774 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    ocaml_version = "5.3.0",
    ocaml_release = [0, 5, 3, 0, 0],
    Stdlib = global_data.Stdlib,
    executable_name = runtime.caml_sys_executable_name(0),
    os_type = runtime.caml_sys_get_config(0)[1],
    backend_type = [0, "js_of_ocaml"],
    unix = runtime.caml_sys_const_ostype_unix(0),
    win32 = runtime.caml_sys_const_ostype_win32(0),
    cygwin = runtime.caml_sys_const_ostype_cygwin(0),
    max_array_length = runtime.caml_sys_const_max_wosize(0),
    max_floatarray_length = max_array_length / 2 | 0,
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function getenv_opt(s){
    try{var _d_ = [0, runtime.caml_sys_getenv(s)]; return _d_;}
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
   }
   var interactive = [0, 0];
   function set_signal(sig_num, sig_beh){return 0;}
   var Break = [248, "Stdlib.Sys.Break", runtime.caml_fresh_oo_id(0)];
   function catch_break(on){return on ? 0 : 0;}
   function Make(_b_, _a_){return [0, 1];}
   var
    Immediate64 = [0, Make],
    Stdlib_Sys =
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       backend_type,
       unix,
       win32,
       cygwin,
       32,
       32,
       0,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       -1,
       -2,
       -3,
       -4,
       -5,
       -6,
       -7,
       -8,
       -9,
       -10,
       -11,
       -12,
       -13,
       -14,
       -15,
       -16,
       -17,
       -18,
       -19,
       -20,
       -21,
       -22,
       -23,
       -24,
       -25,
       -26,
       -27,
       -28,
       Break,
       catch_break,
       ocaml_version,
       0,
       ocaml_release,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
   runtime.caml_register_global(4, Stdlib_Sys, "Stdlib__Sys");
   return;
  }
  (globalThis));

//# 869 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Obj_extension_constructor$1 = "Obj.extension_constructor",
    caml_check_bound = runtime.caml_check_bound,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function is_block(a){return 1 - (typeof a === "number" ? 1 : 0);}
   function double_field(x, i){return caml_check_bound(x, i)[1 + i];}
   function set_double_field(x, i, v){
    caml_check_bound(x, i)[1 + i] = v;
    return 0;
   }
   var
    cst_Obj_extension_constructor = cst_Obj_extension_constructor$1,
    cst_Obj_extension_constructor$0 = cst_Obj_extension_constructor$1;
   function of_val(x){
    a:
    {
     if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1){var slot = x[1]; break a;}
     var slot = x;
    }
    a:
    {
     if(is_block(slot) && caml_obj_tag(slot) === 248){var name = slot[1]; break a;}
     var name = caml_call1(Stdlib[1], cst_Obj_extension_constructor$0);
    }
    return caml_obj_tag(name) === 252
            ? slot
            : caml_call1(Stdlib[1], cst_Obj_extension_constructor);
   }
   function name(slot){return slot[1];}
   function id(slot){return slot[2];}
   var
    Extension_constructor = [0, of_val, name, id],
    max_ephe_length = Stdlib_Sys[13] - 2 | 0,
    cst_Obj_Ephemeron_create = "Obj.Ephemeron.create",
    cst_Obj_Ephemeron_get_key = "Obj.Ephemeron.get_key",
    cst_Obj_Ephemeron_get_key_copy = "Obj.Ephemeron.get_key_copy",
    cst_Obj_Ephemeron_set_key = "Obj.Ephemeron.set_key",
    cst_Obj_Ephemeron_unset_key = "Obj.Ephemeron.unset_key",
    cst_Obj_Ephemeron_check_key = "Obj.Ephemeron.check_key",
    cst_Obj_Ephemeron_blit_key = "Obj.Ephemeron.blit_key";
   function create(l){
    var _f_ = 0 <= l ? 1 : 0, _g_ = _f_ ? l <= max_ephe_length ? 1 : 0 : _f_;
    if(1 - _g_) caml_call1(Stdlib[1], cst_Obj_Ephemeron_create);
    return runtime.caml_ephe_create(l);
   }
   function length(x){return x.length - 3 | 0;}
   function raise_if_invalid_offset(e, o, msg){
    var
     _c_ = 0 <= o ? 1 : 0,
     _d_ = _c_ ? o < length(e) ? 1 : 0 : _c_,
     _e_ = 1 - _d_;
    return _e_ ? caml_call1(Stdlib[1], msg) : _e_;
   }
   function get_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key);
    return runtime.caml_ephe_get_key(e, o);
   }
   function get_key_copy(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key_copy);
    return runtime.caml_ephe_get_key_copy(e, o);
   }
   function set_key(e, o, x){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_set_key);
    return runtime.caml_ephe_set_key(e, o, x);
   }
   function unset_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_unset_key);
    return runtime.caml_ephe_unset_key(e, o);
   }
   function check_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_check_key);
    return runtime.caml_ephe_check_key(e, o);
   }
   function blit_key(e1, o1, e2, o2, l){
    if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
     var
      _a_ = 0 !== l ? 1 : 0,
      _b_ = _a_ ? runtime.caml_ephe_blit_key(e1, o1, e2, o2, l) : _a_;
     return _b_;
    }
    return caml_call1(Stdlib[1], cst_Obj_Ephemeron_blit_key);
   }
   var
    Stdlib_Obj =
      [0,
       is_block,
       double_field,
       set_double_field,
       0,
       243,
       244,
       245,
       246,
       247,
       248,
       249,
       250,
       251,
       251,
       252,
       253,
       254,
       255,
       1000,
       1001,
       1002,
       Extension_constructor,
       [0,
        create,
        length,
        get_key,
        get_key_copy,
        set_key,
        unset_key,
        check_key,
        blit_key,
        runtime.caml_ephe_get_data,
        runtime.caml_ephe_get_data_copy,
        runtime.caml_ephe_set_data,
        runtime.caml_ephe_unset_data,
        runtime.caml_ephe_check_data,
        runtime.caml_ephe_blit_data,
        max_ephe_length]];
   runtime.caml_register_global(11, Stdlib_Obj, "Stdlib__Obj");
   return;
  }
  (globalThis));

//# 1046 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_atomic_exchange = runtime.caml_atomic_exchange,
    caml_atomic_fetch_add = runtime.caml_atomic_fetch_add;
   function set(r, x){caml_atomic_exchange(r, x); return 0;}
   function incr(r){caml_atomic_fetch_add(r, 1); return 0;}
   function decr(r){caml_atomic_fetch_add(r, -1); return 0;}
   var
    Stdlib_Atomic =
      [0,
       function(_a_){return [0, _a_];},
       runtime.caml_atomic_make_contended,
       runtime.caml_atomic_load,
       set,
       caml_atomic_exchange,
       runtime.caml_atomic_cas,
       caml_atomic_fetch_add,
       incr,
       decr];
   runtime.caml_register_global(0, Stdlib_Atomic, "Stdlib__Atomic");
   return;
  }
  (globalThis));

//# 1074 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_lazy_update_to_forward = runtime.caml_lazy_update_to_forward,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined =
      [248, "CamlinternalLazy.Undefined", runtime.caml_fresh_oo_id(0)];
   function force_gen_lazy_block(only_val, blk){
    if(0 !== runtime.caml_lazy_update_to_forcing(blk))
     throw caml_maybe_attach_backtrace(Undefined, 1);
    if(only_val){
     var closure$0 = blk[1];
     blk[1] = 0;
     var result$0 = caml_call1(closure$0, 0);
     blk[1] = result$0;
     caml_lazy_update_to_forward(blk);
     return result$0;
    }
    var closure = blk[1];
    blk[1] = 0;
    try{
     var result = caml_call1(closure, 0);
     blk[1] = result;
     caml_lazy_update_to_forward(blk);
     return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     blk[1] = function(param){throw caml_maybe_attach_backtrace(e, 0);};
     runtime.caml_lazy_reset_to_lazy(blk);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function force_lazy_block(blk){return force_gen_lazy_block(0, blk);}
   function force_gen(only_val, lzv){
    var t = runtime.caml_obj_tag(lzv);
    if(t === Stdlib_Obj[12]) return lzv[1];
    if(t === Stdlib_Obj[6]) throw caml_maybe_attach_backtrace(Undefined, 1);
    return t !== Stdlib_Obj[8] ? lzv : force_gen_lazy_block(only_val, lzv);
   }
   var CamlinternalLazy = [0, Undefined, force_lazy_block, force_gen];
   runtime.caml_register_global(2, CamlinternalLazy, "CamlinternalLazy");
   return;
  }
  (globalThis));

//# 1133 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined = CamlinternalLazy[1];
   function force_val(l){return caml_call2(CamlinternalLazy[3], 1, l);}
   function from_fun(f){
    var x = runtime.caml_obj_block(Stdlib_Obj[8], 1);
    x[1] = f;
    return x;
   }
   function from_val(v){
    var t = caml_obj_tag(v);
    if
     (t !== Stdlib_Obj[12]
      && t !== Stdlib_Obj[8] && t !== Stdlib_Obj[6] && t !== Stdlib_Obj[16])
     return v;
    return runtime.caml_lazy_make_forward(v);
   }
   function is_val(l){
    var _i_ = Stdlib_Obj[8];
    return caml_obj_tag(l) !== _i_ ? 1 : 0;
   }
   function map(f, x){
    return [246,
            function(_f_){
             var _g_ = caml_obj_tag(x);
             a:
             if(250 === _g_)
              var _h_ = x[1];
             else{
              if(246 !== _g_ && 244 !== _g_){var _h_ = x; break a;}
              var _h_ = caml_call1(CamlinternalLazy[2], x);
             }
             return caml_call1(f, _h_);
            }];
   }
   function map_val(f, x){
    if(! is_val(x))
     return [246,
             function(_c_){
              var _d_ = caml_obj_tag(x);
              a:
              if(250 === _d_)
               var _e_ = x[1];
              else{
               if(246 !== _d_ && 244 !== _d_){var _e_ = x; break a;}
               var _e_ = caml_call1(CamlinternalLazy[2], x);
              }
              return caml_call1(f, _e_);
             }];
    var _a_ = caml_obj_tag(x);
    a:
    if(250 === _a_)
     var _b_ = x[1];
    else{
     if(246 !== _a_ && 244 !== _a_){var _b_ = x; break a;}
     var _b_ = caml_call1(CamlinternalLazy[2], x);
    }
    return from_val(caml_call1(f, _b_));
   }
   var
    Stdlib_Lazy =
      [0, Undefined, map, is_val, from_val, map_val, from_fun, force_val];
   runtime.caml_register_global(2, Stdlib_Lazy, "Stdlib__Lazy");
   return;
  }
  (globalThis));

//# 1218 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib = global_data.Stdlib,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    cst_Seq_init = "Seq.init",
    cst_Seq_take = "Seq.take",
    cst_Seq_drop = "Seq.drop";
   function empty(param){return 0;}
   function return$0(x, param){return [0, x, empty];}
   function cons(x, next, param){return [0, x, next];}
   function append(seq1, seq2, param){
    var match = caml_call1(seq1, 0);
    if(! match) return caml_call1(seq2, 0);
    var next = match[2], x = match[1];
    return [0, x, function(_au_){return append(next, seq2, _au_);}];
   }
   function map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return [0, caml_call1(f, x), function(_at_){return map(f, next, _at_);}];
   }
   function filter_map(f, seq, param){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(match$0){
      var y = match$0[1];
      return [0, y, function(_as_){return filter_map(f, next, _as_);}];
     }
     seq$0 = next;
    }
   }
   function filter(f, seq, param){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     if(caml_call1(f, x))
      return [0, x, function(_ar_){return filter(f, next, _ar_);}];
     seq$0 = next;
    }
   }
   function concat(seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return append(x, function(_aq_){return concat(next, _aq_);}, 0);
   }
   function flat_map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return append
            (caml_call1(f, x),
             function(_ap_){return flat_map(f, next, _ap_);},
             0);
   }
   function fold_left(f, acc, seq){
    var acc$0 = acc, seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return acc$0;
     var next = match[2], x = match[1], acc$1 = caml_call2(f, acc$0, x);
     acc$0 = acc$1;
     seq$0 = next;
    }
   }
   function iter(f, seq){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     caml_call1(f, x);
     seq$0 = next;
    }
   }
   function unfold(f, u, param){
    var match = caml_call1(f, u);
    if(! match) return 0;
    var match$0 = match[1], u$0 = match$0[2], x = match$0[1];
    return [0, x, function(_ao_){return unfold(f, u$0, _ao_);}];
   }
   function is_empty(xs){return caml_call1(xs, 0) ? 0 : 1;}
   function uncons(xs){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    return [0, [0, x, xs$0]];
   }
   function length(xs$1){
    var accu = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var xs$0 = match[2], accu$0 = accu + 1 | 0;
     accu = accu$0;
     xs = xs$0;
    }
   }
   function iteri(f, xs$1){
    var i = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     caml_call2(f, i, x);
     var i$0 = i + 1 | 0;
     i = i$0;
     xs = xs$0;
    }
   }
   function fold_lefti(f, accu$1, xs$1){
    var accu = accu$1, i = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var
      xs$0 = match[2],
      x = match[1],
      accu$0 = caml_call3(f, accu, i, x),
      i$0 = i + 1 | 0;
     accu = accu$0;
     i = i$0;
     xs = xs$0;
    }
   }
   function for_all(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 1;
     var xs$1 = match[2], x = match[1], _an_ = caml_call1(p, x);
     if(! _an_) return _an_;
     xs$0 = xs$1;
    }
   }
   function exists(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], _am_ = caml_call1(p, x);
     if(_am_) return _am_;
     xs$0 = xs$1;
    }
   }
   function find(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1];
     if(caml_call1(p, x)) return [0, x];
     xs$0 = xs$1;
    }
   }
   function find_index(p, xs){
    var i = 0, xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1];
     if(caml_call1(p, x)) return [0, i];
     var i$0 = i + 1 | 0;
     i = i$0;
     xs$0 = xs$1;
    }
   }
   function find_map(f, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], result = caml_call1(f, x);
     if(result) return result;
     xs$0 = xs$1;
    }
   }
   function find_mapi(f, xs){
    var i = 0, xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], result = caml_call2(f, i, x);
     if(result) return result;
     var i$0 = i + 1 | 0;
     i = i$0;
     xs$0 = xs$1;
    }
   }
   function iter2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 0;
     var ys$1 = match$0[2], y = match$0[1];
     caml_call2(f, x, y);
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function fold_left2(f, accu, xs, ys){
    var accu$0 = accu, xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return accu$0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return accu$0;
     var
      ys$1 = match$0[2],
      y = match$0[1],
      accu$1 = caml_call3(f, accu$0, x, y);
     accu$0 = accu$1;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function for_all2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 1;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 1;
     var ys$1 = match$0[2], y = match$0[1], _al_ = caml_call2(f, x, y);
     if(! _al_) return _al_;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function exists2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 0;
     var ys$1 = match$0[2], y = match$0[1], _ak_ = caml_call2(f, x, y);
     if(_ak_) return _ak_;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function equal(eq, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0), match$0 = caml_call1(ys$0, 0);
     if(match){
      if(match$0){
       var
        ys$1 = match$0[2],
        y = match$0[1],
        xs$1 = match[2],
        x = match[1],
        _aj_ = caml_call2(eq, x, y);
       if(! _aj_) return _aj_;
       xs$0 = xs$1;
       ys$0 = ys$1;
       continue;
      }
     }
     else if(! match$0) return 1;
     return 0;
    }
   }
   function compare(cmp, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0), match$0 = caml_call1(ys$0, 0);
     if(! match) return match$0 ? -1 : 0;
     var xs$1 = match[2], x = match[1];
     if(! match$0) return 1;
     var ys$1 = match$0[2], y = match$0[1], c = caml_call2(cmp, x, y);
     if(0 !== c) return c;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function init_aux(f, i, j, param){
    if(i >= j) return 0;
    var _ah_ = i + 1 | 0;
    return [0,
            caml_call1(f, i),
            function(_ai_){return init_aux(f, _ah_, j, _ai_);}];
   }
   function init(n, f){
    if(0 > n) return caml_call1(Stdlib[1], cst_Seq_init);
    var _af_ = 0;
    return function(_ag_){return init_aux(f, _af_, n, _ag_);};
   }
   function repeat(x, param){
    return [0, x, function(_ae_){return repeat(x, _ae_);}];
   }
   function forever(f, param){
    return [0, caml_call1(f, 0), function(_ad_){return forever(f, _ad_);}];
   }
   function cycle_nonempty(xs, param){
    return append(xs, function(_ac_){return cycle_nonempty(xs, _ac_);}, 0);
   }
   function cycle(xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    function _$_(_ab_){return cycle_nonempty(xs, _ab_);}
    return [0, x, function(_aa_){return append(xs$0, _$_, _aa_);}];
   }
   function iterate1(f, x, param){
    var y = caml_call1(f, x);
    return [0, y, function(___){return iterate1(f, y, ___);}];
   }
   function iterate(f, x){
    function next(_Z_){return iterate1(f, x, _Z_);}
    return function(_Y_){return [0, x, next];};
   }
   function mapi_aux(f, i, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], _W_ = i + 1 | 0;
    return [0,
            caml_call2(f, i, x),
            function(_X_){return mapi_aux(f, _W_, xs$0, _X_);}];
   }
   function mapi(f, xs){
    var _U_ = 0;
    return function(_V_){return mapi_aux(f, _U_, xs, _V_);};
   }
   function tail_scan(f, s, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], s$0 = caml_call2(f, s, x);
    return [0, s$0, function(_T_){return tail_scan(f, s$0, xs$0, _T_);}];
   }
   function scan(f, s, xs){
    function next(_S_){return tail_scan(f, s, xs, _S_);}
    return function(_R_){return [0, s, next];};
   }
   function take_aux(n, xs){
    return 0 === n
            ? empty
            : function
             (param){
              var match = caml_call1(xs, 0);
              if(! match) return 0;
              var xs$0 = match[2], x = match[1];
              return [0, x, take_aux(n - 1 | 0, xs$0)];
             };
   }
   function take(n, xs){
    if(n < 0) caml_call1(Stdlib[1], cst_Seq_take);
    return take_aux(n, xs);
   }
   function drop(n, xs){
    return 0 <= n
            ? 0
              === n
              ? xs
              : function
               (param){
                var n$0 = n, xs$0 = xs;
                for(;;){
                 var match = caml_call1(xs$0, 0);
                 if(! match) return 0;
                 var xs$1 = match[2], n$1 = n$0 - 1 | 0;
                 if(0 === n$1) return caml_call1(xs$1, 0);
                 n$0 = n$1;
                 xs$0 = xs$1;
                }
               }
            : caml_call1(Stdlib[1], cst_Seq_drop);
   }
   function take_while(p, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    return caml_call1(p, x)
            ? [0, x, function(_Q_){return take_while(p, xs$0, _Q_);}]
            : 0;
   }
   function drop_while(p, xs, param){
    var xs$0 = xs;
    for(;;){
     var node = caml_call1(xs$0, 0);
     if(! node) return 0;
     var xs$1 = node[2], x = node[1];
     if(! caml_call1(p, x)) return node;
     xs$0 = xs$1;
    }
   }
   function group(eq, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], _J_ = caml_call1(eq, x);
    function _K_(_P_){return drop_while(_J_, xs$0, _P_);}
    var _L_ = caml_call1(eq, x);
    function next(_O_){return take_while(_L_, xs$0, _O_);}
    return [0,
            function(_N_){return [0, x, next];},
            function(_M_){return group(eq, _K_, _M_);}];
   }
   var
    Forced_twice =
      [248, "Stdlib.Seq.Forced_twice", runtime.caml_fresh_oo_id(0)],
    to_lazy = Stdlib_Lazy[6],
    _a_ = [0, "seq.ml", 616, 4];
   function failure(param){
    throw caml_maybe_attach_backtrace(Forced_twice, 1);
   }
   function memoize(xs){
    function s$0(param){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     return [0, x, memoize(xs$0)];
    }
    var s = caml_call1(to_lazy, s$0);
    return function(param){
     var _I_ = runtime.caml_obj_tag(s);
     if(250 === _I_) return s[1];
     if(246 !== _I_ && 244 !== _I_) return s;
     return caml_call1(CamlinternalLazy[2], s);};
   }
   function once(xs){
    function f(param){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     return [0, x, once(xs$0)];
    }
    var action = caml_call1(Stdlib_Atomic[1], f);
    return function(param){
     var f = caml_call2(Stdlib_Atomic[5], action, failure);
     return caml_call1(f, 0);};
   }
   function zip(xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
    if(! match$0) return 0;
    var ys$0 = match$0[2], y = match$0[1];
    return [0, [0, x, y], function(_H_){return zip(xs$0, ys$0, _H_);}];
   }
   function map2(f, xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
    if(! match$0) return 0;
    var ys$0 = match$0[2], y = match$0[1];
    return [0,
            caml_call2(f, x, y),
            function(_G_){return map2(f, xs$0, ys$0, _G_);}];
   }
   function interleave(xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return caml_call1(ys, 0);
    var xs$0 = match[2], x = match[1];
    return [0, x, function(_F_){return interleave(ys, xs$0, _F_);}];
   }
   function sorted_merge1(cmp, x, xs, y, ys){
    return 0 < caml_call2(cmp, x, y)
            ? [0,
              y,
              function(_D_){
               var match = caml_call1(ys, 0);
               if(! match) return [0, x, xs];
               var ys$0 = match[2], y = match[1];
               return sorted_merge1(cmp, x, xs, y, ys$0);
              }]
            : [0,
              x,
              function(_E_){
               var match = caml_call1(xs, 0);
               if(! match) return [0, y, ys];
               var xs$0 = match[2], x = match[1];
               return sorted_merge1(cmp, x, xs$0, y, ys);
              }];
   }
   function sorted_merge(cmp, xs, ys, param){
    var match = caml_call1(xs, 0), match$0 = caml_call1(ys, 0);
    if(match){
     if(match$0){
      var ys$0 = match$0[2], y = match$0[1], xs$0 = match[2], x = match[1];
      return sorted_merge1(cmp, x, xs$0, y, ys$0);
     }
     var c = match;
    }
    else{if(! match$0) return 0; var c = match$0;}
    return c;
   }
   function map_fst(xys, param){
    var match = caml_call1(xys, 0);
    if(! match) return 0;
    var xys$0 = match[2], x = match[1][1];
    return [0, x, function(_C_){return map_fst(xys$0, _C_);}];
   }
   function map_snd(xys, param){
    var match = caml_call1(xys, 0);
    if(! match) return 0;
    var xys$0 = match[2], y = match[1][2];
    return [0, y, function(_B_){return map_snd(xys$0, _B_);}];
   }
   function unzip(xys){
    return [0,
            function(_A_){return map_fst(xys, _A_);},
            function(_z_){return map_snd(xys, _z_);}];
   }
   function filter_map_find_left_map(f, xs, param){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(0 === match$0[0]){
      var y = match$0[1];
      return [0,
              y,
              function(_y_){return filter_map_find_left_map(f, xs$1, _y_);}];
     }
     xs$0 = xs$1;
    }
   }
   function filter_map_find_right_map(f, xs, param){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(0 !== match$0[0]){
      var z = match$0[1];
      return [0,
              z,
              function(_x_){return filter_map_find_right_map(f, xs$1, _x_);}];
     }
     xs$0 = xs$1;
    }
   }
   function partition_map(f, xs){
    return [0,
            function(_w_){return filter_map_find_left_map(f, xs, _w_);},
            function(_v_){return filter_map_find_right_map(f, xs, _v_);}];
   }
   function partition(p, xs){
    function _s_(x){return 1 - caml_call1(p, x);}
    return [0,
            function(_u_){return filter(p, xs, _u_);},
            function(_t_){return filter(_s_, xs, _t_);}];
   }
   function peel(xss){
    return unzip(function(_r_){return filter_map(uncons, xss, _r_);});
   }
   function transpose(xss, param){
    var match = peel(xss), tails = match[2], heads = match[1];
    if(! is_empty(heads))
     return [0, heads, function(_q_){return transpose(tails, _q_);}];
    if(is_empty(tails)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function _b_(remainders, xss, param){
    var match = caml_call1(xss, 0);
    if(! match) return transpose(remainders, 0);
    var xss$0 = match[2], xs = match[1], match$0 = caml_call1(xs, 0);
    if(match$0){
     var
      xs$0 = match$0[2],
      x = match$0[1],
      match$1 = peel(remainders),
      tails = match$1[2],
      heads = match$1[1],
      _l_ = function(_p_){return [0, xs$0, tails];};
     return [0,
             function(_o_){return [0, x, heads];},
             function(_n_){return _b_(_l_, xss$0, _n_);}];
    }
    var
     match$2 = peel(remainders),
     tails$0 = match$2[2],
     heads$0 = match$2[1];
    return [0, heads$0, function(_m_){return _b_(tails$0, xss$0, _m_);}];
   }
   function map_product(f, xs, ys){
    function _f_(x){
     function _j_(y){return caml_call2(f, x, y);}
     return function(_k_){return map(_j_, ys, _k_);};
    }
    function xss(_i_){return map(_f_, xs, _i_);}
    function _e_(_h_){return _b_(empty, xss, _h_);}
    return function(_g_){return concat(_e_, _g_);};
   }
   function product(xs, ys){
    return map_product(function(x, y){return [0, x, y];}, xs, ys);
   }
   function of_dispenser(it){
    function c(param){
     var match = caml_call1(it, 0);
     if(! match) return 0;
     var x = match[1];
     return [0, x, c];
    }
    return c;
   }
   function to_dispenser(xs){
    var s = [0, xs];
    return function(param){
     var match = caml_call1(s[1], 0);
     if(! match) return 0;
     var xs = match[2], x = match[1];
     s[1] = xs;
     return [0, x];};
   }
   function ints(i, param){
    var _c_ = i + 1 | 0;
    return [0, i, function(_d_){return ints(_c_, _d_);}];
   }
   var
    Stdlib_Seq =
      [0,
       is_empty,
       uncons,
       length,
       iter,
       fold_left,
       iteri,
       fold_lefti,
       for_all,
       exists,
       find,
       find_index,
       find_map,
       find_mapi,
       iter2,
       fold_left2,
       for_all2,
       exists2,
       equal,
       compare,
       empty,
       return$0,
       cons,
       init,
       unfold,
       repeat,
       forever,
       cycle,
       iterate,
       map,
       mapi,
       filter,
       filter_map,
       scan,
       take,
       drop,
       take_while,
       drop_while,
       group,
       memoize,
       Forced_twice,
       once,
       transpose,
       append,
       concat,
       flat_map,
       flat_map,
       zip,
       map2,
       interleave,
       sorted_merge,
       product,
       map_product,
       unzip,
       unzip,
       partition_map,
       partition,
       of_dispenser,
       to_dispenser,
       ints];
   runtime.caml_register_global(10, Stdlib_Seq, "Stdlib__Seq");
   return;
  }
  (globalThis));

//# 2204 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_hash = runtime.caml_hash,
    caml_string_of_bytes = runtime.caml_string_of_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\\\\",
    cst$0 = "\\'",
    Stdlib = global_data.Stdlib,
    cst_Char_chr = "Char.chr",
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_r = "\\r";
   function chr(n){
    if(0 <= n && 255 >= n) return n;
    return caml_call1(Stdlib[1], cst_Char_chr);
   }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c) return cst;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){if(39 <= c) return cst$0; break a;}
      if(14 > c)
       switch(c){
         case 8:
          return cst_b;
         case 9:
          return cst_t;
         case 10:
          return cst_n;
         case 13:
          return cst_r;
       }
     }
     var s = caml_create_bytes(4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s);
    }
    var s$0 = caml_create_bytes(1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0);
   }
   function lowercase_ascii(c){return 25 < c - 65 >>> 0 ? c : c + 32 | 0;}
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function compare(c1, c2){return c1 - c2 | 0;}
   function equal(c1, c2){return 0 === (c1 - c2 | 0) ? 1 : 0;}
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Char =
      [0,
       chr,
       escaped,
       lowercase_ascii,
       uppercase_ascii,
       compare,
       equal,
       seeded_hash,
       hash];
   runtime.caml_register_global(8, Stdlib_Char, "Stdlib__Char");
   return;
  }
  (globalThis));

//# 2288 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_uchar_ml = "uchar.ml",
    caml_format_int = runtime.caml_format_int,
    caml_hash = runtime.caml_hash,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err_no_pred = "U+0000 has no predecessor",
    err_no_succ = "U+10FFFF has no successor",
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    cst_is_not_a_Unicode_scalar_va = " is not a Unicode scalar value",
    cst_is_not_a_latin1_character = " is not a latin1 character",
    cst_U = "U+",
    lo_bound = 55295,
    hi_bound = 57344;
   function succ(u){
    return u === 55295
            ? hi_bound
            : u === 1114111 ? caml_call1(Stdlib[1], err_no_succ) : u + 1 | 0;
   }
   function pred(u){
    return u === 57344
            ? lo_bound
            : u === 0 ? caml_call1(Stdlib[1], err_no_pred) : u - 1 | 0;
   }
   function is_valid(i){
    var _m_ = 0 <= i ? 1 : 0, _n_ = _m_ ? i <= 55295 ? 1 : 0 : _m_;
    if(_n_)
     var _o_ = _n_;
    else
     var _p_ = 57344 <= i ? 1 : 0, _o_ = _p_ ? i <= 1114111 ? 1 : 0 : _p_;
    return _o_;
   }
   function of_int(i){
    if(is_valid(i)) return i;
    var
     _l_ =
       caml_call2
        (Stdlib[28], caml_format_int("%X", i), cst_is_not_a_Unicode_scalar_va);
    return caml_call1(Stdlib[1], _l_);
   }
   function is_char(u){return u < 256 ? 1 : 0;}
   function of_char(c){return c;}
   function to_char(u){
    if(255 >= u) return u;
    var
     _j_ =
       caml_call2
        (Stdlib[28],
         caml_format_int("%04X", u),
         cst_is_not_a_latin1_character),
     _k_ = caml_call2(Stdlib[28], cst_U, _j_);
    return caml_call1(Stdlib[1], _k_);
   }
   function unsafe_to_char(_i_){return _i_;}
   function equal(_h_, _g_){return _h_ === _g_ ? 1 : 0;}
   var
    compare = runtime.caml_int_compare,
    _a_ = [0, cst_uchar_ml, 89, 7],
    _b_ = [0, cst_uchar_ml, 84, 18],
    _c_ = [0, cst_uchar_ml, 95, 7],
    _d_ = [0, cst_uchar_ml, 92, 18];
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   function utf_decode_is_valid(d){return 1 === (d >>> 27 | 0) ? 1 : 0;}
   function utf_decode_length(d){return (d >>> 24 | 0) & 7;}
   function utf_decode_uchar(d){return d & 16777215;}
   function utf_decode(n, u){return (8 | n) << 24 | u;}
   function utf_decode_invalid(n){return n << 24 | 65533;}
   function utf_8_byte_length(u){
    if(0 > u) throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(127 >= u) return 1;
    if(2047 >= u) return 2;
    if(65535 >= u) return 3;
    if(1114111 < u)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    return 4;
   }
   function utf_16_byte_length(u){
    if(0 > u) throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    if(65535 >= u) return 2;
    if(1114111 < u)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    return 4;
   }
   var
    Stdlib_Uchar =
      [0,
       0,
       1114111,
       65279,
       65533,
       succ,
       pred,
       is_valid,
       of_int,
       function(_f_){return _f_;},
       function(_e_){return _e_;},
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal,
       compare,
       seeded_hash,
       hash,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       utf_decode_invalid,
       utf_8_byte_length,
       utf_16_byte_length];
   runtime.caml_register_global(13, Stdlib_Uchar, "Stdlib__Uchar");
   return;
  }
  (globalThis));

//# 2423 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_List_map2$1 = "List.map2",
    cst_List_nth$1 = "List.nth",
    caml_compare = runtime.caml_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_hd = "hd",
    cst_tl = "tl",
    cst_nth = "nth",
    cst_List_nth = cst_List_nth$1,
    cst_List_nth$0 = cst_List_nth$1;
   function length(l$0){
    var len = 0, param = l$0;
    for(;;){
     if(! param) return len;
     var l = param[2], len$0 = len + 1 | 0;
     len = len$0;
     param = l;
    }
   }
   function cons(a, l){return [0, a, l];}
   function hd(param){
    if(! param) return caml_call1(Stdlib[2], cst_hd);
    var a = param[1];
    return a;
   }
   function tl(param){
    if(! param) return caml_call1(Stdlib[2], cst_tl);
    var l = param[2];
    return l;
   }
   function nth(l, n){
    if(0 > n) return caml_call1(Stdlib[1], cst_List_nth);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return caml_call1(Stdlib[2], cst_nth);
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return a;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function nth_opt(l, n){
    if(0 > n) return caml_call1(Stdlib[1], cst_List_nth$0);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0;
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return [0, a];
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   var
    append = Stdlib[37],
    cst_List_init = "List.init",
    cst_List_map2 = cst_List_map2$1,
    cst_List_map2$0 = cst_List_map2$1,
    cst_List_rev_map2 = "List.rev_map2",
    cst_List_iter2 = "List.iter2",
    cst_List_fold_left2 = "List.fold_left2",
    cst_List_fold_right2 = "List.fold_right2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_exists2 = "List.exists2",
    cst_List_take = "List.take",
    cst_List_drop = "List.drop",
    _a_ = [0, 0, 0],
    cst_List_combine = "List.combine";
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0;
     var l1$1 = l1$0[2], a = l1$0[1], l2$1 = [0, a, l2$0];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function rev(l){return rev_append(l, 0);}
   function init(len, f){
    if(0 > len) return caml_call1(Stdlib[1], cst_List_init);
    var last = len - 1 | 0, i$1 = 0;
    if(last < 0) return 0;
    if(0 === last) return [0, caml_call1(f, i$1), 0];
    var
     r1 = caml_call1(f, i$1),
     r2 = caml_call1(f, 1),
     block = [0, r2, 24029],
     dst = block,
     offset = 1,
     i = 2;
    for(;;){
     if(last < i)
      dst[1 + offset] = 0;
     else{
      if(i !== last){
       var
        r1$0 = caml_call1(f, i),
        r2$0 = caml_call1(f, i + 1 | 0),
        dst$0 = [0, r2$0, 24029];
       dst[1 + offset] = [0, r1$0, dst$0];
       var i$0 = i + 2 | 0;
       dst = dst$0;
       offset = 1;
       i = i$0;
       continue;
      }
      dst[1 + offset] = [0, caml_call1(f, i), 0];
     }
     return [0, r1, block];
    }
   }
   function flatten(param){
    if(! param) return 0;
    var r = param[2], l = param[1], _I_ = flatten(r);
    return caml_call2(Stdlib[37], l, _I_);
   }
   function map(f, param){
    if(! param) return 0;
    var match = param[2], a1 = param[1];
    if(! match){var r1$0 = caml_call1(f, a1); return [0, r1$0, 0];}
    var
     l = match[2],
     a2 = match[1],
     r1 = caml_call1(f, a1),
     r2 = caml_call1(f, a2),
     block = [0, r2, 24029],
     dst = block,
     offset = 1,
     param$0 = l;
    for(;;){
     if(param$0){
      var match$0 = param$0[2], a1$0 = param$0[1];
      if(match$0){
       var
        l$0 = match$0[2],
        a2$0 = match$0[1],
        r1$1 = caml_call1(f, a1$0),
        r2$0 = caml_call1(f, a2$0),
        dst$0 = [0, r2$0, 24029];
       dst[1 + offset] = [0, r1$1, dst$0];
       dst = dst$0;
       offset = 1;
       param$0 = l$0;
       continue;
      }
      var r1$2 = caml_call1(f, a1$0);
      dst[1 + offset] = [0, r1$2, 0];
     }
     else
      dst[1 + offset] = 0;
     return [0, r1, block];
    }
   }
   function mapi(f, l$1){
    var i$1 = 0;
    if(! l$1) return 0;
    var match = l$1[2], a1 = l$1[1];
    if(! match){var r1$0 = caml_call2(f, i$1, a1); return [0, r1$0, 0];}
    var
     l = match[2],
     a2 = match[1],
     r1 = caml_call2(f, i$1, a1),
     r2 = caml_call2(f, 1, a2),
     block = [0, r2, 24029],
     dst = block,
     offset = 1,
     i = 2,
     param = l;
    for(;;){
     if(param){
      var match$0 = param[2], a1$0 = param[1];
      if(match$0){
       var
        l$0 = match$0[2],
        a2$0 = match$0[1],
        r1$1 = caml_call2(f, i, a1$0),
        r2$0 = caml_call2(f, i + 1 | 0, a2$0),
        dst$0 = [0, r2$0, 24029];
       dst[1 + offset] = [0, r1$1, dst$0];
       var i$0 = i + 2 | 0;
       dst = dst$0;
       offset = 1;
       i = i$0;
       param = l$0;
       continue;
      }
      var r1$2 = caml_call2(f, i, a1$0);
      dst[1 + offset] = [0, r1$2, 0];
     }
     else
      dst[1 + offset] = 0;
     return [0, r1, block];
    }
   }
   function rev_map(f, l){
    var accu = 0, param = l;
    for(;;){
     if(! param) return accu;
     var l$0 = param[2], a = param[1], accu$0 = [0, caml_call1(f, a), accu];
     accu = accu$0;
     param = l$0;
    }
   }
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     caml_call1(f, a);
     param$0 = l;
    }
   }
   function iteri(f, l$0){
    var i = 0, param = l$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1];
     caml_call2(f, i, a);
     var i$0 = i + 1 | 0;
     i = i$0;
     param = l;
    }
   }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
    for(;;){
     if(! l$0) return accu$0;
     var l$1 = l$0[2], a = l$0[1], accu$1 = caml_call2(f, accu$0, a);
     accu$0 = accu$1;
     l$0 = l$1;
    }
   }
   function fold_right(f, l, accu){
    if(! l) return accu;
    var l$0 = l[2], a = l[1];
    return caml_call2(f, a, fold_right(f, l$0, accu));
   }
   function map2(f, l1, l2){
    if(l1){
     var _G_ = l1[2], a1 = l1[1];
     if(_G_){
      if(l2){
       var match = l2[2];
       if(match){
        var
         l2$0 = match[2],
         b2 = match[1],
         b1 = l2[1],
         l1$0 = _G_[2],
         a2 = _G_[1],
         r1 = caml_call2(f, a1, b1),
         r2 = caml_call2(f, a2, b2),
         block = [0, r2, 24029],
         dst = block,
         offset = 1,
         l1$1 = l1$0,
         l2$1 = l2$0;
        for(;;){
         a:
         {
          if(l1$1){
           var _H_ = l1$1[2], a1$0 = l1$1[1];
           if(_H_){
            if(l2$1){
             var match$0 = l2$1[2];
             if(match$0){
              var
               l2$2 = match$0[2],
               b2$0 = match$0[1],
               b1$1 = l2$1[1],
               l1$2 = _H_[2],
               a2$0 = _H_[1],
               r1$1 = caml_call2(f, a1$0, b1$1),
               r2$0 = caml_call2(f, a2$0, b2$0),
               dst$0 = [0, r2$0, 24029];
              dst[1 + offset] = [0, r1$1, dst$0];
              dst = dst$0;
              offset = 1;
              l1$1 = l1$2;
              l2$1 = l2$2;
              continue;
             }
            }
           }
           else if(l2$1 && ! l2$1[2]){
            var b1$2 = l2$1[1], r1$2 = caml_call2(f, a1$0, b1$2);
            dst[1 + offset] = [0, r1$2, 0];
            break a;
           }
          }
          else if(! l2$1){dst[1 + offset] = 0; break a;}
          dst[1 + offset] = caml_call1(Stdlib[1], cst_List_map2$0);
         }
         return [0, r1, block];
        }
       }
      }
     }
     else if(l2 && ! l2[2]){
      var b1$0 = l2[1], r1$0 = caml_call2(f, a1, b1$0);
      return [0, r1$0, 0];
     }
    }
    else if(! l2) return 0;
    return caml_call1(Stdlib[1], cst_List_map2);
   }
   function rev_map2(f, l1, l2){
    var accu = 0, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$0 = [0, caml_call2(f, a1, a2), accu];
       accu = accu$0;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu;
     return caml_call1(Stdlib[1], cst_List_rev_map2);
    }
   }
   function iter2(f, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var l2$1 = l2$0[2], a2 = l2$0[1], l1$1 = l1$0[2], a1 = l1$0[1];
       caml_call2(f, a1, a2);
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Stdlib[1], cst_List_iter2);
    }
   }
   function fold_left2(f, accu, l1, l2){
    var accu$0 = accu, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$1 = caml_call3(f, accu$0, a1, a2);
       accu$0 = accu$1;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu$0;
     return caml_call1(Stdlib[1], cst_List_fold_left2);
    }
   }
   function fold_right2(f, l1, l2, accu){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return caml_call3(f, a1, a2, fold_right2(f, l1$0, l2$0, accu));
     }
    }
    else if(! l2) return accu;
    return caml_call1(Stdlib[1], cst_List_fold_right2);
   }
   function for_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 1;
     var l = param$0[2], a = param$0[1], _F_ = caml_call1(p, a);
     if(! _F_) return _F_;
     param$0 = l;
    }
   }
   function exists(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _E_ = caml_call1(p, a);
     if(_E_) return _E_;
     param$0 = l;
    }
   }
   function for_all2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _D_ = caml_call2(p, a1, a2);
       if(! _D_) return _D_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return caml_call1(Stdlib[1], cst_List_for_all2);
    }
   }
   function exists2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _C_ = caml_call2(p, a1, a2);
       if(_C_) return _C_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Stdlib[1], cst_List_exists2);
    }
   }
   function mem(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1],
      _B_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_B_) return _B_;
     param$0 = l;
    }
   }
   function memq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _A_ = a === x ? 1 : 0;
     if(_A_) return _A_;
     param$0 = l;
    }
   }
   function assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return b;
     param$0 = l;
    }
   }
   function assoc_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return [0, b];
     param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return b;
     param$0 = l;
    }
   }
   function assq_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return [0, b];
     param$0 = l;
    }
   }
   function mem_assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1][1],
      _z_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_z_) return _z_;
     param$0 = l;
    }
   }
   function mem_assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1][1], _y_ = a === x ? 1 : 0;
     if(_y_) return _y_;
     param$0 = l;
    }
   }
   function remove_assoc(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return 0 === caml_compare(a, x) ? l : [0, pair, remove_assoc(x, l)];
   }
   function remove_assq(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return a === x ? l : [0, pair, remove_assq(x, l)];
   }
   function find(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)) return x;
     param$0 = l;
    }
   }
   function find_opt(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)) return [0, x];
     param$0 = l;
    }
   }
   function find_index(p){
    var i = 0;
    return function(param$0){
     var i$0 = i, param = param$0;
     for(;;){
      if(! param) return 0;
      var l = param[2], a = param[1];
      if(caml_call1(p, a)) return [0, i$0];
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param = l;
     }};
   }
   function find_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1], result = caml_call1(f, x);
     if(result) return result;
     param$0 = l;
    }
   }
   function find_mapi(f){
    var i = 0;
    return function(param$0){
     var i$0 = i, param = param$0;
     for(;;){
      if(! param) return 0;
      var l = param[2], x = param[1], result = caml_call2(f, i$0, x);
      if(result) return result;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param = l;
     }};
   }
   function find_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)){
      var block = [0, x, 24029], dst = block, offset = 1, param$1 = l;
      for(;;){
       if(! param$1){dst[1 + offset] = 0; return block;}
       var l$0 = param$1[2], x$0 = param$1[1];
       if(caml_call1(p, x$0)){
        var dst$0 = [0, x$0, 24029];
        dst[1 + offset] = dst$0;
        dst = dst$0;
        offset = 1;
        param$1 = l$0;
       }
       else
        param$1 = l$0;
      }
     }
     else
      param$0 = l;
    }
   }
   function filteri(p, l$1){
    var i = 0, param = l$1;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1], i$0 = i + 1 | 0;
     if(caml_call2(p, i, x)) break;
     i = i$0;
     param = l;
    }
    var
     block = [0, x, 24029],
     dst = block,
     offset = 1,
     i$1 = i$0,
     param$0 = l;
    for(;;){
     if(! param$0){dst[1 + offset] = 0; return block;}
     var l$0 = param$0[2], x$0 = param$0[1], i$2 = i$1 + 1 | 0;
     if(caml_call2(p, i$1, x$0)){
      var dst$0 = [0, x$0, 24029];
      dst[1 + offset] = dst$0;
      dst = dst$0;
      offset = 1;
      i$1 = i$2;
      param$0 = l$0;
     }
     else{i$1 = i$2; param$0 = l$0;}
    }
   }
   function filter_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1], match = caml_call1(f, x);
     if(match){
      var
       v = match[1],
       block = [0, v, 24029],
       dst = block,
       offset = 1,
       param$1 = l;
      for(;;){
       if(! param$1){dst[1 + offset] = 0; return block;}
       var l$0 = param$1[2], x$0 = param$1[1], match$0 = caml_call1(f, x$0);
       if(match$0){
        var v$0 = match$0[1], dst$0 = [0, v$0, 24029];
        dst[1 + offset] = dst$0;
        dst = dst$0;
        offset = 1;
        param$1 = l$0;
       }
       else
        param$1 = l$0;
      }
     }
     else
      param$0 = l;
    }
   }
   function concat_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var xs = param$0[2], x = param$0[1], ys = caml_call1(f, x);
     if(ys){
      var
       ys$1 = ys[2],
       y = ys[1],
       block = [0, y, 24029],
       dst = block,
       offset = 1,
       ys$2 = ys$1,
       xs$1 = xs;
      for(;;)
       if(ys$2){
        var ys$3 = ys$2[2], y$0 = ys$2[1], dst$0 = [0, y$0, 24029];
        dst[1 + offset] = dst$0;
        dst = dst$0;
        offset = 1;
        ys$2 = ys$3;
       }
       else{
        if(! xs$1){dst[1 + offset] = 0; return block;}
        var xs$0 = xs$1[2], x$0 = xs$1[1], ys$0 = caml_call1(f, x$0);
        ys$2 = ys$0;
        xs$1 = xs$0;
       }
     }
     else
      param$0 = xs;
    }
   }
   function take(n, l){
    if(n < 0) caml_call1(Stdlib[1], cst_List_take);
    if(0 !== n && l){
     var
      l$0 = l[2],
      x = l[1],
      block = [0, x, 24029],
      n$0 = n - 1 | 0,
      dst = block,
      offset = 1,
      n$1 = n$0,
      l$1 = l$0;
     for(;;){
      if(0 !== n$1 && l$1){
       var l$2 = l$1[2], x$0 = l$1[1], dst$0 = [0, x$0, 24029];
       dst[1 + offset] = dst$0;
       var n$2 = n$1 - 1 | 0;
       dst = dst$0;
       offset = 1;
       n$1 = n$2;
       l$1 = l$2;
       continue;
      }
      dst[1 + offset] = 0;
      return block;
     }
    }
    return 0;
   }
   function drop(n, rest){
    if(n < 0) caml_call1(Stdlib[1], cst_List_drop);
    var i = 0, rest$0 = rest;
    for(;;){
     if(rest$0){
      var rest$1 = rest$0[2];
      if(i < n){var i$0 = i + 1 | 0; i = i$0; rest$0 = rest$1; continue;}
     }
     return rest$0;
    }
   }
   function take_while(p, rest){
    if(rest){
     var rest$0 = rest[2], x = rest[1];
     if(caml_call1(p, x)){
      var block = [0, x, 24029], dst = block, offset = 1, rest$1 = rest$0;
      for(;;){
       if(rest$1){
        var rest$2 = rest$1[2], x$0 = rest$1[1];
        if(caml_call1(p, x$0)){
         var dst$0 = [0, x$0, 24029];
         dst[1 + offset] = dst$0;
         dst = dst$0;
         offset = 1;
         rest$1 = rest$2;
         continue;
        }
       }
       dst[1 + offset] = 0;
       return block;
      }
     }
    }
    return 0;
   }
   function drop_while(p, rest){
    var rest$0 = rest;
    for(;;){
     if(rest$0){
      var rest$1 = rest$0[2], x = rest$0[1];
      if(caml_call1(p, x)){rest$0 = rest$1; continue;}
     }
     return rest$0;
    }
   }
   function fold_left_map(f, accu, l){
    var accu$0 = accu, l_accu = 0, param = l;
    for(;;){
     if(! param) return [0, accu$0, rev(l_accu)];
     var
      l$0 = param[2],
      x = param[1],
      match = caml_call2(f, accu$0, x),
      x$0 = match[2],
      accu$1 = match[1],
      l_accu$0 = [0, x$0, l_accu];
     accu$0 = accu$1;
     l_accu = l_accu$0;
     param = l$0;
    }
   }
   function partition(p, l){
    var yes = 0, no = 0, param = l;
    for(;;){
     if(! param){var _x_ = rev(no); return [0, rev(yes), _x_];}
     var l$0 = param[2], x = param[1];
     if(caml_call1(p, x)){
      var yes$0 = [0, x, yes];
      yes = yes$0;
      param = l$0;
     }
     else{var no$0 = [0, x, no]; no = no$0; param = l$0;}
    }
   }
   function partition_map(p, l){
    var left = 0, right = 0, param = l;
    for(;;){
     if(! param){var _w_ = rev(right); return [0, rev(left), _w_];}
     var l$0 = param[2], x = param[1], match = caml_call1(p, x);
     if(0 === match[0]){
      var v = match[1], left$0 = [0, v, left];
      left = left$0;
      param = l$0;
     }
     else{
      var v$0 = match[1], right$0 = [0, v$0, right];
      right = right$0;
      param = l$0;
     }
    }
   }
   function split(param){
    if(! param) return _a_;
    var
     l = param[2],
     match = param[1],
     y = match[2],
     x = match[1],
     match$0 = split(l),
     ry = match$0[2],
     rx = match$0[1];
    return [0, [0, x, rx], [0, y, ry]];
   }
   function combine(l1, l2){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return [0, [0, a1, a2], combine(l1$0, l2$0)];
     }
    }
    else if(! l2) return 0;
    return caml_call1(Stdlib[1], cst_List_combine);
   }
   function merge(cmp, l1, l2){
    if(! l1) return l2;
    if(! l2) return l1;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
    return 0 < caml_call2(cmp, h1, h2)
            ? [0, h2, merge(cmp, l1, t2)]
            : [0, h1, merge(cmp, t1, l2)];
   }
   function stable_sort(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _v_ = l[2];
      if(_v_){
       var match$2 = _v_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _v_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x1$0, x3)
              ? 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              < caml_call2(cmp, x2$0, x3)
              ? 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h2, accu];
        l2 = t2;
        accu = accu$1;
        continue;
       }
       var _u_ = rev_append(l1, accu);
      }
      else
       var _u_ = rev_append(l2, accu);
      return [0, _u_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _t_ = l[2];
      if(_t_){
       var match$2 = _t_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _t_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              < caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h2, accu];
         l2 = t2;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h1, accu];
        l1 = t1;
        accu = accu$1;
        continue;
       }
       var _s_ = rev_append(l1, accu);
      }
      else
       var _s_ = rev_append(l2, accu);
      return [0, _s_, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function sort_uniq(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 <= c$0 ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _m_ = l[2];
      if(_m_){
       var match$2 = _m_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _m_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          _n_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 <= c$2 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]],
          s$0 = _n_;
        else if(0 <= c$1){
         var c$3 = caml_call2(cmp, x1$0, x3);
         if(0 === c$3)
          var _o_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$3)
          var
           c$4 = caml_call2(cmp, x2$0, x3),
           _p_ =
             0 === c$4
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$4
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]],
           _o_ = _p_;
         else
          var _o_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         var s$0 = _o_;
        }
        else{
         var c$5 = caml_call2(cmp, x2$0, x3);
         if(0 === c$5)
          var _q_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$5)
          var
           c$6 = caml_call2(cmp, x1$0, x3),
           _r_ =
             0 === c$6
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$6
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]],
           _q_ = _r_;
         else
          var _q_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _q_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 < c){
         var accu$1 = [0, h1, accu];
         l1 = t1;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h2, accu];
        l2 = t2;
        accu = accu$2;
        continue;
       }
       var _l_ = rev_append(l1, accu);
      }
      else
       var _l_ = rev_append(l2, accu);
      return [0, _l_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 < c$0 ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _f_ = l[2];
      if(_f_){
       var match$2 = _f_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _f_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          _g_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 < c$2 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]],
          s$0 = _g_;
        else if(0 < c$1){
         var c$3 = caml_call2(cmp, x2$0, x3);
         if(0 === c$3)
          var _h_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$3)
          var _h_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
          var
           c$4 = caml_call2(cmp, x1$0, x3),
           _i_ =
             0 === c$4
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$4
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
           _h_ = _i_;
         var s$0 = _h_;
        }
        else{
         var c$5 = caml_call2(cmp, x1$0, x3);
         if(0 === c$5)
          var _j_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$5)
          var _j_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
          var
           c$6 = caml_call2(cmp, x2$0, x3),
           _k_ =
             0 === c$6
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$6
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]],
           _j_ = _k_;
         var s$0 = _j_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 <= c){
         var accu$1 = [0, h2, accu];
         l2 = t2;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h1, accu];
        l1 = t1;
        accu = accu$2;
        continue;
       }
       var _e_ = rev_append(l1, accu);
      }
      else
       var _e_ = rev_append(l2, accu);
      return [0, _e_, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function compare_lengths(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], l1$1 = l1$0[2];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function compare_length_with(l, n){
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0 === n$0 ? 0 : 0 < n$0 ? -1 : 1;
     var l$1 = l$0[2];
     if(0 >= n$0) return 1;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function is_empty(param){return param ? 0 : 1;}
   function equal(eq, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _d_ = caml_call2(eq, a1, a2);
       if(! _d_) return _d_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return 0;
    }
   }
   function compare(cmp, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     var l1$1 = l1$0[2], a1 = l1$0[1];
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], a2 = l2$0[1], c = caml_call2(cmp, a1, a2);
     if(0 !== c) return c;
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function to_seq(l){
    function aux(l, param){
     if(! l) return 0;
     var tail = l[2], x = l[1];
     return [0, x, function(_c_){return aux(tail, _c_);}];
    }
    return function(_b_){return aux(l, _b_);};
   }
   function of_seq(seq){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var seq$0 = match[2], x1 = match[1], match$0 = caml_call1(seq$0, 0);
    if(! match$0) return [0, x1, 0];
    var
     seq$1 = match$0[2],
     x2 = match$0[1],
     block = [0, x2, 24029],
     dst = block,
     offset = 1,
     seq$2 = seq$1;
    for(;;){
     var match$1 = caml_call1(seq$2, 0);
     if(match$1){
      var
       seq$3 = match$1[2],
       x1$0 = match$1[1],
       match$2 = caml_call1(seq$3, 0);
      if(match$2){
       var seq$4 = match$2[2], x2$0 = match$2[1], dst$0 = [0, x2$0, 24029];
       dst[1 + offset] = [0, x1$0, dst$0];
       dst = dst$0;
       offset = 1;
       seq$2 = seq$4;
       continue;
      }
      dst[1 + offset] = [0, x1$0, 0];
     }
     else
      dst[1 + offset] = 0;
     return [0, x1, block];
    }
   }
   var
    Stdlib_List =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       is_empty,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_index,
       find_map,
       find_mapi,
       find_all,
       find_all,
       filteri,
       take,
       drop,
       take_while,
       drop_while,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       stable_sort,
       stable_sort,
       stable_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(19, Stdlib_List, "Stdlib__List");
   return;
  }
  (globalThis));

//# 3883 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_hash = runtime.caml_hash;
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lognot(x){return x ^ -1;}
   function equal(_b_, _a_){return _b_ === _a_ ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function min(x, y){return x <= y ? x : y;}
   function max(x, y){return y <= x ? x : y;}
   function to_string(x){return "" + x;}
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Int =
      [0,
       0,
       1,
       -1,
       abs,
       2147483647,
       -2147483648,
       lognot,
       equal,
       compare,
       min,
       max,
       to_string,
       seeded_hash,
       hash];
   runtime.caml_register_global(1, Stdlib_Int, "Stdlib__Int");
   return;
  }
  (globalThis));

//# 3919 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_bytes_ml = "bytes.ml",
    cst_index_out_of_bounds$3 = "index out of bounds",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_get16 = runtime.caml_bytes_get16,
    caml_bytes_get32 = runtime.caml_bytes_get32,
    caml_bytes_get64 = runtime.caml_bytes_get64,
    caml_bytes_of_string = runtime.caml_bytes_of_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fill_bytes = runtime.caml_fill_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Char = global_data.Stdlib__Char;
   function make(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function init(n, f){
    var s = caml_create_bytes(n), _ap_ = n - 1 | 0, _ao_ = 0;
    if(_ap_ >= 0){
     var i = _ao_;
     for(;;){
      caml_bytes_unsafe_set(s, i, caml_call1(f, i));
      var _aq_ = i + 1 | 0;
      if(_ap_ === i) break;
      i = _aq_;
     }
    }
    return s;
   }
   var
    empty = caml_create_bytes(0),
    cst_String_sub_Bytes_sub = "String.sub / Bytes.sub",
    cst_Bytes_extend = "Bytes.extend",
    cst_String_fill_Bytes_fill = "String.fill / Bytes.fill",
    cst_Bytes_blit = "Bytes.blit",
    cst_String_blit_Bytes_blit_str = "String.blit / Bytes.blit_string",
    cst_Bytes_concat = "Bytes.concat",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function copy(s){
    var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
   }
   function to_string(b){return caml_string_of_bytes(copy(b));}
   function of_string(s){return copy(caml_bytes_of_string(s));}
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return caml_call1(Stdlib[1], cst_String_sub_Bytes_sub);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function symbol(a, b){
    var c = a + b | 0, _an_ = b < 0 ? 1 : 0, match = c < 0 ? 1 : 0;
    a:
    {
     if(a < 0){if(_an_ && ! match) break a;} else if(! _an_ && match) break a;
     return c;
    }
    return caml_call1(Stdlib[1], cst_Bytes_extend);
   }
   function extend(s, left, right){
    var
     len = symbol(symbol(caml_ml_bytes_length(s), left), right),
     r = caml_create_bytes(len);
    if(0 <= left)
     var dstoff = left, srcoff = 0;
    else
     var dstoff = 0, srcoff = - left | 0;
    var
     cpylen =
       caml_call2
        (Stdlib_Int[10],
         caml_ml_bytes_length(s) - srcoff | 0,
         len - dstoff | 0);
    if(0 < cpylen) caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
    return r;
   }
   function fill(s, ofs, len, c){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_fill_bytes(s, ofs, len, c);
    return caml_call1(Stdlib[1], cst_String_fill_Bytes_fill);
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    return caml_call1(Stdlib[1], cst_Bytes_blit);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (runtime.caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return runtime.caml_blit_string(s1, ofs1, s2, ofs2, len);
    return caml_call1(Stdlib[1], cst_String_blit_Bytes_blit_str);
   }
   function iter(f, a){
    var _al_ = caml_ml_bytes_length(a) - 1 | 0, _ak_ = 0;
    if(_al_ >= 0){
     var i = _ak_;
     for(;;){
      caml_call1(f, caml_bytes_unsafe_get(a, i));
      var _am_ = i + 1 | 0;
      if(_al_ === i) break;
      i = _am_;
     }
    }
    return 0;
   }
   function iteri(f, a){
    var _ai_ = caml_ml_bytes_length(a) - 1 | 0, _ah_ = 0;
    if(_ai_ >= 0){
     var i = _ah_;
     for(;;){
      caml_call2(f, i, caml_bytes_unsafe_get(a, i));
      var _aj_ = i + 1 | 0;
      if(_ai_ === i) break;
      i = _aj_;
     }
    }
    return 0;
   }
   function concat(sep, l){
    if(! l) return empty;
    var seplen = caml_ml_bytes_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
      for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_bytes_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : caml_call1(Stdlib[1], cst_Bytes_concat);
       acc = acc$0;
       param = tl;
      }
      var _ag_ = acc;
      break a;
     }
     var _ag_ = caml_ml_bytes_length(hd) + acc | 0;
    }
    var dst = caml_create_bytes(_ag_), pos = pos$1, param$0 = l;
    for(;;){
     if(! param$0) return dst;
     var hd$0 = param$0[1];
     if(! param$0[2]){
      caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
      return dst;
     }
     var tl$0 = param$0[2];
     caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
     caml_blit_bytes
      (sep, 0, dst, pos + caml_ml_bytes_length(hd$0) | 0, seplen);
     var pos$0 = (pos + caml_ml_bytes_length(hd$0) | 0) + seplen | 0;
     pos = pos$0;
     param$0 = tl$0;
    }
   }
   function cat(s1, s2){
    var
     l1 = caml_ml_bytes_length(s1),
     l2 = caml_ml_bytes_length(s2),
     r = caml_create_bytes(l1 + l2 | 0);
    caml_blit_bytes(s1, 0, r, 0, l1);
    caml_blit_bytes(s2, 0, r, l1, l2);
    return r;
   }
   function is_space(param){
    var _af_ = param - 9 | 0;
    a:
    {
     if(4 < _af_ >>> 0){if(23 !== _af_) break a;} else if(2 === _af_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    var len = caml_ml_bytes_length(s), i = [0, 0];
    for(;;){
     if(i[1] >= len) break;
     if(! is_space(caml_bytes_unsafe_get(s, i[1]))) break;
     i[1]++;
    }
    var j = [0, len - 1 | 0];
    for(;;){
     if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s, j[1]))){j[1]--; continue;}
     return i[1] <= j[1] ? sub(s, i[1], (j[1] - i[1] | 0) + 1 | 0) : empty;
    }
   }
   function unsafe_escape(s){
    var n = [0, 0], ___ = caml_ml_bytes_length(s) - 1 | 0, _Z_ = 0;
    if(___ >= 0){
     var i$0 = _Z_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _ac_ = match - 34 | 0;
          if(58 < _ac_ >>> 0){
           if(93 <= _ac_) break c;
          }
          else if(56 < _ac_ - 1 >>> 0) break b;
          var _ad_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _ad_ = 4;
        break a;
       }
       var _ad_ = 2;
      }
      n[1] = n[1] + _ad_ | 0;
      var _ae_ = i$0 + 1 | 0;
      if(___ === i$0) break;
      i$0 = _ae_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s)) return s;
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var _aa_ = caml_ml_bytes_length(s) - 1 | 0, _$_ = 0;
    if(_aa_ >= 0){
     var i = _$_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _ab_ = i + 1 | 0;
      if(_aa_ === i) break;
      i = _ab_;
     }
    }
    return s$0;
   }
   function escaped(b){var b$0 = copy(b); return unsafe_escape(b$0);}
   function map(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _X_ = l - 1 | 0, _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(s, i)));
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return r;
   }
   function mapi(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _U_ = l - 1 | 0, _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_bytes_unsafe_set
       (r, i, caml_call2(f, i, caml_bytes_unsafe_get(s, i)));
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return r;
   }
   function fold_left(f, x, a){
    var r = [0, x], _R_ = caml_ml_bytes_length(a) - 1 | 0, _Q_ = 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
      r[1] = caml_call2(f, r[1], caml_bytes_unsafe_get(a, i));
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return r[1];
   }
   function fold_right(f, a, x){
    var r = [0, x], _O_ = caml_ml_bytes_length(a) - 1 | 0;
    if(_O_ >= 0){
     var i = _O_;
     for(;;){
      r[1] = caml_call2(f, caml_bytes_unsafe_get(a, i), r[1]);
      var _P_ = i - 1 | 0;
      if(0 === i) break;
      i = _P_;
     }
    }
    return r[1];
   }
   function exists(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, caml_bytes_unsafe_get(s, i))) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, caml_bytes_unsafe_get(s, i))) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function uppercase_ascii(s){return map(Stdlib_Char[4], s);}
   function lowercase_ascii(s){return map(Stdlib_Char[3], s);}
   function apply1(f, s){
    if(0 === caml_ml_bytes_length(s)) return s;
    var r = copy(s);
    caml_bytes_unsafe_set(r, 0, caml_call1(f, caml_bytes_unsafe_get(s, 0)));
    return r;
   }
   function capitalize_ascii(s){return apply1(Stdlib_Char[4], s);}
   function uncapitalize_ascii(s){return apply1(Stdlib_Char[3], s);}
   function starts_with(prefix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_pre = caml_ml_bytes_length(prefix),
     _N_ = len_pre <= len_s ? 1 : 0;
    if(! _N_) return _N_;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     if(caml_bytes_unsafe_get(s, i) !== caml_bytes_unsafe_get(prefix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_suf = caml_ml_bytes_length(suffix),
     diff = len_s - len_suf | 0,
     _M_ = 0 <= diff ? 1 : 0;
    if(! _M_) return _M_;
    var i = 0;
    for(;;){
     if(i === len_suf) return 1;
     if
      (caml_bytes_unsafe_get(s, diff + i | 0)
       !== caml_bytes_unsafe_get(suffix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_bytes_length(s), 0, c);}
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) return 0;
     if(caml_bytes_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_bytes_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) return 0;
     if(caml_bytes_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec_opt(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _K_ = 1; return _K_;}
     catch(_L_){
      var _J_ = caml_wrap_exception(_L_);
      if(_J_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_J_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_bytes_length(s) > i)
     try{rindex_rec(s, i, c); var _H_ = 1; return _H_;}
     catch(_I_){
      var _G_ = caml_wrap_exception(_I_);
      if(_G_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_G_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_rcontains_from_Byte);
   }
   var
    compare = runtime.caml_bytes_compare,
    cst_Bytes_of_seq_cannot_grow_b = "Bytes.of_seq: cannot grow bytes";
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_bytes_length(s)],
     _C_ = caml_ml_bytes_length(s) - 1 | 0;
    if(_C_ >= 0){
     var i = _C_;
     for(;;){
      if(caml_bytes_unsafe_get(s, i) === sep){
       var _E_ = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _E_];
       j[1] = i;
      }
      var _F_ = i - 1 | 0;
      if(0 === i) break;
      i = _F_;
     }
    }
    var _D_ = r[1];
    return [0, sub(s, 0, j[1]), _D_];
   }
   function to_seq(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), _A_ = i + 1 | 0;
     return [0, x, function(_B_){return aux(_A_, _B_);}];
    }
    var _y_ = 0;
    return function(_z_){return aux(_y_, _z_);};
   }
   function to_seqi(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), _w_ = i + 1 | 0;
     return [0, [0, i, x], function(_x_){return aux(_w_, _x_);}];
    }
    var _u_ = 0;
    return function(_v_){return aux(_u_, _v_);};
   }
   function of_seq(i){
    var n = [0, 0], buf = [0, make(256, 0)];
    caml_call2
     (Stdlib_Seq[4],
      function(c){
       if(n[1] === caml_ml_bytes_length(buf[1])){
        var
         new_len =
           caml_call2
            (Stdlib_Int[10],
             2 * caml_ml_bytes_length(buf[1]) | 0,
             Stdlib_Sys[12]);
        if(caml_ml_bytes_length(buf[1]) === new_len)
         caml_call1(Stdlib[2], cst_Bytes_of_seq_cannot_grow_b);
        var new_buf = make(new_len, 0);
        blit(buf[1], 0, new_buf, 0, n[1]);
        buf[1] = new_buf;
       }
       caml_bytes_set(buf[1], n[1], c);
       n[1]++;
       return 0;
      },
      i);
    return sub(buf[1], 0, n[1]);
   }
   function unsafe_get_uint16_le(b, i){
    return Stdlib_Sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function unsafe_get_uint16_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int8(b, i){
    var _s_ = Stdlib_Sys[10] - 8 | 0, _t_ = Stdlib_Sys[10] - 8 | 0;
    return caml_bytes_get(b, i) << _t_ >> _s_;
   }
   function get_uint16_le(b, i){
    return Stdlib_Sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function get_uint16_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int16_ne(b, i){
    var _q_ = Stdlib_Sys[10] - 16 | 0, _r_ = Stdlib_Sys[10] - 16 | 0;
    return caml_bytes_get16(b, i) << _r_ >> _q_;
   }
   function get_int16_le(b, i){
    var _o_ = Stdlib_Sys[10] - 16 | 0, _p_ = Stdlib_Sys[10] - 16 | 0;
    return get_uint16_le(b, i) << _p_ >> _o_;
   }
   function get_int16_be(b, i){
    var _m_ = Stdlib_Sys[10] - 16 | 0, _n_ = Stdlib_Sys[10] - 16 | 0;
    return get_uint16_be(b, i) << _n_ >> _m_;
   }
   function get_int32_le(b, i){
    return Stdlib_Sys[11]
            ? caml_int32_bswap(caml_bytes_get32(b, i))
            : caml_bytes_get32(b, i);
   }
   function get_int32_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get32(b, i)
            : caml_int32_bswap(caml_bytes_get32(b, i));
   }
   function get_int64_le(b, i){
    return Stdlib_Sys[11]
            ? caml_int64_bswap(caml_bytes_get64(b, i))
            : caml_bytes_get64(b, i);
   }
   function get_int64_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get64(b, i)
            : caml_int64_bswap(caml_bytes_get64(b, i));
   }
   function unsafe_set_uint16_le(b, i, x){
    if(Stdlib_Sys[11]){caml_bytes_set16(b, i, caml_bswap16(x)); return;}
    caml_bytes_set16(b, i, x);
   }
   function unsafe_set_uint16_be(b, i, x){
    if(Stdlib_Sys[11]){caml_bytes_set16(b, i, x); return;}
    caml_bytes_set16(b, i, caml_bswap16(x));
   }
   function set_int16_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set16(b, i, caml_bswap16(x))
            : caml_bytes_set16(b, i, x);
   }
   function set_int16_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set16(b, i, x)
            : caml_bytes_set16(b, i, caml_bswap16(x));
   }
   function set_int32_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(b, i, caml_int32_bswap(x))
            : caml_bytes_set32(b, i, x);
   }
   function set_int32_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(b, i, x)
            : caml_bytes_set32(b, i, caml_int32_bswap(x));
   }
   function set_int64_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(b, i, caml_int64_bswap(x))
            : caml_bytes_set64(b, i, x);
   }
   function set_int64_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(b, i, x)
            : caml_bytes_set64(b, i, caml_int64_bswap(x));
   }
   var
    set_uint8 = caml_bytes_set,
    set_uint16_ne = caml_bytes_set16,
    dec_invalid = Stdlib_Uchar[23],
    _a_ = [0, cst_bytes_ml, 679, 9],
    _b_ = [0, cst_bytes_ml, 654, 20],
    cst_index_out_of_bounds = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$0 = cst_index_out_of_bounds$3,
    _c_ = [0, cst_bytes_ml, 777, 9],
    _d_ = [0, cst_bytes_ml, 766, 20],
    cst_index_out_of_bounds$1 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$2 = cst_index_out_of_bounds$3,
    _e_ = [0, cst_bytes_ml, 831, 9],
    _f_ = [0, cst_bytes_ml, 820, 20];
   function dec_ret(n, u){
    var _l_ = caml_call1(Stdlib_Uchar[9], u);
    return caml_call2(Stdlib_Uchar[22], n, _l_);
   }
   function not_in_x80_to_xBF(b){return 2 !== (b >>> 6 | 0) ? 1 : 0;}
   function not_in_xA0_to_xBF(b){return 5 !== (b >>> 5 | 0) ? 1 : 0;}
   function not_in_x80_to_x9F(b){return 4 !== (b >>> 5 | 0) ? 1 : 0;}
   function not_in_x90_to_xBF(b){
    var _j_ = b < 144 ? 1 : 0, _k_ = _j_ || (191 < b ? 1 : 0);
    return _k_;
   }
   function not_in_x80_to_x8F(b){return 8 !== (b >>> 4 | 0) ? 1 : 0;}
   function utf_8_uchar_3(b0, b1, b2){
    return (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
   }
   function utf_8_uchar_4(b0, b1, b2, b3){
    return (b0 & 7) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63;
   }
   function get_utf_8_uchar(b, i){
    var b0 = caml_bytes_get(b, i), max = caml_ml_bytes_length(b) - 1 | 0;
    a:
    {
     if(224 <= b0){
      if(237 <= b0){
       if(245 <= b0) break a;
       switch(b0 - 237 | 0){
         case 0:
          var i$0 = i + 1 | 0;
          if(max < i$0) return caml_call1(dec_invalid, 1);
          var b1$4 = caml_bytes_unsafe_get(b, i$0);
          if(not_in_x80_to_x9F(b1$4)) return caml_call1(dec_invalid, 1);
          var i$1 = i$0 + 1 | 0;
          if(max < i$1) return caml_call1(dec_invalid, 2);
          var b2$3 = caml_bytes_unsafe_get(b, i$1);
          return not_in_x80_to_xBF(b2$3)
                  ? caml_call1(dec_invalid, 2)
                  : dec_ret(3, utf_8_uchar_3(b0, b1$4, b2$3));
         case 3:
          var i$4 = i + 1 | 0;
          if(max < i$4) return caml_call1(dec_invalid, 1);
          var b1$2 = caml_bytes_unsafe_get(b, i$4);
          if(not_in_x90_to_xBF(b1$2)) return caml_call1(dec_invalid, 1);
          var i$5 = i$4 + 1 | 0;
          if(max < i$5) return caml_call1(dec_invalid, 2);
          var b2$1 = caml_bytes_unsafe_get(b, i$5);
          if(not_in_x80_to_xBF(b2$1)) return caml_call1(dec_invalid, 2);
          var i$6 = i$5 + 1 | 0;
          if(max < i$6) return caml_call1(dec_invalid, 3);
          var b3$1 = caml_bytes_unsafe_get(b, i$6);
          return not_in_x80_to_xBF(b3$1)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$2, b2$1, b3$1));
         case 7:
          var i$10 = i + 1 | 0;
          if(max < i$10) return caml_call1(dec_invalid, 1);
          var b1$0 = caml_bytes_unsafe_get(b, i$10);
          if(not_in_x80_to_x8F(b1$0)) return caml_call1(dec_invalid, 1);
          var i$11 = i$10 + 1 | 0;
          if(max < i$11) return caml_call1(dec_invalid, 2);
          var b2 = caml_bytes_unsafe_get(b, i$11);
          if(not_in_x80_to_xBF(b2)) return caml_call1(dec_invalid, 2);
          var i$12 = i$11 + 1 | 0;
          if(max < i$12) return caml_call1(dec_invalid, 3);
          var b3 = caml_bytes_unsafe_get(b, i$12);
          return not_in_x80_to_xBF(b3)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$0, b2, b3));
         case 1:
         case 2: break;
         default:
          var i$7 = i + 1 | 0;
          if(max < i$7) return caml_call1(dec_invalid, 1);
          var b1$1 = caml_bytes_unsafe_get(b, i$7);
          if(not_in_x80_to_xBF(b1$1)) return caml_call1(dec_invalid, 1);
          var i$8 = i$7 + 1 | 0;
          if(max < i$8) return caml_call1(dec_invalid, 2);
          var b2$0 = caml_bytes_unsafe_get(b, i$8);
          if(not_in_x80_to_xBF(b2$0)) return caml_call1(dec_invalid, 2);
          var i$9 = i$8 + 1 | 0;
          if(max < i$9) return caml_call1(dec_invalid, 3);
          var b3$0 = caml_bytes_unsafe_get(b, i$9);
          return not_in_x80_to_xBF(b3$0)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$1, b2$0, b3$0));
       }
      }
      else if(225 > b0){
       var i$13 = i + 1 | 0;
       if(max < i$13) return caml_call1(dec_invalid, 1);
       var b1$5 = caml_bytes_unsafe_get(b, i$13);
       if(not_in_xA0_to_xBF(b1$5)) return caml_call1(dec_invalid, 1);
       var i$14 = i$13 + 1 | 0;
       if(max < i$14) return caml_call1(dec_invalid, 2);
       var b2$4 = caml_bytes_unsafe_get(b, i$14);
       return not_in_x80_to_xBF(b2$4)
               ? caml_call1(dec_invalid, 2)
               : dec_ret(3, utf_8_uchar_3(b0, b1$5, b2$4));
      }
      var i$2 = i + 1 | 0;
      if(max < i$2) return caml_call1(dec_invalid, 1);
      var b1$3 = caml_bytes_unsafe_get(b, i$2);
      if(not_in_x80_to_xBF(b1$3)) return caml_call1(dec_invalid, 1);
      var i$3 = i$2 + 1 | 0;
      if(max < i$3) return caml_call1(dec_invalid, 2);
      var b2$2 = caml_bytes_unsafe_get(b, i$3);
      return not_in_x80_to_xBF(b2$2)
              ? caml_call1(dec_invalid, 2)
              : dec_ret(3, utf_8_uchar_3(b0, b1$3, b2$2));
     }
     if(128 > b0) return dec_ret(1, b0);
     if(194 <= b0){
      var i$15 = i + 1 | 0;
      if(max < i$15) return caml_call1(dec_invalid, 1);
      var b1 = caml_bytes_unsafe_get(b, i$15);
      return not_in_x80_to_xBF(b1)
              ? caml_call1(dec_invalid, 1)
              : dec_ret(2, (b0 & 31) << 6 | b1 & 63);
     }
    }
    return caml_call1(dec_invalid, 1);
   }
   function set_utf_8_uchar(b, i, u){
    function set(_i_, _h_, _g_){caml_bytes_unsafe_set(_i_, _h_, _g_);}
    var
     max = caml_ml_bytes_length(b) - 1 | 0,
     u$0 = caml_call1(Stdlib_Uchar[10], u);
    if(0 > u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(127 >= u$0){caml_bytes_set(b, i, u$0); return 1;}
    if(2047 >= u$0){
     var last$1 = i + 1 | 0;
     return max < last$1
             ? 0
             : (caml_bytes_set
                (b, i, 192 | u$0 >>> 6 | 0),
               set(b, last$1, 128 | u$0 & 63),
               2);
    }
    if(65535 >= u$0){
     var last$0 = i + 2 | 0;
     return max < last$0
             ? 0
             : (caml_bytes_set
                (b, i, 224 | u$0 >>> 12 | 0),
               set(b, i + 1 | 0, 128 | (u$0 >>> 6 | 0) & 63),
               set(b, last$0, 128 | u$0 & 63),
               3);
    }
    if(1114111 < u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var last = i + 3 | 0;
    return max < last
            ? 0
            : (caml_bytes_set
               (b, i, 240 | u$0 >>> 18 | 0),
              set(b, i + 1 | 0, 128 | (u$0 >>> 12 | 0) & 63),
              set(b, i + 2 | 0, 128 | (u$0 >>> 6 | 0) & 63),
              set(b, last, 128 | u$0 & 63),
              4);
   }
   function is_valid_utf_8(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     var match = caml_bytes_unsafe_get(b, i);
     a:
     {
      if(224 <= match){
       if(237 <= match){
        if(245 <= match) break a;
        switch(match - 237 | 0){
          case 0:
           var last = i + 2 | 0;
           if
            (max >= last
             &&
              !
              not_in_x80_to_x9F(caml_bytes_unsafe_get(b, i + 1 | 0))
              && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last))){var i$0 = last + 1 | 0; i = i$0; continue;}
           return 0;
          case 3:
           var last$1 = i + 3 | 0;
           if
            (max >= last$1
             &&
              !
              not_in_x90_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$1))){var i$2 = last$1 + 1 | 0; i = i$2; continue;}
           return 0;
          case 7:
           var last$3 = i + 3 | 0;
           if
            (max >= last$3
             &&
              !
              not_in_x80_to_x8F(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$3))){var i$4 = last$3 + 1 | 0; i = i$4; continue;}
           return 0;
          case 1:
          case 2: break;
          default:
           var last$2 = i + 3 | 0;
           if
            (max >= last$2
             &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$2))){var i$3 = last$2 + 1 | 0; i = i$3; continue;}
           return 0;
        }
       }
       else if(225 > match){
        var last$4 = i + 2 | 0;
        if
         (max >= last$4
          &&
           !
           not_in_xA0_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
           && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$4))){var i$5 = last$4 + 1 | 0; i = i$5; continue;}
        return 0;
       }
       var last$0 = i + 2 | 0;
       if
        (max >= last$0
         &&
          !
          not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
          && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$0))){var i$1 = last$0 + 1 | 0; i = i$1; continue;}
       return 0;
      }
      if(128 > match){var i$7 = i + 1 | 0; i = i$7; continue;}
      if(194 <= match){
       var last$5 = i + 1 | 0;
       if
        (max >= last$5
         && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$5))){var i$6 = last$5 + 1 | 0; i = i$6; continue;}
       return 0;
      }
     }
     return 0;
    }
   }
   function get_utf_16be_uchar(b, i){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     if(i === max) return caml_call1(dec_invalid, 1);
     var hi = unsafe_get_uint16_be(b, i);
     if(55296 <= hi && 57343 >= hi){
      if(56319 < hi) return caml_call1(dec_invalid, 2);
      var last = i + 3 | 0;
      if(max < last) return caml_call1(dec_invalid, (max - i | 0) + 1 | 0);
      var lo = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
       return dec_ret(4, u);
      }
      return caml_call1(dec_invalid, 2);
     }
     return dec_ret(2, hi);
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds);
   }
   function set_utf_16be_uchar(b, i, u){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     var u$0 = caml_call1(Stdlib_Uchar[10], u);
     if(0 > u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     if(65535 >= u$0){
      var last$0 = i + 1 | 0;
      return max < last$0 ? 0 : (unsafe_set_uint16_be(b, i, u$0), 2);
     }
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     var last = i + 3 | 0;
     if(max < last) return 0;
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_uint16_be(b, i, hi);
     unsafe_set_uint16_be(b, i + 2 | 0, lo);
     return 4;
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$0);
   }
   function is_valid_utf_16be(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     if(i === max) return 0;
     var u = unsafe_get_uint16_be(b, i);
     if(55296 <= u && 57343 >= u){
      if(56319 < u) return 0;
      var last = i + 3 | 0;
      if(max < last) return 0;
      var u$0 = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
       var i$1 = i + 4 | 0;
       i = i$1;
       continue;
      }
      return 0;
     }
     var i$0 = i + 2 | 0;
     i = i$0;
    }
   }
   function get_utf_16le_uchar(b, i){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     if(i === max) return caml_call1(dec_invalid, 1);
     var hi = unsafe_get_uint16_le(b, i);
     if(55296 <= hi && 57343 >= hi){
      if(56319 < hi) return caml_call1(dec_invalid, 2);
      var last = i + 3 | 0;
      if(max < last) return caml_call1(dec_invalid, (max - i | 0) + 1 | 0);
      var lo = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
       return dec_ret(4, u);
      }
      return caml_call1(dec_invalid, 2);
     }
     return dec_ret(2, hi);
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$1);
   }
   function set_utf_16le_uchar(b, i, u){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     var u$0 = caml_call1(Stdlib_Uchar[10], u);
     if(0 > u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
     if(65535 >= u$0){
      var last$0 = i + 1 | 0;
      return max < last$0 ? 0 : (unsafe_set_uint16_le(b, i, u$0), 2);
     }
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     var last = i + 3 | 0;
     if(max < last) return 0;
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_uint16_le(b, i, hi);
     unsafe_set_uint16_le(b, i + 2 | 0, lo);
     return 4;
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$2);
   }
   function is_valid_utf_16le(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     if(i === max) return 0;
     var u = unsafe_get_uint16_le(b, i);
     if(55296 <= u && 57343 >= u){
      if(56319 < u) return 0;
      var last = i + 3 | 0;
      if(max < last) return 0;
      var u$0 = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
       var i$1 = i + 4 | 0;
       i = i$1;
       continue;
      }
      return 0;
     }
     var i$0 = i + 2 | 0;
     i = i$0;
    }
   }
   var
    Stdlib_Bytes =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       runtime.caml_bytes_equal,
       starts_with,
       ends_with,
       caml_string_of_bytes,
       caml_bytes_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       caml_bytes_get,
       get_int8,
       caml_bytes_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       caml_bytes_get32,
       get_int32_be,
       get_int32_le,
       caml_bytes_get64,
       get_int64_be,
       get_int64_le,
       set_uint8,
       caml_bytes_set,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       caml_bytes_set16,
       set_int16_be,
       set_int16_le,
       caml_bytes_set32,
       set_int32_be,
       set_int32_le,
       caml_bytes_set64,
       set_int64_be,
       set_int64_le,
       unsafe_escape];
   runtime.caml_register_global(30, Stdlib_Bytes, "Stdlib__Bytes");
   return;
  }
  (globalThis));

//# 5139 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    caml_blit_string = runtime.caml_blit_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_hash = runtime.caml_string_hash,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    empty = cst$0,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    bts = Stdlib_Bytes[44],
    bos = Stdlib_Bytes[45];
   function make(n, c){
    return caml_call1(bts, caml_call2(Stdlib_Bytes[1], n, c));
   }
   function init(n, f){
    return caml_call1(bts, caml_call2(Stdlib_Bytes[2], n, f));
   }
   var of_bytes = Stdlib_Bytes[6], to_bytes = Stdlib_Bytes[5];
   function sub(s, ofs, len){
    var _X_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call3(Stdlib_Bytes[7], _X_, ofs, len));
   }
   var blit = Stdlib_Bytes[12], cst_String_concat = "String.concat";
   function concat(sep, l){
    if(! l) return cst;
    var seplen = caml_ml_string_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
      for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_string_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : caml_call1(Stdlib[1], cst_String_concat);
       acc = acc$0;
       param = tl;
      }
      var _W_ = acc;
      break a;
     }
     var _W_ = caml_ml_string_length(hd) + acc | 0;
    }
    var dst = runtime.caml_create_bytes(_W_), pos = pos$1, param$0 = l;
    for(;;){
     if(param$0){
      var hd$0 = param$0[1];
      if(param$0[2]){
       var tl$0 = param$0[2];
       caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
       caml_blit_string
        (sep, 0, dst, pos + caml_ml_string_length(hd$0) | 0, seplen);
       var pos$0 = (pos + caml_ml_string_length(hd$0) | 0) + seplen | 0;
       pos = pos$0;
       param$0 = tl$0;
       continue;
      }
      caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
     }
     return caml_call1(bts, dst);
    }
   }
   var
    cat = Stdlib[28],
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function iter(f, s){
    var _U_ = caml_ml_string_length(s) - 1 | 0, _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_call1(f, caml_string_unsafe_get(s, i));
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return 0;
   }
   function iteri(f, s){
    var _R_ = caml_ml_string_length(s) - 1 | 0, _Q_ = 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
      caml_call2(f, i, caml_string_unsafe_get(s, i));
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return 0;
   }
   function map(f, s){
    var _P_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call2(Stdlib_Bytes[17], f, _P_));
   }
   function mapi(f, s){
    var _O_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call2(Stdlib_Bytes[18], f, _O_));
   }
   function fold_right(f, x, a){
    var _N_ = caml_call1(bos, x);
    return caml_call3(Stdlib_Bytes[20], f, _N_, a);
   }
   function fold_left(f, a, x){
    var _M_ = caml_call1(bos, x);
    return caml_call3(Stdlib_Bytes[19], f, a, _M_);
   }
   function exists(f, s){
    var _L_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[22], f, _L_);
   }
   function for_all(f, s){
    var _K_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[21], f, _K_);
   }
   function is_space(param){
    var _J_ = param - 9 | 0;
    a:
    {
     if(4 < _J_ >>> 0){if(23 !== _J_) break a;} else if(2 === _J_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    if(s === cst$0) return s;
    if
     (!
      is_space(caml_string_unsafe_get(s, 0))
      &&
       !
       is_space(caml_string_unsafe_get(s, caml_ml_string_length(s) - 1 | 0)))
     return s;
    var _I_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[23], _I_));
   }
   function escaped(s){
    var b = caml_call1(bos, s), b$0 = caml_call1(Stdlib_Bytes[87], b);
    return b === b$0 ? s : caml_call1(bts, b$0);
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_string_length(s), 0, c);}
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) return 0;
     if(caml_string_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_string_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i) return rindex_rec(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) return 0;
     if(caml_string_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i)
     return rindex_rec_opt(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _G_ = 1; return _G_;}
     catch(_H_){
      var _F_ = caml_wrap_exception(_H_);
      if(_F_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_F_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_string_length(s) > i)
     try{rindex_rec(s, i, c); var _D_ = 1; return _D_;}
     catch(_E_){
      var _C_ = caml_wrap_exception(_E_);
      if(_C_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_C_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_rcontains_from_Byte);
   }
   function uppercase_ascii(s){
    var _B_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[36], _B_));
   }
   function lowercase_ascii(s){
    var _A_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[37], _A_));
   }
   function capitalize_ascii(s){
    var _z_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[38], _z_));
   }
   function uncapitalize_ascii(s){
    var _y_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[39], _y_));
   }
   function starts_with(prefix, s){
    var
     len_s = caml_ml_string_length(s),
     len_pre = caml_ml_string_length(prefix),
     _x_ = len_pre <= len_s ? 1 : 0;
    if(! _x_) return _x_;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     if(caml_string_unsafe_get(s, i) !== caml_string_unsafe_get(prefix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_string_length(s),
     len_suf = caml_ml_string_length(suffix),
     diff = len_s - len_suf | 0,
     _w_ = 0 <= diff ? 1 : 0;
    if(! _w_) return _w_;
    var i = 0;
    for(;;){
     if(i === len_suf) return 1;
     if
      (caml_string_unsafe_get(s, diff + i | 0)
       !== caml_string_unsafe_get(suffix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function hash(x){return caml_string_hash(0, x);}
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_string_length(s)],
     _s_ = caml_ml_string_length(s) - 1 | 0;
    if(_s_ >= 0){
     var i = _s_;
     for(;;){
      if(caml_string_unsafe_get(s, i) === sep){
       var _u_ = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _u_];
       j[1] = i;
      }
      var _v_ = i - 1 | 0;
      if(0 === i) break;
      i = _v_;
     }
    }
    var _t_ = r[1];
    return [0, sub(s, 0, j[1]), _t_];
   }
   var compare = runtime.caml_string_compare;
   function to_seq(s){
    var _r_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[47], _r_);
   }
   function to_seqi(s){
    var _q_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[48], _q_);
   }
   function of_seq(g){
    return caml_call1(bts, caml_call1(Stdlib_Bytes[49], g));
   }
   function get_utf_8_uchar(s, i){
    var _p_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[50], _p_, i);
   }
   function is_valid_utf_8(s){
    var _o_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[52], _o_);
   }
   function get_utf_16be_uchar(s, i){
    var _n_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[53], _n_, i);
   }
   function is_valid_utf_16be(s){
    var _m_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[55], _m_);
   }
   function get_utf_16le_uchar(s, i){
    var _l_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[56], _l_, i);
   }
   function is_valid_utf_16le(s){
    var _k_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[58], _k_);
   }
   function get_int8(s, i){
    var _j_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[60], _j_, i);
   }
   function get_uint16_le(s, i){
    var _i_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[63], _i_, i);
   }
   function get_uint16_be(s, i){
    var _h_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[62], _h_, i);
   }
   function get_int16_ne(s, i){
    var _g_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[64], _g_, i);
   }
   function get_int16_le(s, i){
    var _f_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[66], _f_, i);
   }
   function get_int16_be(s, i){
    var _e_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[65], _e_, i);
   }
   function get_int32_le(s, i){
    var _d_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[69], _d_, i);
   }
   function get_int32_be(s, i){
    var _c_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[68], _c_, i);
   }
   function get_int64_le(s, i){
    var _b_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[72], _b_, i);
   }
   function get_int64_be(s, i){
    var _a_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[71], _a_, i);
   }
   var
    Stdlib_String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       caml_string_equal,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       runtime.caml_string_get,
       get_int8,
       runtime.caml_string_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       runtime.caml_string_get32,
       hash,
       caml_string_hash,
       get_int32_be,
       get_int32_le,
       runtime.caml_string_get64,
       get_int64_be,
       get_int64_le];
   runtime.caml_register_global(12, Stdlib_String, "Stdlib__String");
   return;
  }
  (globalThis));

//# 5702 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_make = runtime.caml_array_make,
    caml_array_sub = runtime.caml_array_sub,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    Floatarray = [0],
    cst_Array_init = "Array.init",
    cst_Array_make_matrix = "Array.make_matrix",
    cst_Array_init_matrix = "Array.init_matrix",
    cst_Array_sub = "Array.sub",
    cst_Array_fill = "Array.fill",
    cst_Array_blit = "Array.blit",
    cst_Array_iter2_arrays_must_ha =
      "Array.iter2: arrays must have the same length",
    cst_Array_map2_arrays_must_hav =
      "Array.map2: arrays must have the same length",
    cst_Array_for_all2 = "Array.for_all2",
    cst_Array_exists2 = "Array.exists2",
    cst_Array_combine = "Array.combine";
   function init(l, f){
    if(0 === l) return [0];
    if(0 > l) return caml_call1(Stdlib[1], cst_Array_init);
    var
     res = caml_array_make(l, caml_call1(f, 0)),
     _aL_ = l - 1 | 0,
     _aK_ = 1;
    if(_aL_ >= 1){
     var i = _aK_;
     for(;;){
      res[1 + i] = caml_call1(f, i);
      var _aM_ = i + 1 | 0;
      if(_aL_ === i) break;
      i = _aM_;
     }
    }
    return res;
   }
   function make_matrix(sx, sy, init){
    if(sy < 0) caml_call1(Stdlib[1], cst_Array_make_matrix);
    var res = caml_array_make(sx, [0]);
    if(0 < sy){
     var _aI_ = sx - 1 | 0, _aH_ = 0;
     if(_aI_ >= 0){
      var x = _aH_;
      for(;;){
       res[1 + x] = caml_array_make(sy, init);
       var _aJ_ = x + 1 | 0;
       if(_aI_ === x) break;
       x = _aJ_;
      }
     }
    }
    return res;
   }
   function init_matrix(sx, sy, f){
    if(sy < 0) caml_call1(Stdlib[1], cst_Array_init_matrix);
    var res = caml_array_make(sx, [0]);
    if(0 < sy){
     var _aC_ = sx - 1 | 0, _aB_ = 0;
     if(_aC_ >= 0){
      var x = _aB_;
      for(;;){
       var
        row = caml_array_make(sy, caml_call2(f, x, 0)),
        _aE_ = sy - 1 | 0,
        _aD_ = 1;
       if(_aE_ >= 1){
        var y = _aD_;
        for(;;){
         row[1 + y] = caml_call2(f, x, y);
         var _aG_ = y + 1 | 0;
         if(_aE_ === y) break;
         y = _aG_;
        }
       }
       res[1 + x] = row;
       var _aF_ = x + 1 | 0;
       if(_aC_ === x) break;
       x = _aF_;
      }
     }
    }
    return res;
   }
   function copy(a){
    var l = a.length - 1;
    return 0 === l ? [0] : caml_array_sub(a, 0, l);
   }
   function append(a1, a2){
    var l1 = a1.length - 1;
    return 0 === l1
            ? copy(a2)
            : 0
              === a2.length - 1
              ? caml_array_sub(a1, 0, l1)
              : runtime.caml_array_append(a1, a2);
   }
   function sub(a, ofs, len){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return caml_array_sub(a, ofs, len);
    return caml_call1(Stdlib[1], cst_Array_sub);
   }
   function fill(a, ofs, len, v){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return runtime.caml_array_fill(a, ofs, len, v);
    return caml_call1(Stdlib[1], cst_Array_fill);
   }
   function blit(a1, ofs1, a2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2)
     return runtime.caml_array_blit(a1, ofs1, a2, ofs2, len);
    return caml_call1(Stdlib[1], cst_Array_blit);
   }
   function iter(f, a){
    var _az_ = a.length - 2 | 0, _ay_ = 0;
    if(_az_ >= 0){
     var i = _ay_;
     for(;;){
      caml_call1(f, a[1 + i]);
      var _aA_ = i + 1 | 0;
      if(_az_ === i) break;
      i = _aA_;
     }
    }
    return 0;
   }
   function iter2(f, a, b){
    if(a.length - 1 !== b.length - 1)
     return caml_call1(Stdlib[1], cst_Array_iter2_arrays_must_ha);
    var _aw_ = a.length - 2 | 0, _av_ = 0;
    if(_aw_ >= 0){
     var i = _av_;
     for(;;){
      caml_call2(f, a[1 + i], b[1 + i]);
      var _ax_ = i + 1 | 0;
      if(_aw_ === i) break;
      i = _ax_;
     }
    }
    return 0;
   }
   function map(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_array_make(l, caml_call1(f, a[1])),
     _at_ = l - 1 | 0,
     _as_ = 1;
    if(_at_ >= 1){
     var i = _as_;
     for(;;){
      r[1 + i] = caml_call1(f, a[1 + i]);
      var _au_ = i + 1 | 0;
      if(_at_ === i) break;
      i = _au_;
     }
    }
    return r;
   }
   function map_inplace(f, a){
    var _aq_ = a.length - 2 | 0, _ap_ = 0;
    if(_aq_ >= 0){
     var i = _ap_;
     for(;;){
      a[1 + i] = caml_call1(f, a[1 + i]);
      var _ar_ = i + 1 | 0;
      if(_aq_ === i) break;
      i = _ar_;
     }
    }
    return 0;
   }
   function mapi_inplace(f, a){
    var _an_ = a.length - 2 | 0, _am_ = 0;
    if(_an_ >= 0){
     var i = _am_;
     for(;;){
      a[1 + i] = caml_call2(f, i, a[1 + i]);
      var _ao_ = i + 1 | 0;
      if(_an_ === i) break;
      i = _ao_;
     }
    }
    return 0;
   }
   function map2(f, a, b){
    var la = a.length - 1, lb = b.length - 1;
    if(la !== lb)
     return caml_call1(Stdlib[1], cst_Array_map2_arrays_must_hav);
    if(0 === la) return [0];
    var
     r = caml_array_make(la, caml_call2(f, a[1], b[1])),
     _ak_ = la - 1 | 0,
     _aj_ = 1;
    if(_ak_ >= 1){
     var i = _aj_;
     for(;;){
      r[1 + i] = caml_call2(f, a[1 + i], b[1 + i]);
      var _al_ = i + 1 | 0;
      if(_ak_ === i) break;
      i = _al_;
     }
    }
    return r;
   }
   function iteri(f, a){
    var _ah_ = a.length - 2 | 0, _ag_ = 0;
    if(_ah_ >= 0){
     var i = _ag_;
     for(;;){
      caml_call2(f, i, a[1 + i]);
      var _ai_ = i + 1 | 0;
      if(_ah_ === i) break;
      i = _ai_;
     }
    }
    return 0;
   }
   function mapi(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_array_make(l, caml_call2(f, 0, a[1])),
     _ae_ = l - 1 | 0,
     _ad_ = 1;
    if(_ae_ >= 1){
     var i = _ad_;
     for(;;){
      r[1 + i] = caml_call2(f, i, a[1 + i]);
      var _af_ = i + 1 | 0;
      if(_ae_ === i) break;
      i = _af_;
     }
    }
    return r;
   }
   function to_list(a){
    var i$1 = a.length - 2 | 0, i = i$1, res = 0;
    for(;;){
     if(0 > i) return res;
     var res$0 = [0, a[1 + i], res], i$0 = i - 1 | 0;
     i = i$0;
     res = res$0;
    }
   }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var t = param$0[2], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = t;
    }
   }
   function of_list(l){
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     a = caml_array_make(list_length(0, l), hd),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = hd$0;
     var i$0 = i + 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   function fold_left(f, x, a){
    var r = [0, x], _ab_ = a.length - 2 | 0, _aa_ = 0;
    if(_ab_ >= 0){
     var i = _aa_;
     for(;;){
      r[1] = caml_call2(f, r[1], a[1 + i]);
      var _ac_ = i + 1 | 0;
      if(_ab_ === i) break;
      i = _ac_;
     }
    }
    return r[1];
   }
   function fold_left_map(f, acc, input_array){
    var len = input_array.length - 1;
    if(0 === len) return [0, acc, [0]];
    var
     match = caml_call2(f, acc, input_array[1]),
     elt = match[2],
     acc$0 = match[1],
     output_array = caml_array_make(len, elt),
     acc$1 = [0, acc$0],
     ___ = len - 1 | 0,
     _Z_ = 1;
    if(___ >= 1){
     var i = _Z_;
     for(;;){
      var
       match$0 = caml_call2(f, acc$1[1], input_array[1 + i]),
       elt$0 = match$0[2],
       acc$2 = match$0[1];
      acc$1[1] = acc$2;
      output_array[1 + i] = elt$0;
      var _$_ = i + 1 | 0;
      if(___ === i) break;
      i = _$_;
     }
    }
    return [0, acc$1[1], output_array];
   }
   function fold_right(f, a, x){
    var r = [0, x], _X_ = a.length - 2 | 0;
    if(_X_ >= 0){
     var i = _X_;
     for(;;){
      r[1] = caml_call2(f, a[1 + i], r[1]);
      var _Y_ = i - 1 | 0;
      if(0 === i) break;
      i = _Y_;
     }
    }
    return r[1];
   }
   function exists(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, a[1 + i])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, a[1 + i])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return caml_call1(Stdlib[1], cst_Array_for_all2);
    var i = 0;
    for(;;){
     if(i === n1) return 1;
     if(! caml_call2(p, l1[1 + i], l2[1 + i])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function exists2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return caml_call1(Stdlib[1], cst_Array_exists2);
    var i = 0;
    for(;;){
     if(i === n1) return 0;
     if(caml_call2(p, l1[1 + i], l2[1 + i])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function mem(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(0 === runtime.caml_compare(a[1 + i], x)) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function memq(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(x === a[1 + i]) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_opt(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var x = a[1 + i];
     if(caml_call1(p, x)) return [0, x];
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_index(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, a[1 + i])) return [0, i];
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_map(f, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var r = caml_call1(f, a[1 + i]);
     if(r) return r;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_mapi(f, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var r = caml_call2(f, i, a[1 + i]);
     if(r) return r;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function split(x){
    if(runtime.caml_equal(x, [0])) return [0, [0], [0]];
    var
     match = x[1],
     b0 = match[2],
     a0 = match[1],
     n = x.length - 1,
     a = caml_array_make(n, a0),
     b = caml_array_make(n, b0),
     _V_ = n - 1 | 0,
     _U_ = 1;
    if(_V_ >= 1){
     var i = _U_;
     for(;;){
      var match$0 = x[1 + i], bi = match$0[2], ai = match$0[1];
      a[1 + i] = ai;
      b[1 + i] = bi;
      var _W_ = i + 1 | 0;
      if(_V_ === i) break;
      i = _W_;
     }
    }
    return [0, a, b];
   }
   function combine(a, b){
    var na = a.length - 1, nb = b.length - 1;
    if(na !== nb) caml_call1(Stdlib[1], cst_Array_combine);
    if(0 === na) return [0];
    var x = caml_array_make(na, [0, a[1], b[1]]), _S_ = na - 1 | 0, _R_ = 1;
    if(_S_ >= 1){
     var i = _R_;
     for(;;){
      x[1 + i] = [0, a[1 + i], b[1 + i]];
      var _T_ = i + 1 | 0;
      if(_S_ === i) break;
      i = _T_;
     }
    }
    return x;
   }
   var
    Bottom = [248, "Stdlib.Array.Bottom", runtime.caml_fresh_oo_id(0)],
    _a_ = [0, "array.ml", 369, 4],
    _b_ = [0, "]", 0],
    cst_out_of_expected_range_0 = ", out of expected range [0; ",
    cst_returned = "' returned ",
    cst_Array_shuffle_rand = "Array.shuffle: 'rand ";
   function sort(cmp, a){
    function maxson(l, i){
     var i31 = ((i + i | 0) + i | 0) + 1 | 0, x = [0, i31];
     if((i31 + 2 | 0) < l){
      var _K_ = i31 + 1 | 0, _L_ = caml_check_bound(a, _K_)[1 + _K_];
      if(caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _L_) < 0)
       x[1] = i31 + 1 | 0;
      var
       _M_ = i31 + 2 | 0,
       _N_ = caml_check_bound(a, _M_)[1 + _M_],
       _O_ = x[1];
      if(caml_call2(cmp, caml_check_bound(a, _O_)[1 + _O_], _N_) < 0)
       x[1] = i31 + 2 | 0;
      return x[1];
     }
     if((i31 + 1 | 0) < l){
      var _P_ = i31 + 1 | 0, _Q_ = caml_check_bound(a, _P_)[1 + _P_];
      if(0 > caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _Q_))
       return i31 + 1 | 0;
     }
     if(i31 < l) return i31;
     throw caml_maybe_attach_backtrace([0, Bottom, i], 1);
    }
    var l = a.length - 1, _E_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
    if(_E_ >= 0){
     var i$6 = _E_;
     for(;;){
      var e$1 = caml_check_bound(a, i$6)[1 + i$6];
      try{
       var i = i$6;
       for(;;){
        var j = maxson(l, i);
        if(0 >= caml_call2(cmp, caml_check_bound(a, j)[1 + j], e$1)) break;
        var _B_ = caml_check_bound(a, j)[1 + j];
        caml_check_bound(a, i)[1 + i] = _B_;
        i = j;
       }
       caml_check_bound(a, i)[1 + i] = e$1;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
       var i$0 = exn[2];
       caml_check_bound(a, i$0)[1 + i$0] = e$1;
      }
      var _J_ = i$6 - 1 | 0;
      if(0 === i$6) break;
      i$6 = _J_;
     }
    }
    var _F_ = l - 1 | 0;
    if(_F_ >= 2){
     var i$4 = _F_;
     for(;;){
      var e$0 = caml_check_bound(a, i$4)[1 + i$4];
      a[1 + i$4] = caml_check_bound(a, 0)[1];
      var i$5 = 0;
      try{
       var i$1 = i$5;
       for(;;){
        var j$0 = maxson(i$4, i$1), _C_ = caml_check_bound(a, j$0)[1 + j$0];
        caml_check_bound(a, i$1)[1 + i$1] = _C_;
        i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0[1] !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
       var i$2 = exn$0[2];
       a:
       {
        b:
        {
         var i$3 = i$2;
         for(;;){
          var father = (i$3 - 1 | 0) / 3 | 0;
          if(i$3 === father)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
          if
           (0 <= caml_call2(cmp, caml_check_bound(a, father)[1 + father], e$0))
           break;
          var _D_ = caml_check_bound(a, father)[1 + father];
          caml_check_bound(a, i$3)[1 + i$3] = _D_;
          if(0 >= father) break b;
          i$3 = father;
         }
         caml_check_bound(a, i$3)[1 + i$3] = e$0;
         break a;
        }
        caml_check_bound(a, 0)[1] = e$0;
       }
       var _I_ = i$4 - 1 | 0;
       if(2 === i$4) break;
       i$4 = _I_;
      }
     }
    }
    var _G_ = 1 < l ? 1 : 0;
    if(_G_){
     var e = caml_check_bound(a, 1)[2];
     a[2] = caml_check_bound(a, 0)[1];
     a[1] = e;
     var _H_ = 0;
    }
    else
     var _H_ = _G_;
    return _H_;
   }
   function stable_sort(cmp, a){
    function merge(src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
     var
      src1r = src1ofs + src1len | 0,
      src2r = src2ofs + src2len | 0,
      s2$1 = caml_check_bound(src2, src2ofs)[1 + src2ofs],
      s1$1 = caml_check_bound(a, src1ofs)[1 + src1ofs],
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
     for(;;)
      if(0 < caml_call2(cmp, s1, s2)){
       caml_check_bound(dst, d)[1 + d] = s2;
       var i2$0 = i2 + 1 | 0;
       if(i2$0 >= src2r) return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
       var d$0 = d + 1 | 0, s2$0 = caml_check_bound(src2, i2$0)[1 + i2$0];
       i2 = i2$0;
       s2 = s2$0;
       d = d$0;
      }
      else{
       caml_check_bound(dst, d)[1 + d] = s1;
       var i1$0 = i1 + 1 | 0;
       if(i1$0 >= src1r)
        return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
       var d$1 = d + 1 | 0, s1$0 = caml_check_bound(a, i1$0)[1 + i1$0];
       i1 = i1$0;
       s1 = s1$0;
       d = d$1;
      }
    }
    function isortto(srcofs, dst, dstofs, len){
     var _t_ = len - 1 | 0, _s_ = 0;
     if(_t_ >= 0){
      var i = _s_;
      for(;;){
       var
        _u_ = srcofs + i | 0,
        e = caml_check_bound(a, _u_)[1 + _u_],
        j = [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
        if(dstofs > j[1]) break;
        var _v_ = j[1];
        if(0 >= caml_call2(cmp, caml_check_bound(dst, _v_)[1 + _v_], e))
         break;
        var
         _w_ = j[1],
         _x_ = caml_check_bound(dst, _w_)[1 + _w_],
         _y_ = j[1] + 1 | 0;
        caml_check_bound(dst, _y_)[1 + _y_] = _x_;
        j[1]--;
       }
       var _z_ = j[1] + 1 | 0;
       caml_check_bound(dst, _z_)[1 + _z_] = e;
       var _A_ = i + 1 | 0;
       if(_t_ === i) break;
       i = _A_;
      }
     }
     return 0;
    }
    function sortto(srcofs, dst, dstofs, len){
     if(len <= 5) return isortto(srcofs, dst, dstofs, len);
     var l1 = len / 2 | 0, l2 = len - l1 | 0;
     sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
     sortto(srcofs, a, srcofs + l2 | 0, l1);
     return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
    }
    var l = a.length - 1;
    if(l <= 5) return isortto(0, a, 0, l);
    var
     l1 = l / 2 | 0,
     l2 = l - l1 | 0,
     t = caml_array_make(l2, caml_check_bound(a, 0)[1]);
    sortto(l1, t, 0, l2);
    sortto(0, a, l2, l1);
    return merge(l2, l1, t, 0, l2, a, 0);
   }
   function shuffle(rand, a){
    var _o_ = a.length - 2 | 0;
    if(_o_ >= 1){
     var i = _o_;
     for(;;){
      var
       j = caml_call1(rand, i + 1 | 0),
       _p_ = 0 <= j ? 1 : 0,
       _q_ = _p_ ? j <= i ? 1 : 0 : _p_;
      if(1 - _q_){
       var
        int$0 = Stdlib[33],
        _k_ = [0, cst_out_of_expected_range_0, [0, caml_call1(int$0, i), _b_]],
        _l_ = [0, cst_returned, [0, caml_call1(int$0, j), _k_]],
        _m_ =
          [0, cst_Array_shuffle_rand, [0, caml_call1(int$0, i + 1 | 0), _l_]],
        _n_ = caml_call2(Stdlib_String[7], cst, _m_);
       caml_call1(Stdlib[1], _n_);
      }
      var v = a[1 + i];
      a[1 + i] = a[1 + j];
      a[1 + j] = v;
      var _r_ = i - 1 | 0;
      if(1 === i) break;
      i = _r_;
     }
    }
    return 0;
   }
   function to_seq(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[1 + i], _i_ = i + 1 | 0;
     return [0, x, function(_j_){return aux(_i_, _j_);}];
    }
    var _g_ = 0;
    return function(_h_){return aux(_g_, _h_);};
   }
   function to_seqi(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[1 + i], _e_ = i + 1 | 0;
     return [0, [0, i, x], function(_f_){return aux(_e_, _f_);}];
    }
    var _c_ = 0;
    return function(_d_){return aux(_c_, _d_);};
   }
   function of_seq(i$2){
    var
     l =
       caml_call3
        (Stdlib_Seq[5], function(acc, x){return [0, x, acc];}, 0, i$2);
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     len = list_length(0, l),
     a = caml_array_make(len, hd),
     i$1 = len - 2 | 0,
     i = i$1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = hd$0;
     var i$0 = i - 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   var
    Stdlib_Array =
      [0,
       init,
       make_matrix,
       init_matrix,
       append,
       runtime.caml_array_concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       map_inplace,
       mapi,
       mapi_inplace,
       fold_left,
       fold_left_map,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find_opt,
       find_index,
       find_map,
       find_mapi,
       split,
       combine,
       sort,
       stable_sort,
       stable_sort,
       shuffle,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
   runtime.caml_register_global(22, Stdlib_Array, "Stdlib__Array");
   return;
  }
  (globalThis));

//# 7412 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_hash = runtime.caml_hash,
    caml_int_compare = runtime.caml_int_compare,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return caml_greaterequal(n, 0) ? n : - n | 0;}
   function lognot(n){return n ^ -1;}
   var
    _a_ = Stdlib_Sys[9],
    _b_ = [0, "int32.ml", 69, 6],
    minus_one = -1,
    min_int = -2147483648,
    max_int = 2147483647;
   if(32 === _a_)
    var
     max_int$0 = Stdlib[19],
     unsigned_to_int =
       function(n){
        if(caml_greaterequal(n, 0) && caml_lessequal(n, max_int$0))
         return [0, n];
        return 0;
       };
   else{
    if(64 !== _a_)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var unsigned_to_int = function(n){return [0, n & -1];};
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var _d_ = [0, runtime.caml_int_of_string(s)]; return _d_;}
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
   }
   var compare = caml_int_compare, equal = runtime.caml_equal;
   function unsigned_compare(n, m){
    var y = m + 2147483648 | 0, x = n + 2147483648 | 0;
    return caml_int_compare(x, y);
   }
   function unsigned_lt(n, m){
    return caml_lessthan(n + 2147483648 | 0, m + 2147483648 | 0);
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(caml_lessthan(d, 0)) return unsigned_lt(n, d) ? zero : one;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return unsigned_lt(r, d) ? q : q + 1 | 0;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Int32 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(15, Stdlib_Int32, "Stdlib__Int32");
   return;
  }
  (globalThis));

//# 7515 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_hash = runtime.caml_hash,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    zero = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    one = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    minus_one = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    min_int = runtime.caml_int64_create_lo_mi_hi(0, 0, 32768),
    max_int = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Stdlib = global_data.Stdlib,
    _b_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535);
   function succ(n){return caml_int64_add(n, _a_);}
   function pred(n){return caml_int64_sub(n, _b_);}
   function abs(n){
    return caml_greaterequal(n, _c_) ? n : runtime.caml_int64_neg(n);
   }
   function lognot(n){return runtime.caml_int64_xor(n, _d_);}
   var
    max_int$0 = runtime.caml_int64_of_int32(Stdlib[19]),
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0);
   function unsigned_to_int(n){
    if(caml_greaterequal(n, _e_) && caml_lessequal(n, max_int$0))
     return [0, runtime.caml_int64_to_int32(n)];
    return 0;
   }
   function to_string(n){return runtime.caml_int64_format("%d", n);}
   function of_string_opt(s){
    try{var _g_ = [0, runtime.caml_int64_of_string(s)]; return _g_;}
    catch(_h_){
     var _f_ = caml_wrap_exception(_h_);
     if(_f_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_f_, 0);
    }
   }
   function compare(x, y){return caml_int64_compare(x, y);}
   var equal = runtime.caml_equal;
   function unsigned_compare(n, m){
    var y = caml_int64_sub(m, min_int), x = caml_int64_sub(n, min_int);
    return caml_int64_compare(x, y);
   }
   function unsigned_lt(n, m){
    return caml_lessthan
            (caml_int64_sub(n, min_int), caml_int64_sub(m, min_int));
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(caml_lessthan(d, zero)) return unsigned_lt(n, d) ? zero : one;
    var
     q =
       runtime.caml_int64_shift_left
        (runtime.caml_int64_div
          (runtime.caml_int64_shift_right_unsigned(n, 1), d),
         1),
     r = caml_int64_sub(n, caml_int64_mul(q, d));
    return unsigned_lt(r, d) ? q : caml_int64_add(q, _a_);
   }
   function unsigned_rem(n, d){
    return caml_int64_sub(n, caml_int64_mul(unsigned_div(n, d), d));
   }
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Int64 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(12, Stdlib_Int64, "Stdlib__Int64");
   return;
  }
  (globalThis));

//# 7623 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_hash = runtime.caml_hash,
    caml_int_compare = runtime.caml_int_compare,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return caml_greaterequal(n, 0) ? n : - n | 0;}
   var
    size = Stdlib_Sys[9],
    min_int = 1 << (size - 1 | 0),
    max_int = min_int - 1 | 0;
   function lognot(n){return n ^ -1;}
   var max_int$0 = Stdlib[19];
   function unsigned_to_int(n){
    if(caml_greaterequal(n, 0) && caml_lessequal(n, max_int$0)) return [0, n];
    return 0;
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var _b_ = [0, runtime.caml_int_of_string(s)]; return _b_;}
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   var compare = caml_int_compare;
   function equal(x, y){return 0 === caml_int_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = m - min_int | 0, x = n - min_int | 0;
    return caml_int_compare(x, y);
   }
   function unsigned_lt(n, m){
    return caml_lessthan(n - min_int | 0, m - min_int | 0);
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(caml_lessthan(d, 0)) return unsigned_lt(n, d) ? zero : one;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return unsigned_lt(r, d) ? q : q + 1 | 0;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Nativeint =
      [0,
       zero,
       one,
       -1,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       size,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(13, Stdlib_Nativeint, "Stdlib__Nativeint");
   return;
  }
  (globalThis));

//# 9004 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Map_bal$3 = "Map.bal",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    cst_Map_bal = cst_Map_bal$3,
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    cst_Map_bal$2 = cst_Map_bal$3,
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    _a_ = [0, 0, 0, 0],
    _b_ = [0, "map.ml", 408, 10],
    _c_ = [0, 0, 0],
    Stdlib_Map =
      [0,
       function(Ord){
        function height(param){
         if(! param) return 0;
         var h = param[5];
         return h;
        }
        function create(l, x, d, r){
         var
          hl = height(l),
          hr = height(r),
          _K_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
         return [0, l, x, d, r, _K_];
        }
        function singleton(x, d){return [0, 0, x, d, 0, 1];}
        function bal(l, x, d, r){
         if(l) var h = l[5], hl = h; else var hl = 0;
         if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
         if((hr + 2 | 0) < hl){
          if(! l) return caml_call1(Stdlib[1], cst_Map_bal$0);
          var lr = l[4], ld = l[3], lv = l[2], ll = l[1], _F_ = height(lr);
          if(_F_ <= height(ll))
           return create(ll, lv, ld, create(lr, x, d, r));
          if(! lr) return caml_call1(Stdlib[1], cst_Map_bal);
          var
           lrr = lr[4],
           lrd = lr[3],
           lrv = lr[2],
           lrl = lr[1],
           _G_ = create(lrr, x, d, r);
          return create(create(ll, lv, ld, lrl), lrv, lrd, _G_);
         }
         if((hl + 2 | 0) >= hr){
          var _J_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          return [0, l, x, d, r, _J_];
         }
         if(! r) return caml_call1(Stdlib[1], cst_Map_bal$2);
         var rr = r[4], rd = r[3], rv = r[2], rl = r[1], _H_ = height(rl);
         if(_H_ <= height(rr)) return create(create(l, x, d, rl), rv, rd, rr);
         if(! rl) return caml_call1(Stdlib[1], cst_Map_bal$1);
         var
          rlr = rl[4],
          rld = rl[3],
          rlv = rl[2],
          rll = rl[1],
          _I_ = create(rlr, rv, rd, rr);
         return create(create(l, x, d, rll), rlv, rld, _I_);
        }
        var empty = 0;
        function is_empty(param){return param ? 0 : 1;}
        function add(x, data, m){
         if(! m) return [0, 0, x, data, 0, 1];
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return d === data ? m : [0, l, x, data, r, h];
         if(0 <= c){
          var rr = add(x, data, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = add(x, data, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function find(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return d;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function find_first(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           for(;;){
            if(! param) return [0, v0, d0];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
        }
        function find_first_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           for(;;){
            if(! param) return [0, [0, v0, d0]];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
        }
        function find_last(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           for(;;){
            if(! param) return [0, v0, d0];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
        }
        function find_last_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           for(;;){
            if(! param) return [0, [0, v0, d0]];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
        }
        function find_opt(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return [0, d];
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function mem(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v),
           _E_ = 0 === c ? 1 : 0;
          if(_E_) return _E_;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function min_binding(param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var l = param$0[1];
          if(! l){var d = param$0[3], v = param$0[2]; return [0, v, d];}
          param$0 = l;
         }
        }
        function min_binding_opt(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var l = param$0[1];
          if(! l){var d = param$0[3], v = param$0[2]; return [0, [0, v, d]];}
          param$0 = l;
         }
        }
        function max_binding(param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
           return [0, v, d];
          }
          var r = param$0[4];
          param$0 = r;
         }
        }
        function max_binding_opt(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
           return [0, [0, v, d]];
          }
          var r = param$0[4];
          param$0 = r;
         }
        }
        function remove_min_binding(param){
         if(! param) return caml_call1(Stdlib[1], cst_Map_remove_min_elt);
         var l = param[1];
         if(l){
          var r = param[4], d = param[3], v = param[2];
          return bal(remove_min_binding(l), v, d, r);
         }
         var r$0 = param[4];
         return r$0;
        }
        function _d_(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return bal(t1, x, d, remove_min_binding(t2));
        }
        function remove(x, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return _d_(l, r);
         if(0 <= c){
          var rr = remove(x, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = remove(x, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function update(x, f, m){
         if(! m){
          var match$0 = caml_call1(f, 0);
          if(! match$0) return 0;
          var data$0 = match$0[1];
          return [0, 0, x, data$0, 0, 1];
         }
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c){
          var match = caml_call1(f, [0, d]);
          if(! match) return _d_(l, r);
          var data = match[1];
          return d === data ? m : [0, l, x, data, r, h];
         }
         if(0 <= c){
          var rr = update(x, f, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = update(x, f, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function add_to_list(x, data, m){
         function add(param){
          if(! param) return [0, [0, data, 0]];
          var l = param[1];
          return [0, [0, data, l]];
         }
         return update(x, add, m);
        }
        function iter(f, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var r = param$0[4], d = param$0[3], v = param$0[2], l = param$0[1];
          iter(f, l);
          caml_call2(f, v, d);
          param$0 = r;
         }
        }
        function map(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = map(f, l),
          d$0 = caml_call1(f, d),
          r$0 = map(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function mapi(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = mapi(f, l),
          d$0 = caml_call2(f, v, d),
          r$0 = mapi(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function fold(f, m, accu){
         var m$0 = m, accu$0 = accu;
         for(;;){
          if(! m$0) return accu$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           accu$1 = caml_call3(f, v, d, fold(f, l, accu$0));
          m$0 = r;
          accu$0 = accu$1;
         }
        }
        function for_all(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 1;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _B_ = caml_call2(p, v, d);
          if(_B_){
           var _C_ = for_all(p, l);
           if(_C_){param$0 = r; continue;}
           var _D_ = _C_;
          }
          else
           var _D_ = _B_;
          return _D_;
         }
        }
        function exists(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _y_ = caml_call2(p, v, d);
          if(_y_)
           var _z_ = _y_;
          else{
           var _A_ = exists(p, l);
           if(! _A_){param$0 = r; continue;}
           var _z_ = _A_;
          }
          return _z_;
         }
        }
        function add_min_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(add_min_binding(k, x, l), v, d, r);
        }
        function add_max_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(l, v, d, add_max_binding(k, x, r));
        }
        function join(l, v, d, r){
         if(! l) return add_min_binding(v, d, r);
         if(! r) return add_max_binding(v, d, l);
         var
          rh = r[5],
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[5],
          lr = l[4],
          ld = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ? bal(ll, lv, ld, join(lr, v, d, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ? bal(join(l, v, d, rl), rv, rd, rr)
                   : create(l, v, d, r);
        }
        function concat(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return join(t1, x, d, remove_min_binding(t2));
        }
        function concat_or_join(t1, v, d, t2){
         if(! d) return concat(t1, t2);
         var d$0 = d[1];
         return join(t1, v, d$0, t2);
        }
        function split(x, param){
         if(! param) return _a_;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return [0, l, [0, d], r];
         if(0 <= c){
          var
           match = split(x, r),
           rr = match[3],
           pres = match[2],
           lr = match[1];
          return [0, join(l, v, d, lr), pres, rr];
         }
         var
          match$0 = split(x, l),
          rl = match$0[3],
          pres$0 = match$0[2],
          ll = match$0[1];
         return [0, ll, pres$0, join(rl, v, d, r)];
        }
        function merge(f, s1, s2){
         if(s1){
          var h1 = s1[5], r1 = s1[4], d1 = s1[3], v1 = s1[2], l1 = s1[1];
          if(height(s2) <= h1){
           var
            match = split(v1, s2),
            r2 = match[3],
            d2 = match[2],
            l2 = match[1],
            _u_ = merge(f, r1, r2),
            _v_ = caml_call3(f, v1, [0, d1], d2);
           return concat_or_join(merge(f, l1, l2), v1, _v_, _u_);
          }
         }
         else if(! s2) return 0;
         if(! s2)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
         var
          r2$0 = s2[4],
          d2$0 = s2[3],
          v2 = s2[2],
          l2$0 = s2[1],
          match$0 = split(v2, s1),
          r1$0 = match$0[3],
          d1$0 = match$0[2],
          l1$0 = match$0[1],
          _w_ = merge(f, r1$0, r2$0),
          _x_ = caml_call3(f, v2, d1$0, [0, d2$0]);
         return concat_or_join(merge(f, l1$0, l2$0), v2, _x_, _w_);
        }
        function union(f, s1, s2){
         if(s1){
          if(s2){
           var
            h2 = s2[5],
            r2 = s2[4],
            d2 = s2[3],
            v2 = s2[2],
            l2 = s2[1],
            h1 = s1[5],
            r1 = s1[4],
            d1 = s1[3],
            v1 = s1[2],
            l1 = s1[1];
           if(h2 <= h1){
            var
             match = split(v1, s2),
             r2$0 = match[3],
             d2$0 = match[2],
             l2$0 = match[1],
             l = union(f, l1, l2$0),
             r = union(f, r1, r2$0);
            if(! d2$0) return join(l, v1, d1, r);
            var d2$1 = d2$0[1];
            return concat_or_join(l, v1, caml_call3(f, v1, d1, d2$1), r);
           }
           var
            match$0 = split(v2, s1),
            r1$0 = match$0[3],
            d1$0 = match$0[2],
            l1$0 = match$0[1],
            l$0 = union(f, l1$0, l2),
            r$0 = union(f, r1$0, r2);
           if(! d1$0) return join(l$0, v2, d2, r$0);
           var d1$1 = d1$0[1];
           return concat_or_join(l$0, v2, caml_call3(f, v2, d1$1, d2), r$0);
          }
          var s = s1;
         }
         else
          var s = s2;
         return s;
        }
        function filter(p, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          l$0 = filter(p, l),
          pvd = caml_call2(p, v, d),
          r$0 = filter(p, r);
         if(! pvd) return concat(l$0, r$0);
         if(l === l$0 && r === r$0) return m;
         return join(l$0, v, d, r$0);
        }
        function filter_map(f, param){
         if(! param) return 0;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = filter_map(f, l),
          fvd = caml_call2(f, v, d),
          r$0 = filter_map(f, r);
         if(! fvd) return concat(l$0, r$0);
         var d$0 = fvd[1];
         return join(l$0, v, d$0, r$0);
        }
        function partition(p, param){
         if(! param) return _c_;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          match = partition(p, l),
          lf = match[2],
          lt = match[1],
          pvd = caml_call2(p, v, d),
          match$0 = partition(p, r),
          rf = match$0[2],
          rt = match$0[1];
         if(pvd){
          var _s_ = concat(lf, rf);
          return [0, join(lt, v, d, rt), _s_];
         }
         var _t_ = join(lf, v, d, rf);
         return [0, concat(lt, rt), _t_];
        }
        function cons_enum(m, e){
         var m$0 = m, e$0 = e;
         for(;;){
          if(! m$0) return e$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           e$1 = [0, v, d, r, e$0];
          m$0 = l;
          e$0 = e$1;
         }
        }
        function compare(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? -1 : 0;
          if(! e2) return 1;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           c = caml_call2(Ord[1], v1, v2);
          if(0 !== c) return c;
          var c$0 = caml_call2(cmp, d1, d2);
          if(0 !== c$0) return c$0;
          var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
          e1 = e1$1;
          e2 = e2$1;
         }
        }
        function equal(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? 0 : 1;
          if(! e2) return 0;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           _p_ = 0 === caml_call2(Ord[1], v1, v2) ? 1 : 0;
          if(_p_){
           var _q_ = caml_call2(cmp, d1, d2);
           if(_q_){
            var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
            e1 = e1$1;
            e2 = e2$1;
            continue;
           }
           var _r_ = _q_;
          }
          else
           var _r_ = _p_;
          return _r_;
         }
        }
        function cardinal(param){
         if(! param) return 0;
         var r = param[4], l = param[1], _o_ = cardinal(r);
         return (cardinal(l) + 1 | 0) + _o_ | 0;
        }
        function bindings_aux(accu, param){
         var accu$0 = accu, param$0 = param;
         for(;;){
          if(! param$0) return accu$0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           accu$1 = [0, [0, v, d], bindings_aux(accu$0, r)];
          accu$0 = accu$1;
          param$0 = l;
         }
        }
        function bindings(s){return bindings_aux(0, s);}
        function of_list(bs){
         return caml_call3
                 (Stdlib_List[26],
                  function(m, param){
                   var v = param[2], k = param[1];
                   return add(k, v, m);
                  },
                  empty,
                  bs);
        }
        function add_seq(i, m){
         return caml_call3
                 (Stdlib_Seq[5],
                  function(m, param){
                   var v = param[2], k = param[1];
                   return add(k, v, m);
                  },
                  m,
                  i);
        }
        function of_seq(i){return add_seq(i, empty);}
        function seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _m_ = cons_enum(t, rest);
         return [0, [0, k, v], function(_n_){return seq_of_enum(_m_, _n_);}];
        }
        function to_seq(m){
         var _k_ = cons_enum(m, 0);
         return function(_l_){return seq_of_enum(_k_, _l_);};
        }
        function snoc_enum(s, e){
         var s$0 = s, e$0 = e;
         for(;;){
          if(! s$0) return e$0;
          var
           r = s$0[4],
           d = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 = [0, v, d, l, e$0];
          s$0 = r;
          e$0 = e$1;
         }
        }
        function rev_seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _i_ = snoc_enum(t, rest);
         return [0,
                 [0, k, v],
                 function(_j_){return rev_seq_of_enum(_i_, _j_);}];
        }
        function to_rev_seq(c){
         var _g_ = snoc_enum(c, 0);
         return function(_h_){return rev_seq_of_enum(_g_, _h_);};
        }
        function to_seq_from(low, m){
         a:
         {
          b:
          {
           var m$0 = m, c = 0;
           for(;;){
            if(! m$0) break;
            var
             r = m$0[4],
             d = m$0[3],
             v = m$0[2],
             l = m$0[1],
             n = caml_call2(Ord[1], v, low);
            if(0 === n) break b;
            if(0 <= n){
             var c$0 = [0, v, d, r, c];
             m$0 = l;
             c = c$0;
            }
            else
             m$0 = r;
           }
           var _e_ = c;
           break a;
          }
          var _e_ = [0, v, d, r, c];
         }
         return function(_f_){return seq_of_enum(_e_, _f_);};
        }
        return [0,
                empty,
                add,
                add_to_list,
                update,
                singleton,
                remove,
                merge,
                union,
                cardinal,
                bindings,
                min_binding,
                min_binding_opt,
                max_binding,
                max_binding_opt,
                min_binding,
                min_binding_opt,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                iter,
                fold,
                map,
                mapi,
                filter,
                filter_map,
                partition,
                split,
                is_empty,
                mem,
                equal,
                compare,
                for_all,
                exists,
                bindings,
                of_list,
                to_seq,
                to_rev_seq,
                to_seq_from,
                add_seq,
                of_seq];
       }];
   runtime.caml_register_global(12, Stdlib_Map, "Stdlib__Map");
   return;
  }
  (globalThis));

//# 9892 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    Empty = [248, "Stdlib.Stack.Empty", runtime.caml_fresh_oo_id(0)];
   function create(param){return [0, 0, 0];}
   function clear(s){s[1] = 0; s[2] = 0; return 0;}
   function copy(s){return [0, s[1], s[2]];}
   function push(x, s){s[1] = [0, x, s[1]]; s[2] = s[2] + 1 | 0; return 0;}
   function pop(s){
    var match = s[1];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return hd;
   }
   function pop_opt(s){
    var match = s[1];
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return [0, hd];
   }
   function drop(s){
    var match = s[1];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var tl = match[2];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return 0;
   }
   function top(s){
    var match = s[1];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var hd = match[1];
    return hd;
   }
   function top_opt(s){
    var match = s[1];
    if(! match) return 0;
    var hd = match[1];
    return [0, hd];
   }
   function is_empty(s){return 0 === s[1] ? 1 : 0;}
   function length(s){return s[2];}
   function iter(f, s){return caml_call2(Stdlib_List[18], f, s[1]);}
   function fold(f, acc, s){return caml_call3(Stdlib_List[26], f, acc, s[1]);}
   function to_seq(s){return caml_call1(Stdlib_List[68], s[1]);}
   function add_seq(q, i){
    return caml_call2(Stdlib_Seq[4], function(x){return push(x, q);}, i);
   }
   function of_seq(g){var s = create(0); add_seq(s, g); return s;}
   var
    Stdlib_Stack =
      [0,
       Empty,
       create,
       push,
       pop,
       pop_opt,
       drop,
       top,
       top_opt,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(3, Stdlib_Stack, "Stdlib__Stack");
   return;
  }
  (globalThis));

//# 9994 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Empty = [248, "Stdlib.Queue.Empty", runtime.caml_fresh_oo_id(0)];
   function create(param){return [0, 0, 0, 0];}
   function clear(q){q[1] = 0; q[2] = 0; q[3] = 0; return 0;}
   function add(x, q){
    var cell = [0, x, 0], match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
   }
   function peek(q){
    var match = q[2];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var content = match[1];
    return content;
   }
   function peek_opt(q){
    var match = q[2];
    if(! match) return 0;
    var content = match[1];
    return [0, content];
   }
   function take(q){
    var _g_ = q[2];
    if(! _g_) throw caml_maybe_attach_backtrace(Empty, 1);
    var content = _g_[1];
    if(_g_[2]){
     var next = _g_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return content;
    }
    clear(q);
    return content;
   }
   function take_opt(q){
    var _f_ = q[2];
    if(! _f_) return 0;
    var content = _f_[1];
    if(_f_[2]){
     var next = _f_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return [0, content];
    }
    clear(q);
    return [0, content];
   }
   function drop(q){
    var _e_ = q[2];
    if(! _e_) throw caml_maybe_attach_backtrace(Empty, 1);
    if(! _e_[2]) return clear(q);
    var next = _e_[2];
    q[1] = q[1] - 1 | 0;
    q[2] = next;
    return 0;
   }
   function copy(q){
    var cell$0 = q[2], q_res = [0, q[1], 0, 0], prev = 0, cell = cell$0;
    for(;;){
     if(! cell){q_res[3] = prev; return q_res;}
     var content = cell[1], next = cell[2], prev$0 = [0, content, 0];
     if(prev) prev[2] = prev$0; else q_res[2] = prev$0;
     prev = prev$0;
     cell = next;
    }
   }
   function is_empty(q){return 0 === q[1] ? 1 : 0;}
   function length(q){return q[1];}
   function iter(f, q){
    var cell$0 = q[2], cell = cell$0;
    for(;;){
     if(! cell) return 0;
     var content = cell[1], next = cell[2];
     caml_call1(f, content);
     cell = next;
    }
   }
   function fold(f, accu$1, q){
    var cell$0 = q[2], accu = accu$1, cell = cell$0;
    for(;;){
     if(! cell) return accu;
     var
      content = cell[1],
      next = cell[2],
      accu$0 = caml_call2(f, accu, content);
     accu = accu$0;
     cell = next;
    }
   }
   function transfer(q1, q2){
    var _d_ = 0 < q1[1] ? 1 : 0;
    if(! _d_) return _d_;
    var match = q2[3];
    return match
            ? (q2
               [1]
              = q2[1] + q1[1] | 0,
              match[2] = q1[2],
              q2[3] = q1[3],
              clear(q1))
            : (q2[1] = q1[1], q2[2] = q1[2], q2[3] = q1[3], clear(q1));
   }
   function to_seq(q){
    function aux(c, param){
     if(! c) return 0;
     var x = c[1], next = c[2];
     return [0, x, function(_c_){return aux(next, _c_);}];
    }
    var _a_ = q[2];
    return function(_b_){return aux(_a_, _b_);};
   }
   function add_seq(q, i){
    return caml_call2(Stdlib_Seq[4], function(x){return add(x, q);}, i);
   }
   function of_seq(g){var q = create(0); add_seq(q, g); return q;}
   var
    Stdlib_Queue =
      [0,
       Empty,
       create,
       add,
       add,
       take,
       take_opt,
       take,
       peek,
       peek_opt,
       peek,
       drop,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       transfer,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(2, Stdlib_Queue, "Stdlib__Queue");
   return;
  }
  (globalThis));

//# 10159 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    cst_Buffer_sub = "Buffer.sub",
    cst_Buffer_blit = "Buffer.blit",
    cst_Buffer_nth = "Buffer.nth",
    cst_Buffer_add_cannot_grow_buf = "Buffer.add: cannot grow buffer",
    dummy = 0;
   function create(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = Stdlib_Sys[12] < n$0 ? Stdlib_Sys[12] : n$0,
     s = caml_create_bytes(n$1);
    return [0, [0, s, n$1], 0, s];
   }
   function contents(b){return caml_call3(Stdlib_Bytes[8], b[1][1], 0, b[2]);}
   function to_bytes(b){return caml_call3(Stdlib_Bytes[7], b[1][1], 0, b[2]);}
   function sub(b, ofs, len){
    if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
     return caml_call3(Stdlib_Bytes[8], b[1][1], ofs, len);
    return caml_call1(Stdlib[1], cst_Buffer_sub);
   }
   function blit(src, srcoff, dst, dstoff, len){
    if
     (0 <= len
      &&
       0 <= srcoff
       &&
        (src[2] - len | 0) >= srcoff
        && 0 <= dstoff && (caml_ml_bytes_length(dst) - len | 0) >= dstoff)
     return caml_call5(Stdlib_Bytes[11], src[1][1], srcoff, dst, dstoff, len);
    return caml_call1(Stdlib[1], cst_Buffer_blit);
   }
   function nth(b, ofs){
    var position = b[2], match = b[1], length = match[2], buffer = match[1];
    if(0 <= ofs && position > ofs && length >= position)
     return runtime.caml_bytes_unsafe_get(buffer, ofs);
    return caml_call1(Stdlib[1], cst_Buffer_nth);
   }
   function length(b){return b[2];}
   function clear(b){b[2] = 0; return 0;}
   function reset(b){
    b[2] = 0;
    var inner = [0, b[3], caml_ml_bytes_length(b[3])];
    b[1] = inner;
    return 0;
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[1][2], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(Stdlib_Sys[12] < new_len[1])
     if((old_pos + more | 0) <= Stdlib_Sys[12])
      new_len[1] = Stdlib_Sys[12];
     else
      caml_call1(Stdlib[2], cst_Buffer_add_cannot_grow_buf);
    var new_buffer = caml_create_bytes(new_len[1]);
    caml_call5(Stdlib_Bytes[11], b[1][1], 0, new_buffer, 0, b[2]);
    b[1] = [0, new_buffer, new_len[1]];
   }
   function add_char(b, c){
    var pos = b[2], match = b[1], length = match[2], buffer = match[1];
    if(length <= pos){
     resize(b, 1);
     caml_bytes_set(b[1][1], b[2], c);
    }
    else
     caml_bytes_unsafe_set(buffer, pos, c);
    b[2] = pos + 1 | 0;
    return 0;
   }
   var
    uchar_utf_8_byte_length_max = 4,
    uchar_utf_16_byte_length_max = 4,
    cst_Buffer_add_substring = "Buffer.add_substring",
    cst_Buffer_add_subbytes = "Buffer.add_subbytes",
    cst_Buffer_add_channel = "Buffer.add_channel",
    _a_ = [0, "buffer.ml", 222, 9],
    cst_Buffer_truncate = "Buffer.truncate";
   function add_utf_8_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[1][2] <= pos) resize(b, uchar_utf_8_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[51], b[1][1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_8_byte_length_max);
    }
   }
   function add_utf_16be_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[1][2] <= pos) resize(b, uchar_utf_16_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[54], b[1][1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_16_byte_length_max);
    }
   }
   function add_utf_16le_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[1][2] <= pos) resize(b, uchar_utf_16_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[57], b[1][1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_16_byte_length_max);
    }
   }
   function add_substring(b, s, offset, len){
    var _v_ = offset < 0 ? 1 : 0;
    if(_v_)
     var _w_ = _v_;
    else
     var
      _x_ = len < 0 ? 1 : 0,
      _w_ = _x_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_w_) caml_call1(Stdlib[1], cst_Buffer_add_substring);
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + len | 0;
    if(length < new_position){
     resize(b, len);
     caml_call5(Stdlib_Bytes[12], s, offset, b[1][1], b[2], len);
    }
    else
     runtime.caml_blit_string(s, offset, buffer, position, len);
    b[2] = new_position;
    return 0;
   }
   function add_subbytes(b, bytes, offset, len){
    var _s_ = offset < 0 ? 1 : 0;
    if(_s_)
     var _t_ = _s_;
    else
     var
      _u_ = len < 0 ? 1 : 0,
      _t_ = _u_ || ((caml_ml_bytes_length(bytes) - len | 0) < offset ? 1 : 0);
    if(_t_) caml_call1(Stdlib[1], cst_Buffer_add_subbytes);
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + len | 0;
    if(length < new_position){
     resize(b, len);
     caml_call5(Stdlib_Bytes[11], bytes, offset, b[1][1], b[2], len);
    }
    else
     runtime.caml_blit_bytes(bytes, offset, buffer, position, len);
    b[2] = new_position;
    return 0;
   }
   function add_string(b, s){
    return add_substring(b, s, 0, caml_ml_string_length(s));
   }
   function add_bytes(b, bytes){
    return add_subbytes(b, bytes, 0, caml_ml_bytes_length(bytes));
   }
   function add_buffer(b, bs){return add_subbytes(b, bs[1][1], 0, bs[2]);}
   function add_channel(b, ic, to_read$1){
    var
     _q_ = to_read$1 < 0 ? 1 : 0,
     _r_ = _q_ || (Stdlib_Sys[12] < to_read$1 ? 1 : 0);
    if(_r_) caml_call1(Stdlib[1], cst_Buffer_add_channel);
    if(b[1][2] < (b[2] + to_read$1 | 0)) resize(b, to_read$1);
    var
     ofs$1 = b[2],
     buf = b[1][1],
     already_read = 0,
     ofs = ofs$1,
     to_read = to_read$1;
    for(;;){
     if(0 !== to_read){
      var r = caml_call4(Stdlib[84], ic, buf, ofs, to_read);
      if(0 !== r){
       var
        already_read$0 = already_read + r | 0,
        ofs$0 = ofs + r | 0,
        to_read$0 = to_read - r | 0;
       already_read = already_read$0;
       ofs = ofs$0;
       to_read = to_read$0;
       continue;
      }
     }
     b[2] = b[2] + already_read | 0;
     if(already_read < to_read$1)
      throw caml_maybe_attach_backtrace(Stdlib[12], 1);
     return 0;
    }
   }
   function output_buffer(oc, b){
    return caml_call4(Stdlib[68], oc, b[1][1], 0, b[2]);
   }
   function add_substitute(b, f, s){
    var lim$1 = caml_ml_string_length(s), previous = 32, i$4 = 0;
    for(;;){
     if(i$4 >= lim$1){
      var _o_ = 92 === previous ? 1 : 0;
      return _o_ ? add_char(b, previous) : _o_;
     }
     var previous$0 = caml_string_get(s, i$4);
     if(36 === previous$0)
      if(92 === previous){
       add_char(b, previous$0);
       var i$5 = i$4 + 1 | 0;
       previous = 32;
       i$4 = i$5;
      }
      else{
       var start = i$4 + 1 | 0;
       try{
        if(lim$1 <= start) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
        var opening = caml_string_get(s, start);
        a:
        {
         if(40 !== opening && 123 !== opening){
          var lim$0 = caml_ml_string_length(s);
          b:
          {
           c:
           {
            d:
            {
             var i$2 = start;
             for(;;){
              if(lim$0 <= i$2) break c;
              var match = caml_string_get(s, i$2);
              if(91 <= match){
               if(97 <= match){
                if(123 <= match) break d;
               }
               else if(95 !== match) break d;
              }
              else
               if(58 <= match){
                if(65 > match) break;
               }
               else if(48 > match) break d;
              var i$3 = i$2 + 1 | 0;
              i$2 = i$3;
             }
            }
            var stop$0 = i$2;
            break b;
           }
           var stop$0 = lim$0;
          }
          if(stop$0 === start)
           throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           val =
             [0,
              caml_call3(Stdlib_String[16], s, start, stop$0 - start | 0),
              stop$0];
          break a;
         }
         var new_start = start + 1 | 0, k$2 = 0;
         if(40 === opening)
          var closing = 41;
         else{
          if(123 !== opening)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
          var closing = 125;
         }
         var lim = caml_ml_string_length(s), k = k$2, stop = new_start;
         for(;;){
          if(lim <= stop) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          if(caml_string_get(s, stop) === opening){
           var i = stop + 1 | 0, k$0 = k + 1 | 0;
           k = k$0;
           stop = i;
          }
          else if(caml_string_get(s, stop) === closing){
           if(0 === k) break;
           var i$0 = stop + 1 | 0, k$1 = k - 1 | 0;
           k = k$1;
           stop = i$0;
          }
          else{var i$1 = stop + 1 | 0; stop = i$1;}
         }
         var
          val =
            [0,
             caml_call3
              (Stdlib_String[16], s, new_start, (stop - start | 0) - 1 | 0),
             stop + 1 | 0];
        }
       }
       catch(_p_){
        var _n_ = caml_wrap_exception(_p_);
        if(_n_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_n_, 0);
        add_char(b, 36);
        previous = 32;
        i$4 = start;
        continue;
       }
       var next_i = val[2], ident = val[1];
       add_string(b, caml_call1(f, ident));
       previous = 32;
       i$4 = next_i;
      }
     else{
      if(92 === previous) add_char(b, previous);
      if(92 !== previous$0) add_char(b, previous$0);
      var i$6 = i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$6;
     }
    }
   }
   function truncate(b, len){
    if(0 <= len && b[2] >= len){b[2] = len; return 0;}
    return caml_call1(Stdlib[1], cst_Buffer_truncate);
   }
   function to_seq(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_get(b[1][1], i), _l_ = i + 1 | 0;
     return [0, x, function(_m_){return aux(_l_, _m_);}];
    }
    var _j_ = 0;
    return function(_k_){return aux(_j_, _k_);};
   }
   function to_seqi(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_get(b[1][1], i), _h_ = i + 1 | 0;
     return [0, [0, i, x], function(_i_){return aux(_h_, _i_);}];
    }
    var _f_ = 0;
    return function(_g_){return aux(_f_, _g_);};
   }
   function add_seq(b, seq){
    return caml_call2
            (Stdlib_Seq[4], function(_e_){return add_char(b, _e_);}, seq);
   }
   function of_seq(i){var b = create(32); add_seq(b, i); return b;}
   function add_int8(b, x){
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + 1 | 0;
    if(length < new_position){
     resize(b, 1);
     caml_bytes_set(b[1][1], b[2], x);
    }
    else
     caml_bytes_unsafe_set(buffer, position, x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_ne(b, x){
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + 2 | 0;
    if(length < new_position){
     resize(b, 2);
     caml_bytes_set16(b[1][1], b[2], x);
    }
    else
     caml_bytes_set16(buffer, position, x);
    b[2] = new_position;
    return 0;
   }
   function add_int32_ne(b, x){
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + 4 | 0;
    if(length < new_position){
     resize(b, 4);
     caml_bytes_set32(b[1][1], b[2], x);
    }
    else
     caml_bytes_set32(buffer, position, x);
    b[2] = new_position;
    return 0;
   }
   function add_int64_ne(b, x){
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + 8 | 0;
    if(length < new_position){
     resize(b, 8);
     caml_bytes_set64(b[1][1], b[2], x);
    }
    else
     caml_bytes_set64(buffer, position, x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_le(b, x){
    var _d_ = Stdlib_Sys[11] ? caml_bswap16(x) : x;
    return add_int16_ne(b, _d_);
   }
   function add_int16_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_bswap16(x);
    return add_int16_ne(b, x$0);
   }
   function add_int32_le(b, x){
    var _c_ = Stdlib_Sys[11] ? caml_int32_bswap(x) : x;
    return add_int32_ne(b, _c_);
   }
   function add_int32_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_int32_bswap(x);
    return add_int32_ne(b, x$0);
   }
   function add_int64_le(b, x){
    var _b_ = Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
    return add_int64_ne(b, _b_);
   }
   function add_int64_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_int64_bswap(x);
    return add_int64_ne(b, x$0);
   }
   var
    Stdlib_Buffer =
      [0,
       create,
       contents,
       to_bytes,
       sub,
       blit,
       nth,
       length,
       clear,
       reset,
       output_buffer,
       truncate,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       to_seq,
       to_seqi,
       add_seq,
       of_seq,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
   runtime.caml_register_global(15, Stdlib_Buffer, "Stdlib__Buffer");
   return;
  }
  (globalThis));

//# 10688 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_mutex_lock = runtime.caml_ml_mutex_lock,
    caml_ml_mutex_unlock = runtime.caml_ml_mutex_unlock,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function protect(m, f){
    caml_ml_mutex_lock(m);
    try{var x = caml_call1(f, 0);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_ml_mutex_unlock(m);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    caml_ml_mutex_unlock(m);
    return x;
   }
   var
    Stdlib_Mutex =
      [0,
       runtime.caml_ml_mutex_new,
       caml_ml_mutex_lock,
       runtime.caml_ml_mutex_try_lock,
       caml_ml_mutex_unlock,
       protect];
   runtime.caml_register_global(0, Stdlib_Mutex, "Stdlib__Mutex");
   return;
  }
  (globalThis));

//# 10726 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Stdlib_Condition =
      [0,
       runtime.caml_ml_condition_new,
       runtime.caml_ml_condition_wait,
       runtime.caml_ml_condition_signal,
       runtime.caml_ml_condition_broadcast];
   runtime.caml_register_global(0, Stdlib_Condition, "Stdlib__Condition");
   return;
  }
  (globalThis));

//# 10834 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_domain_dls_get = runtime.caml_domain_dls_get,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_domain_id = runtime.caml_ml_domain_id,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Condition = global_data.Stdlib__Condition,
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure;
   function cpu_relax(param){return runtime.caml_ml_domain_cpu_relax(0);}
   var none = [0, 0];
   function create_dls(param){
    var st = caml_array_make(8, none);
    runtime.caml_domain_dls_set(st);
   }
   create_dls(0);
   var
    key_counter = caml_call1(Stdlib_Atomic[1], 0),
    parent_keys = caml_call1(Stdlib_Atomic[1], 0),
    _a_ = [0, "domain.ml", 184, 13];
   function new_key(split_from_parent, init_orphan){
    var
     idx = caml_call2(Stdlib_Atomic[7], key_counter, 1),
     k = [0, idx, init_orphan];
    if(split_from_parent){
     var split = split_from_parent[1], ki = [0, k, split];
     for(;;){
      var l = caml_call1(Stdlib_Atomic[3], parent_keys);
      if(! (1 - caml_call3(Stdlib_Atomic[6], parent_keys, l, [0, ki, l])))
       break;
     }
    }
    return k;
   }
   function maybe_grow(idx){
    for(;;){
     var st = caml_domain_dls_get(0), sz = st.length - 1;
     if(idx < sz) return st;
     var new_sz = sz;
     for(;;){if(idx < new_sz) break; var s = 2 * new_sz | 0; new_sz = s;}
     var new_st = caml_array_make(new_sz, none);
     caml_call5(Stdlib_Array[9], st, 0, new_st, 0, sz);
     if(runtime.caml_domain_dls_compare_and_set(st, new_st)) return new_st;
    }
   }
   function set(param, x){
    var idx = param[1], st = maybe_grow(idx);
    caml_check_bound(st, idx)[1 + idx] = x;
    return 0;
   }
   function get(param){
    var
     init = param[2],
     idx = param[1],
     st = maybe_grow(idx),
     oldval = caml_check_bound(st, idx)[1 + idx];
    if(oldval !== none) return oldval;
    var
     new_obj = caml_call1(init, 0),
     st$0 = caml_domain_dls_get(0),
     curval = caml_check_bound(st$0, idx)[1 + idx],
     _e_ = curval === oldval ? (st$0[1 + idx] = new_obj, 1) : 0;
    if(_e_) return new_obj;
    var updated_obj = caml_check_bound(st$0, idx)[1 + idx];
    if(updated_obj !== none) return updated_obj;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function get_id(param){var domain = param[1]; return domain;}
   function self(param){return caml_ml_domain_id(0);}
   function is_main_domain(param){return 0 === caml_ml_domain_id(0) ? 1 : 0;}
   var
    first_domain_spawned = caml_call1(Stdlib_Atomic[1], 0),
    first_spawn_function = [0, function(param){}],
    cst_first_domain_already_spawn = "first domain already spawned";
   function before_first_spawn(f){
    if(caml_call1(Stdlib_Atomic[3], first_domain_spawned))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_first_domain_already_spawn], 1);
    var old_f = first_spawn_function[1];
    function new_f(param){caml_call1(old_f, 0); return caml_call1(f, 0);}
    first_spawn_function[1] = new_f;
    return 0;
   }
   var
    at_exit_key =
      new_key(0, function(param){return function(param){return 0;};});
   function at_exit(f){
    var old_exit = get(at_exit_key);
    function new_exit(param){
     caml_call1(f, 0);
     return caml_call1(old_exit, 0);
    }
    return set(at_exit_key, new_exit);
   }
   function do_at_exit(param){
    var f = get(at_exit_key);
    return caml_call1(f, 0);
   }
   Stdlib[104][1] = do_at_exit;
   function spawn(f){
    if(1 - caml_call1(Stdlib_Atomic[3], first_domain_spawned)){
     caml_call2(Stdlib_Atomic[4], first_domain_spawned, 1);
     caml_call1(first_spawn_function[1], 0);
     first_spawn_function[1] = function(param){return 0;};
    }
    var
     _b_ = caml_call1(Stdlib_Atomic[3], parent_keys),
     pk =
       caml_call2
        (Stdlib_List[20],
         function(param){
          var split = param[2], k = param[1];
          return [0, k, caml_call1(split, get(k))];
         },
         _b_),
     _c_ = caml_call1(Stdlib_Condition[1], 0),
     term_sync = [0, 0, caml_call1(Stdlib_Mutex[1], 0), _c_];
    function body(param){
     try{
      create_dls(0);
      caml_call2
       (Stdlib_List[18],
        function(param){var v = param[2], k = param[1]; return set(k, v);},
        pk);
      var res = caml_call1(f, 0);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      try{do_at_exit(0);}catch(_d_){}
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     do_at_exit(0);
     return res;
    }
    var domain = runtime.caml_domain_spawn(body, term_sync);
    return [0, domain, term_sync];
   }
   function join(param){
    var term_sync = param[2];
    function loop(param){
     for(;;){
      var match = term_sync[1];
      if(match){var res = match[1]; return res;}
      caml_call2(Stdlib_Condition[2], term_sync[3], term_sync[2]);
     }
    }
    var match = caml_call2(Stdlib_Mutex[5], term_sync[2], loop);
    if(0 === match[0]){var x = match[1]; return x;}
    var ex = match[1];
    throw caml_maybe_attach_backtrace(ex, 1);
   }
   var
    recommended_domain_count = runtime.caml_recommended_domain_count,
    Stdlib_Domain =
      [0,
       spawn,
       join,
       get_id,
       self,
       before_first_spawn,
       at_exit,
       cpu_relax,
       is_main_domain,
       recommended_domain_count,
       runtime.caml_ml_domain_index,
       [0, new_key, get, set]];
   runtime.caml_register_global(9, Stdlib_Domain, "Stdlib__Domain");
   return;
  }
  (globalThis));

//# 11039 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$43 = "",
    cst_and = " and ",
    cst_Li$3 = "%Li",
    cst_i$3 = "%i",
    cst_li$3 = "%li",
    cst_ni$3 = "%ni",
    cst_u$0 = "%u",
    cst$42 = "' '",
    cst$41 = "'#'",
    cst$39 = "'*'",
    cst$40 = "'+'",
    cst$44 = ", ",
    cst_0$3 = "0",
    cst_at_character_number = ": at character number ",
    cst$38 = "@[",
    cst$37 = "@{",
    cst_bad_input_format_type_mism =
      "bad input: format type mismatch between ",
    cst_bad_input_format_type_mism$0 =
      "bad input: format type mismatch between %S and %S",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_invalid_format = "invalid format ",
    cst_precision$3 = "precision",
    caml_blit_string = runtime.caml_blit_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_format_float = runtime.caml_format_float,
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$9 = "%{",
    cst$10 = "%}",
    cst$11 = "%(",
    cst$12 = "%)",
    cst$13 = "%?",
    cst$18 = cst$37,
    cst$19 = cst$38,
    cst$20 = cst$37,
    cst$21 = cst$38,
    cst$22 = cst$37,
    cst$23 = cst$38,
    cst$26 = cst$39,
    cst$24 = "'-'",
    cst$25 = cst$39,
    cst$27 = cst$40,
    cst$28 = cst$41,
    cst$29 = cst$42,
    cst$30 = cst$40,
    cst$31 = "'_'",
    sub_format = [0, 0, cst$43],
    formatting_lit = [0, "@;", 1, 0],
    cst$35 = cst$41,
    cst$32 = cst$40,
    cst$33 = cst$40,
    cst$34 = cst$42,
    cst$36 = cst$40,
    cst_unexpected_end_of_format = "unexpected end of format",
    cst$17 = ".",
    cst$14 = "%!",
    cst$15 = cst$37,
    cst$16 = cst$38,
    cst$8 = "%%",
    cst$0 = "@]",
    cst$1 = "@}",
    cst$2 = "@?",
    cst$3 = "@\n",
    cst$4 = "@.",
    cst$5 = "@@",
    cst$6 = "@%",
    cst$7 = "@",
    cst = ".*",
    Assert_failure = global_data.Assert_failure,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int = global_data.Stdlib__Int,
    _a_ = [0, 0, 0],
    cst_c = "%c",
    cst_s = "%s",
    cst_i = cst_i$3,
    cst_li = cst_li$3,
    cst_ni = cst_ni$3,
    cst_Li = cst_Li$3,
    cst_f = "%f",
    cst_B = "%B",
    cst_a = "%a",
    cst_t = "%t",
    cst_r = "%r",
    cst_r$0 = "%_r",
    cst_0c = "0c",
    _b_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _c_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _d_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _e_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _f_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _g_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _h_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _i_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _j_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _k_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _l_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _m_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _n_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _o_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _p_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _q_ = [0, cst_camlinternalFormat_ml, 831, 30];
   function create_char_set(param){return caml_call2(Stdlib_Bytes[1], 32, 0);}
   function add_in_char_set(char_set, c){
    var
     str_ind = c >>> 3 | 0,
     mask = 1 << (c & 7),
     _cU_ = runtime.caml_bytes_get(char_set, str_ind) | mask;
    return caml_bytes_set(char_set, str_ind, caml_call1(Stdlib[29], _cU_));
   }
   function freeze_char_set(char_set){
    return caml_call1(Stdlib_Bytes[6], char_set);
   }
   function rev_char_set(char_set){
    var char_set$0 = create_char_set(0), i = 0;
    for(;;){
     var _cS_ = caml_string_get(char_set, i) ^ 255;
     caml_bytes_set(char_set$0, i, caml_call1(Stdlib[29], _cS_));
     var _cT_ = i + 1 | 0;
     if(31 === i) return caml_call1(Stdlib_Bytes[44], char_set$0);
     i = _cT_;
    }
   }
   function is_in_char_set(char_set, c){
    var str_ind = c >>> 3 | 0, mask = 1 << (c & 7);
    return 0 !== (caml_string_get(char_set, str_ind) & mask) ? 1 : 0;
   }
   function pad_of_pad_opt(pad_opt){
    if(! pad_opt) return 0;
    var width = pad_opt[1];
    return [0, 1, width];
   }
   function param_format_of_ignored_format(ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        return [0, [0, fmt]];
       case 1:
        return [0, [1, fmt]];
       case 2:
        return [0, [19, fmt]];
       default: return [0, [22, fmt]];
     }
    switch(ign[0]){
      case 0:
       var pad_opt = ign[1]; return [0, [2, pad_of_pad_opt(pad_opt), fmt]];
      case 1:
       var pad_opt$0 = ign[1];
       return [0, [3, pad_of_pad_opt(pad_opt$0), fmt]];
      case 2:
       var pad_opt$1 = ign[2], iconv = ign[1];
       return [0, [4, iconv, pad_of_pad_opt(pad_opt$1), 0, fmt]];
      case 3:
       var pad_opt$2 = ign[2], iconv$0 = ign[1];
       return [0, [5, iconv$0, pad_of_pad_opt(pad_opt$2), 0, fmt]];
      case 4:
       var pad_opt$3 = ign[2], iconv$1 = ign[1];
       return [0, [6, iconv$1, pad_of_pad_opt(pad_opt$3), 0, fmt]];
      case 5:
       var pad_opt$4 = ign[2], iconv$2 = ign[1];
       return [0, [7, iconv$2, pad_of_pad_opt(pad_opt$4), 0, fmt]];
      case 6:
       var prec_opt = ign[2], pad_opt$5 = ign[1];
       if(prec_opt)
        var ndec = prec_opt[1], _cR_ = [0, ndec];
       else
        var _cR_ = 0;
       return [0, [8, _a_, pad_of_pad_opt(pad_opt$5), _cR_, fmt]];
      case 7:
       var pad_opt$6 = ign[1];
       return [0, [9, pad_of_pad_opt(pad_opt$6), fmt]];
      case 8:
       var fmtty = ign[2], pad_opt$7 = ign[1];
       return [0, [13, pad_opt$7, fmtty, fmt]];
      case 9:
       var fmtty$0 = ign[2], pad_opt$8 = ign[1];
       return [0, [14, pad_opt$8, fmtty$0, fmt]];
      case 10:
       var char_set = ign[2], width_opt = ign[1];
       return [0, [20, width_opt, char_set, fmt]];
      default: var counter = ign[1]; return [0, [21, counter, fmt]];
    }
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var
     len = runtime.caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len = caml_call2(Stdlib_Int[11], len * 2 | 0, min_len),
      new_str = caml_create_bytes(new_len);
     caml_call5(Stdlib_Bytes[11], buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    caml_call5(Stdlib_String[6], s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
   }
   function buffer_contents(buf){
    return caml_call3(Stdlib_Bytes[8], buf[2], 0, buf[1]);
   }
   function char_of_iconv(iconv){
    switch(iconv){
      case 6:
      case 7:
       return 120;
      case 8:
      case 9:
       return 88;
      case 10:
      case 11:
       return 111;
      case 12:
      case 15:
       return 117;
      case 0:
      case 1:
      case 2:
      case 13:
       return 100;
      default: return 105;
    }
   }
   function char_of_fconv(opt, fconv){
    var cF = opt ? opt[1] : 70;
    switch(fconv[2]){
      case 0:
       return 102;
      case 1:
       return 101;
      case 2:
       return 69;
      case 3:
       return 103;
      case 4:
       return 71;
      case 5:
       return cF;
      case 6:
       return 104;
      case 7:
       return 72;
      default: return 70;
    }
   }
   function bprint_padty(buf, padty){
    switch(padty){
      case 0:
       return buffer_add_char(buf, 45);
      case 1:
       return;
      default: return buffer_add_char(buf, 48);
    }
   }
   function bprint_ignored_flag(buf, ign_flag){
    return ign_flag ? buffer_add_char(buf, 95) : ign_flag;
   }
   function bprint_pad_opt(buf, pad_opt){
    if(! pad_opt) return;
    var width = pad_opt[1];
    return buffer_add_string(buf, caml_call1(Stdlib_Int[12], width));
   }
   function bprint_padding(buf, pad){
    if(typeof pad === "number") return;
    if(0 === pad[0]){
     var n = pad[2], padty = pad[1];
     bprint_padty(buf, padty);
     return buffer_add_string(buf, caml_call1(Stdlib_Int[12], n));
    }
    var padty$0 = pad[1];
    bprint_padty(buf, padty$0);
    return buffer_add_char(buf, 42);
   }
   function bprint_precision(buf, prec){
    if(typeof prec !== "number"){
     var n = prec[1];
     buffer_add_char(buf, 46);
     return buffer_add_string(buf, caml_call1(Stdlib_Int[12], n));
    }
    if(prec) return buffer_add_string(buf, cst);
   }
   function bprint_iconv_flag(buf, iconv){
    switch(iconv){
      case 1:
      case 4:
       return buffer_add_char(buf, 43);
      case 2:
      case 5:
       return buffer_add_char(buf, 32);
      case 7:
      case 9:
      case 11:
      case 13:
      case 14:
      case 15:
       return buffer_add_char(buf, 35);
      default: return;
    }
   }
   function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c){
    buffer_add_char(buf, 37);
    bprint_ignored_flag(buf, ign_flag);
    bprint_iconv_flag(buf, iconv);
    bprint_padding(buf, pad);
    bprint_precision(buf, prec);
    buffer_add_char(buf, c);
    return buffer_add_char(buf, char_of_iconv(iconv));
   }
   function bprint_fconv_flag(buf, fconv){
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) return buffer_add_char(buf, 35);
   }
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return cst$0;
       case 1:
        return cst$1;
       case 2:
        return cst$2;
       case 3:
        return cst$3;
       case 4:
        return cst$4;
       case 5:
        return cst$5;
       default: return cst$6;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default:
       var c = formatting_lit[1], _cQ_ = caml_call2(Stdlib_String[1], 1, c);
       return caml_call2(Stdlib[28], cst$7, _cQ_);
    }
   }
   function bprint_char_literal(buf, chr){
    return 37 === chr
            ? buffer_add_string(buf, cst$8)
            : buffer_add_char(buf, chr);
   }
   function bprint_string_literal(buf, str){
    var _cO_ = caml_ml_string_length(str) - 1 | 0, _cN_ = 0;
    if(_cO_ >= 0){
     var i = _cN_;
     for(;;){
      bprint_char_literal(buf, caml_string_get(str, i));
      var _cP_ = i + 1 | 0;
      if(_cO_ === i) break;
      i = _cP_;
     }
    }
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, cst_c);
        fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, cst_s);
        fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, cst_i);
        fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, cst_li);
        fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, cst_ni);
        fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, cst_Li);
        fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, cst_f);
        fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, cst_B);
        fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, cst$9);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, cst$10);
        fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, cst$11);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, cst$12);
        fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, cst_a);
        fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, cst_t);
        fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, cst$13);
        fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, cst_r);
        fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, cst_r$0);
        fmtty$0 = fmtty$15;
     }
    }
   }
   function int_of_custom_arity(param){
    if(! param) return 0;
    var x = param[1];
    return 1 + int_of_custom_arity(x) | 0;
   }
   function string_of_fmt(fmt){
    var buf = buffer_create(16);
    function fmtiter(fmt, ign_flag){
     var fmt$0 = fmt, ign_flag$0 = ign_flag;
     for(;;){
      if(typeof fmt$0 === "number") return;
      switch(fmt$0[0]){
        case 0:
         var rest = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 99);
         fmt$0 = rest;
         ign_flag$0 = 0;
         break;
        case 1:
         var rest$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 67);
         fmt$0 = rest$0;
         ign_flag$0 = 0;
         break;
        case 2:
         var rest$1 = fmt$0[2], pad = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad);
         buffer_add_char(buf, 115);
         fmt$0 = rest$1;
         ign_flag$0 = 0;
         break;
        case 3:
         var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad$0);
         buffer_add_char(buf, 83);
         fmt$0 = rest$2;
         ign_flag$0 = 0;
         break;
        case 4:
         var
          rest$3 = fmt$0[4],
          prec = fmt$0[3],
          pad$1 = fmt$0[2],
          iconv = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_iconv_flag(buf, iconv);
         bprint_padding(buf, pad$1);
         bprint_precision(buf, prec);
         buffer_add_char(buf, char_of_iconv(iconv));
         fmt$0 = rest$3;
         ign_flag$0 = 0;
         break;
        case 5:
         var
          rest$4 = fmt$0[4],
          prec$0 = fmt$0[3],
          pad$2 = fmt$0[2],
          iconv$0 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$0, pad$2, prec$0, 108);
         fmt$0 = rest$4;
         ign_flag$0 = 0;
         break;
        case 6:
         var
          rest$5 = fmt$0[4],
          prec$1 = fmt$0[3],
          pad$3 = fmt$0[2],
          iconv$1 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$1, pad$3, prec$1, 110);
         fmt$0 = rest$5;
         ign_flag$0 = 0;
         break;
        case 7:
         var
          rest$6 = fmt$0[4],
          prec$2 = fmt$0[3],
          pad$4 = fmt$0[2],
          iconv$2 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$2, pad$4, prec$2, 76);
         fmt$0 = rest$6;
         ign_flag$0 = 0;
         break;
        case 8:
         var
          rest$7 = fmt$0[4],
          prec$3 = fmt$0[3],
          pad$5 = fmt$0[2],
          fconv = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_fconv_flag(buf, fconv);
         bprint_padding(buf, pad$5);
         bprint_precision(buf, prec$3);
         buffer_add_char(buf, char_of_fconv(0, fconv));
         fmt$0 = rest$7;
         ign_flag$0 = 0;
         break;
        case 9:
         var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad$6);
         buffer_add_char(buf, 66);
         fmt$0 = rest$8;
         ign_flag$0 = 0;
         break;
        case 10:
         var rest$9 = fmt$0[1];
         buffer_add_string(buf, cst$14);
         fmt$0 = rest$9;
         break;
        case 11:
         var rest$10 = fmt$0[2], str = fmt$0[1];
         bprint_string_literal(buf, str);
         fmt$0 = rest$10;
         break;
        case 12:
         var rest$11 = fmt$0[2], chr = fmt$0[1];
         bprint_char_literal(buf, chr);
         fmt$0 = rest$11;
         break;
        case 13:
         var rest$12 = fmt$0[3], fmtty = fmt$0[2], pad_opt = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, pad_opt);
         buffer_add_char(buf, 123);
         bprint_fmtty(buf, fmtty);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 125);
         fmt$0 = rest$12;
         ign_flag$0 = 0;
         break;
        case 14:
         var rest$13 = fmt$0[3], fmtty$0 = fmt$0[2], pad_opt$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, pad_opt$0);
         buffer_add_char(buf, 40);
         bprint_fmtty(buf, fmtty$0);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 41);
         fmt$0 = rest$13;
         ign_flag$0 = 0;
         break;
        case 15:
         var rest$14 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 97);
         fmt$0 = rest$14;
         ign_flag$0 = 0;
         break;
        case 16:
         var rest$15 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 116);
         fmt$0 = rest$15;
         ign_flag$0 = 0;
         break;
        case 17:
         var rest$16 = fmt$0[2], fmting_lit = fmt$0[1];
         bprint_string_literal(buf, string_of_formatting_lit(fmting_lit));
         fmt$0 = rest$16;
         break;
        case 18:
         var rest$17 = fmt$0[2], fmting_gen = fmt$0[1];
         if(0 === fmting_gen[0]){
          var str$0 = fmting_gen[1][2];
          buffer_add_string(buf, cst$15);
          buffer_add_string(buf, str$0);
         }
         else{
          var str$1 = fmting_gen[1][2];
          buffer_add_string(buf, cst$16);
          buffer_add_string(buf, str$1);
         }
         fmt$0 = rest$17;
         break;
        case 19:
         var rest$18 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 114);
         fmt$0 = rest$18;
         ign_flag$0 = 0;
         break;
        case 20:
         var rest$19 = fmt$0[3], char_set = fmt$0[2], width_opt = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, width_opt);
         var
          print_char =
            function(buf, i){
             var c = caml_call1(Stdlib[29], i);
             return 37 === c
                     ? (buffer_add_char(buf, 37), buffer_add_char(buf, 37))
                     : 64
                       === c
                       ? (buffer_add_char(buf, 37), buffer_add_char(buf, 64))
                       : buffer_add_char(buf, c);
            };
         buffer_add_char(buf, 91);
         var
          set =
            is_in_char_set(char_set, 0)
             ? (buffer_add_char(buf, 94), rev_char_set(char_set))
             : char_set;
         let set$0 = set;
         var
          is_alone =
            function(c){
             var
              after = caml_call1(Stdlib_Char[1], c + 1 | 0),
              before = caml_call1(Stdlib_Char[1], c - 1 | 0),
              _cJ_ = is_in_char_set(set$0, c);
             if(_cJ_)
              var
               _cK_ = is_in_char_set(set$0, before),
               _cL_ = _cK_ ? is_in_char_set(set$0, after) : _cK_,
               _cM_ = 1 - _cL_;
             else
              var _cM_ = _cJ_;
             return _cM_;
            };
         if(is_alone(93)) buffer_add_char(buf, 93);
         a:
         b:
         {
          c:
          {
           d:
           {
            var i = 1;
            for(;;){
             if(i >= 256) break;
             if(is_in_char_set(set, caml_call1(Stdlib[29], i))){
              var switcher = caml_call1(Stdlib[29], i) - 45 | 0;
              if(48 < switcher >>> 0){
               if(210 <= switcher) break d;
              }
              else if(46 < switcher - 1 >>> 0){
               var i$2 = i + 1 | 0;
               i = i$2;
               continue;
              }
              var i$1 = i + 1 | 0;
              if(is_in_char_set(set, caml_call1(Stdlib[29], i$1))){
               var switcher$0 = caml_call1(Stdlib[29], i$1) - 45 | 0;
               if(48 < switcher$0 >>> 0){
                if(210 <= switcher$0) break c;
               }
               else if
                (46 < switcher$0 - 1 >>> 0
                 && ! is_in_char_set(set, caml_call1(Stdlib[29], i$1 + 1 | 0))){
                print_char(buf, i$1 - 1 | 0);
                var i$5 = i$1 + 1 | 0;
                i = i$5;
                continue;
               }
               if(is_in_char_set(set, caml_call1(Stdlib[29], i$1 + 1 | 0))){
                var j = i$1 + 2 | 0, i$3 = i$1 - 1 | 0, j$0 = j;
                for(;;){
                 if(256 === j$0) break;
                 if(! is_in_char_set(set, caml_call1(Stdlib[29], j$0))) break;
                 var j$1 = j$0 + 1 | 0;
                 j$0 = j$1;
                }
                print_char(buf, i$3);
                print_char(buf, 45);
                print_char(buf, j$0 - 1 | 0);
                if(j$0 >= 256) break b;
                var i$7 = j$0 + 1 | 0;
                i = i$7;
               }
               else{
                print_char(buf, i$1 - 1 | 0);
                print_char(buf, i$1);
                var i$4 = i$1 + 2 | 0;
                i = i$4;
               }
              }
              else{
               print_char(buf, i$1 - 1 | 0);
               var i$6 = i$1 + 1 | 0;
               i = i$6;
              }
             }
             else{var i$0 = i + 1 | 0; i = i$0;}
            }
            break a;
           }
           print_char(buf, 255);
           break a;
          }
          print_char(buf, 254);
          print_char(buf, 255);
          break a;
         }
         if(is_alone(45)) buffer_add_char(buf, 45);
         buffer_add_char(buf, 93);
         fmt$0 = rest$19;
         ign_flag$0 = 0;
         break;
        case 21:
         var rest$20 = fmt$0[2], counter = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         switch(counter){
           case 0:
            var _cF_ = 108; break;
           case 1:
            var _cF_ = 110; break;
           default: var _cF_ = 78;
         }
         buffer_add_char(buf, _cF_);
         fmt$0 = rest$20;
         ign_flag$0 = 0;
         break;
        case 22:
         var rest$21 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_string_literal(buf, cst_0c);
         fmt$0 = rest$21;
         ign_flag$0 = 0;
         break;
        case 23:
         var
          rest$22 = fmt$0[2],
          ign = fmt$0[1],
          fmt$1 = param_format_of_ignored_format(ign, rest$22)[1];
         fmt$0 = fmt$1;
         ign_flag$0 = 1;
         break;
        default:
         var
          rest$23 = fmt$0[3],
          arity = fmt$0[1],
          _cH_ = int_of_custom_arity(arity),
          _cG_ = 1;
         if(_cH_ >= 1){
          var i$8 = _cG_;
          for(;;){
           buffer_add_char(buf, 37);
           bprint_ignored_flag(buf, ign_flag$0);
           buffer_add_char(buf, 63);
           var _cI_ = i$8 + 1 | 0;
           if(_cH_ === i$8) break;
           i$8 = _cI_;
          }
         }
         fmt$0 = rest$23;
         ign_flag$0 = 0;
      }
     }
    }
    fmtiter(fmt, 0);
    return buffer_contents(buf);
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param === "number")
     return [0, , function(param){}, , function(param){}];
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match = fmtty_rel_det(rest),
        de = match[4],
        af = match[2];
       return [0, , function(param){af(0);}, , de];
      case 1:
       var
        rest$0 = param[1],
        match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        af$0 = match$0[2];
       return [0, , function(param){af$0(0);}, , de$0];
      case 2:
       var
        rest$1 = param[1],
        match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        af$1 = match$1[2];
       return [0, , function(param){af$1(0);}, , de$1];
      case 3:
       var
        rest$2 = param[1],
        match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        af$2 = match$2[2];
       return [0, , function(param){af$2(0);}, , de$2];
      case 4:
       var
        rest$3 = param[1],
        match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        af$3 = match$3[2];
       return [0, , function(param){af$3(0);}, , de$3];
      case 5:
       var
        rest$4 = param[1],
        match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        af$4 = match$4[2];
       return [0, , function(param){af$4(0);}, , de$4];
      case 6:
       var
        rest$5 = param[1],
        match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        af$5 = match$5[2];
       return [0, , function(param){af$5(0);}, , de$5];
      case 7:
       var
        rest$6 = param[1],
        match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        af$6 = match$6[2];
       return [0, , function(param){af$6(0);}, , de$6];
      case 8:
       var
        rest$7 = param[2],
        match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        af$7 = match$7[2];
       return [0, , function(param){af$7(0);}, , de$7];
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        af$8 = match$8[2],
        ty = trans(symm(ty1), ty2),
        match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        ga = match$9[2];
       return [0,
               ,
               function(param){ga(0); af$8(0);},
               ,
               function(param){jd(0); de$8(0);}];
      case 10:
       var
        rest$9 = param[1],
        match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        af$9 = match$10[2];
       return [0, , function(param){af$9(0);}, , de$9];
      case 11:
       var
        rest$10 = param[1],
        match$11 = fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        af$10 = match$11[2];
       return [0, , function(param){af$10(0);}, , de$10];
      case 12:
       var
        rest$11 = param[1],
        match$12 = fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        af$11 = match$12[2];
       return [0, , function(param){af$11(0);}, , de$11];
      case 13:
       var
        rest$12 = param[1],
        match$13 = fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        af$12 = match$13[2];
       return [0, , function(param){af$12(0);}, , function(param){de$12(0);}];
      default:
       var
        rest$13 = param[1],
        match$14 = fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        af$13 = match$14[2];
       return [0, , function(param){af$13(0);}, , function(param){de$13(0);}];
    }
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _cE_ = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), _cE_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function fmtty_of_fmt(fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return 0;
     switch(fmtty$0[0]){
       case 0:
        var rest = fmtty$0[1]; return [0, fmtty_of_fmt(rest)];
       case 1:
        var rest$0 = fmtty$0[1]; return [0, fmtty_of_fmt(rest$0)];
       case 2:
        var rest$1 = fmtty$0[2], pad = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad, [1, fmtty_of_fmt(rest$1)]);
       case 3:
        var rest$2 = fmtty$0[2], pad$0 = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad$0, [1, fmtty_of_fmt(rest$2)]);
       case 4:
        var
         rest$3 = fmtty$0[4],
         prec = fmtty$0[3],
         pad$1 = fmtty$0[2],
         ty_rest = fmtty_of_fmt(rest$3),
         prec_ty = fmtty_of_precision_fmtty(prec, [2, ty_rest]);
        return fmtty_of_padding_fmtty(pad$1, prec_ty);
       case 5:
        var
         rest$4 = fmtty$0[4],
         prec$0 = fmtty$0[3],
         pad$2 = fmtty$0[2],
         ty_rest$0 = fmtty_of_fmt(rest$4),
         prec_ty$0 = fmtty_of_precision_fmtty(prec$0, [3, ty_rest$0]);
        return fmtty_of_padding_fmtty(pad$2, prec_ty$0);
       case 6:
        var
         rest$5 = fmtty$0[4],
         prec$1 = fmtty$0[3],
         pad$3 = fmtty$0[2],
         ty_rest$1 = fmtty_of_fmt(rest$5),
         prec_ty$1 = fmtty_of_precision_fmtty(prec$1, [4, ty_rest$1]);
        return fmtty_of_padding_fmtty(pad$3, prec_ty$1);
       case 7:
        var
         rest$6 = fmtty$0[4],
         prec$2 = fmtty$0[3],
         pad$4 = fmtty$0[2],
         ty_rest$2 = fmtty_of_fmt(rest$6),
         prec_ty$2 = fmtty_of_precision_fmtty(prec$2, [5, ty_rest$2]);
        return fmtty_of_padding_fmtty(pad$4, prec_ty$2);
       case 8:
        var
         rest$7 = fmtty$0[4],
         prec$3 = fmtty$0[3],
         pad$5 = fmtty$0[2],
         ty_rest$3 = fmtty_of_fmt(rest$7),
         prec_ty$3 = fmtty_of_precision_fmtty(prec$3, [6, ty_rest$3]);
        return fmtty_of_padding_fmtty(pad$5, prec_ty$3);
       case 9:
        var rest$8 = fmtty$0[2], pad$6 = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad$6, [7, fmtty_of_fmt(rest$8)]);
       case 10:
        var fmtty$1 = fmtty$0[1]; fmtty$0 = fmtty$1; break;
       case 11:
        var fmtty$2 = fmtty$0[2]; fmtty$0 = fmtty$2; break;
       case 12:
        var fmtty$3 = fmtty$0[2]; fmtty$0 = fmtty$3; break;
       case 13:
        var rest$9 = fmtty$0[3], ty = fmtty$0[2];
        return [8, ty, fmtty_of_fmt(rest$9)];
       case 14:
        var rest$10 = fmtty$0[3], ty$0 = fmtty$0[2];
        return [9, ty$0, ty$0, fmtty_of_fmt(rest$10)];
       case 15:
        var rest$11 = fmtty$0[1]; return [10, fmtty_of_fmt(rest$11)];
       case 16:
        var rest$12 = fmtty$0[1]; return [11, fmtty_of_fmt(rest$12)];
       case 17:
        var fmtty$4 = fmtty$0[2]; fmtty$0 = fmtty$4; break;
       case 18:
        var
         rest$13 = fmtty$0[2],
         formatting_gen = fmtty$0[1],
         _cB_ = fmtty_of_fmt(rest$13);
        if(0 === formatting_gen[0])
         var fmt = formatting_gen[1][1], _cC_ = fmtty_of_fmt(fmt);
        else
         var fmt$0 = formatting_gen[1][1], _cC_ = fmtty_of_fmt(fmt$0);
        return caml_call2(CamlinternalFormatBasics[1], _cC_, _cB_);
       case 19:
        var rest$14 = fmtty$0[1]; return [13, fmtty_of_fmt(rest$14)];
       case 20:
        var rest$15 = fmtty$0[3]; return [1, fmtty_of_fmt(rest$15)];
       case 21:
        var rest$16 = fmtty$0[2]; return [2, fmtty_of_fmt(rest$16)];
       case 22:
        var rest$17 = fmtty$0[1]; return [0, fmtty_of_fmt(rest$17)];
       case 23:
        var fmtty$5 = fmtty$0[2], ign = fmtty$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            return [14, fmtty_of_fmt(fmtty$5)];
           default: fmtty$0 = fmtty$5;
         }
        else
         switch(ign[0]){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            fmtty$0 = fmtty$5; break;
           case 3:
            fmtty$0 = fmtty$5; break;
           case 4:
            fmtty$0 = fmtty$5; break;
           case 5:
            fmtty$0 = fmtty$5; break;
           case 6:
            fmtty$0 = fmtty$5; break;
           case 7:
            fmtty$0 = fmtty$5; break;
           case 8:
            fmtty$0 = fmtty$5; break;
           case 9:
            var fmtty$6 = ign[2], _cD_ = fmtty_of_fmt(fmtty$5);
            return caml_call2(CamlinternalFormatBasics[1], fmtty$6, _cD_);
           case 10:
            fmtty$0 = fmtty$5; break;
           default: fmtty$0 = fmtty$5;
         }
        break;
       default:
        var rest$18 = fmtty$0[3], arity = fmtty$0[1];
        return fmtty_of_custom(arity, fmtty_of_fmt(rest$18));
     }
    }
   }
   function fmtty_of_custom(arity, fmtty){
    if(! arity) return fmtty;
    var arity$0 = arity[1];
    return [12, fmtty_of_custom(arity$0, fmtty)];
   }
   function fmtty_of_padding_fmtty(pad, fmtty){
    return typeof pad === "number" ? fmtty : 0 === pad[0] ? fmtty : [2, fmtty];
   }
   function fmtty_of_precision_fmtty(prec, fmtty){
    return typeof prec === "number" ? prec ? [2, fmtty] : fmtty : fmtty;
   }
   var
    Type_mismatch =
      [248, "CamlinternalFormat.Type_mismatch", runtime.caml_fresh_oo_id(0)],
    cst_d = "%d",
    cst_d$0 = "%+d",
    cst_d$1 = "% d",
    cst_i$0 = cst_i$3,
    cst_i$1 = "%+i",
    cst_i$2 = "% i",
    cst_x = "%x",
    cst_x$0 = "%#x",
    cst_X = "%X",
    cst_X$0 = "%#X",
    cst_o = "%o",
    cst_o$0 = "%#o",
    cst_u = cst_u$0,
    cst_Ld = "%Ld",
    cst_Ld$0 = "%+Ld",
    cst_Ld$1 = "% Ld",
    cst_Li$0 = cst_Li$3,
    cst_Li$1 = "%+Li",
    cst_Li$2 = "% Li",
    cst_Lx = "%Lx",
    cst_Lx$0 = "%#Lx",
    cst_LX = "%LX",
    cst_LX$0 = "%#LX",
    cst_Lo = "%Lo",
    cst_Lo$0 = "%#Lo",
    cst_Lu = "%Lu",
    cst_ld = "%ld",
    cst_ld$0 = "%+ld",
    cst_ld$1 = "% ld",
    cst_li$0 = cst_li$3,
    cst_li$1 = "%+li",
    cst_li$2 = "% li",
    cst_lx = "%lx",
    cst_lx$0 = "%#lx",
    cst_lX = "%lX",
    cst_lX$0 = "%#lX",
    cst_lo = "%lo",
    cst_lo$0 = "%#lo",
    cst_lu = "%lu",
    cst_nd = "%nd",
    cst_nd$0 = "%+nd",
    cst_nd$1 = "% nd",
    cst_ni$0 = cst_ni$3,
    cst_ni$1 = "%+ni",
    cst_ni$2 = "% ni",
    cst_nx = "%nx",
    cst_nx$0 = "%#nx",
    cst_nX = "%nX",
    cst_nX$0 = "%#nX",
    cst_no = "%no",
    cst_no$0 = "%#no",
    cst_nu = "%nu",
    _r_ = [0, 103],
    cst_neg_infinity = "neg_infinity",
    cst_infinity = "infinity",
    cst_nan = "nan",
    _s_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    cst_Printf_bad_conversion = "Printf: bad conversion %[",
    _t_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _u_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _v_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    cst_Printf_bad_conversion$0 = "Printf: bad conversion %_",
    _w_ = [0, cst_camlinternalFormat_ml, 1830, 8],
    _x_ = [0, 0, 4],
    _y_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _z_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11, cst_at_character_number, [4, 0, 0, 0, [11, cst$44, [2, 0, 0]]]]]],
       "invalid format %S: at character number %d, %s"],
    cst_non_zero_widths_are_unsupp =
      "non-zero widths are unsupported for %c conversions",
    _A_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", '", [0, [11, "' without ", [2, 0, 0]]]]]]]],
       "invalid format %S: at character number %d, '%c' without %s"],
    _B_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, cst$44, [2, 0, [11, " expected, read ", [1, 0]]]]]]]],
       "invalid format %S: at character number %d, %s expected, read %C"],
    _C_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", duplicate flag ", [1, 0]]]]]],
       "invalid format %S: at character number %d, duplicate flag %C"],
    cst_padding = "padding",
    _D_ = [0, 1, 0],
    cst_0 = cst_0$3,
    _E_ = [0, 0],
    cst_precision = cst_precision$3,
    _F_ = [1, 0],
    _G_ = [1, 1],
    cst_precision$0 = cst_precision$3,
    _H_ = [1, 1],
    cst_precision$1 = cst_precision$3,
    cst_0$0 = cst_0$3,
    _I_ = [1, 1],
    cst_0$1 = cst_0$3,
    cst_0$2 = "'0'",
    _J_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11, ', invalid conversion "', [12, 37, [0, [12, 34, 0]]]]]]]],
       'invalid format %S: at character number %d, invalid conversion "%%%c"'],
    _K_ = [0, 0],
    cst_padding$0 = "`padding'",
    _L_ = [0, 0],
    cst_precision$2 = "`precision'",
    _M_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            ", flag ",
            [1,
             [11,
              " is only allowed after the '",
              [12, 37, [11, "', before padding and precision", 0]]]]]]]]],
       "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"],
    _N_ = [0, [12, 64, 0]],
    _O_ = [0, "@ ", 1, 0],
    _P_ = [0, "@,", 0, 0],
    _Q_ = [2, 60],
    _R_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": '",
          [12,
           37,
           [11,
            "' alone is not accepted in character sets, use ",
            [12,
             37,
             [12,
              37,
              [11, " instead at position ", [4, 0, 0, 0, [12, 46, 0]]]]]]]]]],
       "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."],
    _S_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": integer ",
          [4, 0, 0, 0, [11, " is greater than the limit ", [4, 0, 0, 0, 0]]]]]],
       "invalid format %S: integer %d is greater than the limit %d"],
    _T_ = [0, cst_camlinternalFormat_ml, 2837, 11],
    cst_digit = "digit",
    _U_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ': unclosed sub-format, expected "',
          [12, 37, [0, [11, '" at character number ', [4, 0, 0, 0, 0]]]]]]],
       'invalid format %S: unclosed sub-format, expected "%%%c" at character number %d'],
    cst_character = "character ')'",
    cst_character$0 = "character '}'",
    _V_ = [0, cst_camlinternalFormat_ml, 2899, 34],
    _W_ = [0, cst_camlinternalFormat_ml, 2935, 28],
    _X_ = [0, cst_camlinternalFormat_ml, 2957, 11],
    _Y_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            cst$44,
            [2,
             0,
             [11,
              " is incompatible with '",
              [0, [11, "' in sub-format ", [3, 0, 0]]]]]]]]]],
       "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"],
    _Z_ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0],
    ___ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_format(fmt, fmtty){
    var _cA_ = type_format_gen(fmt, fmtty);
    if(typeof _cA_[2] !== "number")
     throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    var fmt$0 = _cA_[1];
    return fmt$0;
   }
   function type_format_gen(fmt, fmtty0){
    if(typeof fmt === "number") return [0, 0, fmtty0];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty0),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$1];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty0),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty0),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty0),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty0),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty0),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty0),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty0),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty0),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$9];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty0),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$10];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty0),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$11];
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
        var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _cy_ = [0, caml_call1(CamlinternalFormatBasics[2], sub_fmtty1)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub_fmtty$1)], _cy_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 =
           type_format_gen
            (fmt_rest$13,
             caml_call1(CamlinternalFormatBasics[2], fmtty_rest$10)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
        var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
        var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$15];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty0),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 = type_format_gen(fmt1, fmtty0),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 = type_format_gen(fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
        return [0, [18, [0, [0, fmt2, str$0]], fmt3], fmtty3];
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 = type_format_gen(fmt1$0, fmtty0),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 = type_format_gen(fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
       return [0, [18, [1, [0, fmt2$0, str$1]], fmt3$0], fmtty3$0];
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
        var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
        var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
        var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 0:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 1:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 2:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 3:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 4:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 5:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 6:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 7:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty0);
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            _cz_ = type_ignored_format_substituti(sub_fmtty$3, rest, fmtty0),
            match$43 = _cz_[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = _cz_[1];
           return [0, [23, [9, pad_opt$2, sub_fmtty$4], fmt$22], fmtty$21];
          case 10:
           return type_ignored_param_one(ign, rest, fmtty0);
          default: return type_ignored_param_one(ign, rest, fmtty0);
        }
       switch(ign){
         case 0:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 1:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 2:
          if(typeof fmtty0 !== "number" && 14 === fmtty0[0]){
           var
            fmtty_rest$16 = fmtty0[1],
            match$42 = type_format_gen(rest, fmtty_rest$16),
            fmtty$20 = match$42[2],
            fmt$21 = match$42[1];
           return [0, [23, 2, fmt$21], fmtty$20];
          }
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         default: return type_ignored_param_one(ign, rest, fmtty0);
       }
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _cw_ = [0, caml_call1(CamlinternalFormatBasics[2], sub1_fmtty)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub1_fmtty$0)], _cw_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _cx_ = [0, caml_call1(CamlinternalFormatBasics[2], sub2_fmtty$1)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub2_fmtty$2)], _cx_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (caml_call1(CamlinternalFormatBasics[2], sub_fmtty_rest$17),
             fmt,
             fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function recast(fmt, fmtty){
    var _cv_ = symm(fmtty);
    return type_format(fmt, caml_call1(CamlinternalFormatBasics[2], _cv_));
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = caml_call1(Stdlib[18], width);
    if(width$0 <= len) return str;
    var
     _cu_ = 2 === padty$0 ? 48 : 32,
     res = caml_call2(Stdlib_Bytes[1], width$0, _cu_);
    switch(padty$0){
      case 0:
       caml_call5(Stdlib_String[6], str, 0, res, 0, len); break;
      case 1:
       caml_call5(Stdlib_String[6], str, 0, res, width$0 - len | 0, len);
       break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        caml_call5
         (Stdlib_String[6],
          str,
          1,
          res,
          (width$0 - len | 0) + 1 | 0,
          len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        caml_call5
         (Stdlib_String[6],
          str,
          2,
          res,
          (width$0 - len | 0) + 2 | 0,
          len - 2 | 0);
        break;
       }
       caml_call5(Stdlib_String[6], str, 0, res, width$0 - len | 0, len);
    }
    return caml_call1(Stdlib_Bytes[44], res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = caml_call1(Stdlib[18], prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
            if
             (120 !== caml_string_get(str, 1)
              && 88 !== caml_string_get(str, 1))
             break c;
            var res$1 = caml_call2(Stdlib_Bytes[1], prec$0 + 2 | 0, 48);
            caml_bytes_set(res$1, 1, caml_string_get(str, 1));
            caml_call5
             (Stdlib_String[6],
              str,
              2,
              res$1,
              (prec$0 - len | 0) + 4 | 0,
              len - 2 | 0);
            return caml_call1(Stdlib_Bytes[44], res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = caml_call2(Stdlib_Bytes[1], prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       caml_call5
        (Stdlib_String[6],
         str,
         1,
         res$0,
         (prec$0 - len | 0) + 2 | 0,
         len - 1 | 0);
       return caml_call1(Stdlib_Bytes[44], res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = caml_call2(Stdlib_Bytes[1], prec$0, 48);
      caml_call5(Stdlib_String[6], str, 0, res, prec$0 - len | 0, len);
      return caml_call1(Stdlib_Bytes[44], res);
     }
    }
    return str;
   }
   function string_to_caml_string(str){
    var
     str$0 = caml_call1(Stdlib_String[25], str),
     l = caml_ml_string_length(str$0),
     res = caml_call2(Stdlib_Bytes[1], l + 2 | 0, 34);
    caml_blit_string(str$0, 0, res, 1, l);
    return caml_call1(Stdlib_Bytes[44], res);
   }
   function format_of_fconv(fconv, prec){
    var
     prec$0 = caml_call1(Stdlib[18], prec),
     symb = char_of_fconv(_r_, fconv),
     buf = buffer_create(16);
    buffer_add_char(buf, 37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, caml_call1(Stdlib_Int[12], prec$0));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _cp_ = caml_ml_string_length(s) - 1 | 0, _co_ = 0;
    if(_cp_ >= 0){
     var i$0 = _co_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _ct_ = i$0 + 1 | 0;
      if(_cp_ === i$0) break;
      i$0 = _ct_;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _cr_ = caml_ml_string_length(s) - 1 | 0,
     _cq_ = 0;
    if(_cr_ >= 0){
     var i = _cq_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1]--; put(c);}
      var _cs_ = i + 1 | 0;
      if(_cr_ === i) break;
      i = _cs_;
     }
    }
    return caml_call1(Stdlib_Bytes[44], buf);
   }
   function convert_int(iconv, n){
    switch(iconv){
      case 1:
       var _cn_ = cst_d$0; break;
      case 2:
       var _cn_ = cst_d$1; break;
      case 4:
       var _cn_ = cst_i$1; break;
      case 5:
       var _cn_ = cst_i$2; break;
      case 6:
       var _cn_ = cst_x; break;
      case 7:
       var _cn_ = cst_x$0; break;
      case 8:
       var _cn_ = cst_X; break;
      case 9:
       var _cn_ = cst_X$0; break;
      case 10:
       var _cn_ = cst_o; break;
      case 11:
       var _cn_ = cst_o$0; break;
      case 0:
      case 13:
       var _cn_ = cst_d; break;
      case 3:
      case 14:
       var _cn_ = cst_i$0; break;
      default: var _cn_ = cst_u;
    }
    return transform_int_alt(iconv, caml_format_int(_cn_, n));
   }
   function convert_int32(iconv, n){
    switch(iconv){
      case 1:
       var _cm_ = cst_ld$0; break;
      case 2:
       var _cm_ = cst_ld$1; break;
      case 4:
       var _cm_ = cst_li$1; break;
      case 5:
       var _cm_ = cst_li$2; break;
      case 6:
       var _cm_ = cst_lx; break;
      case 7:
       var _cm_ = cst_lx$0; break;
      case 8:
       var _cm_ = cst_lX; break;
      case 9:
       var _cm_ = cst_lX$0; break;
      case 10:
       var _cm_ = cst_lo; break;
      case 11:
       var _cm_ = cst_lo$0; break;
      case 0:
      case 13:
       var _cm_ = cst_ld; break;
      case 3:
      case 14:
       var _cm_ = cst_li$0; break;
      default: var _cm_ = cst_lu;
    }
    return transform_int_alt(iconv, caml_format_int(_cm_, n));
   }
   function convert_nativeint(iconv, n){
    switch(iconv){
      case 1:
       var _cl_ = cst_nd$0; break;
      case 2:
       var _cl_ = cst_nd$1; break;
      case 4:
       var _cl_ = cst_ni$1; break;
      case 5:
       var _cl_ = cst_ni$2; break;
      case 6:
       var _cl_ = cst_nx; break;
      case 7:
       var _cl_ = cst_nx$0; break;
      case 8:
       var _cl_ = cst_nX; break;
      case 9:
       var _cl_ = cst_nX$0; break;
      case 10:
       var _cl_ = cst_no; break;
      case 11:
       var _cl_ = cst_no$0; break;
      case 0:
      case 13:
       var _cl_ = cst_nd; break;
      case 3:
      case 14:
       var _cl_ = cst_ni$0; break;
      default: var _cl_ = cst_nu;
    }
    return transform_int_alt(iconv, caml_format_int(_cl_, n));
   }
   function convert_int64(iconv, n){
    switch(iconv){
      case 1:
       var _ck_ = cst_Ld$0; break;
      case 2:
       var _ck_ = cst_Ld$1; break;
      case 4:
       var _ck_ = cst_Li$1; break;
      case 5:
       var _ck_ = cst_Li$2; break;
      case 6:
       var _ck_ = cst_Lx; break;
      case 7:
       var _ck_ = cst_Lx$0; break;
      case 8:
       var _ck_ = cst_LX; break;
      case 9:
       var _ck_ = cst_LX$0; break;
      case 10:
       var _ck_ = cst_Lo; break;
      case 11:
       var _ck_ = cst_Lo$0; break;
      case 0:
      case 13:
       var _ck_ = cst_Ld; break;
      case 3:
      case 14:
       var _ck_ = cst_Li$0; break;
      default: var _ck_ = cst_Lu;
    }
    return transform_int_alt(iconv, runtime.caml_int64_format(_ck_, n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return runtime.caml_hexstring_of_float(x, prec, sign);
    }
    function caml_special_val(str){
     var match = runtime.caml_classify_float(x);
     return 3 === match
             ? x < 0. ? cst_neg_infinity : cst_infinity
             : 4 <= match ? cst_nan : str;
    }
    switch(fconv[2]){
      case 5:
       var
        str = caml_format_float(format_of_fconv(fconv, prec), x),
        len = caml_ml_string_length(str),
        i = 0;
       for(;;){
        if(i === len)
         var _ch_ = 0;
        else{
         var _cg_ = caml_string_get(str, i) - 46 | 0;
         a:
         {
          if(23 < _cg_ >>> 0){
           if(55 === _cg_) break a;
          }
          else if(21 < _cg_ - 1 >>> 0) break a;
          var i$0 = i + 1 | 0;
          i = i$0;
          continue;
         }
         var _ch_ = 1;
        }
        var _ci_ = _ch_ ? str : caml_call2(Stdlib[28], str, cst$17);
        return caml_special_val(_ci_);
       }
      case 6:
       return hex(0);
      case 7:
       var _cj_ = hex(0); return caml_call1(Stdlib_String[26], _cj_);
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function string_of_fmtty(fmtty){
    var buf = buffer_create(16);
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var
          str = caml_call1(Stdlib_Char[2], c),
          l = caml_ml_string_length(str),
          res = caml_call2(Stdlib_Bytes[1], l + 2 | 0, 39);
         caml_blit_string(str, 0, res, 1, l);
         var new_acc = [4, acc$0, caml_call1(Stdlib_Bytes[44], res)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   };
         var p = prec$3[1];
         return function(x){
          var str = convert_float(fconv, p, x);
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x),
                     str$0 = fix_padding(padty, w, str);
                    return make_printf(k$0, [4, acc$0, str$0], rest$7);
                   };
         var p$0 = prec$3[1];
         return function(x){
          var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                   var
                    str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                   return make_printf(k$0, [4, acc$0, str], rest$7);
                  }
                 : function
                  (w, x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x),
                    str$0 = fix_padding(padty$0, w, str);
                   return make_printf(k$0, [4, acc$0, str$0], rest$7);
                  };
        var p$1 = prec$3[1];
        return function(w, x){
         var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
         return make_printf(k$0, [4, acc$0, str], rest$7);};
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, Stdlib[30]);
       case 10:
        var rest$9 = fmt$0[1], acc$1 = [7, acc$0];
        acc$0 = acc$1;
        fmt$0 = rest$9;
        break;
       case 11:
        var rest$10 = fmt$0[2], str = fmt$0[1], acc$2 = [2, acc$0, str];
        acc$0 = acc$2;
        fmt$0 = rest$10;
        break;
       case 12:
        var rest$11 = fmt$0[2], chr = fmt$0[1], acc$3 = [3, acc$0, chr];
        acc$0 = acc$3;
        fmt$0 = rest$11;
        break;
       case 13:
        var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
         ty = string_of_fmtty(sub_fmtty);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1], _cf_ = recast(fmt, fmtty);
         return make_printf
                 (k$0,
                  acc$0,
                  caml_call2(CamlinternalFormatBasics[3], _cf_, rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit];
        acc$0 = acc$4;
        fmt$0 = rest$16;
        break;
       case 18:
        var _cd_ = fmt$0[1];
        if(0 === _cd_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){return make_printf(k, [1, acc, [0, kacc]], rest);};
         k$0 = k$1;
         acc$0 = 0;
         fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){return make_printf(k, [1, acc, [1, kacc]], rest);};
         k$0 = k$2;
         acc$0 = 0;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
       case 20:
        var
         rest$19 = fmt$0[3],
         new_acc = [8, acc$0, cst_Printf_bad_conversion];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u$0, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (make_ignored_param$0, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
        return make_ignored_param$0(counter$1, k$0, acc$0, ign, rest$22);
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _ce_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _ce_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _ce_);
     }
    }
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param$0(counter, k, acc, ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
        return make_invalid_arg(counter$0, k, acc, fmt);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
        return make_invalid_arg(counter$1, k, acc, fmt);
       case 2:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
       default:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
        return make_invalid_arg(counter$2, k, acc, fmt);
     }
    switch(ign[0]){
      case 0:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
       return make_invalid_arg(counter$3, k, acc, fmt);
      case 1:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
       return make_invalid_arg(counter$4, k, acc, fmt);
      case 2:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
       return make_invalid_arg(counter$5, k, acc, fmt);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
       return make_invalid_arg(counter$6, k, acc, fmt);
      case 4:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
       return make_invalid_arg(counter$7, k, acc, fmt);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
       return make_invalid_arg(counter$8, k, acc, fmt);
      case 6:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
       return make_invalid_arg(counter$9, k, acc, fmt);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
       return make_invalid_arg(counter$10, k, acc, fmt);
      case 8:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
       return make_invalid_arg(counter$11, k, acc, fmt);
      case 9:
       var fmtty = ign[2];
       if(counter >= 50)
        return caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
       return make_from_fmtty$0(counter$14, k, acc, fmtty, fmt);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
       return make_invalid_arg(counter$12, k, acc, fmt);
      default:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
       return make_invalid_arg(counter$13, k, acc, fmt);
    }
   }
   function make_ignored_param(k, acc, ign, fmt){
    return caml_trampoline(make_ignored_param$0(0, k, acc, ign, fmt));
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty
                 (k,
                  acc,
                  caml_call2(CamlinternalFormatBasics[1], ty, rest$8),
                  fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(_cc_, param){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _cb_ = [8, acc, cst_Printf_bad_conversion$0];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _cb_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _cb_, fmt);
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _ca_ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _ca_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _ca_, rest);
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function make_iprintf$0(counter, k, o, fmt){
    var k$0 = k, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, o);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1], x = make_iprintf(k$0, o, rest);
        return function(_b$_){return x;};
       case 1:
        var rest$0 = fmt$0[1], x$0 = make_iprintf(k$0, o, rest$0);
        return function(_b__){return x$0;};
       case 2:
        var _bM_ = fmt$0[1];
        if(typeof _bM_ === "number"){
         var rest$1 = fmt$0[2], x$1 = make_iprintf(k$0, o, rest$1);
         return function(_b9_){return x$1;};
        }
        if(0 === _bM_[0]){
         var rest$2 = fmt$0[2], x$2 = make_iprintf(k$0, o, rest$2);
         return function(_b8_){return x$2;};
        }
        var
         rest$3 = fmt$0[2],
         x$3 = make_iprintf(k$0, o, rest$3),
         x$4 = function(_b7_){return x$3;};
        return function(_b6_){return x$4;};
       case 3:
        var _bN_ = fmt$0[1];
        if(typeof _bN_ === "number"){
         var rest$4 = fmt$0[2], x$5 = make_iprintf(k$0, o, rest$4);
         return function(_b5_){return x$5;};
        }
        if(0 === _bN_[0]){
         var rest$5 = fmt$0[2], x$6 = make_iprintf(k$0, o, rest$5);
         return function(_b4_){return x$6;};
        }
        var
         rest$6 = fmt$0[2],
         x$7 = make_iprintf(k$0, o, rest$6),
         x$8 = function(_b3_){return x$7;};
        return function(_b2_){return x$8;};
       case 4:
        var rest$7 = fmt$0[4], prec = fmt$0[3], pad = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$7, pad, prec);
       case 5:
        var rest$8 = fmt$0[4], prec$0 = fmt$0[3], pad$0 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$8, pad$0, prec$0);
       case 6:
        var rest$9 = fmt$0[4], prec$1 = fmt$0[3], pad$1 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$9, pad$1, prec$1);
       case 7:
        var rest$10 = fmt$0[4], prec$2 = fmt$0[3], pad$2 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$10, pad$2, prec$2);
       case 8:
        var rest$11 = fmt$0[4], prec$3 = fmt$0[3], pad$3 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$11, pad$3, prec$3);
       case 9:
        var _bO_ = fmt$0[1];
        if(typeof _bO_ === "number"){
         var rest$12 = fmt$0[2], x$9 = make_iprintf(k$0, o, rest$12);
         return function(_b1_){return x$9;};
        }
        if(0 === _bO_[0]){
         var rest$13 = fmt$0[2], x$10 = make_iprintf(k$0, o, rest$13);
         return function(_b0_){return x$10;};
        }
        var
         rest$14 = fmt$0[2],
         x$11 = make_iprintf(k$0, o, rest$14),
         x$12 = function(_bZ_){return x$11;};
        return function(_bY_){return x$12;};
       case 10:
        var rest$15 = fmt$0[1]; fmt$0 = rest$15; break;
       case 11:
        var rest$16 = fmt$0[2]; fmt$0 = rest$16; break;
       case 12:
        var rest$17 = fmt$0[2]; fmt$0 = rest$17; break;
       case 13:
        var rest$18 = fmt$0[3], x$13 = make_iprintf(k$0, o, rest$18);
        return function(_bX_){return x$13;};
       case 14:
        var rest$19 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1], _bW_ = recast(fmt, fmtty);
         return make_iprintf
                 (k$0,
                  o,
                  caml_call2(CamlinternalFormatBasics[3], _bW_, rest$19));};
       case 15:
        var
         rest$20 = fmt$0[1],
         x$14 = make_iprintf(k$0, o, rest$20),
         x$15 = function(_bV_){return x$14;};
        return function(_bU_){return x$15;};
       case 16:
        var rest$21 = fmt$0[1], x$16 = make_iprintf(k$0, o, rest$21);
        return function(_bT_){return x$16;};
       case 17:
        var rest$22 = fmt$0[2]; fmt$0 = rest$22; break;
       case 18:
        var _bP_ = fmt$0[1];
        if(0 === _bP_[0]){
         var rest$23 = fmt$0[2], fmt$1 = _bP_[1][1];
         let k = k$0, rest = rest$23;
         var k$1 = function(koc){return make_iprintf(k, koc, rest);};
         k$0 = k$1;
         fmt$0 = fmt$1;
        }
        else{
         var rest$24 = fmt$0[2], fmt$2 = _bP_[1][1];
         let k = k$0, rest = rest$24;
         var k$2 = function(koc){return make_iprintf(k, koc, rest);};
         k$0 = k$2;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
       case 20:
        var rest$25 = fmt$0[3], x$17 = make_iprintf(k$0, o, rest$25);
        return function(_bS_){return x$17;};
       case 21:
        var rest$26 = fmt$0[2], x$18 = make_iprintf(k$0, o, rest$26);
        return function(_bR_){return x$18;};
       case 22:
        var rest$27 = fmt$0[1], x$19 = make_iprintf(k$0, o, rest$27);
        return function(_bQ_){return x$19;};
       case 23:
        var rest$28 = fmt$0[2], ign = fmt$0[1];
        return make_ignored_param
                (function(param){return caml_call1(k$0, o);}, 0, ign, rest$28);
       default:
        var rest$29 = fmt$0[3], arity = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (fn_of_custom_arity$0, [0, k$0, o, rest$29, arity]);
        var counter$0 = counter + 1 | 0;
        return fn_of_custom_arity$0(counter$0, k$0, o, rest$29, arity);
     }
    }
   }
   function make_iprintf(k, o, fmt){
    return caml_trampoline(make_iprintf$0(0, k, o, fmt));
   }
   function fn_of_padding_precision(k, o, fmt, pad, prec){
    if(typeof pad === "number"){
     if(typeof prec !== "number"){
      var x$2 = make_iprintf(k, o, fmt);
      return function(_bL_){return x$2;};
     }
     if(prec){
      var x = make_iprintf(k, o, fmt), x$0 = function(_bK_){return x;};
      return function(_bJ_){return x$0;};
     }
     var x$1 = make_iprintf(k, o, fmt);
     return function(_bI_){return x$1;};
    }
    if(0 === pad[0]){
     if(typeof prec !== "number"){
      var x$6 = make_iprintf(k, o, fmt);
      return function(_bH_){return x$6;};
     }
     if(prec){
      var x$3 = make_iprintf(k, o, fmt), x$4 = function(_bG_){return x$3;};
      return function(_bF_){return x$4;};
     }
     var x$5 = make_iprintf(k, o, fmt);
     return function(_bE_){return x$5;};
    }
    if(typeof prec !== "number"){
     var x$12 = make_iprintf(k, o, fmt), x$13 = function(_bD_){return x$12;};
     return function(_bC_){return x$13;};
    }
    if(prec){
     var
      x$7 = make_iprintf(k, o, fmt),
      x$8 = function(_bB_){return x$7;},
      x$9 = function(_bA_){return x$8;};
     return function(_bz_){return x$9;};
    }
    var x$10 = make_iprintf(k, o, fmt);
    function x$11(_by_){return x$10;}
    return function(_bx_){return x$11;};
   }
   function fn_of_custom_arity$0(counter, k, o, fmt, param){
    if(param){
     var arity = param[1], x = fn_of_custom_arity(k, o, fmt, arity);
     return function(_bw_){return x;};
    }
    if(counter >= 50)
     return caml_trampoline_return(make_iprintf$0, [0, k, o, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_iprintf$0(counter$0, k, o, fmt);
   }
   function fn_of_custom_arity(k, o, fmt, param){
    return caml_trampoline(fn_of_custom_arity$0(0, k, o, fmt, param));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return caml_call2(Stdlib[66], o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         caml_call2(Stdlib[66], o, cst$18);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         output_acc(o, p$0);
         caml_call2(Stdlib[66], o, cst$19);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1];
        output_acc(o, p$4);
        return caml_call1(Stdlib[63], o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return caml_call2(Stdlib[66], o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return caml_call2(Stdlib[65], o, c);
     }
    }
   }
   function bufput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        bufput_acc(b, p);
        return caml_call2(Stdlib_Buffer[16], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         bufput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$20);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         bufput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$21);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        bufput_acc(b, p$3);
        return caml_call1(f, b);
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        bufput_acc(b, p$4);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        bufput_acc(b, p$1);
        return caml_call2(Stdlib_Buffer[16], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        bufput_acc(b, p$2);
        return caml_call2(Stdlib_Buffer[12], b, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return caml_call2(Stdlib_Buffer[16], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         strput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$22);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         strput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$23);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        var _bv_ = caml_call1(f, 0);
        return caml_call2(Stdlib_Buffer[16], b, _bv_);
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return caml_call2(Stdlib_Buffer[16], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        return caml_call2(Stdlib_Buffer[12], b, c);
     }
    }
   }
   function failwith_message(param){
    var fmt = param[1], buf = caml_call1(Stdlib_Buffer[1], 256);
    function k(acc){
     strput_acc(buf, acc);
     var _bu_ = caml_call1(Stdlib_Buffer[2], buf);
     return caml_call1(Stdlib[2], _bu_);
    }
    return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
    if(str === cst$43) return _x_;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
     return caml_call1(failwith_message(_y_), str);
    }
    function parse_spaces(i){
     var i$0 = i;
     for(;;){
      if(i$0 === len) return i$0;
      var match = caml_string_get(str, i$0);
      if(9 !== match && 32 !== match) return i$0;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    var wstart = parse_spaces(0);
    a:
    b:
    {
     var wend = wstart;
     for(;;){
      if(wend === len) break b;
      if(25 < caml_string_get(str, wend) - 97 >>> 0) break;
      var j = wend + 1 | 0;
      wend = j;
     }
     break a;
    }
    var
     box_name = caml_call3(Stdlib_String[16], str, wstart, wend - wstart | 0),
     nstart = parse_spaces(wend);
    a:
    b:
    {
     var nend = nstart;
     for(;;){
      if(nend === len) break b;
      var match = caml_string_get(str, nend);
      if(48 <= match){if(58 <= match) break;} else if(45 !== match) break;
      var j$0 = nend + 1 | 0;
      nend = j$0;
     }
     break a;
    }
    if(nstart === nend)
     var indent = 0;
    else
     try{
      var
       _bs_ =
         runtime.caml_int_of_string
          (caml_call3(Stdlib_String[16], str, nstart, nend - nstart | 0)),
       indent = _bs_;
     }
     catch(_bt_){
      var _br_ = caml_wrap_exception(_bt_);
      if(_br_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_br_, 0);
      var indent = invalid_box(0);
     }
    var exp_end = parse_spaces(nend);
    if(exp_end !== len) invalid_box(0);
    a:
    {
     if(box_name !== cst$43 && box_name !== "b"){
      if(box_name === "h"){var box_type = 0; break a;}
      if(box_name === "hov"){var box_type = 3; break a;}
      if(box_name === "hv"){var box_type = 2; break a;}
      if(box_name !== "v"){var box_type = invalid_box(0); break a;}
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
    return [0, indent, box_type];
   }
   function make_padding_fmt_ebb(pad, fmt){
    if(typeof pad === "number") return [0, 0, fmt];
    if(0 === pad[0]){var w = pad[2], s = pad[1]; return [0, [0, s, w], fmt];}
    var s$0 = pad[1];
    return [0, [1, s$0], fmt];
   }
   function make_padprec_fmt_ebb(pad, prec, fmt){
    if(typeof prec === "number")
     var match = prec ? [0, 1] : [0, 0];
    else
     var p = prec[1], match = [0, [0, p]];
    var prec$0 = match[1];
    if(typeof pad === "number") return [0, 0, prec$0, fmt];
    if(0 === pad[0]){
     var w = pad[2], s = pad[1];
     return [0, [0, s, w], prec$0, fmt];
    }
    var s$0 = pad[1];
    return [0, [1, s$0], prec$0, fmt];
   }
   function fmt_ebb_of_string(legacy_behavior, str){
    if(legacy_behavior)
     var flag = legacy_behavior[1], legacy_behavior$0 = flag;
    else
     var legacy_behavior$0 = 1;
    function invalid_format_message(str_ind, msg){
     return caml_call3(failwith_message(_z_), str, str_ind, msg);
    }
    function invalid_format_without(str_ind, c, s){
     return caml_call4(failwith_message(_A_), str, str_ind, c, s);
    }
    function expected_character(str_ind, expected, read){
     return caml_call4(failwith_message(_B_), str, str_ind, expected, read);
    }
    function parse(lit_start, end_ind){
     a:
     {
      var str_ind = lit_start;
      for(;;){
       if(str_ind === end_ind) return add_literal(lit_start, str_ind, 0);
       var match = caml_string_get(str, str_ind);
       if(37 === match) break;
       if(64 === match) break a;
       var str_ind$1 = str_ind + 1 | 0;
       str_ind = str_ind$1;
      }
      var str_ind$2 = str_ind + 1 | 0;
      if(str_ind$2 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var
       match$1 =
         95 === caml_string_get(str, str_ind$2)
          ? parse_flags(str_ind, str_ind$2 + 1 | 0, end_ind, 1)
          : parse_flags(str_ind, str_ind$2, end_ind, 0),
       fmt_rest = match$1[1];
      return add_literal(lit_start, str_ind, fmt_rest);
     }
     var str_ind$0 = str_ind + 1 | 0;
     a:
     if(str_ind$0 === end_ind)
      var match$0 = _N_;
     else{
      var c = caml_string_get(str, str_ind$0);
      if(65 <= c){
       if(94 <= c){
        var switcher = c - 123 | 0;
        if(2 >= switcher >>> 0)
         switch(switcher){
           case 0:
            var match$0 = parse_tag(1, str_ind$0 + 1 | 0, end_ind); break a;
           case 1: break;
           default:
            var
             fmt_rest$2 = parse(str_ind$0 + 1 | 0, end_ind)[1],
             match$0 = [0, [17, 1, fmt_rest$2]];
            break a;
         }
       }
       else if(91 <= c)
        switch(c - 91 | 0){
          case 0:
           var match$0 = parse_tag(0, str_ind$0 + 1 | 0, end_ind); break a;
          case 1: break;
          default:
           var
            fmt_rest$3 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 0, fmt_rest$3]];
           break a;
        }
      }
      else{
       if(10 === c){
        var
         fmt_rest$4 = parse(str_ind$0 + 1 | 0, end_ind)[1],
         match$0 = [0, [17, 3, fmt_rest$4]];
        break a;
       }
       if(32 <= c)
        switch(c - 32 | 0){
          case 0:
           var
            fmt_rest$5 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _O_, fmt_rest$5]];
           break a;
          case 5:
           if
            ((str_ind$0 + 1 | 0) < end_ind
             && 37 === caml_string_get(str, str_ind$0 + 1 | 0)){
            var
             fmt_rest$6 = parse(str_ind$0 + 2 | 0, end_ind)[1],
             match$0 = [0, [17, 6, fmt_rest$6]];
            break a;
           }
           var
            fmt_rest$7 = parse(str_ind$0, end_ind)[1],
            match$0 = [0, [12, 64, fmt_rest$7]];
           break a;
          case 12:
           var
            fmt_rest$8 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _P_, fmt_rest$8]];
           break a;
          case 14:
           var
            fmt_rest$9 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 4, fmt_rest$9]];
           break a;
          case 27:
           var str_ind$3 = str_ind$0 + 1 | 0;
           b:
           try{
            var
             _bg_ = str_ind$3 === end_ind ? 1 : 0,
             _bh_ = _bg_ || (60 !== caml_string_get(str, str_ind$3) ? 1 : 0);
            if(_bh_) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            var
             str_ind_1 = parse_spaces(str_ind$3 + 1 | 0, end_ind),
             match$2 = caml_string_get(str, str_ind_1);
            c:
            {
             if(48 <= match$2){
              if(58 > match$2) break c;
             }
             else if(45 === match$2) break c;
             throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            }
            var
             match$3 = parse_integer(str_ind_1, end_ind),
             width = match$3[2],
             str_ind_2 = match$3[1],
             str_ind_3 = parse_spaces(str_ind_2, end_ind),
             switcher$0 = caml_string_get(str, str_ind_3) - 45 | 0;
            if(12 < switcher$0 >>> 0){
             if(17 === switcher$0){
              var
               s =
                 caml_call3
                  (Stdlib_String[16],
                   str,
                   str_ind$3 - 2 | 0,
                   (str_ind_3 - str_ind$3 | 0) + 3 | 0),
               _bi_ = [0, s, width, 0],
               _bj_ = str_ind_3 + 1 | 0,
               formatting_lit$0 = _bi_,
               next_ind = _bj_;
              break b;
             }
            }
            else if(1 < switcher$0 - 1 >>> 0){
             var
              match$4 = parse_integer(str_ind_3, end_ind),
              offset = match$4[2],
              str_ind_4 = match$4[1],
              str_ind_5 = parse_spaces(str_ind_4, end_ind);
             if(62 !== caml_string_get(str, str_ind_5))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$0 =
                caml_call3
                 (Stdlib_String[16],
                  str,
                  str_ind$3 - 2 | 0,
                  (str_ind_5 - str_ind$3 | 0) + 3 | 0),
              _bk_ = [0, s$0, width, offset],
              _bl_ = str_ind_5 + 1 | 0,
              formatting_lit$0 = _bk_,
              next_ind = _bl_;
             break b;
            }
            throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           }
           catch(_bq_){
            var _bf_ = caml_wrap_exception(_bq_);
            if(_bf_ !== Stdlib[8] && _bf_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bf_, 0);
            var formatting_lit$0 = formatting_lit, next_ind = str_ind$3;
           }
           var
            fmt_rest$12 = parse(next_ind, end_ind)[1],
            match$0 = [0, [17, formatting_lit$0, fmt_rest$12]];
           break a;
          case 28:
           var str_ind$4 = str_ind$0 + 1 | 0;
           try{
            var
             str_ind_1$0 = parse_spaces(str_ind$4, end_ind),
             match$6 = caml_string_get(str, str_ind_1$0);
            b:
            {
             c:
             {
              if(48 <= match$6){
               if(58 > match$6) break c;
              }
              else if(45 === match$6) break c;
              var _bo_ = 0;
              break b;
             }
             var
              match$7 = parse_integer(str_ind_1$0, end_ind),
              size = match$7[2],
              str_ind_2$0 = match$7[1],
              str_ind_3$0 = parse_spaces(str_ind_2$0, end_ind);
             if(62 !== caml_string_get(str, str_ind_3$0))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$1 =
                caml_call3
                 (Stdlib_String[16],
                  str,
                  str_ind$4 - 2 | 0,
                  (str_ind_3$0 - str_ind$4 | 0) + 3 | 0),
              _bo_ = [0, [0, str_ind_3$0 + 1 | 0, [1, s$1, size]]];
            }
            var _bn_ = _bo_;
           }
           catch(_bp_){
            var _bm_ = caml_wrap_exception(_bp_);
            if(_bm_ !== Stdlib[8] && _bm_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bm_, 0);
            var _bn_ = 0;
           }
           if(_bn_)
            var
             match$5 = _bn_[1],
             formatting_lit$1 = match$5[2],
             next_ind$0 = match$5[1],
             fmt_rest$13 = parse(next_ind$0, end_ind)[1],
             _be_ = [0, [17, formatting_lit$1, fmt_rest$13]];
           else
            var
             fmt_rest$14 = parse(str_ind$4, end_ind)[1],
             _be_ = [0, [17, _Q_, fmt_rest$14]];
           var match$0 = _be_;
           break a;
          case 31:
           var
            fmt_rest$10 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 2, fmt_rest$10]];
           break a;
          case 32:
           var
            fmt_rest$11 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 5, fmt_rest$11]];
           break a;
        }
      }
      var
       fmt_rest$1 = parse(str_ind$0 + 1 | 0, end_ind)[1],
       match$0 = [0, [17, [2, c], fmt_rest$1]];
     }
     var fmt_rest$0 = match$0[1];
     return add_literal(lit_start, str_ind, fmt_rest$0);
    }
    function parse_flags(pct_ind, str_ind, end_ind, ign){
     var
      zero = [0, 0],
      minus = [0, 0],
      plus = [0, 0],
      space = [0, 0],
      hash = [0, 0];
     function set_flag(str_ind, flag){
      var _bb_ = flag[1], _bc_ = _bb_ ? 1 - legacy_behavior$0 : _bb_;
      if(_bc_){
       var _bd_ = caml_string_get(str, str_ind);
       caml_call3(failwith_message(_C_), str, str_ind, _bd_);
      }
      flag[1] = 1;
     }
     a:
     b:
     {
      var str_ind$0 = str_ind;
      c:
      for(;;){
       if(str_ind$0 === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       var switcher = caml_string_get(str, str_ind$0) - 32 | 0;
       if(16 < switcher >>> 0) break b;
       switch(switcher){
         case 0:
          set_flag(str_ind$0, space);
          var str_ind$1 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$1;
          break;
         case 3:
          set_flag(str_ind$0, hash);
          var str_ind$2 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$2;
          break;
         case 11:
          set_flag(str_ind$0, plus);
          var str_ind$3 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$3;
          break;
         case 13:
          set_flag(str_ind$0, minus);
          var str_ind$4 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$4;
          break;
         case 16:
          set_flag(str_ind$0, zero);
          var str_ind$5 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$5;
          break;
         default: break c;
       }
      }
      break a;
     }
     var
      space$0 = space[1],
      hash$0 = hash[1],
      plus$0 = plus[1],
      minus$0 = minus[1],
      zero$0 = zero[1];
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var
      padty =
        zero$0
         ? minus$0
           ? legacy_behavior$0
             ? 0
             : incompatible_flag(pct_ind, str_ind$0, 45, cst_0)
           : 2
         : minus$0 ? 0 : 1,
      match = caml_string_get(str, str_ind$0);
     if(48 <= match){
      if(58 > match){
       var
        match$0 = parse_positive(str_ind$0, end_ind, 0),
        width = match$0[2],
        new_ind = match$0[1];
       return parse_after_padding
               (pct_ind,
                new_ind,
                end_ind,
                minus$0,
                plus$0,
                hash$0,
                space$0,
                ign,
                [0, padty, width]);
      }
     }
     else if(42 === match)
      return parse_after_padding
              (pct_ind,
               str_ind$0 + 1 | 0,
               end_ind,
               minus$0,
               plus$0,
               hash$0,
               space$0,
               ign,
               [1, padty]);
     switch(padty){
       case 0:
        if(1 - legacy_behavior$0)
         invalid_format_without(str_ind$0 - 1 | 0, 45, cst_padding);
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       case 1:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       default:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 _D_);
     }
    }
    function parse_after_padding
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var symb = caml_string_get(str, str_ind);
     if(46 !== symb)
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               0,
               pad,
               symb);
     var str_ind$0 = str_ind + 1 | 0;
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_literal(minus, str_ind){
      var
       match = parse_positive(str_ind, end_ind, 0),
       prec = match[2],
       new_ind = match[1];
      return parse_after_precision
              (pct_ind,
               new_ind,
               end_ind,
               minus,
               plus,
               hash,
               space,
               ign,
               pad,
               [0, prec]);
     }
     var symb$0 = caml_string_get(str, str_ind$0);
     if(48 <= symb$0){
      if(58 > symb$0) return parse_literal(minus, str_ind$0);
     }
     else if(42 <= symb$0)
      switch(symb$0 - 42 | 0){
        case 0:
         return parse_after_precision
                 (pct_ind,
                  str_ind$0 + 1 | 0,
                  end_ind,
                  minus,
                  plus,
                  hash,
                  space,
                  ign,
                  pad,
                  1);
        case 1:
        case 3:
         if(legacy_behavior$0){
          var
           _ba_ = str_ind$0 + 1 | 0,
           minus$0 = minus || (45 === symb$0 ? 1 : 0);
          return parse_literal(minus$0, _ba_);
         }
         break;
      }
     return legacy_behavior$0
             ? parse_after_precision
               (pct_ind,
                str_ind$0,
                end_ind,
                minus,
                plus,
                hash,
                space,
                ign,
                pad,
                _E_)
             : invalid_format_without(str_ind$0 - 1 | 0, 46, cst_precision);
    }
    function parse_after_precision
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, prec){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_conv(padprec){
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               prec,
               padprec,
               caml_string_get(str, str_ind));
     }
     if(typeof pad !== "number") return parse_conv(pad);
     if(typeof prec === "number" && ! prec) return parse_conv(0);
     if(minus){
      if(typeof prec === "number") return parse_conv(_F_);
      var n = prec[1];
      return parse_conv([0, 0, n]);
     }
     if(typeof prec === "number") return parse_conv(_G_);
     var n$0 = prec[1];
     return parse_conv([0, 1, n$0]);
    }
    function parse_conversion
    (pct_ind,
     str_ind,
     end_ind,
     plus,
     hash,
     space,
     ign,
     pad,
     prec,
     padprec,
     symb){
     var
      plus_used = [0, 0],
      hash_used = [0, 0],
      space_used = [0, 0],
      ign_used = [0, 0],
      pad_used = [0, 0],
      prec_used = [0, 0];
     function get_plus(param){plus_used[1] = 1; return plus;}
     function get_hash(param){hash_used[1] = 1; return hash;}
     function get_space(param){space_used[1] = 1; return space;}
     function get_ign(param){ign_used[1] = 1; return ign;}
     function get_pad(param){pad_used[1] = 1; return pad;}
     function get_prec(param){prec_used[1] = 1; return prec;}
     function get_padprec(param){pad_used[1] = 1; return padprec;}
     function get_int_pad(param){
      var pad = get_pad(0), match = get_prec(0);
      if(typeof match === "number" && ! match) return pad;
      if(typeof pad === "number") return 0;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _H_
                 : incompatible_flag(pct_ind, str_ind, 48, cst_precision$1)
               : pad;
      if(2 > pad[1]) return pad;
      var n = pad[2];
      return legacy_behavior$0
              ? [0, 1, n]
              : incompatible_flag(pct_ind, str_ind, 48, cst_precision$0);
     }
     function check_no_0(symb, pad){
      if(typeof pad === "number") return pad;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _I_
                 : incompatible_flag(pct_ind, str_ind, symb, cst_0$1)
               : pad;
      if(2 > pad[1]) return pad;
      var width = pad[2];
      return legacy_behavior$0
              ? [0, 1, width]
              : incompatible_flag(pct_ind, str_ind, symb, cst_0$0);
     }
     function opt_of_pad(c, pad){
      if(typeof pad === "number") return 0;
      if(0 === pad[0])
       switch(pad[1]){
         case 0:
          var width = pad[2];
          return legacy_behavior$0
                  ? [0, width]
                  : incompatible_flag(pct_ind, str_ind, c, cst$24);
         case 1:
          var width$0 = pad[2]; return [0, width$0];
         default:
          var width$1 = pad[2];
          return legacy_behavior$0
                  ? [0, width$1]
                  : incompatible_flag(pct_ind, str_ind, c, cst_0$2);
       }
      return incompatible_flag(pct_ind, str_ind, c, cst$25);
     }
     function get_pad_opt(c){return opt_of_pad(c, get_pad(0));}
     function get_padprec_opt(c){return opt_of_pad(c, get_padprec(0));}
     a:
     {
      if(124 > symb)
       switch(symb){
         case 33:
          var
           fmt_rest$5 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [10, fmt_rest$5]];
          break a;
         case 40:
          var
           sub_end = search_subformat_end(str_ind, end_ind, 41),
           fmt_rest$7 = parse(sub_end + 2 | 0, end_ind)[1],
           sub_fmt = parse(str_ind, sub_end)[1],
           sub_fmtty = fmtty_of_fmt(sub_fmt);
          if(get_ign(0))
           var
            ignored$2 = [9, get_pad_opt(95), sub_fmtty],
            _aJ_ = [0, [23, ignored$2, fmt_rest$7]];
          else
           var _aJ_ = [0, [14, get_pad_opt(40), sub_fmtty, fmt_rest$7]];
          var fmt_result = _aJ_;
          break a;
         case 44:
          var fmt_result = parse(str_ind, end_ind); break a;
         case 67:
          var
           fmt_rest$10 = parse(str_ind, end_ind)[1],
           _aL_ =
             get_ign(0) ? [0, [23, 1, fmt_rest$10]] : [0, [1, fmt_rest$10]],
           fmt_result = _aL_;
          break a;
         case 78:
          var fmt_rest$14 = parse(str_ind, end_ind)[1], counter$0 = 2;
          if(get_ign(0))
           var
            ignored$6 = [11, counter$0],
            _aR_ = [0, [23, ignored$6, fmt_rest$14]];
          else
           var _aR_ = [0, [21, counter$0, fmt_rest$14]];
          var fmt_result = _aR_;
          break a;
         case 83:
          var
           pad$6 = check_no_0(symb, get_padprec(0)),
           fmt_rest$15 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$7 = [1, get_padprec_opt(95)],
            _aS_ = [0, [23, ignored$7, fmt_rest$15]];
          else
           var
            match$5 = make_padding_fmt_ebb(pad$6, fmt_rest$15),
            fmt_rest$16 = match$5[2],
            pad$7 = match$5[1],
            _aS_ = [0, [3, pad$7, fmt_rest$16]];
          var fmt_result = _aS_;
          break a;
         case 91:
          if(str_ind === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          var
           char_set = create_char_set(0),
           add_range =
             function(c$0, c){
              if(c >= c$0){
               var i = c$0;
               for(;;){
                add_in_char_set(char_set, caml_call1(Stdlib[29], i));
                var _a$_ = i + 1 | 0;
                if(c === i) break;
                i = _a$_;
               }
              }
             },
           fail_single_percent =
             function(str_ind){
              return caml_call2(failwith_message(_R_), str, str_ind);
             },
           parse_char_set_content =
             function(counter, str_ind, end_ind){
              var str_ind$0 = str_ind;
              for(;;){
               if(str_ind$0 === end_ind)
                invalid_format_message(end_ind, cst_unexpected_end_of_format);
               var c = caml_string_get(str, str_ind$0);
               if(45 !== c){
                if(93 === c) return str_ind$0 + 1 | 0;
                var _a__ = str_ind$0 + 1 | 0;
                if(counter >= 50)
                 return caml_trampoline_return
                         (parse_char_set_after_char$0, [0, _a__, end_ind, c]);
                var counter$0 = counter + 1 | 0;
                return parse_char_set_after_char$0
                        (counter$0, _a__, end_ind, c);
               }
               add_in_char_set(char_set, 45);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
              }
             },
           parse_char_set_after_char$0 =
             function(counter, str_ind, end_ind, c){
              var str_ind$0 = str_ind, c$0 = c;
              for(;;){
               if(str_ind$0 === end_ind)
                invalid_format_message(end_ind, cst_unexpected_end_of_format);
               var c$1 = caml_string_get(str, str_ind$0);
               a:
               {
                if(46 <= c$1){
                 if(64 !== c$1){
                  if(93 !== c$1) break a;
                  add_in_char_set(char_set, c$0);
                  return str_ind$0 + 1 | 0;
                 }
                }
                else if(37 !== c$1){
                 if(45 > c$1) break a;
                 var str_ind$2 = str_ind$0 + 1 | 0;
                 if(str_ind$2 === end_ind)
                  invalid_format_message
                   (end_ind, cst_unexpected_end_of_format);
                 var c$2 = caml_string_get(str, str_ind$2);
                 if(37 === c$2){
                  if((str_ind$2 + 1 | 0) === end_ind)
                   invalid_format_message
                    (end_ind, cst_unexpected_end_of_format);
                  var c$3 = caml_string_get(str, str_ind$2 + 1 | 0);
                  if(37 !== c$3 && 64 !== c$3)
                   return fail_single_percent(str_ind$2);
                  add_range(c$0, c$3);
                  var _a8_ = str_ind$2 + 2 | 0;
                  if(counter >= 50)
                   return caml_trampoline_return
                           (parse_char_set_content, [0, _a8_, end_ind]);
                  var counter$1 = counter + 1 | 0;
                  return parse_char_set_content(counter$1, _a8_, end_ind);
                 }
                 if(93 === c$2){
                  add_in_char_set(char_set, c$0);
                  add_in_char_set(char_set, 45);
                  return str_ind$2 + 1 | 0;
                 }
                 add_range(c$0, c$2);
                 var _a9_ = str_ind$2 + 1 | 0;
                 if(counter >= 50)
                  return caml_trampoline_return
                          (parse_char_set_content, [0, _a9_, end_ind]);
                 var counter$0 = counter + 1 | 0;
                 return parse_char_set_content(counter$0, _a9_, end_ind);
                }
                if(37 === c$0){
                 add_in_char_set(char_set, c$1);
                 var _a7_ = str_ind$0 + 1 | 0;
                 if(counter >= 50)
                  return caml_trampoline_return
                          (parse_char_set_content, [0, _a7_, end_ind]);
                 var counter$2 = counter + 1 | 0;
                 return parse_char_set_content(counter$2, _a7_, end_ind);
                }
               }
               if(37 === c$0) fail_single_percent(str_ind$0);
               add_in_char_set(char_set, c$0);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
               c$0 = c$1;
              }
             },
           parse_char_set_after_char =
             function(str_ind, end_ind, c){
              return caml_trampoline
                      (parse_char_set_after_char$0(0, str_ind, end_ind, c));
             };
          if(str_ind === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          if(94 === caml_string_get(str, str_ind))
           var
            str_ind$0 = str_ind + 1 | 0,
            reverse = 1,
            str_ind$1 = str_ind$0;
          else
           var reverse = 0, str_ind$1 = str_ind;
          if(str_ind$1 === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          var
           c = caml_string_get(str, str_ind$1),
           next_ind = parse_char_set_after_char(str_ind$1 + 1 | 0, end_ind, c),
           char_set$0 = freeze_char_set(char_set),
           char_set$1 = reverse ? rev_char_set(char_set$0) : char_set$0,
           fmt_rest$19 = parse(next_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$9 = [10, get_pad_opt(95), char_set$1],
            _aX_ = [0, [23, ignored$9, fmt_rest$19]];
          else
           var _aX_ = [0, [20, get_pad_opt(91), char_set$1, fmt_rest$19]];
          var fmt_result = _aX_;
          break a;
         case 97:
          var
           fmt_rest$20 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [15, fmt_rest$20]];
          break a;
         case 99:
          var
           char_format =
             function(fmt_rest){
              return get_ign(0) ? [0, [23, 0, fmt_rest]] : [0, [0, fmt_rest]];
             },
           fmt_rest$21 = parse(str_ind, end_ind)[1],
           match$7 = get_pad_opt(99);
          if(match$7){
           if(0 === match$7[1])
            var
             _aY_ =
               get_ign(0) ? [0, [23, 3, fmt_rest$21]] : [0, [22, fmt_rest$21]],
             _aZ_ = _aY_;
           else
            var
             _aZ_ =
               legacy_behavior$0
                ? char_format(fmt_rest$21)
                : invalid_format_message
                  (str_ind, cst_non_zero_widths_are_unsupp);
           var _a0_ = _aZ_;
          }
          else
           var _a0_ = char_format(fmt_rest$21);
          var fmt_result = _a0_;
          break a;
         case 114:
          var
           fmt_rest$22 = parse(str_ind, end_ind)[1],
           _a1_ =
             get_ign(0) ? [0, [23, 2, fmt_rest$22]] : [0, [19, fmt_rest$22]],
           fmt_result = _a1_;
          break a;
         case 115:
          var
           pad$9 = check_no_0(symb, get_padprec(0)),
           fmt_rest$23 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$10 = [0, get_padprec_opt(95)],
            _a2_ = [0, [23, ignored$10, fmt_rest$23]];
          else
           var
            match$8 = make_padding_fmt_ebb(pad$9, fmt_rest$23),
            fmt_rest$24 = match$8[2],
            pad$10 = match$8[1],
            _a2_ = [0, [2, pad$10, fmt_rest$24]];
          var fmt_result = _a2_;
          break a;
         case 116:
          var
           fmt_rest$25 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [16, fmt_rest$25]];
          break a;
         case 123:
          var
           sub_end$0 = search_subformat_end(str_ind, end_ind, 125),
           sub_fmt$0 = parse(str_ind, sub_end$0)[1],
           fmt_rest$26 = parse(sub_end$0 + 2 | 0, end_ind)[1],
           sub_fmtty$0 = fmtty_of_fmt(sub_fmt$0);
          if(get_ign(0))
           var
            ignored$11 = [8, get_pad_opt(95), sub_fmtty$0],
            _a3_ = [0, [23, ignored$11, fmt_rest$26]];
          else
           var _a3_ = [0, [13, get_pad_opt(123), sub_fmtty$0, fmt_rest$26]];
          var fmt_result = _a3_;
          break a;
         case 66:
         case 98:
          var
           pad$3 = check_no_0(symb, get_padprec(0)),
           fmt_rest$8 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$3 = [7, get_padprec_opt(95)],
            _aK_ = [0, [23, ignored$3, fmt_rest$8]];
          else
           var
            match$3 = make_padding_fmt_ebb(pad$3, fmt_rest$8),
            fmt_rest$9 = match$3[2],
            pad$4 = match$3[1],
            _aK_ = [0, [9, pad$4, fmt_rest$9]];
          var fmt_result = _aK_;
          break a;
         case 37:
         case 64:
          var
           fmt_rest$6 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [12, symb, fmt_rest$6]];
          break a;
         case 76:
         case 108:
         case 110:
          if(str_ind !== end_ind){
           var symb$0 = caml_string_get(str, str_ind), _a4_ = symb$0 - 88 | 0;
           b:
           {
            if(32 >= _a4_ >>> 0)
             switch(_a4_){
               case 0:
               case 12:
               case 17:
               case 23:
               case 29:
               case 32:
                var _aQ_ = 1; break b;
             }
            var _aQ_ = 0;
           }
           if(_aQ_) break;
          }
          var fmt_rest$13 = parse(str_ind, end_ind)[1];
          b:
          {
           if(108 <= symb){
            if(111 > symb)
             switch(symb - 108 | 0){
               case 0:
                var counter = 0; break b;
               case 1: break;
               default: var counter = 1; break b;
             }
           }
           else if(76 === symb){var counter = 2; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
          }
          if(get_ign(0))
           var
            ignored$5 = [11, counter],
            _aP_ = [0, [23, ignored$5, fmt_rest$13]];
          else
           var _aP_ = [0, [21, counter, fmt_rest$13]];
          var fmt_result = _aP_;
          break a;
         case 32:
         case 35:
         case 43:
         case 45:
         case 95:
          var
           fmt_result = caml_call3(failwith_message(_M_), str, pct_ind, symb);
          break a;
         case 88:
         case 100:
         case 105:
         case 111:
         case 117:
         case 120:
          var
           _aT_ = get_space(0),
           _aU_ = get_hash(0),
           iconv$2 =
             compute_int_conv(pct_ind, str_ind, get_plus(0), _aU_, _aT_, symb),
           fmt_rest$17 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$8 = [2, iconv$2, get_pad_opt(95)],
            _aV_ = [0, [23, ignored$8, fmt_rest$17]];
          else
           var
            _aW_ = get_prec(0),
            match$6 = make_padprec_fmt_ebb(get_int_pad(0), _aW_, fmt_rest$17),
            fmt_rest$18 = match$6[3],
            prec$4 = match$6[2],
            pad$8 = match$6[1],
            _aV_ = [0, [4, iconv$2, pad$8, prec$4, fmt_rest$18]];
          var fmt_result = _aV_;
          break a;
         case 69:
         case 70:
         case 71:
         case 72:
         case 101:
         case 102:
         case 103:
         case 104:
          var
           space$1 = get_space(0),
           hash$1 = get_hash(0),
           plus$2 = get_plus(0),
           flag =
             plus$2
              ? space$1
                ? legacy_behavior$0
                  ? 1
                  : incompatible_flag(pct_ind, str_ind, 32, cst$36)
                : 1
              : space$1 ? 2 : 0;
          b:
          {
           c:
           if(73 <= symb){
            var switcher = symb - 101 | 0;
            if(3 >= switcher >>> 0){
             switch(switcher){
               case 0:
                var _a5_ = 1; break;
               case 1:
                var _a5_ = 0; break;
               case 2:
                var _a5_ = 3; break;
               default: var _a5_ = 6;
             }
             var kind = _a5_;
             break b;
            }
           }
           else if(69 <= symb){
            switch(symb - 69 | 0){
              case 0:
               var _a6_ = 2; break;
              case 1:
               break c;
              case 2:
               var _a6_ = 4; break;
              default: var _a6_ = 7;
            }
            var kind = _a6_;
            break b;
           }
           if(hash$1){
            if(70 === symb){var kind = 8; break b;}
           }
           else if(70 === symb){var kind = 5; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
          }
          var
           fconv = [0, flag, kind],
           fmt_rest$11 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){
           var match = get_prec(0);
           if(typeof match === "number")
            var
             _aM_ =
               match ? incompatible_flag(pct_ind, str_ind, 95, cst$26) : 0;
           else
            var ndec = match[1], _aM_ = [0, ndec];
           var
            ignored$4 = [6, get_pad_opt(95), _aM_],
            _aN_ = [0, [23, ignored$4, fmt_rest$11]];
          }
          else
           var
            _aO_ = get_prec(0),
            match$4 = make_padprec_fmt_ebb(get_pad(0), _aO_, fmt_rest$11),
            fmt_rest$12 = match$4[3],
            prec$3 = match$4[2],
            pad$5 = match$4[1],
            _aN_ = [0, [8, fconv, pad$5, prec$3, fmt_rest$12]];
          var fmt_result = _aN_;
          break a;
       }
      b:
      if(108 <= symb){
       if(111 > symb){
        switch(symb - 108 | 0){
          case 0:
           var
            _at_ = caml_string_get(str, str_ind),
            _au_ = get_space(0),
            _av_ = get_hash(0),
            iconv =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _av_, _au_, _at_),
            fmt_rest = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0))
            var
             ignored = [3, iconv, get_pad_opt(95)],
             _aw_ = [0, [23, ignored, fmt_rest]];
           else
            var
             _ay_ = get_prec(0),
             match$0 = make_padprec_fmt_ebb(get_int_pad(0), _ay_, fmt_rest),
             fmt_rest$0 = match$0[3],
             prec$0 = match$0[2],
             pad$0 = match$0[1],
             _aw_ = [0, [5, iconv, pad$0, prec$0, fmt_rest$0]];
           var _ax_ = _aw_;
           break;
          case 1:
           break b;
          default:
           var
            _az_ = caml_string_get(str, str_ind),
            _aA_ = get_space(0),
            _aB_ = get_hash(0),
            iconv$0 =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _aB_, _aA_, _az_),
            fmt_rest$1 = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0))
            var
             ignored$0 = [4, iconv$0, get_pad_opt(95)],
             _aC_ = [0, [23, ignored$0, fmt_rest$1]];
           else
            var
             _aD_ = get_prec(0),
             match$1 = make_padprec_fmt_ebb(get_int_pad(0), _aD_, fmt_rest$1),
             fmt_rest$2 = match$1[3],
             prec$1 = match$1[2],
             pad$1 = match$1[1],
             _aC_ = [0, [6, iconv$0, pad$1, prec$1, fmt_rest$2]];
           var _ax_ = _aC_;
        }
        var fmt_result = _ax_;
        break a;
       }
      }
      else if(76 === symb){
       var
        _aE_ = caml_string_get(str, str_ind),
        _aF_ = get_space(0),
        _aG_ = get_hash(0),
        iconv$1 =
          compute_int_conv
           (pct_ind, str_ind + 1 | 0, get_plus(0), _aG_, _aF_, _aE_),
        fmt_rest$3 = parse(str_ind + 1 | 0, end_ind)[1];
       if(get_ign(0))
        var
         ignored$1 = [5, iconv$1, get_pad_opt(95)],
         _aH_ = [0, [23, ignored$1, fmt_rest$3]];
       else
        var
         _aI_ = get_prec(0),
         match$2 = make_padprec_fmt_ebb(get_int_pad(0), _aI_, fmt_rest$3),
         fmt_rest$4 = match$2[3],
         prec$2 = match$2[2],
         pad$2 = match$2[1],
         _aH_ = [0, [7, iconv$1, pad$2, prec$2, fmt_rest$4]];
       var fmt_result = _aH_;
       break a;
      }
      var
       fmt_result =
         caml_call3(failwith_message(_J_), str, str_ind - 1 | 0, symb);
     }
     if(1 - legacy_behavior$0){
      var _ak_ = 1 - plus_used[1], plus$0 = _ak_ ? plus : _ak_;
      if(plus$0) incompatible_flag(pct_ind, str_ind, symb, cst$27);
      var _al_ = 1 - hash_used[1], hash$0 = _al_ ? hash : _al_;
      if(hash$0) incompatible_flag(pct_ind, str_ind, symb, cst$28);
      var _am_ = 1 - space_used[1], space$0 = _am_ ? space : _am_;
      if(space$0) incompatible_flag(pct_ind, str_ind, symb, cst$29);
      var
       _an_ = 1 - pad_used[1],
       _ao_ = _an_ ? caml_notequal([0, pad], _K_) : _an_;
      if(_ao_) incompatible_flag(pct_ind, str_ind, symb, cst_padding$0);
      var
       _ap_ = 1 - prec_used[1],
       _aq_ = _ap_ ? caml_notequal([0, prec], _L_) : _ap_;
      if(_aq_){
       var _ar_ = ign ? 95 : symb;
       incompatible_flag(pct_ind, str_ind, _ar_, cst_precision$2);
      }
      var plus$1 = ign ? plus : ign;
      if(plus$1) incompatible_flag(pct_ind, str_ind, 95, cst$30);
     }
     var _as_ = 1 - ign_used[1], ign$0 = _as_ ? ign : _as_;
     a:
     if(ign$0){
      b:
      {
       if(38 <= symb){
        if(44 !== symb && 64 !== symb) break b;
       }
       else if(33 !== symb && 37 > symb) break b;
       if(legacy_behavior$0) break a;
      }
      incompatible_flag(pct_ind, str_ind, symb, cst$31);
     }
     return fmt_result;
    }
    function parse_tag(is_open_tag, str_ind, end_ind){
     try{
      if(str_ind === end_ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      if(60 !== caml_string_get(str, str_ind))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var ind = caml_call3(Stdlib_String[32], str, str_ind + 1 | 0, 62);
      if(end_ind <= ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       sub_str =
         caml_call3
          (Stdlib_String[16], str, str_ind, (ind - str_ind | 0) + 1 | 0),
       fmt_rest$0 = parse(ind + 1 | 0, end_ind)[1],
       sub_fmt = parse(str_ind, ind + 1 | 0)[1],
       sub_format$0 = [0, sub_fmt, sub_str],
       formatting$0 = is_open_tag ? [0, sub_format$0] : [1, sub_format$0],
       _ai_ = [0, [18, formatting$0, fmt_rest$0]];
      return _ai_;
     }
     catch(_aj_){
      var _ah_ = caml_wrap_exception(_aj_);
      if(_ah_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ah_, 0);
      var
       fmt_rest = parse(str_ind, end_ind)[1],
       formatting = is_open_tag ? [0, sub_format] : [1, sub_format];
      return [0, [18, formatting, fmt_rest]];
     }
    }
    function parse_spaces(str_ind, end_ind){
     var str_ind$0 = str_ind;
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      if(32 !== caml_string_get(str, str_ind$0)) return str_ind$0;
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
     }
    }
    function parse_positive(str_ind, end_ind, acc){
     var str_ind$0 = str_ind, acc$0 = acc;
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind$0);
      if(9 < c - 48 >>> 0) return [0, str_ind$0, acc$0];
      var new_acc = (acc$0 * 10 | 0) + (c - 48 | 0) | 0;
      if(Stdlib_Sys[12] < new_acc){
       var _ag_ = Stdlib_Sys[12];
       return caml_call3(failwith_message(_S_), str, new_acc, _ag_);
      }
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
      acc$0 = new_acc;
     }
    }
    function parse_integer(str_ind, end_ind){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var match = caml_string_get(str, str_ind);
     if(48 <= match){
      if(58 > match) return parse_positive(str_ind, end_ind, 0);
     }
     else if(45 === match){
      if((str_ind + 1 | 0) === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind + 1 | 0);
      if(9 < c - 48 >>> 0)
       return expected_character(str_ind + 1 | 0, cst_digit, c);
      var
       match$0 = parse_positive(str_ind + 1 | 0, end_ind, 0),
       n = match$0[2],
       next_ind = match$0[1];
      return [0, next_ind, - n | 0];
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
    }
    function add_literal(lit_start, str_ind, fmt){
     var size = str_ind - lit_start | 0;
     return 0 === size
             ? [0, fmt]
             : 1
               === size
               ? [0, [12, caml_string_get(str, lit_start), fmt]]
               : [0,
                 [11,
                  caml_call3(Stdlib_String[16], str, lit_start, size),
                  fmt]];
    }
    function search_subformat_end(str_ind, end_ind, c){
     var str_ind$0 = str_ind;
     for(;;){
      if(str_ind$0 === end_ind)
       caml_call3(failwith_message(_U_), str, c, end_ind);
      if(37 === caml_string_get(str, str_ind$0)){
       if((str_ind$0 + 1 | 0) === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       if(caml_string_get(str, str_ind$0 + 1 | 0) === c) return str_ind$0;
       var match = caml_string_get(str, str_ind$0 + 1 | 0);
       if(95 <= match){
        if(123 <= match){
         if(126 > match)
          switch(match - 123 | 0){
            case 0:
             var
              sub_end = search_subformat_end(str_ind$0 + 2 | 0, end_ind, 125),
              str_ind$2 = sub_end + 2 | 0;
             str_ind$0 = str_ind$2;
             continue;
            case 1: break;
            default:
             return expected_character(str_ind$0 + 1 | 0, cst_character, 125);
          }
        }
        else if(96 > match){
         if((str_ind$0 + 2 | 0) === end_ind)
          invalid_format_message(end_ind, cst_unexpected_end_of_format);
         var match$0 = caml_string_get(str, str_ind$0 + 2 | 0);
         if(40 === match$0){
          var
           sub_end$0 = search_subformat_end(str_ind$0 + 3 | 0, end_ind, 41),
           str_ind$3 = sub_end$0 + 2 | 0;
          str_ind$0 = str_ind$3;
          continue;
         }
         if(123 === match$0){
          var
           sub_end$1 = search_subformat_end(str_ind$0 + 3 | 0, end_ind, 125),
           str_ind$4 = sub_end$1 + 2 | 0;
          str_ind$0 = str_ind$4;
          continue;
         }
         var str_ind$5 = str_ind$0 + 3 | 0;
         str_ind$0 = str_ind$5;
         continue;
        }
       }
       else{
        if(40 === match){
         var
          sub_end$2 = search_subformat_end(str_ind$0 + 2 | 0, end_ind, 41),
          str_ind$6 = sub_end$2 + 2 | 0;
         str_ind$0 = str_ind$6;
         continue;
        }
        if(41 === match)
         return expected_character(str_ind$0 + 1 | 0, cst_character$0, 41);
       }
       var str_ind$1 = str_ind$0 + 2 | 0;
       str_ind$0 = str_ind$1;
      }
      else{var str_ind$7 = str_ind$0 + 1 | 0; str_ind$0 = str_ind$7;}
     }
    }
    function compute_int_conv(pct_ind, str_ind, plus, hash, space, symb){
     var plus$0 = plus, hash$0 = hash, space$0 = space;
     for(;;){
      a:
      {
       if(plus$0){
        if(! hash$0){
         if(space$0) break a;
         if(100 === symb) return 1;
         if(105 === symb) return 4;
         break a;
        }
       }
       else{
        if(! hash$0){
         if(space$0){
          if(100 === symb) return 2;
          if(105 === symb) return 5;
          break a;
         }
         var switcher$1 = symb - 88 | 0;
         if(32 < switcher$1 >>> 0) break a;
         switch(switcher$1){
           case 0:
            return 8;
           case 12:
            return 0;
           case 17:
            return 3;
           case 23:
            return 10;
           case 29:
            return 12;
           case 32:
            return 6;
           default: break a;
         }
        }
        if(! space$0){
         var switcher$0 = symb - 88 | 0;
         if(32 >= switcher$0 >>> 0)
          switch(switcher$0){
            case 0:
             return 9;
            case 12:
             return 13;
            case 17:
             return 14;
            case 23:
             return 11;
            case 29:
             return 15;
            case 32:
             return 7;
          }
        }
       }
       var switcher = symb - 88 | 0;
       if(32 >= switcher >>> 0)
        switch(switcher){
          case 0:
           if(legacy_behavior$0) return 9; break;
          case 23:
           if(legacy_behavior$0) return 11; break;
          case 32:
           if(legacy_behavior$0) return 7; break;
          case 12:
          case 17:
          case 29:
           if(! legacy_behavior$0)
            return incompatible_flag(pct_ind, str_ind, symb, cst$35);
           hash$0 = 0;
           continue;
        }
      }
      if(plus$0)
       if(space$0){
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, 32, cst$32);
        space$0 = 0;
       }
       else{
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, symb, cst$33);
        plus$0 = 0;
       }
      else{
       if(! space$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
       if(! legacy_behavior$0)
        return incompatible_flag(pct_ind, str_ind, symb, cst$34);
       space$0 = 0;
      }
     }
    }
    function incompatible_flag(pct_ind, str_ind, symb, option){
     var
      subfmt =
        caml_call3(Stdlib_String[16], str, pct_ind, str_ind - pct_ind | 0);
     return caml_call5
             (failwith_message(_Y_), str, pct_ind, option, symb, subfmt);
    }
    return parse(0, caml_ml_string_length(str));
   }
   function format_of_string_fmtty(str, fmtty){
    var fmt = fmt_ebb_of_string(0, str)[1];
    try{var _ae_ = [0, type_format(fmt, fmtty), str]; return _ae_;}
    catch(_af_){
     var _ac_ = caml_wrap_exception(_af_);
     if(_ac_ !== Type_mismatch) throw caml_maybe_attach_backtrace(_ac_, 0);
     var _ad_ = string_of_fmtty(fmtty);
     return caml_call2(failwith_message(_Z_), str, _ad_);
    }
   }
   function format_of_string_format(str, param){
    var
     str$0 = param[2],
     fmt = param[1],
     fmt$0 = fmt_ebb_of_string(0, str)[1];
    try{
     var _aa_ = [0, type_format(fmt$0, fmtty_of_fmt(fmt)), str];
     return _aa_;
    }
    catch(_ab_){
     var _$_ = caml_wrap_exception(_ab_);
     if(_$_ === Type_mismatch)
      return caml_call2(failwith_message(___), str, str$0);
     throw caml_maybe_attach_backtrace(_$_, 0);
    }
   }
   var
    CamlinternalFormat =
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
   runtime.caml_register_global(197, CamlinternalFormat, "CamlinternalFormat");
   return;
  }
  (globalThis));

//# 16242 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib;
   function kfprintf(k, o, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              caml_call2(CamlinternalFormat[9], o, acc);
              return caml_call1(k, o);
             },
             0,
             fmt);
   }
   function kbprintf(k, b, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              caml_call2(CamlinternalFormat[10], b, acc);
              return caml_call1(k, b);
             },
             0,
             fmt);
   }
   function ikfprintf(k, oc, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], k, oc, fmt);
   }
   function fprintf(oc, fmt){
    return kfprintf(function(_d_){return 0;}, oc, fmt);
   }
   function bprintf(b, fmt){
    return kbprintf(function(_c_){return 0;}, b, fmt);
   }
   function ifprintf(oc, fmt){
    return ikfprintf(function(_b_){return 0;}, oc, fmt);
   }
   function ibprintf(b, fmt){
    return ikfprintf(function(_a_){return 0;}, b, fmt);
   }
   function printf(fmt){return fprintf(Stdlib[39], fmt);}
   function eprintf(fmt){return fprintf(Stdlib[40], fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = caml_call1(Stdlib_Buffer[1], 64);
     caml_call2(CamlinternalFormat[11], buf, acc);
     return caml_call1(k, caml_call1(Stdlib_Buffer[2], buf));
    }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var
    Stdlib_Printf =
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
   runtime.caml_register_global(3, Stdlib_Printf, "Stdlib__Printf");
   return;
  }
  (globalThis));

//# 17050 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_s = "%s\n",
    cst_Program_not_linked_with_g_$0 =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst_characters = ", characters ",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Uncaught_exception = "Uncaught exception: ",
    cst_Uncaught_exception_s = "Uncaught exception: %s\n",
    caml_check_bound = runtime.caml_check_bound,
    caml_get_exception_raw_backtra = runtime.caml_get_exception_raw_backtrace,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$4,
    cst$3 = cst$4,
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst = "_",
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Obj = global_data.Stdlib__Obj,
    printers = caml_call1(Stdlib_Atomic[1], 0),
    _a_ = [0, [3, 0, 0], "%S"],
    _b_ = [0, [4, 0, 0, 0, 0], "%d"],
    _c_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _d_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _e_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    cst_Out_of_memory = "Out of memory",
    cst_Stack_overflow = "Stack overflow",
    cst_Pattern_matching_failed = "Pattern matching failed",
    cst_Assertion_failed = "Assertion failed",
    cst_Undefined_recursive_module = "Undefined recursive module",
    _f_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    _g_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    cst_Raised_at = "Raised at",
    cst_Re_raised_at = "Re-raised at",
    cst_Raised_by_primitive_operat = "Raised by primitive operation at",
    cst_Called_from = "Called from",
    _h_ = [0, [12, 32, [4, 0, 0, 0, 0]], " %d"],
    cst_inlined = " (inlined)",
    _i_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2, 0, [11, ", line", [2, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line%s, characters %d-%d'],
    _j_ = [0, [11, "s ", [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]]], "s %d-%d"],
    _k_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _l_ = [0, [2, 0, [12, 10, 0]], cst_s],
    _m_ =
      [0,
       [11, cst_Program_not_linked_with_g_$0, 0],
       cst_Program_not_linked_with_g_$0],
    _n_ = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_Program_not_linked_with_g_ = cst_Program_not_linked_with_g_$0;
   function field(x, i){
    var f = x[1 + i];
    if(! caml_call1(Stdlib_Obj[1], f))
     return caml_call2(Stdlib_Printf[4], _b_, f);
    var _ah_ = Stdlib_Obj[15];
    if(caml_obj_tag(f) === _ah_) return caml_call2(Stdlib_Printf[4], _a_, f);
    var _ai_ = Stdlib_Obj[16];
    return caml_obj_tag(f) === _ai_ ? caml_call1(Stdlib[35], f) : cst;
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return cst$0;
    var _af_ = other_fields(x, i + 1 | 0), _ag_ = field(x, i);
    return caml_call3(Stdlib_Printf[4], _c_, _ag_, _af_);
   }
   function use_printers(x){
    var param = caml_call1(Stdlib_Atomic[3], printers);
    for(;;){
     if(! param) return 0;
     var tl = param[2], hd = param[1];
     a:
     {
      try{var val = caml_call1(hd, x);}catch(_ae_){break a;}
      if(val){var s = val[1]; return [0, s];}
     }
     param = tl;
    }
   }
   function string_of_extension_constructo(t){
    if(0 === caml_obj_tag(t)){
     var constructor = t[1][1], match = t.length - 1;
     if(2 < match >>> 0)
      var
       _aa_ = other_fields(t, 2),
       _ab_ = field(t, 1),
       _ad_ = caml_call3(Stdlib_Printf[4], _d_, _ab_, _aa_);
     else
      switch(match){
        case 0:
         var _ad_ = cst$1; break;
        case 1:
         var _ad_ = cst$2; break;
        default:
         var
          _ac_ = field(t, 1),
          _ad_ = caml_call2(Stdlib_Printf[4], _e_, _ac_);
      }
     var match$0 = [0, constructor, [0, _ad_]];
    }
    else
     var match$0 = [0, t[1], 0];
    var fields_opt = match$0[2], constructor$0 = match$0[1];
    if(! fields_opt) return constructor$0;
    var f = fields_opt[1];
    return caml_call2(Stdlib[28], constructor$0, f);
   }
   function to_string_default(x){
    if(x === Stdlib[9]) return cst_Out_of_memory;
    if(x === Stdlib[10]) return cst_Stack_overflow;
    if(x[1] === Stdlib[4]){
     var match = x[2], char$0 = match[3], line = match[2], file = match[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file,
              line,
              char$0,
              char$0 + 5 | 0,
              cst_Pattern_matching_failed);
    }
    if(x[1] === Stdlib[5]){
     var
      match$0 = x[2],
      char$1 = match$0[3],
      line$0 = match$0[2],
      file$0 = match$0[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file$0,
              line$0,
              char$1,
              char$1 + 6 | 0,
              cst_Assertion_failed);
    }
    if(x[1] !== Stdlib[15]) return string_of_extension_constructo(x);
    var
     match$1 = x[2],
     char$2 = match$1[3],
     line$1 = match$1[2],
     file$1 = match$1[1];
    return caml_call6
            (Stdlib_Printf[4],
             locfmt,
             file$1,
             line$1,
             char$2,
             char$2 + 6 | 0,
             cst_Undefined_recursive_module);
   }
   function to_string(e){
    var match = use_printers(e);
    if(! match) return to_string_default(e);
    var s = match[1];
    return s;
   }
   function print(fct, arg){
    try{var _$_ = caml_call1(fct, arg); return _$_;}
    catch(x$0){
     var x = caml_wrap_exception(x$0), ___ = to_string(x);
     caml_call2(Stdlib_Printf[3], _f_, ___);
     caml_call1(Stdlib[63], Stdlib[40]);
     throw caml_maybe_attach_backtrace(x, 0);
    }
   }
   function catch$0(fct, arg){
    try{var _Z_ = caml_call1(fct, arg); return _Z_;}
    catch(x$0){
     var x = caml_wrap_exception(x$0);
     caml_call1(Stdlib[63], Stdlib[39]);
     var _Y_ = to_string(x);
     caml_call2(Stdlib_Printf[3], _g_, _Y_);
     return caml_call1(Stdlib[99], 2);
    }
   }
   function raw_backtrace_entries(bt){return bt;}
   function convert_raw_backtrace(bt){
    return [0, runtime.caml_convert_raw_backtrace(bt)];
   }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
     return is_raise
             ? 0 === pos ? cst_Raised_at : cst_Re_raised_at
             : 0 === pos ? cst_Raised_by_primitive_operat : cst_Called_from;
    }
    if(0 === slot[0]){
     var
      lines =
        slot[3] === slot[6]
         ? caml_call2(Stdlib_Printf[4], _h_, slot[3])
         : caml_call3(Stdlib_Printf[4], _j_, slot[3], slot[6]),
      _R_ = slot[7],
      _S_ = slot[4],
      _T_ = slot[8] ? cst_inlined : cst$3,
      _U_ = slot[2],
      _V_ = slot[9],
      _W_ = info(slot[1]);
     return [0,
             caml_call8
              (Stdlib_Printf[4], _i_, _W_, _V_, _U_, _T_, lines, _S_, _R_)];
    }
    if(slot[1]) return 0;
    var _X_ = info(0);
    return [0, caml_call2(Stdlib_Printf[4], _k_, _X_)];
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return caml_call2(Stdlib_Printf[1], outchan, _m_);
    var a = backtrace[1], _P_ = a.length - 2 | 0, _O_ = 0;
    if(_P_ >= 0){
     var i = _O_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
       caml_call3(Stdlib_Printf[1], outchan, _l_, str);
      }
      var _Q_ = i + 1 | 0;
      if(_P_ === i) break;
      i = _Q_;
     }
    }
    return 0;
   }
   function print_backtrace(outchan){
    return print_raw_backtrace(outchan, caml_get_exception_raw_backtra(0));
   }
   function raw_backtrace_to_string(raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return cst_Program_not_linked_with_g_;
    var
     a = backtrace[1],
     b = caml_call1(Stdlib_Buffer[1], 1024),
     _M_ = a.length - 2 | 0,
     _L_ = 0;
    if(_M_ >= 0){
     var i = _L_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
       caml_call3(Stdlib_Printf[5], b, _n_, str);
      }
      var _N_ = i + 1 | 0;
      if(_M_ === i) break;
      i = _N_;
     }
    }
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function backtrace_slot_is_raise(param){
    return 0 === param[0] ? param[1] : param[1];
   }
   function backtrace_slot_is_inline(param){return 0 === param[0] ? param[8] : 0;
   }
   function backtrace_slot_location(param){
    return 0 === param[0]
            ? [0,
              [0, param[2], param[3], param[4], param[5], param[6], param[7]]]
            : 0;
   }
   function backtrace_slot_defname(param){
    if(0 === param[0] && param[9] !== cst$4) return [0, param[9]];
    return 0;
   }
   function backtrace_slots(raw_backtrace){
    var match = convert_raw_backtrace(raw_backtrace);
    if(! match) return 0;
    var backtrace = match[1], i$1 = backtrace.length - 2 | 0, i = i$1;
    for(;;){
     if(-1 === i)
      var _K_ = 0;
     else{
      var _J_ = 0 === caml_check_bound(backtrace, i)[1 + i][0] ? 1 : 0;
      if(! _J_){var i$0 = i - 1 | 0; i = i$0; continue;}
      var _K_ = _J_;
     }
     return _K_ ? [0, backtrace] : 0;
    }
   }
   function backtrace_slots_of_raw_entry(entry){return backtrace_slots([0, entry]);
   }
   function raw_backtrace_length(bt){return bt.length - 1;}
   function get_backtrace(param){
    return raw_backtrace_to_string(caml_get_exception_raw_backtra(0));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = caml_call1(Stdlib_Atomic[3], printers),
      new_printers = [0, fn, old_printers],
      success =
        caml_call3(Stdlib_Atomic[6], printers, old_printers, new_printers),
      _I_ = 1 - success;
     if(! _I_) return _I_;
    }
   }
   function exn_slot(x){return 0 === caml_obj_tag(x) ? x[1] : x;}
   function exn_slot_id(x){var slot = exn_slot(x); return slot[2];}
   function exn_slot_name(x){var slot = exn_slot(x); return slot[1];}
   var
    errors =
      [0,
        cst$4,
        "(Cannot print locations:\n bytecode executable program file not found)",
        "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
        "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
        "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"].slice
       (),
    _o_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s];
   function default_uncaught_exception_han(exn, raw_backtrace){
    var _F_ = to_string(exn);
    caml_call2(Stdlib_Printf[3], _o_, _F_);
    print_raw_backtrace(Stdlib[40], raw_backtrace);
    var status = runtime.caml_ml_debug_info_status(0);
    if(status < 0){
     var
      _G_ = caml_call1(Stdlib[18], status),
      _H_ = caml_check_bound(errors, _G_)[1 + _G_];
     caml_call1(Stdlib[53], _H_);
    }
    return caml_call1(Stdlib[63], Stdlib[40]);
   }
   var uncaught_exception_handler = [0, default_uncaught_exception_han];
   function set_uncaught_exception_handler(fn){
    uncaught_exception_handler[1] = fn;
    return 0;
   }
   var
    empty_backtrace = [0],
    cst_Fatal_error_out_of_memory_ =
      "Fatal error: out of memory in uncaught exception handler",
    _p_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _q_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"];
   function handle_uncaught_exception(exn$0, debugger_in_use){
    try{
     try{
      var
       raw_backtrace =
         debugger_in_use ? empty_backtrace : caml_get_exception_raw_backtra(0);
      try{caml_call1(Stdlib[103], 0);}catch(_E_){}
      try{
       var
        _A_ = caml_call2(uncaught_exception_handler[1], exn$0, raw_backtrace),
        _z_ = _A_;
      }
      catch(exn$1){
       var
        exn = caml_wrap_exception(exn$1),
        raw_backtrace$0 = caml_get_exception_raw_backtra(0),
        _x_ = to_string(exn$0);
       caml_call2(Stdlib_Printf[3], _p_, _x_);
       print_raw_backtrace(Stdlib[40], raw_backtrace);
       var _y_ = to_string(exn);
       caml_call2(Stdlib_Printf[3], _q_, _y_);
       print_raw_backtrace(Stdlib[40], raw_backtrace$0);
       var _z_ = caml_call1(Stdlib[63], Stdlib[40]);
      }
      var _B_ = _z_;
     }
     catch(_D_){
      var _w_ = caml_wrap_exception(_D_);
      if(_w_ !== Stdlib[9]) throw caml_maybe_attach_backtrace(_w_, 0);
      var _B_ = caml_call1(Stdlib[53], cst_Fatal_error_out_of_memory_);
     }
     return _B_;
    }
    catch(_C_){return 0;}
   }
   runtime.caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
   var
    Stdlib_Printexc =
      [0,
       to_string,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       runtime.caml_record_backtrace,
       runtime.caml_backtrace_status,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       function(_v_){return caml_get_exception_raw_backtra(_v_);},
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       [0,
        backtrace_slot_is_raise,
        backtrace_slot_is_inline,
        backtrace_slot_location,
        backtrace_slot_defname,
        format_backtrace_slot],
       raw_backtrace_length,
       function(_u_, _t_){return runtime.caml_raw_backtrace_slot(_u_, _t_);},
       function(_s_){return runtime.caml_convert_raw_backtrace_slot(_s_);},
       function(_r_){return runtime.caml_raw_backtrace_next_slot(_r_);},
       exn_slot_id,
       exn_slot_name,
       string_of_extension_constructo];
   runtime.caml_register_global(43, Stdlib_Printexc, "Stdlib__Printexc");
   return;
  }
  (globalThis));

//# 17545 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_restore_raw_backtrace = runtime.caml_restore_raw_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib;
   function const$0(c, param){return c;}
   function compose(f, g, x){return caml_call1(f, caml_call1(g, x));}
   function flip(f, x, y){return caml_call2(f, y, x);}
   function negate(p, v){return 1 - caml_call1(p, v);}
   var
    Finally_raised =
      [248, "Stdlib.Fun.Finally_raised", runtime.caml_fresh_oo_id(0)],
    cst_Fun_Finally_raised = "Fun.Finally_raised: ";
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      if(param[1] !== Finally_raised) return 0;
      var exn = param[2], _a_ = caml_call1(Stdlib_Printexc[1], exn);
      return [0, caml_call2(Stdlib[28], cst_Fun_Finally_raised, _a_)];
     });
   var dummy = 0;
   function protect(finally$0, work){
    function finally_no_exn(param){
     try{caml_call1(finally$0, 0); return;}
     catch(e$0){
      var
       e = caml_wrap_exception(e$0),
       bt = caml_call1(Stdlib_Printexc[12], 0),
       exn = [0, Finally_raised, e];
      caml_restore_raw_backtrace(exn, bt);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    try{var result = caml_call1(work, 0);}
    catch(work_exn$0){
     var
      work_exn = caml_wrap_exception(work_exn$0),
      work_bt = caml_call1(Stdlib_Printexc[12], 0);
     finally_no_exn(0);
     caml_restore_raw_backtrace(work_exn, work_bt);
     throw caml_maybe_attach_backtrace(work_exn, 0);
    }
    finally_no_exn(0);
    return result;
   }
   var
    Stdlib_Fun = [0, const$0, compose, flip, negate, protect, Finally_raised];
   runtime.caml_register_global(4, Stdlib_Fun, "Stdlib__Fun");
   return;
  }
  (globalThis));

//# 17797 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_input_bigarray = runtime.caml_ml_input_bigarray,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Fun = global_data.Stdlib__Fun,
    stdin = Stdlib[38],
    open_bin = Stdlib[80],
    open_text = Stdlib[79],
    open_gen = Stdlib[81];
   function with_open(openfun, s, f){
    var ic = caml_call1(openfun, s);
    return caml_call2
            (Stdlib_Fun[5],
             function(param){return caml_call1(Stdlib[94], ic);},
             function(param){return caml_call1(f, ic);});
   }
   function with_open_bin(s, f){return with_open(Stdlib[80], s, f);}
   function with_open_text(s, f){return with_open(Stdlib[79], s, f);}
   function with_open_gen(flags, perm, s, f){
    return with_open(caml_call2(Stdlib[81], flags, perm), s, f);
   }
   var
    seek = Stdlib[96][4],
    pos = Stdlib[96][5],
    length = Stdlib[96][6],
    close = Stdlib[93],
    close_noerr = Stdlib[94];
   function input_char(ic){
    try{var c = caml_call1(Stdlib[82], ic);}
    catch(_x_){
     var _w_ = caml_wrap_exception(_x_);
     if(_w_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_w_, 0);
    }
    return [0, c];
   }
   function input_byte(ic){
    try{var n = caml_call1(Stdlib[87], ic);}
    catch(_v_){
     var _u_ = caml_wrap_exception(_v_);
     if(_u_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_u_, 0);
    }
    return [0, n];
   }
   function input_line(ic){
    try{var s = caml_call1(Stdlib[83], ic);}
    catch(_t_){
     var _s_ = caml_wrap_exception(_t_);
     if(_s_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_s_, 0);
    }
    return [0, s];
   }
   var
    input = Stdlib[84],
    cst_input_bigarray = "input_bigarray",
    _a_ = [0, 0],
    _b_ = [0, 0],
    cst_really_input_bigarray = "really_input_bigarray",
    cst_In_channel_input_all_chann =
      "In_channel.input_all: channel content is larger than maximum string length";
   function input_bigarray(ic, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= ofs)
     return caml_ml_input_bigarray(ic, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_input_bigarray);
   }
   function really_input(ic, buf, pos, len){
    try{caml_call4(Stdlib[85], ic, buf, pos, len); return _a_;}
    catch(_r_){
     var _q_ = caml_wrap_exception(_r_);
     if(_q_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_q_, 0);
    }
   }
   function really_input_bigarray(ic, buf, ofs$1, len$1){
    if(0 <= ofs$1 && 0 <= len$1 && (caml_ba_dim_1(buf) - len$1 | 0) >= ofs$1){
     var ofs = ofs$1, len = len$1;
     for(;;){
      if(0 >= len) return _b_;
      var r = caml_ml_input_bigarray(ic, buf, ofs, len);
      if(0 === r) return 0;
      var len$0 = len - r | 0, ofs$0 = ofs + r | 0;
      ofs = ofs$0;
      len = len$0;
     }
    }
    return caml_call1(Stdlib[1], cst_really_input_bigarray);
   }
   function really_input_string(ic, len){
    try{var s = caml_call2(Stdlib[86], ic, len);}
    catch(_p_){
     var _o_ = caml_wrap_exception(_p_);
     if(_o_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_o_, 0);
    }
    return [0, s];
   }
   function read_upto(ic, buf, ofs, len){
    var ofs$0 = ofs, len$0 = len;
    for(;;){
     if(0 !== len$0){
      var r = caml_call4(Stdlib[84], ic, buf, ofs$0, len$0);
      if(0 !== r){
       var len$1 = len$0 - r | 0, ofs$1 = ofs$0 + r | 0;
       ofs$0 = ofs$1;
       len$0 = len$1;
       continue;
      }
     }
     return ofs$0 - ofs | 0;
    }
   }
   function ensure(buf, ofs, n){
    var len = caml_ml_bytes_length(buf);
    if((ofs + n | 0) <= len) return buf;
    var new_len = [0, len];
    for(;;){
     if(new_len[1] >= (ofs + n | 0)) break;
     new_len[1] = (2 * new_len[1] | 0) + 1 | 0;
    }
    var
     new_len$0 = new_len[1],
     new_len$1 =
       new_len$0 <= Stdlib_Sys[12]
        ? new_len$0
        : ofs
          < Stdlib_Sys[12]
          ? Stdlib_Sys[12]
          : caml_call1(Stdlib[2], cst_In_channel_input_all_chann),
     new_buf = caml_create_bytes(new_len$1);
    caml_call5(Stdlib_Bytes[11], buf, 0, new_buf, 0, ofs);
    return new_buf;
   }
   function input_all(ic){
    var chunk_size = 65536;
    try{
     var
      _k_ = caml_call1(Stdlib[91], ic),
      _l_ = caml_call1(Stdlib[92], ic) - _k_ | 0,
      initial_size = _l_;
    }
    catch(_n_){
     var _i_ = caml_wrap_exception(_n_);
     if(_i_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_i_, 0);
     var initial_size = -1;
    }
    var
     initial_size$0 = 0 <= initial_size ? initial_size : chunk_size,
     initial_size$1 =
       initial_size$0 <= Stdlib_Sys[12] ? initial_size$0 : Stdlib_Sys[12],
     buf = caml_create_bytes(initial_size$1),
     nread = read_upto(ic, buf, 0, initial_size$1);
    if(nread < initial_size$1)
     return caml_call3(Stdlib_Bytes[8], buf, 0, nread);
    try{var c = caml_call1(Stdlib[82], ic);}
    catch(_m_){
     var _j_ = caml_wrap_exception(_m_);
     if(_j_ === Stdlib[12]) return caml_call1(Stdlib_Bytes[44], buf);
     throw caml_maybe_attach_backtrace(_j_, 0);
    }
    var buf$2 = ensure(buf, nread, 65537);
    runtime.caml_bytes_set(buf$2, nread, c);
    var ofs$1 = nread + 1 | 0, buf$0 = buf$2, ofs = ofs$1;
    for(;;){
     var
      buf$1 = ensure(buf$0, ofs, chunk_size),
      rem = caml_ml_bytes_length(buf$1) - ofs | 0,
      r = read_upto(ic, buf$1, ofs, rem);
     if(r < rem) return caml_call3(Stdlib_Bytes[8], buf$1, 0, ofs + r | 0);
     var ofs$0 = ofs + rem | 0;
     buf$0 = buf$1;
     ofs = ofs$0;
    }
   }
   function input_lines(ic){
    try{var line = caml_call1(Stdlib[83], ic);}
    catch(_h_){
     var _e_ = caml_wrap_exception(_h_);
     if(_e_ === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(_e_, 0);
    }
    var block = [0, line, 24029], dst = block, offset = 1;
    for(;;){
     try{var line$0 = caml_call1(Stdlib[83], ic);}
     catch(_g_){
      var _f_ = caml_wrap_exception(_g_);
      if(_f_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_f_, 0);
      dst[1 + offset] = 0;
      return block;
     }
     var dst$0 = [0, line$0, 24029];
     dst[1 + offset] = dst$0;
     dst = dst$0;
     offset = 1;
    }
   }
   function fold_lines(f, accu, ic){
    var accu$0 = accu;
    for(;;){
     try{var line = caml_call1(Stdlib[83], ic);}
     catch(_d_){
      var _c_ = caml_wrap_exception(_d_);
      if(_c_ === Stdlib[12]) return accu$0;
      throw caml_maybe_attach_backtrace(_c_, 0);
     }
     var accu$1 = caml_call2(f, accu$0, line);
     accu$0 = accu$1;
    }
   }
   var
    set_binary_mode = Stdlib[95],
    Stdlib_In_channel =
      [0,
       stdin,
       open_bin,
       open_text,
       open_gen,
       with_open_bin,
       with_open_text,
       with_open_gen,
       close,
       close_noerr,
       input_char,
       input_byte,
       input_line,
       really_input_string,
       input_all,
       input_lines,
       input,
       input_bigarray,
       really_input,
       really_input_bigarray,
       fold_lines,
       seek,
       pos,
       length,
       set_binary_mode,
       runtime.caml_ml_is_binary_mode,
       runtime.caml_sys_isatty];
   runtime.caml_register_global(9, Stdlib_In_channel, "Stdlib__In_channel");
   return;
  }
  (globalThis));

//# 18174 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Digest_of_hex$1 = "Digest.of_hex",
    cst_Digest_subbytes$1 = "Digest.subbytes",
    cst_Digest_substring$1 = "Digest.substring",
    cst_Digest_to_hex$1 = "Digest.to_hex",
    caml_blake2_bytes = runtime.caml_blake2_bytes,
    caml_blake2_final = runtime.caml_blake2_final,
    caml_blake2_string = runtime.caml_blake2_string,
    caml_blake2_update = runtime.caml_blake2_update,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_md5_bytes = runtime.caml_md5_bytes,
    caml_md5_chan = runtime.caml_md5_chan,
    caml_md5_string = runtime.caml_md5_string,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_In_channel = global_data.Stdlib__In_channel,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    cst_Digest_of_hex = cst_Digest_of_hex$1,
    cst_Digest_BLAKE2_wrong_hash_s = "Digest.BLAKE2: wrong hash size",
    cst_Digest_substring = cst_Digest_substring$1,
    cst_Digest_subbytes = cst_Digest_subbytes$1,
    cst_Digest_to_hex = cst_Digest_to_hex$1,
    cst_Digest_of_hex$0 = cst_Digest_of_hex$1;
   function hex_of_string(d){
    function char_hex(n){
     var _o_ = 10 <= n ? (97 + n | 0) - 10 | 0 : 48 + n | 0;
     return caml_call1(Stdlib_Char[1], _o_);
    }
    var
     len = caml_ml_string_length(d),
     result = caml_create_bytes(len * 2 | 0),
     _m_ = len - 1 | 0,
     _l_ = 0;
    if(_m_ >= 0){
     var i = _l_;
     for(;;){
      var x = caml_string_get(d, i);
      caml_bytes_unsafe_set(result, i * 2 | 0, char_hex(x >>> 4 | 0));
      caml_bytes_unsafe_set(result, (i * 2 | 0) + 1 | 0, char_hex(x & 15));
      var _n_ = i + 1 | 0;
      if(_m_ === i) break;
      i = _n_;
     }
    }
    return caml_call1(Stdlib_Bytes[44], result);
   }
   function string_of_hex(s){
    function digit(c){
     if(65 <= c){
      if(97 <= c){
       if(103 > c) return (c - 97 | 0) + 10 | 0;
      }
      else if(71 > c) return (c - 65 | 0) + 10 | 0;
     }
     else if(9 >= c - 48 >>> 0) return c - 48 | 0;
     return caml_call1(Stdlib[1], cst_Digest_of_hex);
    }
    return caml_call2
            (Stdlib_String[2],
             caml_ml_string_length(s) / 2 | 0,
             function(i){
              var
               i$0 = 2 * i | 0,
               _j_ = digit(caml_string_get(s, i$0 + 1 | 0)),
               _k_ = (digit(caml_string_get(s, i$0)) << 4) + _j_ | 0;
              return caml_call1(Stdlib_Char[1], _k_);
             });
   }
   function BLAKE2(X){
    var _a_ = X[1] < 1 ? 1 : 0, _b_ = _a_ || (64 < X[1] ? 1 : 0);
    if(_b_) caml_call1(Stdlib[1], cst_Digest_BLAKE2_wrong_hash_s);
    var
     hash_length = X[1],
     compare = Stdlib_String[10],
     equal = Stdlib_String[9];
    function string(str){
     return caml_blake2_string
             (hash_length, cst, str, 0, caml_ml_string_length(str));
    }
    function bytes(b){
     return caml_blake2_bytes(hash_length, cst, b, 0, caml_ml_bytes_length(b));
    }
    function substring(str, ofs, len){
     var _g_ = ofs < 0 ? 1 : 0;
     if(_g_)
      var _h_ = _g_;
     else
      var
       _i_ = len < 0 ? 1 : 0,
       _h_ = _i_ || ((caml_ml_string_length(str) - len | 0) < ofs ? 1 : 0);
     if(_h_) caml_call1(Stdlib[1], cst_Digest_substring);
     return caml_blake2_string(hash_length, cst, str, ofs, len);
    }
    function subbytes(b, ofs, len){
     var _d_ = ofs < 0 ? 1 : 0;
     if(_d_)
      var _e_ = _d_;
     else
      var
       _f_ = len < 0 ? 1 : 0,
       _e_ = _f_ || ((caml_ml_bytes_length(b) - len | 0) < ofs ? 1 : 0);
     if(_e_) caml_call1(Stdlib[1], cst_Digest_subbytes);
     return caml_blake2_bytes(hash_length, cst, b, ofs, len);
    }
    function channel(ic, toread){
     var
      buf_size = 4096,
      buf = caml_create_bytes(4096),
      ctx = runtime.caml_blake2_create(hash_length, cst);
     if(0 <= toread){
      var toread$0 = toread;
      for(;;){
       if(0 === toread$0) return caml_blake2_final(ctx, hash_length);
       var
        _c_ = caml_call2(Stdlib_Int[10], buf_size, toread$0),
        n = caml_call4(Stdlib_In_channel[16], ic, buf, 0, _c_);
       if(0 === n) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
       caml_blake2_update(ctx, buf, 0, n);
       var toread$1 = toread$0 - n | 0;
       toread$0 = toread$1;
      }
     }
     else
      for(;;){
       var n$0 = caml_call4(Stdlib_In_channel[16], ic, buf, 0, buf_size);
       if(0 === n$0) return caml_blake2_final(ctx, hash_length);
       caml_blake2_update(ctx, buf, 0, n$0);
      }
    }
    function file(filename){
     return caml_call2
             (Stdlib_In_channel[5],
              filename,
              function(ic){return channel(ic, -1);});
    }
    function output(chan, digest){
     return caml_call2(Stdlib[66], chan, digest);
    }
    function input(chan){return caml_call2(Stdlib[86], chan, hash_length);}
    function to_hex(d){
     if(caml_ml_string_length(d) !== hash_length)
      caml_call1(Stdlib[1], cst_Digest_to_hex);
     return hex_of_string(d);
    }
    function of_hex(s){
     if(caml_ml_string_length(s) !== (hash_length * 2 | 0))
      caml_call1(Stdlib[1], cst_Digest_of_hex$0);
     return string_of_hex(s);
    }
    return [0,
            hash_length,
            compare,
            equal,
            string,
            bytes,
            substring,
            subbytes,
            channel,
            file,
            output,
            input,
            to_hex,
            of_hex];
   }
   var
    BLAKE128 = BLAKE2([0, 16]),
    BLAKE256 = BLAKE2([0, 32]),
    BLAKE512 = BLAKE2([0, 64]),
    compare = Stdlib_String[10],
    equal = Stdlib_String[9],
    cst_Digest_substring$0 = cst_Digest_substring$1,
    cst_Digest_subbytes$0 = cst_Digest_subbytes$1,
    cst_Digest_to_hex$0 = cst_Digest_to_hex$1,
    cst_Digest_from_hex = "Digest.from_hex";
   function string(str){
    return caml_md5_string(str, 0, caml_ml_string_length(str));
   }
   function bytes(b){return caml_md5_bytes(b, 0, caml_ml_bytes_length(b));}
   function substring(str, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(str) - len | 0) >= ofs)
     return caml_md5_string(str, ofs, len);
    return caml_call1(Stdlib[1], cst_Digest_substring$0);
   }
   function subbytes(b, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(b) - len | 0) >= ofs)
     return caml_md5_bytes(b, ofs, len);
    return caml_call1(Stdlib[1], cst_Digest_subbytes$0);
   }
   function file(filename){
    return caml_call2
            (Stdlib_In_channel[5],
             filename,
             function(ic){return caml_md5_chan(ic, -1);});
   }
   function output(chan, digest){return caml_call2(Stdlib[66], chan, digest);}
   function input(chan){return caml_call2(Stdlib[86], chan, 16);}
   function to_hex(d){
    if(16 !== caml_ml_string_length(d))
     caml_call1(Stdlib[1], cst_Digest_to_hex$0);
    return hex_of_string(d);
   }
   function of_hex(s){
    if(32 !== caml_ml_string_length(s))
     caml_call1(Stdlib[1], cst_Digest_from_hex);
    return string_of_hex(s);
   }
   var
    Stdlib_Digest =
      [0,
       compare,
       equal,
       string,
       bytes,
       substring,
       subbytes,
       caml_md5_chan,
       file,
       output,
       input,
       to_hex,
       of_hex,
       of_hex,
       BLAKE128,
       BLAKE256,
       BLAKE512,
       [0,
        16,
        compare,
        equal,
        string,
        bytes,
        substring,
        subbytes,
        caml_md5_chan,
        file,
        output,
        input,
        to_hex,
        of_hex]];
   runtime.caml_register_global(21, Stdlib_Digest, "Stdlib__Digest");
   return;
  }
  (globalThis));

//# 18449 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bigarray_Array3_of_array_n$1 =
      "Bigarray.Array3.of_array: non-cubic data",
    caml_array_make = runtime.caml_array_make,
    caml_ba_change_layout = runtime.caml_ba_change_layout,
    caml_ba_create = runtime.caml_ba_create,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_kind = runtime.caml_ba_kind,
    caml_ba_num_dims = runtime.caml_ba_num_dims,
    caml_ba_reshape = runtime.caml_ba_reshape,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_set_2 = runtime.caml_ba_set_2,
    caml_ba_set_3 = runtime.caml_ba_set_3,
    caml_ba_set_generic = runtime.caml_ba_set_generic,
    caml_ba_slice = runtime.caml_ba_slice,
    caml_check_bound = runtime.caml_check_bound,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function kind_size_in_bytes(param){
    switch(param){
      case 0:
       return 4;
      case 1:
       return 8;
      case 2:
       return 1;
      case 3:
       return 1;
      case 4:
       return 2;
      case 5:
       return 2;
      case 6:
       return 4;
      case 7:
       return 8;
      case 8:
       return Stdlib_Sys[9] / 8 | 0;
      case 9:
       return Stdlib_Sys[9] / 8 | 0;
      case 10:
       return 8;
      case 11:
       return 16;
      case 12:
       return 1;
      default: return 2;
    }
   }
   var
    cst_Bigarray_Array2_of_array_n =
      "Bigarray.Array2.of_array: non-rectangular data",
    cst_Bigarray_Array3_of_array_n = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_Array3_of_array_n$0 = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_array0_of_genarra = "Bigarray.array0_of_genarray",
    cst_Bigarray_array1_of_genarra = "Bigarray.array1_of_genarray",
    cst_Bigarray_array2_of_genarra = "Bigarray.array2_of_genarray",
    cst_Bigarray_array3_of_genarra = "Bigarray.array3_of_genarray";
   function cloop(arr, idx, f, col, max){
    if(col === idx.length - 1){
     caml_ba_set_generic(arr, idx, caml_call1(f, idx));
     return;
    }
    var _am_ = caml_check_bound(max, col)[1 + col] - 1 | 0, _al_ = 0;
    if(_am_ >= 0){
     var j = _al_;
     for(;;){
      caml_check_bound(idx, col)[1 + col] = j;
      cloop(arr, idx, f, col + 1 | 0, max);
      var _an_ = j + 1 | 0;
      if(_am_ === j) break;
      j = _an_;
     }
    }
   }
   function floop(arr, idx, f, col, max){
    if(0 > col){caml_ba_set_generic(arr, idx, caml_call1(f, idx)); return;}
    var _aj_ = caml_check_bound(max, col)[1 + col], _ai_ = 1;
    if(_aj_ >= 1){
     var j = _ai_;
     for(;;){
      caml_check_bound(idx, col)[1 + col] = j;
      floop(arr, idx, f, col - 1 | 0, max);
      var _ak_ = j + 1 | 0;
      if(_aj_ === j) break;
      j = _ak_;
     }
    }
   }
   function init(kind, layout, dims, f){
    var arr = caml_ba_create(kind, layout, dims), dlen = dims.length - 1;
    return layout
            ? (floop
               (arr, caml_array_make(dlen, 1), f, dlen - 1 | 0, dims),
              arr)
            : (cloop(arr, caml_array_make(dlen, 0), f, 0, dims), arr);
   }
   function dims(a){
    var
     n = caml_ba_num_dims(a),
     d = caml_array_make(n, 0),
     _af_ = n - 1 | 0,
     _ae_ = 0;
    if(_af_ >= 0){
     var i = _ae_;
     for(;;){
      var _ag_ = runtime.caml_ba_dim(a, i);
      caml_check_bound(d, i)[1 + i] = _ag_;
      var _ah_ = i + 1 | 0;
      if(_af_ === i) break;
      i = _ah_;
     }
    }
    return d;
   }
   function size_in_bytes(arr){
    var
     _ac_ = dims(arr),
     _ad_ = caml_call3(Stdlib_Array[18], caml_mul, 1, _ac_);
    return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _ad_);
   }
   function create(kind, layout){return caml_ba_create(kind, layout, [0]);}
   function get(arr){return runtime.caml_ba_get_generic(arr, [0]);}
   function set(arr){
    var _aa_ = [0];
    return function(_ab_){return caml_ba_set_generic(arr, _aa_, _ab_);};
   }
   function size_in_bytes$0(arr){
    return kind_size_in_bytes(caml_ba_kind(arr));
   }
   function of_value(kind, layout, v){
    var a = create(kind, layout);
    set(a)(v);
    return a;
   }
   function create$0(kind, layout, dim){
    return caml_ba_create(kind, layout, [0, dim]);
   }
   function size_in_bytes$1(arr){
    var _$_ = caml_ba_dim_1(arr);
    return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _$_);
   }
   function slice(a, n){
    return runtime.caml_ba_layout(a)
            ? caml_ba_slice(a, [0, n])
            : caml_ba_slice(a, [0, n]);
   }
   function init$0(kind, layout, dim, f){
    var arr = create$0(kind, layout, dim);
    if(layout){
     var _Z_ = 1;
     if(dim >= 1){
      var i$0 = _Z_;
      for(;;){
       caml_ba_set_1(arr, i$0, caml_call1(f, i$0));
       var ___ = i$0 + 1 | 0;
       if(dim === i$0) break;
       i$0 = ___;
      }
     }
     return arr;
    }
    var _X_ = dim - 1 | 0, _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_ba_set_1(arr, i, caml_call1(f, i));
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return arr;
   }
   function of_array(kind, layout, data){
    var
     ba = create$0(kind, layout, data.length - 1),
     ofs = layout ? 1 : 0,
     _U_ = data.length - 2 | 0,
     _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_ba_set_1(ba, i + ofs | 0, caml_check_bound(data, i)[1 + i]);
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return ba;
   }
   function create$1(kind, layout, dim1, dim2){
    return caml_ba_create(kind, layout, [0, dim1, dim2]);
   }
   function size_in_bytes$2(arr){
    var _R_ = caml_ba_dim_2(arr), _S_ = caml_ba_dim_1(arr);
    return caml_mul(caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _S_), _R_);
   }
   function slice_left(a, n){return caml_ba_slice(a, [0, n]);}
   function slice_right(a, n){return caml_ba_slice(a, [0, n]);}
   function init$1(kind, layout, dim1, dim2, f){
    var arr = create$1(kind, layout, dim1, dim2);
    if(layout){
     var _N_ = 1;
     if(dim2 >= 1){
      var j$0 = _N_;
      for(;;){
       var _O_ = 1;
       if(dim1 >= 1){
        var i$0 = _O_;
        for(;;){
         caml_ba_set_2(arr, i$0, j$0, caml_call2(f, i$0, j$0));
         var _Q_ = i$0 + 1 | 0;
         if(dim1 === i$0) break;
         i$0 = _Q_;
        }
       }
       var _P_ = j$0 + 1 | 0;
       if(dim2 === j$0) break;
       j$0 = _P_;
      }
     }
     return arr;
    }
    var _I_ = dim1 - 1 | 0, _H_ = 0;
    if(_I_ >= 0){
     var i = _H_;
     for(;;){
      var _K_ = dim2 - 1 | 0, _J_ = 0;
      if(_K_ >= 0){
       var j = _J_;
       for(;;){
        caml_ba_set_2(arr, i, j, caml_call2(f, i, j));
        var _M_ = j + 1 | 0;
        if(_K_ === j) break;
        j = _M_;
       }
      }
      var _L_ = i + 1 | 0;
      if(_I_ === i) break;
      i = _L_;
     }
    }
    return arr;
   }
   function of_array$0(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 = 0 === dim1 ? 0 : caml_check_bound(data, 0)[1].length - 1,
     ba = create$1(kind, layout, dim1, dim2),
     ofs = layout ? 1 : 0,
     _C_ = dim1 - 1 | 0,
     _B_ = 0;
    if(_C_ >= 0){
     var i = _B_;
     for(;;){
      var row = caml_check_bound(data, i)[1 + i];
      if(row.length - 1 !== dim2)
       caml_call1(Stdlib[1], cst_Bigarray_Array2_of_array_n);
      var _E_ = dim2 - 1 | 0, _D_ = 0;
      if(_E_ >= 0){
       var j = _D_;
       for(;;){
        caml_ba_set_2
         (ba, i + ofs | 0, j + ofs | 0, caml_check_bound(row, j)[1 + j]);
        var _G_ = j + 1 | 0;
        if(_E_ === j) break;
        j = _G_;
       }
      }
      var _F_ = i + 1 | 0;
      if(_C_ === i) break;
      i = _F_;
     }
    }
    return ba;
   }
   function create$2(kind, layout, dim1, dim2, dim3){
    return caml_ba_create(kind, layout, [0, dim1, dim2, dim3]);
   }
   function size_in_bytes$3(arr){
    var
     _y_ = runtime.caml_ba_dim_3(arr),
     _z_ = caml_ba_dim_2(arr),
     _A_ = caml_ba_dim_1(arr);
    return caml_mul
            (caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _A_), _z_),
             _y_);
   }
   function slice_left_1(a, n, m){return caml_ba_slice(a, [0, n, m]);}
   function slice_right_1(a, n, m){return caml_ba_slice(a, [0, n, m]);}
   function slice_left_2(a, n){return caml_ba_slice(a, [0, n]);}
   function slice_right_2(a, n){return caml_ba_slice(a, [0, n]);}
   function init$2(kind, layout, dim1, dim2, dim3, f){
    var arr = create$2(kind, layout, dim1, dim2, dim3);
    if(layout){
     var _s_ = 1;
     if(dim3 >= 1){
      var k$0 = _s_;
      for(;;){
       var _t_ = 1;
       if(dim2 >= 1){
        var j$0 = _t_;
        for(;;){
         var _v_ = 1;
         if(dim1 >= 1){
          var i$0 = _v_;
          for(;;){
           caml_ba_set_3(arr, i$0, j$0, k$0, caml_call3(f, i$0, j$0, k$0));
           var _x_ = i$0 + 1 | 0;
           if(dim1 === i$0) break;
           i$0 = _x_;
          }
         }
         var _w_ = j$0 + 1 | 0;
         if(dim2 === j$0) break;
         j$0 = _w_;
        }
       }
       var _u_ = k$0 + 1 | 0;
       if(dim3 === k$0) break;
       k$0 = _u_;
      }
     }
     return arr;
    }
    var _k_ = dim1 - 1 | 0, _j_ = 0;
    if(_k_ >= 0){
     var i = _j_;
     for(;;){
      var _m_ = dim2 - 1 | 0, _l_ = 0;
      if(_m_ >= 0){
       var j = _l_;
       for(;;){
        var _p_ = dim3 - 1 | 0, _o_ = 0;
        if(_p_ >= 0){
         var k = _o_;
         for(;;){
          caml_ba_set_3(arr, i, j, k, caml_call3(f, i, j, k));
          var _r_ = k + 1 | 0;
          if(_p_ === k) break;
          k = _r_;
         }
        }
        var _q_ = j + 1 | 0;
        if(_m_ === j) break;
        j = _q_;
       }
      }
      var _n_ = i + 1 | 0;
      if(_k_ === i) break;
      i = _n_;
     }
    }
    return arr;
   }
   function of_array$1(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 = 0 === dim1 ? 0 : caml_check_bound(data, 0)[1].length - 1,
     dim3 =
       0 === dim2
        ? 0
        : caml_check_bound(caml_check_bound(data, 0)[1], 0)[1].length - 1,
     ba = create$2(kind, layout, dim1, dim2, dim3),
     ofs = layout ? 1 : 0,
     _b_ = dim1 - 1 | 0,
     _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      var row = caml_check_bound(data, i)[1 + i];
      if(row.length - 1 !== dim2)
       caml_call1(Stdlib[1], cst_Bigarray_Array3_of_array_n);
      var _d_ = dim2 - 1 | 0, _c_ = 0;
      if(_d_ >= 0){
       var j = _c_;
       for(;;){
        var col = caml_check_bound(row, j)[1 + j];
        if(col.length - 1 !== dim3)
         caml_call1(Stdlib[1], cst_Bigarray_Array3_of_array_n$0);
        var _g_ = dim3 - 1 | 0, _f_ = 0;
        if(_g_ >= 0){
         var k = _f_;
         for(;;){
          caml_ba_set_3
           (ba,
            i + ofs | 0,
            j + ofs | 0,
            k + ofs | 0,
            caml_check_bound(col, k)[1 + k]);
          var _i_ = k + 1 | 0;
          if(_g_ === k) break;
          k = _i_;
         }
        }
        var _h_ = j + 1 | 0;
        if(_d_ === j) break;
        j = _h_;
       }
      }
      var _e_ = i + 1 | 0;
      if(_b_ === i) break;
      i = _e_;
     }
    }
    return ba;
   }
   function array0_of_genarray(a){
    return 0 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array0_of_genarra);
   }
   function array1_of_genarray(a){
    return 1 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array1_of_genarra);
   }
   function array2_of_genarray(a){
    return 2 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array2_of_genarra);
   }
   function array3_of_genarray(a){
    return 3 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array3_of_genarra);
   }
   function reshape_0(a){return caml_ba_reshape(a, [0]);}
   function reshape_1(a, dim1){return caml_ba_reshape(a, [0, dim1]);}
   function reshape_2(a, dim1, dim2){
    return caml_ba_reshape(a, [0, dim1, dim2]);
   }
   function reshape_3(a, dim1, dim2, dim3){
    return caml_ba_reshape(a, [0, dim1, dim2, dim3]);
   }
   var
    Stdlib_Bigarray =
      [0,
       13,
       0,
       1,
       10,
       11,
       2,
       3,
       4,
       5,
       8,
       6,
       7,
       9,
       12,
       kind_size_in_bytes,
       0,
       1,
       [0, init, dims, size_in_bytes],
       [0,
        create,
        of_value,
        caml_ba_change_layout,
        size_in_bytes$0,
        get,
        set,
        of_value],
       [0,
        create$0,
        init$0,
        caml_ba_change_layout,
        size_in_bytes$1,
        slice,
        of_array],
       [0,
        create$1,
        init$1,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$2,
        init$2,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
   runtime.caml_register_global(10, Stdlib_Bigarray, "Stdlib__Bigarray");
   return;
  }
  (globalThis));

//# 18981 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_blit = runtime.caml_ba_blit,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_lxm_next = runtime.caml_lxm_next,
    caml_mod = runtime.caml_mod,
    caml_notequal = runtime.caml_notequal,
    caml_sys_random_seed = runtime.caml_sys_random_seed;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    serialization_prefix = "lxm1:",
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
    _e_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0);
   function create(param){return caml_call3(Stdlib_Bigarray[20][1], 7, 0, 4);}
   function set(s, i1, i2, i3, i4){
    caml_ba_set_1(s, 0, runtime.caml_int64_or(i1, _a_));
    caml_ba_set_1(s, 1, i2);
    var i3$0 = caml_notequal(i3, _b_) ? i3 : _e_;
    caml_ba_set_1(s, 2, i3$0);
    var i4$0 = caml_notequal(i4, _c_) ? i4 : _d_;
    return caml_ba_set_1(s, 3, i4$0);
   }
   function mk(i1, i2, i3, i4){
    var s = create(0);
    set(s, i1, i2, i3, i4);
    return s;
   }
   var
    serialization_prefix_len = 5,
    cst_Random_State_of_binary_str =
      "Random.State.of_binary_string: expected a format compatible with OCaml ";
   function to_binary_string(s){
    var buf = caml_create_bytes(37);
    caml_call5
     (Stdlib_Bytes[12],
      serialization_prefix,
      0,
      buf,
      0,
      serialization_prefix_len);
    var i = 0;
    for(;;){
     var _y_ = runtime.caml_ba_get_1(s, i);
     caml_call3(Stdlib_Bytes[86], buf, 5 + (i * 8 | 0) | 0, _y_);
     var _z_ = i + 1 | 0;
     if(3 === i) return caml_call1(Stdlib_Bytes[44], buf);
     i = _z_;
    }
   }
   function of_binary_string(buf){
    var
     _v_ = runtime.caml_ml_string_length(buf) !== 37 ? 1 : 0,
     _w_ = _v_ || 1 - caml_call2(Stdlib_String[11], serialization_prefix, buf);
    if(_w_){
     var
      _x_ =
        caml_call2(Stdlib[28], cst_Random_State_of_binary_str, Stdlib_Sys[46]);
     caml_call1(Stdlib[2], _x_);
    }
    var
     i1 = caml_call2(Stdlib_String[64], buf, 5),
     i2 = caml_call2(Stdlib_String[64], buf, 13),
     i3 = caml_call2(Stdlib_String[64], buf, 21),
     i4 = caml_call2(Stdlib_String[64], buf, 29);
    return mk(i1, i2, i3, i4);
   }
   function copy(src){
    var dst = create(0);
    caml_ba_blit(src, dst);
    return dst;
   }
   function reinit(s, seed){
    var
     n = seed.length - 1,
     b = caml_create_bytes((n * 8 | 0) + 1 | 0),
     _p_ = n - 1 | 0,
     _o_ = 0;
    if(_p_ >= 0){
     var i = _o_;
     for(;;){
      var _t_ = caml_int64_of_int32(runtime.caml_check_bound(seed, i)[1 + i]);
      caml_call3(Stdlib_Bytes[86], b, i * 8 | 0, _t_);
      var _u_ = i + 1 | 0;
      if(_p_ === i) break;
      i = _u_;
     }
    }
    caml_bytes_set(b, n * 8 | 0, 1);
    var d1 = caml_call1(Stdlib_Digest[4], b);
    caml_bytes_set(b, n * 8 | 0, 2);
    var
     d2 = caml_call1(Stdlib_Digest[4], b),
     _q_ = caml_call2(Stdlib_String[64], d2, 8),
     _r_ = caml_call2(Stdlib_String[64], d2, 0),
     _s_ = caml_call2(Stdlib_String[64], d1, 8);
    return set(s, caml_call2(Stdlib_String[64], d1, 0), _s_, _r_, _q_);
   }
   function make(seed){var s = create(0); reinit(s, seed); return s;}
   function make_self_init(param){return make(caml_sys_random_seed(0));}
   var
    max_int31 = 1073741823,
    max_int32 = 2147483647,
    cst_Random_int = "Random.int",
    cst_Random_full_int = "Random.full_int",
    cst_Random_int_in_range = "Random.int_in_range",
    cst_Random_int32 = "Random.int32",
    cst_Random_int32_in_range = "Random.int32_in_range";
   function bits(s){
    return caml_int64_to_int32(caml_lxm_next(s)) & 1073741823;
   }
   function int_aux(s, n, mask){
    for(;;){
     var r = caml_int64_to_int32(caml_lxm_next(s)) & mask, v = caml_mod(r, n);
     if(((mask - n | 0) + 1 | 0) >= (r - v | 0)) return v;
    }
   }
   function int$0(s, bound){
    if(1073741823 >= bound && 0 < bound) return int_aux(s, bound, max_int31);
    return caml_call1(Stdlib[1], cst_Random_int);
   }
   function full_int(s, bound){
    if(0 >= bound) return caml_call1(Stdlib[1], cst_Random_full_int);
    var
     _n_ =
       bound <= 1073741823
        ? max_int31
        : bound <= 2147483647 ? max_int32 : Stdlib[19];
    return int_aux(s, bound, _n_);
   }
   function int_in_range_aux(s, min, max, mask, nbits){
    var span = (max - min | 0) + 1 | 0;
    if(span <= mask && 0 < span) return min + int_aux(s, span, mask) | 0;
    for(;;){
     var
      drop = Stdlib_Sys[10] - nbits | 0,
      r = caml_int64_to_int32(caml_lxm_next(s)) << drop >> drop;
     if(r >= min && max >= r) return r;
    }
   }
   function int_in_range(s, min, max){
    if(max < min) caml_call1(Stdlib[1], cst_Random_int_in_range);
    if(-1073741824 <= min && max <= 1073741823)
     return int_in_range_aux(s, min, max, max_int31, 31);
    if(-2147483648 <= min && max <= 2147483647)
     return int_in_range_aux(s, min, max, max_int32, 32);
    return int_in_range_aux(s, min, max, Stdlib[19], Stdlib_Sys[10]);
   }
   function bits32(s){return caml_int64_to_int32(caml_lxm_next(s));}
   function int32aux(s, n){
    for(;;){
     var r = bits32(s) >>> 1 | 0, v = caml_mod(r, n);
     if(! caml_greaterthan(r - v | 0, (Stdlib_Int32[9] - n | 0) + 1 | 0))
      return v;
    }
   }
   function int32(s, bound){
    return caml_lessequal(bound, 0)
            ? caml_call1(Stdlib[1], cst_Random_int32)
            : int32aux(s, bound);
   }
   function int32_in_range(s, min, max){
    if(caml_greaterthan(min, max))
     return caml_call1(Stdlib[1], cst_Random_int32_in_range);
    var span = caml_call1(Stdlib_Int32[6], max - min | 0);
    if(! caml_lessequal(span, Stdlib_Int32[1]))
     return min + int32aux(s, span) | 0;
    for(;;){
     var r = caml_int64_to_int32(caml_lxm_next(s));
     if(! caml_lessthan(r, min) && ! caml_greaterthan(r, max)) return r;
    }
   }
   var
    bits64 = caml_lxm_next,
    _f_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Random_int64 = "Random.int64",
    cst_Random_int64_in_range = "Random.int64_in_range";
   function int64aux(s, n){
    for(;;){
     var
      r = caml_int64_shift_right_unsigne(caml_lxm_next(s), 1),
      v = runtime.caml_int64_mod(r, n);
     if
      (!
       caml_greaterthan
        (caml_int64_sub(r, v),
         caml_int64_add(caml_int64_sub(Stdlib_Int64[9], n), _f_)))
      return v;
    }
   }
   function int64(s, bound){
    return caml_lessequal(bound, _g_)
            ? caml_call1(Stdlib[1], cst_Random_int64)
            : int64aux(s, bound);
   }
   function int64_in_range(s, min, max){
    if(caml_greaterthan(min, max))
     return caml_call1(Stdlib[1], cst_Random_int64_in_range);
    var span = caml_call1(Stdlib_Int64[6], caml_int64_sub(max, min));
    if(! caml_lessequal(span, Stdlib_Int64[1]))
     return caml_int64_add(min, int64aux(s, span));
    for(;;){
     var r = caml_lxm_next(s);
     if(! caml_lessthan(r, min) && ! caml_greaterthan(r, max)) return r;
    }
   }
   var
    _j_ = runtime.caml_int64_create_lo_mi_hi(14371852, 15349651, 22696),
    _k_ = runtime.caml_int64_create_lo_mi_hi(12230193, 11438743, 35013),
    _l_ = runtime.caml_int64_create_lo_mi_hi(1424933, 15549263, 2083),
    _m_ = runtime.caml_int64_create_lo_mi_hi(9492471, 4696708, 43520),
    _h_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _i_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    nativebits =
      32 === Stdlib_Nativeint[9]
       ? function(s){return bits32(s);}
       : function(s){return caml_int64_to_int32(caml_lxm_next(s));},
    nativeint =
      32 === Stdlib_Nativeint[9]
       ? function(s, bound){return int32(s, bound);}
       : function
        (s, bound){
         return caml_int64_to_int32(int64(s, caml_int64_of_int32(bound)));
        },
    nativeint_in_range =
      32 === Stdlib_Nativeint[9]
       ? function(s, min, max){return int32_in_range(s, min, max);}
       : function
        (s, min, max){
         return caml_int64_to_int32
                 (int64_in_range
                   (s, caml_int64_of_int32(min), caml_int64_of_int32(max)));
        };
   function float$0(s, bound){
    for(;;){
     var b = caml_lxm_next(s), n = caml_int64_shift_right_unsigne(b, 11);
     if(caml_notequal(n, _h_))
      return runtime.caml_int64_to_float(n) * 1.1102230246251565e-16 * bound;
    }
   }
   function bool(s){return caml_lessthan(caml_lxm_next(s), _i_);}
   function split(s){
    var
     i1 = caml_lxm_next(s),
     i2 = caml_lxm_next(s),
     i3 = caml_lxm_next(s),
     i4 = caml_lxm_next(s);
    return mk(i1, i2, i3, i4);
   }
   function mk_default(param){return mk(_m_, _l_, _k_, _j_);}
   var random_key = caml_call2(Stdlib_Domain[11][1], [0, split], mk_default);
   function bits$0(param){
    return bits(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function int$1(bound){
    return int$0(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function full_int$0(bound){
    return full_int(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function int_in_range$0(min, max){
    return int_in_range
            (caml_call1(Stdlib_Domain[11][2], random_key), min, max);
   }
   function int32$0(bound){
    return int32(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function int32_in_range$0(min, max){
    return int32_in_range
            (caml_call1(Stdlib_Domain[11][2], random_key), min, max);
   }
   function nativeint$0(bound){
    return nativeint(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function nativeint_in_range$0(min, max){
    return nativeint_in_range
            (caml_call1(Stdlib_Domain[11][2], random_key), min, max);
   }
   function int64$0(bound){
    return int64(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function int64_in_range$0(min, max){
    return int64_in_range
            (caml_call1(Stdlib_Domain[11][2], random_key), min, max);
   }
   function float$1(scale){
    return float$0(caml_call1(Stdlib_Domain[11][2], random_key), scale);
   }
   function bool$0(param){
    return bool(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function bits32$0(param){
    return bits32(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function bits64$0(param){
    var s = caml_call1(Stdlib_Domain[11][2], random_key);
    return caml_lxm_next(s);
   }
   function nativebits$0(param){
    return nativebits(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function full_init(seed){
    return reinit(caml_call1(Stdlib_Domain[11][2], random_key), seed);
   }
   function init(seed){return full_init([0, seed]);}
   function self_init(param){return full_init(caml_sys_random_seed(0));}
   function split$0(param){
    return split(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function get_state(param){
    return copy(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function set_state(src){
    var dst = caml_call1(Stdlib_Domain[11][2], random_key);
    return caml_ba_blit(src, dst);
   }
   var
    Stdlib_Random =
      [0,
       init,
       full_init,
       self_init,
       bits$0,
       int$1,
       full_int$0,
       int_in_range$0,
       int32$0,
       int32_in_range$0,
       nativeint$0,
       nativeint_in_range$0,
       int64$0,
       int64_in_range$0,
       float$1,
       bool$0,
       bits32$0,
       bits64$0,
       nativebits$0,
       [0,
        make,
        make_self_init,
        copy,
        bits,
        int$0,
        full_int,
        int_in_range,
        int32,
        int32_in_range,
        nativeint,
        nativeint_in_range,
        int64,
        int64_in_range,
        float$0,
        bool,
        bits32,
        bits64,
        nativebits,
        split,
        to_binary_string,
        of_binary_string],
       get_state,
       set_state,
       split$0];
   runtime.caml_register_global(35, Stdlib_Random, "Stdlib__Random");
   return;
  }
  (globalThis));

//# 19396 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_hash = runtime.caml_hash,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    _d_ = [0, 0],
    cst = "",
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib = global_data.Stdlib,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array;
   global_data.Assert_failure;
   var Stdlib_String = global_data.Stdlib__String;
   function ongoing_traversal(h){
    var _an_ = h.length - 1 < 4 ? 1 : 0, _ao_ = _an_ || (h[4] < 0 ? 1 : 0);
    return _ao_;
   }
   function flip_ongoing_traversal(h){h[4] = - h[4] | 0; return 0;}
   var
    cst_Hashtbl_unsupported_hash_t = "Hashtbl: unsupported hash table format";
   try{var _f_ = caml_sys_getenv("OCAMLRUNPARAM"), params = _f_;}
   catch(_al_){
    var _a_ = caml_wrap_exception(_al_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    try{var _e_ = caml_sys_getenv("CAMLRUNPARAM"), _c_ = _e_;}
    catch(_am_){
     var _b_ = caml_wrap_exception(_am_);
     if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
     var _c_ = cst;
    }
    var params = _c_;
   }
   var
    randomized_default = caml_call2(Stdlib_String[15], params, 82),
    randomized = caml_call1(Stdlib_Atomic[1], randomized_default);
   function randomize(param){
    return caml_call2(Stdlib_Atomic[4], randomized, 1);
   }
   function is_randomized(param){
    return caml_call1(Stdlib_Atomic[3], randomized);
   }
   var prng_key = caml_call2(Stdlib_Domain[11][1], 0, Stdlib_Random[19][2]);
   function power_2_above(x, n){
    var x$0 = x;
    for(;;){
     if(n <= x$0) return x$0;
     if(Stdlib_Sys[13] < (x$0 * 2 | 0)) return x$0;
     var x$1 = x$0 * 2 | 0;
     x$0 = x$1;
    }
   }
   function create(opt, initial_size){
    var
     random = opt ? opt[1] : caml_call1(Stdlib_Atomic[3], randomized),
     s = power_2_above(16, initial_size);
    if(random)
     var
      _ak_ = caml_call1(Stdlib_Domain[11][2], prng_key),
      seed = caml_call1(Stdlib_Random[19][4], _ak_);
    else
     var seed = 0;
    return [0, 0, caml_array_make(s, 0), seed, s];
   }
   function clear(h){
    var _aj_ = 0 < h[1] ? 1 : 0;
    return _aj_
            ? (h
               [1]
              = 0,
              caml_call4(Stdlib_Array[8], h[2], 0, h[2].length - 1, 0))
            : _aj_;
   }
   function reset(h){
    var len = h[2].length - 1;
    if(4 <= h.length - 1 && len !== caml_call1(Stdlib[18], h[4])){
     h[1] = 0;
     h[2] = caml_array_make(caml_call1(Stdlib[18], h[4]), 0);
     return 0;
    }
    return clear(h);
   }
   function copy_bucketlist(param){
    if(! param) return 0;
    var
     key = param[1],
     data = param[2],
     next = param[3],
     prec$1 = [0, key, data, next],
     prec = prec$1,
     param$0 = next;
    for(;;){
     if(! param$0) return prec$1;
     var
      key$0 = param$0[1],
      data$0 = param$0[2],
      next$0 = param$0[3],
      prec$0 = [0, key$0, data$0, next$0];
     prec[3] = prec$0;
     prec = prec$0;
     param$0 = next$0;
    }
   }
   function copy(h){
    var
     _ag_ = h[4],
     _ah_ = h[3],
     _ai_ = caml_call2(Stdlib_Array[14], copy_bucketlist, h[2]);
    return [0, h[1], _ai_, _ah_, _ag_];
   }
   function length(h){return h[1];}
   function insert_all_buckets(indexfun, inplace, odata, ndata){
    var
     nsize = ndata.length - 1,
     ndata_tail = caml_array_make(nsize, 0),
     _aa_ = odata.length - 2 | 0,
     _$_ = 0;
    if(_aa_ >= 0){
     var i$0 = _$_;
     for(;;){
      var cell$1 = caml_check_bound(odata, i$0)[1 + i$0], cell = cell$1;
      for(;;){
       if(! cell) break;
       var
        key = cell[1],
        data = cell[2],
        next = cell[3],
        cell$0 = inplace ? cell : [0, key, data, 0],
        nidx = caml_call1(indexfun, key),
        match = caml_check_bound(ndata_tail, nidx)[1 + nidx];
       if(match)
        match[3] = cell$0;
       else
        caml_check_bound(ndata, nidx)[1 + nidx] = cell$0;
       caml_check_bound(ndata_tail, nidx)[1 + nidx] = cell$0;
       cell = next;
      }
      var _af_ = i$0 + 1 | 0;
      if(_aa_ === i$0) break;
      i$0 = _af_;
     }
    }
    if(inplace){
     var _ac_ = nsize - 1 | 0, _ab_ = 0;
     if(_ac_ >= 0){
      var i = _ab_;
      for(;;){
       var match$0 = caml_check_bound(ndata_tail, i)[1 + i];
       if(match$0) match$0[3] = 0;
       var _ae_ = i + 1 | 0;
       if(_ac_ === i) break;
       i = _ae_;
      }
     }
     var _ad_ = 0;
    }
    else
     var _ad_ = inplace;
    return _ad_;
   }
   function resize(indexfun, h){
    var
     odata = h[2],
     osize = odata.length - 1,
     nsize = osize * 2 | 0,
     ___ = nsize < Stdlib_Sys[13] ? 1 : 0;
    if(! ___) return ___;
    var ndata = caml_array_make(nsize, 0), inplace = 1 - ongoing_traversal(h);
    h[2] = ndata;
    return insert_all_buckets(caml_call1(indexfun, h), inplace, odata, ndata);
   }
   function iter(f, h){
    var old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var d = h[2], _W_ = d.length - 2 | 0, _V_ = 0;
     if(_W_ >= 0){
      var i = _V_;
      for(;;){
       var param = caml_check_bound(d, i)[1 + i];
       for(;;){
        if(! param) break;
        var key = param[1], data = param[2], next = param[3];
        caml_call2(f, key, data);
        param = next;
       }
       var _Z_ = i + 1 | 0;
       if(_W_ === i) break;
       i = _Z_;
      }
     }
     var _X_ = 1 - old_trav, _Y_ = _X_ ? flip_ongoing_traversal(h) : _X_;
     return _Y_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function filter_map_inplace(f, h){
    var d = h[2], old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var _R_ = d.length - 2 | 0, _Q_ = 0;
     if(_R_ >= 0){
      var i = _Q_;
      for(;;){
       var slot$0 = caml_check_bound(h[2], i)[1 + i], prec = 0, slot = slot$0;
       for(;;){
        if(! slot) break;
        var
         key = slot[1],
         data = slot[2],
         next = slot[3],
         match = caml_call2(f, key, data);
        if(match){
         var data$0 = match[1];
         if(prec)
          prec[3] = slot;
         else
          caml_check_bound(h[2], i)[1 + i] = slot;
         slot[2] = data$0;
         prec = slot;
         slot = next;
        }
        else{h[1] = h[1] - 1 | 0; slot = next;}
       }
       if(prec) prec[3] = 0; else caml_check_bound(h[2], i)[1 + i] = 0;
       var _U_ = i + 1 | 0;
       if(_R_ === i) break;
       i = _U_;
      }
     }
     var _S_ = 1 - old_trav, _T_ = _S_ ? flip_ongoing_traversal(h) : _S_;
     return _T_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function fold(f, h, init){
    var old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var d = h[2], accu$1 = [0, init], _N_ = d.length - 2 | 0, _M_ = 0;
     if(_N_ >= 0){
      var i = _M_;
      for(;;){
       var
        accu$2 = accu$1[1],
        b$0 = caml_check_bound(d, i)[1 + i],
        b = b$0,
        accu = accu$2;
       for(;;){
        if(! b) break;
        var
         key = b[1],
         data = b[2],
         next = b[3],
         accu$0 = caml_call3(f, key, data, accu);
        b = next;
        accu = accu$0;
       }
       accu$1[1] = accu;
       var _P_ = i + 1 | 0;
       if(_N_ === i) break;
       i = _P_;
      }
     }
     if(1 - old_trav) flip_ongoing_traversal(h);
     var _O_ = accu$1[1];
     return _O_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function bucket_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var next = param$0[3], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = next;
    }
   }
   function stats(h){
    var
     mbl =
       caml_call3
        (Stdlib_Array[18],
         function(m, b){
          var _L_ = bucket_length(0, b);
          return caml_call2(Stdlib_Int[11], m, _L_);
         },
         0,
         h[2]),
     histo = caml_array_make(mbl + 1 | 0, 0);
    caml_call2
     (Stdlib_Array[12],
      function(b){
       var l = bucket_length(0, b);
       histo[1 + l] = caml_check_bound(histo, l)[1 + l] + 1 | 0;
       return 0;
      },
      h[2]);
    return [0, h[1], h[2].length - 1, mbl, histo];
   }
   function to_seq(tbl){
    var tbl_data = tbl[2];
    function aux(i, buck, param){
     var i$0 = i, buck$0 = buck;
     for(;;){
      if(buck$0){
       var key = buck$0[1], data = buck$0[2], next = buck$0[3];
       return [0, [0, key, data], function(_K_){return aux(i$0, next, _K_);}];
      }
      if(i$0 === tbl_data.length - 1) return 0;
      var
       buck$1 = caml_check_bound(tbl_data, i$0)[1 + i$0],
       i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      buck$0 = buck$1;
     }
    }
    var _H_ = 0, _I_ = 0;
    return function(_J_){return aux(_I_, _H_, _J_);};
   }
   function to_seq_keys(m){
    var _F_ = to_seq(m);
    return caml_call2(Stdlib_Seq[29], function(_G_){return _G_[1];}, _F_);
   }
   function to_seq_values(m){
    var _D_ = to_seq(m);
    return caml_call2(Stdlib_Seq[29], function(_E_){return _E_[2];}, _D_);
   }
   function MakeSeeded(H){
    function key_index(h, key){
     var _C_ = h[2].length - 2 | 0;
     return caml_call2(H[2], h[3], key) & _C_;
    }
    function add(h, key, data){
     var
      i = key_index(h, key),
      bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
     caml_check_bound(h[2], i)[1 + i] = bucket;
     h[1] = h[1] + 1 | 0;
     var _B_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
     return _B_ ? resize(key_index, h) : _B_;
    }
    function remove(h, key){
     var
      i = key_index(h, key),
      c = caml_check_bound(h[2], i)[1 + i],
      prec$0 = 0,
      prec = c;
     for(;;){
      if(! prec) return 0;
      var k = prec[1], next = prec[3];
      if(caml_call2(H[1], k, key)){
       h[1] = h[1] - 1 | 0;
       return prec$0
               ? (prec$0[3] = next, 0)
               : (caml_check_bound(h[2], i)[1 + i] = next, 0);
      }
      prec$0 = prec;
      prec = next;
     }
    }
    function find(h, key){
     var
      _A_ = key_index(h, key),
      match = caml_check_bound(h[2], _A_)[1 + _A_];
     if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k1 = match[1], d1 = match[2], next1 = match[3];
     if(caml_call2(H[1], key, k1)) return d1;
     if(! next1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     if(caml_call2(H[1], key, k2)) return d2;
     if(! next2) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     if(caml_call2(H[1], key, k3)) return d3;
     var param = next3;
     for(;;){
      if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var k = param[1], data = param[2], next = param[3];
      if(caml_call2(H[1], key, k)) return data;
      param = next;
     }
    }
    function find_opt(h, key){
     var
      _z_ = key_index(h, key),
      match = caml_check_bound(h[2], _z_)[1 + _z_];
     if(! match) return 0;
     var k1 = match[1], d1 = match[2], next1 = match[3];
     if(caml_call2(H[1], key, k1)) return [0, d1];
     if(! next1) return 0;
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     if(caml_call2(H[1], key, k2)) return [0, d2];
     if(! next2) return 0;
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     if(caml_call2(H[1], key, k3)) return [0, d3];
     var param = next3;
     for(;;){
      if(! param) return 0;
      var k = param[1], data = param[2], next = param[3];
      if(caml_call2(H[1], key, k)) return [0, data];
      param = next;
     }
    }
    function find_all(h, key){
     var
      _y_ = key_index(h, key),
      param = caml_check_bound(h[2], _y_)[1 + _y_];
     for(;;){
      if(! param) return 0;
      var k = param[1], d = param[2], next = param[3];
      if(caml_call2(H[1], k, key)) break;
      param = next;
     }
     var block = [0, d, 24029], dst = block, offset = 1, param$0 = next;
     for(;;){
      if(! param$0){dst[1 + offset] = 0; return block;}
      var k$0 = param$0[1], d$0 = param$0[2], next$0 = param$0[3];
      if(caml_call2(H[1], k$0, key)){
       var dst$0 = [0, d$0, 24029];
       dst[1 + offset] = dst$0;
       dst = dst$0;
       offset = 1;
       param$0 = next$0;
      }
      else
       param$0 = next$0;
     }
    }
    function replace(h, key, data){
     var
      i = key_index(h, key),
      l = caml_check_bound(h[2], i)[1 + i],
      slot = l;
     for(;;){
      if(slot){
       var k = slot[1], next = slot[3];
       if(! caml_call2(H[1], k, key)){slot = next; continue;}
       slot[1] = key;
       slot[2] = data;
       var _v_ = 0;
      }
      else
       var _v_ = 1;
      if(_v_){
       caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
       h[1] = h[1] + 1 | 0;
       var _w_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
       if(_w_) return resize(key_index, h);
       var _x_ = _w_;
      }
      else
       var _x_ = _v_;
      return _x_;
     }
    }
    function mem(h, key){
     var
      _u_ = key_index(h, key),
      param = caml_check_bound(h[2], _u_)[1 + _u_];
     for(;;){
      if(! param) return 0;
      var k = param[1], next = param[3], _t_ = caml_call2(H[1], k, key);
      if(_t_) return _t_;
      param = next;
     }
    }
    function add_seq(tbl, i){
     return caml_call2
             (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
               return add(tbl, k, v);
              },
              i);
    }
    function replace_seq(tbl, i){
     return caml_call2
             (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
               return replace(tbl, k, v);
              },
              i);
    }
    function of_seq(i){
     var tbl = create(0, 16);
     replace_seq(tbl, i);
     return tbl;
    }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq];
   }
   function Make(H){
    var equal = H[1];
    function seeded_hash(seed, x){return caml_call1(H[2], x);}
    var
     include = MakeSeeded([0, equal, seeded_hash]),
     _s_ = include[1],
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     iter = include[12],
     filter_map_inplace = include[13],
     fold = include[14],
     length = include[15],
     stats = include[16],
     to_seq = include[17],
     to_seq_keys = include[18],
     to_seq_values = include[19],
     add_seq = include[20],
     replace_seq = include[21];
    function create(sz){return caml_call2(_s_, _d_, sz);}
    function of_seq(i){
     var tbl = caml_call2(_s_, _d_, 16);
     caml_call2(replace_seq, tbl, i);
     return tbl;
    }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq];
   }
   function hash(x){return caml_hash(10, 100, 0, x);}
   function hash_param(n1, n2, x){return caml_hash(n1, n2, 0, x);}
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function key_index(h, key){
    return 4 <= h.length - 1
            ? caml_hash(10, 100, h[3], key) & (h[2].length - 2 | 0)
            : caml_call1(Stdlib[1], cst_Hashtbl_unsupported_hash_t);
   }
   function add(h, key, data){
    var
     i = key_index(h, key),
     bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
    caml_check_bound(h[2], i)[1 + i] = bucket;
    h[1] = h[1] + 1 | 0;
    var _r_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
    return _r_ ? resize(key_index, h) : _r_;
   }
   function remove(h, key){
    var
     i = key_index(h, key),
     c = caml_check_bound(h[2], i)[1 + i],
     prec$0 = 0,
     prec = c;
    for(;;){
     if(! prec) return 0;
     var k = prec[1], next = prec[3];
     if(0 === caml_compare(k, key)){
      h[1] = h[1] - 1 | 0;
      return prec$0
              ? (prec$0[3] = next, 0)
              : (caml_check_bound(h[2], i)[1 + i] = next, 0);
     }
     prec$0 = prec;
     prec = next;
    }
   }
   function find(h, key){
    var _q_ = key_index(h, key), match = caml_check_bound(h[2], _q_)[1 + _q_];
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return d1;
    if(! next1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return d2;
    if(! next2) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    if(0 === caml_compare(key, k3)) return d3;
    var param = next3;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k = param[1], data = param[2], next = param[3];
     if(0 === caml_compare(key, k)) return data;
     param = next;
    }
   }
   function find_opt(h, key){
    var _p_ = key_index(h, key), match = caml_check_bound(h[2], _p_)[1 + _p_];
    if(! match) return 0;
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return [0, d1];
    if(! next1) return 0;
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return [0, d2];
    if(! next2) return 0;
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    if(0 === caml_compare(key, k3)) return [0, d3];
    var param = next3;
    for(;;){
     if(! param) return 0;
     var k = param[1], data = param[2], next = param[3];
     if(0 === caml_compare(key, k)) return [0, data];
     param = next;
    }
   }
   function find_all(h, key){
    var _o_ = key_index(h, key), param = caml_check_bound(h[2], _o_)[1 + _o_];
    for(;;){
     if(! param) return 0;
     var k = param[1], data = param[2], next = param[3];
     if(0 === caml_compare(k, key)) break;
     param = next;
    }
    var block = [0, data, 24029], dst = block, offset = 1, param$0 = next;
    for(;;){
     if(! param$0){dst[1 + offset] = 0; return block;}
     var k$0 = param$0[1], data$0 = param$0[2], next$0 = param$0[3];
     if(0 === caml_compare(k$0, key)){
      var dst$0 = [0, data$0, 24029];
      dst[1 + offset] = dst$0;
      dst = dst$0;
      offset = 1;
      param$0 = next$0;
     }
     else
      param$0 = next$0;
    }
   }
   function replace(h, key, data){
    var i = key_index(h, key), l = caml_check_bound(h[2], i)[1 + i], slot = l;
    for(;;){
     if(slot){
      var k = slot[1], next = slot[3];
      if(0 !== caml_compare(k, key)){slot = next; continue;}
      slot[1] = key;
      slot[2] = data;
      var _l_ = 0;
     }
     else
      var _l_ = 1;
     if(_l_){
      caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
      h[1] = h[1] + 1 | 0;
      var _m_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
      if(_m_) return resize(key_index, h);
      var _n_ = _m_;
     }
     else
      var _n_ = _l_;
     return _n_;
    }
   }
   function mem(h, key){
    var _k_ = key_index(h, key), param = caml_check_bound(h[2], _k_)[1 + _k_];
    for(;;){
     if(! param) return 0;
     var
      k = param[1],
      next = param[3],
      _j_ = 0 === caml_compare(k, key) ? 1 : 0;
     if(_j_) return _j_;
     param = next;
    }
   }
   function add_seq(tbl, i){
    return caml_call2
            (Stdlib_Seq[4],
             function(param){
              var v = param[2], k = param[1];
              return add(tbl, k, v);
             },
             i);
   }
   function replace_seq(tbl, i){
    return caml_call2
            (Stdlib_Seq[4],
             function(param){
              var v = param[2], k = param[1];
              return replace(tbl, k, v);
             },
             i);
   }
   function of_seq(i){
    var tbl = create(0, 16);
    replace_seq(tbl, i);
    return tbl;
   }
   function rebuild(opt, h){
    var
     random = opt ? opt[1] : caml_call1(Stdlib_Atomic[3], randomized),
     s = power_2_above(16, h[2].length - 1);
    if(random)
     var
      _g_ = caml_call1(Stdlib_Domain[11][2], prng_key),
      seed = caml_call1(Stdlib_Random[19][4], _g_);
    else
     var seed = 4 <= h.length - 1 ? h[3] : 0;
    var
     _h_ = 4 <= h.length - 1 ? h[4] : s,
     h$0 = [0, h[1], caml_array_make(s, 0), seed, _h_];
    insert_all_buckets
     (function(_i_){return key_index(h$0, _i_);}, 0, h[2], h$0[2]);
    return h$0;
   }
   var
    Stdlib_Hashtbl =
      [0,
       create,
       clear,
       reset,
       copy,
       add,
       find,
       find_opt,
       find_all,
       mem,
       remove,
       replace,
       iter,
       filter_map_inplace,
       fold,
       length,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq,
       to_seq_keys,
       to_seq_values,
       add_seq,
       replace_seq,
       of_seq,
       Make,
       MakeSeeded,
       hash,
       seeded_hash,
       hash_param,
       caml_hash];
   runtime.caml_register_global(16, Stdlib_Hashtbl, "Stdlib__Hashtbl");
   return;
  }
  (globalThis));

//# 20697 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$16 = "",
    cst$15 = ">",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$14 = ".",
    cst$11 = cst$15,
    cst$12 = "<\/",
    cst$13 = cst$16,
    cst$8 = cst$15,
    cst$9 = "<",
    cst$10 = cst$16,
    cst$7 = "\n",
    cst$3 = cst$16,
    cst$4 = cst$16,
    cst$5 = cst$16,
    cst$6 = cst$16,
    cst = cst$16,
    cst$0 = cst$16,
    cst$1 = cst$16,
    cst$2 = cst$16,
    _a_ = [0, cst$16, 0, cst$16],
    Stdlib_Queue = global_data.Stdlib__Queue,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Stack = global_data.Stdlib__Stack,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Bytes = global_data.Stdlib__Bytes;
   function id(x){return x;}
   var
    zero = 0,
    unknown = -1,
    String_tag =
      [248, "Stdlib.Format.String_tag", runtime.caml_fresh_oo_id(0)];
   function pp_enqueue(state, token){
    state[13] = state[13] + token[3] | 0;
    return caml_call2(Stdlib_Queue[3], token, state[28]);
   }
   var
    pp_infinity = 1000000010,
    _b_ = [0, cst$16],
    _c_ = [1, "margin <= max_indent"],
    _d_ = [1, "margin >= pp_infinity"],
    _e_ = [0, 0],
    _f_ = [1, "max_indent < 2"],
    cst_Format_pp_set_geometry = "Format.pp_set_geometry: ";
   function pp_output_string(state, s){
    return caml_call3(state[17], s, 0, caml_ml_string_length(s));
   }
   function pp_output_newline(state){return caml_call1(state[19], 0);}
   function format_pp_text(state, size, text){
    state[9] = state[9] - size | 0;
    pp_output_string(state, text);
    state[11] = 0;
   }
   function format_string(state, s){
    var _a$_ = s !== cst$16 ? 1 : 0;
    return _a$_ ? format_pp_text(state, caml_ml_string_length(s), s) : _a$_;
   }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
    format_string(state, before);
    pp_output_newline(state);
    state[11] = 1;
    var
     indent = (state[6] - width | 0) + offset | 0,
     real_indent = caml_call2(Stdlib_Int[10], state[8], indent);
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
    var n = state[10];
    caml_call1(state[21], n);
    return format_string(state, after);
   }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
    format_string(state, before);
    state[9] = state[9] - width | 0;
    caml_call1(state[20], width);
    return format_string(state, after);
   }
   function format_pp_token(state, size$0, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        var match$3 = caml_call1(Stdlib_Stack[8], state[3]);
        if(! match$3) return;
        var
         tabs = match$3[1][1],
         add_tab =
           function(n, ls){
            if(! ls) return [0, n, 0];
            var l = ls[2], x = ls[1];
            return runtime.caml_lessthan(n, x)
                    ? [0, n, ls]
                    : [0, x, add_tab(n, l)];
           };
        tabs[1] = add_tab(state[6] - state[9] | 0, tabs[1]);
        return;
       case 1:
        caml_call1(Stdlib_Stack[5], state[2]); return;
       case 2:
        caml_call1(Stdlib_Stack[5], state[3]); return;
       case 3:
        var match$4 = caml_call1(Stdlib_Stack[8], state[2]);
        if(! match$4) return pp_output_newline(state);
        var width$0 = match$4[1][2];
        return break_new_line(state, _a_, width$0);
       case 4:
        var _a9_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
        if(! _a9_) return _a9_;
        var match$1 = caml_call1(Stdlib_Queue[6], state[28]);
        if(! match$1) return;
        var match$2 = match$1[1], size = match$2[1], length = match$2[3];
        state[12] = state[12] - length | 0;
        state[9] = state[9] + size | 0;
        return;
       default:
        var match$5 = caml_call1(Stdlib_Stack[5], state[5]);
        if(! match$5) return;
        var tag_name = match$5[1], marker = caml_call1(state[25], tag_name);
        return pp_output_string(state, marker);
     }
    switch(param[0]){
      case 0:
       var s = param[1]; return format_pp_text(state, size$0, s);
      case 1:
       var len = param[3], pos = param[2], source = param[1];
       state[9] = state[9] - size$0 | 0;
       caml_call3(state[17], source, pos, len);
       state[11] = 0;
       return;
      case 2:
       var
        breaks = param[2],
        fits = param[1],
        off = breaks[2],
        before = breaks[1],
        match$6 = caml_call1(Stdlib_Stack[8], state[2]);
       if(! match$6) return;
       var
        match$7 = match$6[1],
        width$1 = match$7[2],
        box_type$0 = match$7[1];
       switch(box_type$0){
         case 0:
          return break_same_line(state, fits);
         case 1:
          return break_new_line(state, breaks, width$1);
         case 2:
          return break_new_line(state, breaks, width$1);
         case 3:
          return state[9] < (size$0 + caml_ml_string_length(before) | 0)
                  ? break_new_line(state, breaks, width$1)
                  : break_same_line(state, fits);
         case 4:
          return state[11]
                  ? break_same_line(state, fits)
                  : state
                     [9]
                    < (size$0 + caml_ml_string_length(before) | 0)
                    ? break_new_line(state, breaks, width$1)
                    : ((state
                       [6]
                      - width$1
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ? break_new_line(state, breaks, width$1)
                      : break_same_line(state, fits);
         default: return break_same_line(state, fits);
       }
      case 3:
       var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
        match$8 = caml_call1(Stdlib_Stack[8], state[3]);
       if(! match$8) return;
       var tabs$0 = match$8[1][1], match$9 = tabs$0[1];
       if(match$9){
        var first = match$9[1], param$0 = tabs$0[1];
        for(;;){
         if(param$0){
          var tail = param$0[2], head = param$0[1];
          if(insertion_point > head){param$0 = tail; continue;}
          var _a__ = head;
         }
         else
          var _a__ = first;
         var tab = _a__;
         break;
        }
       }
       else
        var tab = insertion_point;
       var offset = tab - insertion_point | 0;
       return 0 <= offset
               ? break_same_line(state, [0, cst$0, offset + n | 0, cst])
               : break_new_line
                 (state, [0, cst$2, tab + off$0 | 0, cst$1], state[6]);
      case 4:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0){
        var match = caml_call1(Stdlib_Stack[8], state[2]);
        if(match){
         var match$0 = match[1], width = match$0[2], box_type = match$0[1];
         if(state[9] < width && 3 >= box_type - 1 >>> 0)
          break_new_line(state, _a_, width);
        }
        else
         pp_output_newline(state);
       }
       var
        width$2 = state[9] - off$1 | 0,
        box_type$1 = 1 === ty ? 1 : state[9] < size$0 ? ty : 5;
       return caml_call2(Stdlib_Stack[3], [0, box_type$1, width$2], state[2]);
      case 5:
       var tbox = param[1];
       return caml_call2(Stdlib_Stack[3], tbox, state[3]);
      default:
       var
        tag_name$0 = param[1],
        marker$0 = caml_call1(state[24], tag_name$0);
       pp_output_string(state, marker$0);
       return caml_call2(Stdlib_Stack[3], tag_name$0, state[5]);
    }
   }
   function advance_left(state){
    for(;;){
     var match = caml_call1(Stdlib_Queue[9], state[28]);
     if(! match) return 0;
     var
      match$0 = match[1],
      size = match$0[1],
      length = match$0[3],
      token = match$0[2],
      pending_count = state[13] - state[12] | 0,
      _a7_ = 0 <= size ? 1 : 0,
      _a8_ = _a7_ || (state[9] <= pending_count ? 1 : 0);
     if(! _a8_) return _a8_;
     caml_call1(Stdlib_Queue[5], state[28]);
     var size$0 = 0 <= size ? size : pp_infinity;
     format_pp_token(state, size$0, token);
     state[12] = length + state[12] | 0;
    }
   }
   function enqueue_advance(state, tok){
    pp_enqueue(state, tok);
    return advance_left(state);
   }
   function enqueue_string_as(state, size, s){
    return enqueue_advance(state, [0, size, [0, s], size]);
   }
   function initialize_scan_stack(stack){
    caml_call1(Stdlib_Stack[9], stack);
    var queue_elem = [0, unknown, _b_, 0];
    return caml_call2(Stdlib_Stack[3], [0, -1, queue_elem], stack);
   }
   function set_size(state, ty){
    var match = caml_call1(Stdlib_Stack[8], state[1]);
    if(! match) return;
    var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
     size = queue_elem[1];
    if(left_total < state[12]) return initialize_scan_stack(state[1]);
    var _a6_ = queue_elem[2];
    if(typeof _a6_ !== "number")
     switch(_a6_[0]){
       case 4:
        if(1 - ty){
         var x$0 = state[13] + size | 0;
         queue_elem[1] = x$0;
         caml_call1(Stdlib_Stack[5], state[1]);
        }
        return;
       case 2:
       case 3:
        if(ty){
         var x = state[13] + size | 0;
         queue_elem[1] = x;
         caml_call1(Stdlib_Stack[5], state[1]);
        }
        return;
     }
   }
   function scan_push(state, b, token){
    pp_enqueue(state, token);
    if(b) set_size(state, 1);
    var elem = [0, state[13], token];
    return caml_call2(Stdlib_Stack[3], elem, state[1]);
   }
   function pp_open_box_gen(state, indent, br_ty){
    state[14] = state[14] + 1 | 0;
    if(state[14] < state[15]){
     var size = - state[13] | 0, elem = [0, size, [4, indent, br_ty], 0];
     return scan_push(state, 0, elem);
    }
    var _a5_ = state[14] === state[15] ? 1 : 0;
    if(! _a5_) return _a5_;
    var s = state[16], x = caml_ml_string_length(s);
    return enqueue_string_as(state, x, s);
   }
   function pp_close_box(state, param){
    var _a3_ = 1 < state[14] ? 1 : 0;
    if(_a3_){
     if(state[14] < state[15]){
      pp_enqueue(state, [0, zero, 1, 0]);
      set_size(state, 1);
      set_size(state, 0);
     }
     state[14] = state[14] - 1 | 0;
     var _a4_ = 0;
    }
    else
     var _a4_ = _a3_;
    return _a4_;
   }
   function pp_open_stag(state, tag_name){
    if(state[22]){
     caml_call2(Stdlib_Stack[3], tag_name, state[4]);
     caml_call1(state[26], tag_name);
    }
    var _a2_ = state[23];
    if(! _a2_) return _a2_;
    var token = [6, tag_name];
    return pp_enqueue(state, [0, zero, token, 0]);
   }
   function pp_close_stag(state, param){
    if(state[23]) pp_enqueue(state, [0, zero, 5, 0]);
    var _a0_ = state[22];
    if(_a0_){
     var match = caml_call1(Stdlib_Stack[5], state[4]);
     if(match){
      var tag_name = match[1];
      return caml_call1(state[27], tag_name);
     }
     var _a1_ = 0;
    }
    else
     var _a1_ = _a0_;
    return _a1_;
   }
   function pp_set_print_tags(state, b){state[22] = b; return 0;}
   function pp_set_mark_tags(state, b){state[23] = b; return 0;}
   function pp_get_print_tags(state, param){return state[22];}
   function pp_get_mark_tags(state, param){return state[23];}
   function pp_set_tags(state, b){
    pp_set_print_tags(state, b);
    return pp_set_mark_tags(state, b);
   }
   function pp_get_formatter_stag_function(state, param){
    return [0, state[24], state[25], state[26], state[27]];
   }
   function pp_set_formatter_stag_function(state, param){
    var pct = param[4], pot = param[3], mct = param[2], mot = param[1];
    state[24] = mot;
    state[25] = mct;
    state[26] = pot;
    state[27] = pct;
    return 0;
   }
   function pp_rinit(state){
    state[12] = 1;
    state[13] = 1;
    caml_call1(Stdlib_Queue[12], state[28]);
    initialize_scan_stack(state[1]);
    caml_call1(Stdlib_Stack[9], state[2]);
    caml_call1(Stdlib_Stack[9], state[3]);
    caml_call1(Stdlib_Stack[9], state[4]);
    caml_call1(Stdlib_Stack[9], state[5]);
    state[10] = 0;
    state[14] = 0;
    state[9] = state[6];
    return pp_open_box_gen(state, 0, 3);
   }
   function pp_flush_queue(state, end_with_newline){
    caml_call2
     (Stdlib_Stack[13],
      function(param){return pp_close_stag(state, 0);},
      state[4]);
    for(;;){
     if(1 >= state[14]){
      state[13] = pp_infinity;
      advance_left(state);
      if(end_with_newline) pp_output_newline(state);
      return pp_rinit(state);
     }
     pp_close_box(state, 0);
    }
   }
   function pp_print_as_size(state, size, s){
    var _aZ_ = state[14] < state[15] ? 1 : 0;
    return _aZ_ ? enqueue_string_as(state, size, s) : _aZ_;
   }
   function pp_print_as(state, isize, s){
    return pp_print_as_size(state, isize, s);
   }
   function pp_print_string(state, s){
    var isize = caml_ml_string_length(s);
    return pp_print_as_size(state, isize, s);
   }
   function pp_print_substring_as(pos, len, state, size, source){
    var _aY_ = state[14] < state[15] ? 1 : 0;
    if(! _aY_) return _aY_;
    var token = [1, source, pos, len];
    return enqueue_advance(state, [0, size, token, size]);
   }
   function pp_print_substring(pos, len, state, s){
    return pp_print_substring_as(pos, len, state, len, s);
   }
   function pp_print_bytes(state, s){
    var
     s$0 = caml_call1(Stdlib_Bytes[6], s),
     isize = runtime.caml_ml_bytes_length(s);
    return pp_print_as_size(state, isize, s$0);
   }
   function pp_print_int(state, i){
    return pp_print_string(state, caml_call1(Stdlib_Int[12], i));
   }
   function pp_print_float(state, f){
    return pp_print_string(state, caml_call1(Stdlib[35], f));
   }
   function pp_print_bool(state, b){
    return pp_print_string(state, caml_call1(Stdlib[30], b));
   }
   function pp_print_char(state, c){
    var s = caml_call2(Stdlib_String[1], 1, c);
    return pp_print_as_size(state, 1, s);
   }
   function pp_print_nothing(state, param){return 0;}
   function pp_open_hbox(state, param){return pp_open_box_gen(state, 0, 0);}
   function pp_open_vbox(state, indent){
    return pp_open_box_gen(state, indent, 1);
   }
   function pp_open_hvbox(state, indent){
    return pp_open_box_gen(state, indent, 2);
   }
   function pp_open_hovbox(state, indent){
    return pp_open_box_gen(state, indent, 3);
   }
   function pp_open_box(state, indent){
    return pp_open_box_gen(state, indent, 4);
   }
   function pp_print_newline(state, param){
    pp_flush_queue(state, 1);
    return caml_call1(state[18], 0);
   }
   function pp_print_flush(state, param){
    pp_flush_queue(state, 0);
    return caml_call1(state[18], 0);
   }
   function pp_force_newline(state, param){
    var _aX_ = state[14] < state[15] ? 1 : 0;
    return _aX_ ? enqueue_advance(state, [0, zero, 3, 0]) : _aX_;
   }
   function pp_print_if_newline(state, param){
    var _aW_ = state[14] < state[15] ? 1 : 0;
    return _aW_ ? enqueue_advance(state, [0, zero, 4, 0]) : _aW_;
   }
   function pp_print_custom_break(state, fits, breaks){
    var
     after = fits[3],
     width = fits[2],
     before = fits[1],
     _aV_ = state[14] < state[15] ? 1 : 0;
    if(! _aV_) return _aV_;
    var
     size = - state[13] | 0,
     token = [2, fits, breaks],
     length =
       (caml_ml_string_length(before) + width | 0)
       + caml_ml_string_length(after)
       | 0,
     elem = [0, size, token, length];
    return scan_push(state, 1, elem);
   }
   function pp_print_break(state, width, offset){
    return pp_print_custom_break
            (state, [0, cst$6, width, cst$5], [0, cst$4, offset, cst$3]);
   }
   function pp_print_space(state, param){return pp_print_break(state, 1, 0);}
   function pp_print_cut(state, param){return pp_print_break(state, 0, 0);}
   function pp_open_tbox(state, param){
    state[14] = state[14] + 1 | 0;
    var _aU_ = state[14] < state[15] ? 1 : 0;
    if(! _aU_) return _aU_;
    var elem = [0, zero, [5, [0, [0, 0]]], 0];
    return enqueue_advance(state, elem);
   }
   function pp_close_tbox(state, param){
    var _aR_ = 1 < state[14] ? 1 : 0;
    if(_aR_){
     var _aS_ = state[14] < state[15] ? 1 : 0;
     if(_aS_){
      var elem = [0, zero, 2, 0];
      enqueue_advance(state, elem);
      state[14] = state[14] - 1 | 0;
      var _aT_ = 0;
     }
     else
      var _aT_ = _aS_;
    }
    else
     var _aT_ = _aR_;
    return _aT_;
   }
   function pp_print_tbreak(state, width, offset){
    var _aQ_ = state[14] < state[15] ? 1 : 0;
    if(! _aQ_) return _aQ_;
    var size = - state[13] | 0, elem = [0, size, [3, width, offset], width];
    return scan_push(state, 1, elem);
   }
   function pp_print_tab(state, param){return pp_print_tbreak(state, 0, 0);}
   function pp_set_tab(state, param){
    var _aP_ = state[14] < state[15] ? 1 : 0;
    if(! _aP_) return _aP_;
    var elem = [0, zero, 0, 0];
    return enqueue_advance(state, elem);
   }
   function pp_set_max_boxes(state, n){
    var _aN_ = 1 < n ? 1 : 0, _aO_ = _aN_ ? (state[15] = n, 0) : _aN_;
    return _aO_;
   }
   function pp_get_max_boxes(state, param){return state[15];}
   function pp_over_max_boxes(state, param){return state[14] === state[15] ? 1 : 0;
   }
   function pp_set_ellipsis_text(state, s){state[16] = s; return 0;}
   function pp_get_ellipsis_text(state, param){return state[16];}
   function pp_limit(n){return n < 1000000010 ? n : 1000000009;}
   function pp_set_max_indent(state, n$0){
    var _aM_ = 1 < n$0 ? 1 : 0;
    if(! _aM_) return _aM_;
    var n$1 = state[6] - n$0 | 0, _aL_ = 1 <= n$1 ? 1 : 0;
    if(! _aL_) return _aL_;
    var n = pp_limit(n$1);
    state[7] = n;
    state[8] = state[6] - state[7] | 0;
    return pp_rinit(state);
   }
   function pp_get_max_indent(state, param){return state[8];}
   function pp_set_margin(state, n){
    var _aJ_ = 1 <= n ? 1 : 0;
    if(! _aJ_) return _aJ_;
    var n$0 = pp_limit(n);
    state[6] = n$0;
    if(state[8] <= state[6])
     var new_max_indent = state[8];
    else
     var
      _aK_ =
        caml_call2(Stdlib_Int[11], state[6] - state[7] | 0, state[6] / 2 | 0),
      new_max_indent = caml_call2(Stdlib_Int[11], _aK_, 1);
    return pp_set_max_indent(state, new_max_indent);
   }
   function validate_geometry(param){
    var margin = param[2], max_indent = param[1];
    return 2 <= max_indent
            ? margin <= max_indent ? _c_ : 1000000010 <= margin ? _d_ : _e_
            : _f_;
   }
   function check_geometry(geometry){
    return 0 === validate_geometry(geometry)[0] ? 1 : 0;
   }
   function pp_get_margin(state, param){return state[6];}
   function pp_set_full_geometry(state, param){
    var margin = param[2], max_indent = param[1];
    pp_set_margin(state, margin);
    pp_set_max_indent(state, max_indent);
    return 0;
   }
   function pp_set_geometry(state, max_indent, margin){
    var
     geometry = [0, max_indent, margin],
     match = validate_geometry(geometry);
    if(0 === match[0]) return pp_set_full_geometry(state, geometry);
    var
     msg = match[1],
     _aI_ = caml_call2(Stdlib[28], cst_Format_pp_set_geometry, msg);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _aI_], 1);
   }
   function pp_safe_set_geometry(state, max_indent, margin){
    var geometry = [0, max_indent, margin];
    return 0 === validate_geometry(geometry)[0]
            ? pp_set_full_geometry(state, geometry)
            : 0;
   }
   function pp_get_geometry(state, param){return [0, state[8], state[6]];}
   function pp_update_geometry(state, update){
    var geometry = pp_get_geometry(state, 0);
    return pp_set_full_geometry(state, caml_call1(update, geometry));
   }
   function pp_set_formatter_out_functions(state, param){
    var j = param[5], i = param[4], h = param[3], g = param[2], f = param[1];
    state[17] = f;
    state[18] = g;
    state[19] = h;
    state[20] = i;
    state[21] = j;
    return 0;
   }
   function pp_get_formatter_out_functions(state, param){
    return [0, state[17], state[18], state[19], state[20], state[21]];
   }
   function pp_set_formatter_output_functi(state, f, g){state[17] = f; state[18] = g; return 0;
   }
   function pp_get_formatter_output_functi(state, param){return [0, state[17], state[18]];
   }
   function display_newline(state, param){
    return caml_call3(state[17], cst$7, 0, 1);
   }
   var blank_line = caml_call2(Stdlib_String[1], 80, 32), _g_ = [4, 0, 3];
   function display_blanks(state, n){
    var n$0 = n;
    for(;;){
     var _aH_ = 0 < n$0 ? 1 : 0;
     if(! _aH_) return _aH_;
     if(80 >= n$0) return caml_call3(state[17], blank_line, 0, n$0);
     caml_call3(state[17], blank_line, 0, 80);
     var n$1 = n$0 - 80 | 0;
     n$0 = n$1;
    }
   }
   function pp_set_formatter_out_channel(state, oc){
    state[17] = caml_call1(Stdlib[69], oc);
    state[18] = function(param){return caml_call1(Stdlib[63], oc);};
    state[19] = function(_aG_){return display_newline(state, _aG_);};
    state[20] = function(_aF_){return display_blanks(state, _aF_);};
    state[21] = function(_aE_){return display_blanks(state, _aE_);};
    return 0;
   }
   function default_pp_mark_open_tag(param){
    if(param[1] !== String_tag) return cst$10;
    var s = param[2], _aD_ = caml_call2(Stdlib[28], s, cst$8);
    return caml_call2(Stdlib[28], cst$9, _aD_);
   }
   function default_pp_mark_close_tag(param){
    if(param[1] !== String_tag) return cst$13;
    var s = param[2], _aC_ = caml_call2(Stdlib[28], s, cst$11);
    return caml_call2(Stdlib[28], cst$12, _aC_);
   }
   function default_pp_print_open_tag(_aB_){return 0;}
   function default_pp_print_close_tag(_aA_){return 0;}
   function pp_make_formatter(f, g, h, i, j){
    var
     pp_queue = caml_call1(Stdlib_Queue[2], 0),
     sys_tok = [0, unknown, _g_, 0];
    caml_call2(Stdlib_Queue[3], sys_tok, pp_queue);
    var scan_stack = caml_call1(Stdlib_Stack[2], 0);
    initialize_scan_stack(scan_stack);
    caml_call2(Stdlib_Stack[3], [0, 1, sys_tok], scan_stack);
    var
     pp_margin = 78,
     _aw_ = Stdlib[19],
     _ax_ = caml_call1(Stdlib_Stack[2], 0),
     _ay_ = caml_call1(Stdlib_Stack[2], 0),
     _az_ = caml_call1(Stdlib_Stack[2], 0);
    return [0,
            scan_stack,
            caml_call1(Stdlib_Stack[2], 0),
            _az_,
            _ay_,
            _ax_,
            pp_margin,
            10,
            68,
            pp_margin,
            0,
            1,
            1,
            1,
            1,
            _aw_,
            cst$14,
            f,
            g,
            h,
            i,
            j,
            0,
            0,
            default_pp_mark_open_tag,
            default_pp_mark_close_tag,
            default_pp_print_open_tag,
            default_pp_print_close_tag,
            pp_queue];
   }
   function formatter_of_out_functions(out_funs){
    return pp_make_formatter
            (out_funs[1], out_funs[2], out_funs[3], out_funs[4], out_funs[5]);
   }
   function make_formatter(output, flush){
    var
     ppf =
       pp_make_formatter
        (output,
         flush,
         function(_av_){return 0;},
         function(_au_){return 0;},
         function(_at_){return 0;});
    ppf[19] = function(_as_){return display_newline(ppf, _as_);};
    ppf[20] = function(_ar_){return display_blanks(ppf, _ar_);};
    ppf[21] = function(_aq_){return display_blanks(ppf, _aq_);};
    return ppf;
   }
   function formatter_of_out_channel(oc){
    return make_formatter
            (caml_call1(Stdlib[69], oc),
             function(param){return caml_call1(Stdlib[63], oc);});
   }
   function formatter_of_buffer(b){
    return make_formatter
            (caml_call1(Stdlib_Buffer[18], b), function(_ap_){return 0;});
   }
   var pp_buffer_size = 512;
   function pp_make_buffer(param){
    return caml_call1(Stdlib_Buffer[1], pp_buffer_size);
   }
   var
    stdbuf = pp_make_buffer(0),
    std_formatter = formatter_of_out_channel(Stdlib[39]),
    err_formatter = formatter_of_out_channel(Stdlib[40]),
    str_formatter = formatter_of_buffer(stdbuf),
    stdbuf_key = caml_call2(Stdlib_Domain[11][1], 0, pp_make_buffer);
   caml_call2(Stdlib_Domain[11][3], stdbuf_key, stdbuf);
   var
    str_formatter_key =
      caml_call2
       (Stdlib_Domain[11][1],
        0,
        function(param){
         return formatter_of_buffer
                 (caml_call1(Stdlib_Domain[11][2], stdbuf_key));
        });
   caml_call2(Stdlib_Domain[11][3], str_formatter_key, str_formatter);
   function buffered_out_string(key, str, ofs, len){
    var _ao_ = caml_call1(Stdlib_Domain[11][2], key);
    return caml_call4(Stdlib_Buffer[18], _ao_, str, ofs, len);
   }
   function buffered_out_flush(oc, key, param){
    var
     buf = caml_call1(Stdlib_Domain[11][2], key),
     len = caml_call1(Stdlib_Buffer[7], buf),
     str = caml_call1(Stdlib_Buffer[2], buf);
    caml_call4(Stdlib[69], oc, str, 0, len);
    caml_call1(Stdlib[63], oc);
    return caml_call1(Stdlib_Buffer[8], buf);
   }
   var
    std_buf_key =
      caml_call2
       (Stdlib_Domain[11][1],
        0,
        function(param){return caml_call1(Stdlib_Buffer[1], pp_buffer_size);}),
    err_buf_key =
      caml_call2
       (Stdlib_Domain[11][1],
        0,
        function(param){return caml_call1(Stdlib_Buffer[1], pp_buffer_size);}),
    std_formatter_key =
      caml_call2
       (Stdlib_Domain[11][1],
        0,
        function(param){
         var
          _ac_ = Stdlib[39],
          ppf =
            pp_make_formatter
             (function(_al_, _am_, _an_){
               return buffered_out_string(std_buf_key, _al_, _am_, _an_);
              },
              function(_ak_){
               return buffered_out_flush(_ac_, std_buf_key, _ak_);
              },
              function(_aj_){return 0;},
              function(_ai_){return 0;},
              function(_ah_){return 0;});
         ppf[19] = function(_ag_){return display_newline(ppf, _ag_);};
         ppf[20] = function(_af_){return display_blanks(ppf, _af_);};
         ppf[21] = function(_ae_){return display_blanks(ppf, _ae_);};
         caml_call1
          (Stdlib_Domain[6],
           function(_ad_){return pp_print_flush(ppf, _ad_);});
         return ppf;
        });
   caml_call2(Stdlib_Domain[11][3], std_formatter_key, std_formatter);
   var
    err_formatter_key =
      caml_call2
       (Stdlib_Domain[11][1],
        0,
        function(param){
         var
          _S_ = Stdlib[40],
          ppf =
            pp_make_formatter
             (function(_$_, _aa_, _ab_){
               return buffered_out_string(err_buf_key, _$_, _aa_, _ab_);
              },
              function(___){return buffered_out_flush(_S_, err_buf_key, ___);},
              function(_Z_){return 0;},
              function(_Y_){return 0;},
              function(_X_){return 0;});
         ppf[19] = function(_W_){return display_newline(ppf, _W_);};
         ppf[20] = function(_V_){return display_blanks(ppf, _V_);};
         ppf[21] = function(_U_){return display_blanks(ppf, _U_);};
         caml_call1
          (Stdlib_Domain[6], function(_T_){return pp_print_flush(ppf, _T_);});
         return ppf;
        });
   caml_call2(Stdlib_Domain[11][3], err_formatter_key, err_formatter);
   function get_std_formatter(param){
    return caml_call1(Stdlib_Domain[11][2], std_formatter_key);
   }
   function get_err_formatter(param){
    return caml_call1(Stdlib_Domain[11][2], err_formatter_key);
   }
   function get_str_formatter(param){
    return caml_call1(Stdlib_Domain[11][2], str_formatter_key);
   }
   function get_stdbuf(param){
    return caml_call1(Stdlib_Domain[11][2], stdbuf_key);
   }
   function flush_buffer_formatter(buf, ppf){
    pp_flush_queue(ppf, 0);
    var s = caml_call1(Stdlib_Buffer[2], buf);
    caml_call1(Stdlib_Buffer[9], buf);
    return s;
   }
   function flush_str_formatter(param){
    var
     stdbuf = caml_call1(Stdlib_Domain[11][2], stdbuf_key),
     str_formatter = caml_call1(Stdlib_Domain[11][2], str_formatter_key);
    return flush_buffer_formatter(stdbuf, str_formatter);
   }
   function make_synchronized_formatter(output, flush){
    return caml_call2
            (Stdlib_Domain[11][1],
             0,
             function(param){
              var
               buf = caml_call1(Stdlib_Buffer[1], pp_buffer_size),
               output$0 = caml_call1(Stdlib_Buffer[18], buf);
              function flush$0(param){
               var _R_ = caml_call1(Stdlib_Buffer[7], buf);
               caml_call3(output, caml_call1(Stdlib_Buffer[2], buf), 0, _R_);
               caml_call1(Stdlib_Buffer[8], buf);
               return caml_call1(flush, 0);
              }
              return make_formatter(output$0, flush$0);
             });
   }
   function synchronized_formatter_of_out_(oc){
    return make_synchronized_formatter
            (caml_call1(Stdlib[69], oc),
             function(param){return caml_call1(Stdlib[63], oc);});
   }
   function make_symbolic_output_buffer(param){return [0, 0];}
   function clear_symbolic_output_buffer(sob){sob[1] = 0; return 0;}
   function get_symbolic_output_buffer(sob){
    return caml_call1(Stdlib_List[10], sob[1]);
   }
   function flush_symbolic_output_buffer(sob){
    var items = get_symbolic_output_buffer(sob);
    clear_symbolic_output_buffer(sob);
    return items;
   }
   function add_symbolic_output_item(sob, item){sob[1] = [0, item, sob[1]]; return 0;
   }
   function formatter_of_symbolic_output_b(sob){
    function f(s, i, n){
     return add_symbolic_output_item
             (sob, [0, caml_call3(Stdlib_String[16], s, i, n)]);
    }
    function g(_Q_){return add_symbolic_output_item(sob, 0);}
    function h(_P_){return add_symbolic_output_item(sob, 1);}
    function i(n){return add_symbolic_output_item(sob, [1, n]);}
    function j(n){return add_symbolic_output_item(sob, [2, n]);}
    return pp_make_formatter(f, g, h, i, j);
   }
   function open_hbox(v){
    return pp_open_hbox
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function open_vbox(v){
    return pp_open_vbox
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function open_hvbox(v){
    return pp_open_hvbox
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function open_hovbox(v){
    return pp_open_hovbox
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function open_box(v){
    return pp_open_box(caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function close_box(v){
    return pp_close_box
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function open_stag(v){
    return pp_open_stag
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function close_stag(v){
    return pp_close_stag
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_as(isize, w){
    var state = caml_call1(Stdlib_Domain[11][2], std_formatter_key);
    return pp_print_as_size(state, isize, w);
   }
   function print_string(v){
    return pp_print_string
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_substring(pos, len, v){
    var state = caml_call1(Stdlib_Domain[11][2], std_formatter_key);
    return pp_print_substring_as(pos, len, state, len, v);
   }
   function print_substring_as(pos, len, as_len, v){
    return pp_print_substring_as
            (pos,
             len,
             caml_call1(Stdlib_Domain[11][2], std_formatter_key),
             as_len,
             v);
   }
   function print_bytes(v){
    return pp_print_bytes
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_int(v){
    return pp_print_int
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_float(v){
    return pp_print_float
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_char(v){
    return pp_print_char
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_bool(v){
    return pp_print_bool
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_break(v, w){
    return pp_print_break
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v, w);
   }
   function print_cut(v){
    return pp_print_cut
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_space(v){
    return pp_print_space
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function force_newline(v){
    return pp_force_newline
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_flush(v){
    return pp_print_flush
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_newline(v){
    return pp_print_newline
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_if_newline(v){
    return pp_print_if_newline
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function open_tbox(v){
    return pp_open_tbox
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function close_tbox(v){
    return pp_close_tbox
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_tbreak(v, w){
    return pp_print_tbreak
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v, w);
   }
   function set_tab(v){
    return pp_set_tab(caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function print_tab(v){
    return pp_print_tab
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function set_margin(v){
    return pp_set_margin
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function get_margin(v){
    var state = caml_call1(Stdlib_Domain[11][2], std_formatter_key);
    return state[6];
   }
   function set_max_indent(v){
    return pp_set_max_indent
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function get_max_indent(v){
    var state = caml_call1(Stdlib_Domain[11][2], std_formatter_key);
    return state[8];
   }
   function set_geometry(max_indent, margin){
    return pp_set_geometry
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key),
             max_indent,
             margin);
   }
   function safe_set_geometry(max_indent, margin){
    return pp_safe_set_geometry
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key),
             max_indent,
             margin);
   }
   function get_geometry(v){
    return pp_get_geometry
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function update_geometry(v){
    return pp_update_geometry
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function set_max_boxes(v){
    return pp_set_max_boxes
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function get_max_boxes(v){
    var state = caml_call1(Stdlib_Domain[11][2], std_formatter_key);
    return state[15];
   }
   function over_max_boxes(v){
    return pp_over_max_boxes
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function set_ellipsis_text(v){
    return pp_set_ellipsis_text
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function get_ellipsis_text(v){
    var state = caml_call1(Stdlib_Domain[11][2], std_formatter_key);
    return state[16];
   }
   function set_formatter_out_channel(v){
    return pp_set_formatter_out_channel
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function set_formatter_out_functions(v){
    return pp_set_formatter_out_functions
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function get_formatter_out_functions(v){
    return pp_get_formatter_out_functions
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function set_formatter_output_functions(v, w){
    return pp_set_formatter_output_functi
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v, w);
   }
   function get_formatter_output_functions(v){
    return pp_get_formatter_output_functi
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function set_formatter_stag_functions(v){
    return pp_set_formatter_stag_function
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function get_formatter_stag_functions(v){
    return pp_get_formatter_stag_function
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function set_print_tags(v){
    return pp_set_print_tags
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function get_print_tags(v){
    var state = caml_call1(Stdlib_Domain[11][2], std_formatter_key);
    return state[22];
   }
   function set_mark_tags(v){
    return pp_set_mark_tags
            (caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function get_mark_tags(v){
    var state = caml_call1(Stdlib_Domain[11][2], std_formatter_key);
    return state[23];
   }
   function set_tags(v){
    return pp_set_tags(caml_call1(Stdlib_Domain[11][2], std_formatter_key), v);
   }
   function pp_print_iter(opt, iter, pp_v, ppf, v){
    var pp_sep = opt ? opt[1] : pp_print_cut, is_first = [0, 1];
    function pp_v$0(v){
     if(is_first[1]) is_first[1] = 0; else caml_call2(pp_sep, ppf, 0);
     return caml_call2(pp_v, ppf, v);
    }
    return caml_call2(iter, pp_v$0, v);
   }
   function pp_print_list(opt, pp_v, ppf, v){
    var pp_sep = opt ? opt[1] : pp_print_cut;
    return pp_print_iter([0, pp_sep], Stdlib_List[18], pp_v, ppf, v);
   }
   function pp_print_array(opt, pp_v, ppf, v){
    var pp_sep = opt ? opt[1] : pp_print_cut;
    return pp_print_iter([0, pp_sep], Stdlib_Array[12], pp_v, ppf, v);
   }
   function pp_print_seq(opt, pp_v, ppf, seq){
    var pp_sep = opt ? opt[1] : pp_print_cut;
    return pp_print_iter([0, pp_sep], Stdlib_Seq[4], pp_v, ppf, seq);
   }
   function pp_print_text(state, s){
    var len = caml_ml_string_length(s), left = [0, 0], right = [0, 0];
    function flush(param){
     var len = right[1] - left[1] | 0, pos = left[1];
     pp_print_substring_as(pos, len, state, len, s);
     right[1]++;
     left[1] = right[1];
     return 0;
    }
    for(;;){
     if(right[1] === len){
      var _O_ = left[1] !== len ? 1 : 0;
      return _O_ ? flush(0) : _O_;
     }
     var match = runtime.caml_string_get(s, right[1]);
     if(10 === match){
      flush(0);
      pp_force_newline(state, 0);
     }
     else if(32 === match){
      flush(0);
      pp_print_space(state, 0);
     }
     else
      right[1]++;
    }
   }
   function pp_print_option(opt, pp_v, ppf, param){
    var none = opt ? opt[1] : function(_N_, param){return 0;};
    if(! param) return caml_call2(none, ppf, 0);
    var v = param[1];
    return caml_call2(pp_v, ppf, v);
   }
   function pp_print_result(ok, error, ppf, param){
    if(0 === param[0]){var v = param[1]; return caml_call2(ok, ppf, v);}
    var e = param[1];
    return caml_call2(error, ppf, e);
   }
   function pp_print_either(left, right, ppf, param){
    if(0 === param[0]){var l = param[1]; return caml_call2(left, ppf, l);}
    var r = param[1];
    return caml_call2(right, ppf, r);
   }
   function compute_tag(output, tag_acc){
    var
     buf = caml_call1(Stdlib_Buffer[1], 16),
     ppf = formatter_of_buffer(buf);
    caml_call2(output, ppf, tag_acc);
    pp_print_flush(ppf, 0);
    var len = caml_call1(Stdlib_Buffer[7], buf);
    return 2 <= len
            ? caml_call3(Stdlib_Buffer[4], buf, 1, len - 2 | 0)
            : caml_call1(Stdlib_Buffer[2], buf);
   }
   function output_formatting_lit(ppf, fmting_lit){
    if(typeof fmting_lit === "number")
     switch(fmting_lit){
       case 0:
        return pp_close_box(ppf, 0);
       case 1:
        return pp_close_stag(ppf, 0);
       case 2:
        return pp_print_flush(ppf, 0);
       case 3:
        return pp_force_newline(ppf, 0);
       case 4:
        return pp_print_newline(ppf, 0);
       case 5:
        return pp_print_char(ppf, 64);
       default: return pp_print_char(ppf, 37);
     }
    switch(fmting_lit[0]){
      case 0:
       var offset = fmting_lit[3], width = fmting_lit[2];
       return pp_print_break(ppf, width, offset);
      case 1:
       return 0;
      default:
       var c = fmting_lit[1];
       pp_print_char(ppf, 64);
       return pp_print_char(ppf, c);
    }
   }
   function output_acc(ppf, acc){
    if(typeof acc === "number") return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
          output_acc(ppf, p);
          return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
           output_acc(ppf, p$0);
           return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(output_acc, acc$0)]);
          }
          var acc$1 = match[1];
          output_acc(ppf, p$0);
          var
           _E_ = compute_tag(output_acc, acc$1),
           match$0 = caml_call1(CamlinternalFormat[20], _E_),
           bty = match$0[2],
           indent = match$0[1];
          return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _F_ = acc[1];
          if(typeof _F_ !== "number" && 0 === _F_[0]){
           var _G_ = _F_[2];
           if(typeof _G_ !== "number" && 1 === _G_[0]){
            var s$0 = acc[2], size = _G_[2], p$2 = _F_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _F_;
          break a;
         case 3:
          var _H_ = acc[1];
          if(typeof _H_ !== "number" && 0 === _H_[0]){
           var _I_ = _H_[2];
           if(typeof _I_ !== "number" && 1 === _I_[0]){
            var c$0 = acc[2], size$0 = _I_[2], p$4 = _H_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _H_;
          break c;
         case 4:
          var _J_ = acc[1];
          if(typeof _J_ !== "number" && 0 === _J_[0]){
           var _K_ = _J_[2];
           if(typeof _K_ !== "number" && 1 === _K_[0]){
            var s$0 = acc[2], size = _K_[2], p$2 = _J_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _J_;
          break a;
         case 5:
          var _L_ = acc[1];
          if(typeof _L_ !== "number" && 0 === _L_[0]){
           var _M_ = _L_[2];
           if(typeof _M_ !== "number" && 1 === _M_[0]){
            var c$0 = acc[2], size$0 = _M_[2], p$4 = _L_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _L_;
          break c;
         case 6:
          var f$0 = acc[2], p$5 = acc[1];
          output_acc(ppf, p$5);
          return caml_call1(f$0, ppf);
         case 7:
          var p$6 = acc[1];
          output_acc(ppf, p$6);
          return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$7 = acc[1];
          output_acc(ppf, p$7);
          return caml_call1(Stdlib[1], msg);
       }
       output_acc(ppf, p$4);
       return pp_print_as_size
               (ppf, size$0, caml_call2(Stdlib_String[1], 1, c$0));
      }
      output_acc(ppf, p$3);
      return pp_print_char(ppf, c);
     }
     output_acc(ppf, p$2);
     return pp_print_as_size(ppf, size, s$0);
    }
    output_acc(ppf, p$1);
    return pp_print_string(ppf, s);
   }
   function strput_acc(ppf, acc){
    if(typeof acc === "number") return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
          strput_acc(ppf, p);
          return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
           strput_acc(ppf, p$0);
           return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(strput_acc, acc$0)]);
          }
          var acc$1 = match[1];
          strput_acc(ppf, p$0);
          var
           _v_ = compute_tag(strput_acc, acc$1),
           match$0 = caml_call1(CamlinternalFormat[20], _v_),
           bty = match$0[2],
           indent = match$0[1];
          return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _w_ = acc[1];
          if(typeof _w_ !== "number" && 0 === _w_[0]){
           var _x_ = _w_[2];
           if(typeof _x_ !== "number" && 1 === _x_[0]){
            var s$0 = acc[2], size = _x_[2], p$2 = _w_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _w_;
          break a;
         case 3:
          var _y_ = acc[1];
          if(typeof _y_ !== "number" && 0 === _y_[0]){
           var _z_ = _y_[2];
           if(typeof _z_ !== "number" && 1 === _z_[0]){
            var c$0 = acc[2], size$0 = _z_[2], p$4 = _y_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _y_;
          break c;
         case 4:
          var _A_ = acc[1];
          if(typeof _A_ !== "number" && 0 === _A_[0]){
           var _B_ = _A_[2];
           if(typeof _B_ !== "number" && 1 === _B_[0]){
            var s$0 = acc[2], size = _B_[2], p$2 = _A_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _A_;
          break a;
         case 5:
          var _C_ = acc[1];
          if(typeof _C_ !== "number" && 0 === _C_[0]){
           var _D_ = _C_[2];
           if(typeof _D_ !== "number" && 1 === _D_[0]){
            var c$0 = acc[2], size$0 = _D_[2], p$4 = _C_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _C_;
          break c;
         case 6:
          var p$5 = acc[1];
          if(typeof p$5 !== "number" && 0 === p$5[0]){
           var match$1 = p$5[2];
           if(typeof match$1 !== "number" && 1 === match$1[0]){
            var f$1 = acc[2], size$1 = match$1[2], p$6 = p$5[1];
            strput_acc(ppf, p$6);
            return pp_print_as_size(ppf, size$1, caml_call1(f$1, 0));
           }
          }
          var f$0 = acc[2];
          strput_acc(ppf, p$5);
          return pp_print_string(ppf, caml_call1(f$0, 0));
         case 7:
          var p$7 = acc[1];
          strput_acc(ppf, p$7);
          return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$8 = acc[1];
          strput_acc(ppf, p$8);
          return caml_call1(Stdlib[1], msg);
       }
       strput_acc(ppf, p$4);
       return pp_print_as_size
               (ppf, size$0, caml_call2(Stdlib_String[1], 1, c$0));
      }
      strput_acc(ppf, p$3);
      return pp_print_char(ppf, c);
     }
     strput_acc(ppf, p$2);
     return pp_print_as_size(ppf, size, s$0);
    }
    strput_acc(ppf, p$1);
    return pp_print_string(ppf, s);
   }
   function kfprintf(k, ppf, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){output_acc(ppf, acc); return caml_call1(k, ppf);},
             0,
             fmt);
   }
   function ikfprintf(k, ppf, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], k, ppf, fmt);
   }
   function ifprintf(ppf, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], function(_u_){return 0;}, 0, fmt);
   }
   function fprintf(ppf){
    function _r_(_t_){return 0;}
    return function(_s_){return kfprintf(_r_, ppf, _s_);};
   }
   function printf(param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              return output_acc
                      (caml_call1(Stdlib_Domain[11][2], std_formatter_key), acc);
             },
             0,
             fmt);
   }
   function eprintf(param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              return output_acc
                      (caml_call1(Stdlib_Domain[11][2], err_formatter_key), acc);
             },
             0,
             fmt);
   }
   function kdprintf(k, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              return caml_call1
                      (k, function(ppf){return output_acc(ppf, acc);});
             },
             0,
             fmt);
   }
   function dprintf(fmt){return kdprintf(function(i){return i;}, fmt);}
   function ksprintf(k, param){
    var fmt = param[1], b = pp_make_buffer(0), ppf = formatter_of_buffer(b);
    function k$0(acc){
     strput_acc(ppf, acc);
     return caml_call1(k, flush_buffer_formatter(b, ppf));
    }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(id, fmt);}
   function kasprintf(k, param){
    var fmt = param[1], b = pp_make_buffer(0), ppf = formatter_of_buffer(b);
    function k$0(acc){
     output_acc(ppf, acc);
     return caml_call1(k, flush_buffer_formatter(b, ppf));
    }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function asprintf(fmt){return kasprintf(id, fmt);}
   function flush_standard_formatters(param){
    pp_print_flush(caml_call1(Stdlib_Domain[11][2], std_formatter_key), 0);
    return pp_print_flush
            (caml_call1(Stdlib_Domain[11][2], err_formatter_key), 0);
   }
   caml_call1(Stdlib[100], flush_standard_formatters);
   caml_call1
    (Stdlib_Domain[5],
     function(param){
      flush_standard_formatters(0);
      var
       fs = pp_get_formatter_out_functions(std_formatter, 0),
       _h_ = Stdlib[39];
      pp_set_formatter_out_functions
       (std_formatter,
        [0,
         function(_o_, _p_, _q_){
          return buffered_out_string(std_buf_key, _o_, _p_, _q_);
         },
         function(_n_){return buffered_out_flush(_h_, std_buf_key, _n_);},
         fs[3],
         fs[4],
         fs[5]]);
      var
       fs$0 = pp_get_formatter_out_functions(err_formatter, 0),
       _i_ = Stdlib[40];
      return pp_set_formatter_out_functions
              (err_formatter,
               [0,
                function(_k_, _l_, _m_){
                 return buffered_out_string(err_buf_key, _k_, _l_, _m_);
                },
                function(_j_){
                 return buffered_out_flush(_i_, err_buf_key, _j_);
                },
                fs$0[3],
                fs$0[4],
                fs$0[5]]);
     });
   var
    Stdlib_Format =
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string,
       pp_print_substring,
       print_substring,
       pp_print_bytes,
       print_bytes,
       pp_print_as,
       print_as,
       pp_print_substring_as,
       print_substring_as,
       pp_print_int,
       print_int,
       pp_print_float,
       print_float,
       pp_print_char,
       print_char,
       pp_print_bool,
       print_bool,
       pp_print_nothing,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline,
       pp_infinity,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_update_geometry,
       update_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       synchronized_formatter_of_out_,
       std_formatter,
       get_std_formatter,
       err_formatter,
       get_err_formatter,
       formatter_of_buffer,
       stdbuf,
       get_stdbuf,
       str_formatter,
       get_str_formatter,
       flush_str_formatter,
       make_formatter,
       make_synchronized_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_iter,
       pp_print_list,
       pp_print_array,
       pp_print_seq,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       pp_print_either,
       fprintf,
       printf,
       eprintf,
       sprintf,
       asprintf,
       dprintf,
       ifprintf,
       kfprintf,
       kdprintf,
       ikfprintf,
       ksprintf,
       kasprintf];
   runtime.caml_register_global(38, Stdlib_Format, "Stdlib__Format");
   return;
  }
  (globalThis));

//# 24183 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_register_named_value = runtime.caml_register_named_value,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    register = caml_register_named_value;
   function register_exception(name, exn){
    var
     _a_ = Stdlib_Obj[10],
     slot = runtime.caml_obj_tag(exn) === _a_ ? exn : exn[1];
    return caml_register_named_value(name, slot);
   }
   var Stdlib_Callback = [0, register, register_exception];
   runtime.caml_register_global(1, Stdlib_Callback, "Stdlib__Callback");
   return;
  }
  (globalThis));

//# 24206 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_camlinternalOO_ml = "camlinternalOO.ml",
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_block = runtime.caml_obj_block,
    caml_set_oo_id = runtime.caml_set_oo_id,
    caml_string_compare = runtime.caml_string_compare,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Map = global_data.Stdlib__Map;
   function copy(o){var o$0 = o.slice(); return caml_set_oo_id(o$0);}
   var params = [0, 1, 1, 1, 3, 16];
   function public_method_label(s){
    var
     accu = [0, 0],
     _al_ = runtime.caml_ml_string_length(s) - 1 | 0,
     _ak_ = 0;
    if(_al_ >= 0){
     var i = _ak_;
     for(;;){
      var _am_ = runtime.caml_string_get(s, i);
      accu[1] = (223 * accu[1] | 0) + _am_ | 0;
      var _an_ = i + 1 | 0;
      if(_al_ === i) break;
      i = _an_;
     }
    }
    accu[1] = accu[1] & 2147483647;
    var tag = 1073741823 < accu[1] ? accu[1] + 2147483648 | 0 : accu[1];
    return tag;
   }
   var
    compare = caml_string_compare,
    Vars = caml_call1(Stdlib_Map[1], [0, compare]),
    compare$0 = caml_string_compare,
    Meths = caml_call1(Stdlib_Map[1], [0, compare$0]),
    compare$1 = runtime.caml_int_compare,
    Labs = caml_call1(Stdlib_Map[1], [0, compare$1]),
    dummy_table = [0, 0, [0, 0], Meths[1], Labs[1], 0, 0, Vars[1], 0],
    table_count = [0, 0],
    dummy_met = caml_obj_block(0, 0),
    initial_object_size = 2;
   function fit_size(n){
    return 2 < n ? fit_size((n + 1 | 0) / 2 | 0) * 2 | 0 : n;
   }
   function new_table(pub_labels){
    table_count[1]++;
    var
     len = pub_labels.length - 1,
     methods = caml_array_make((len * 2 | 0) + 2 | 0, dummy_met);
    caml_check_bound(methods, 0)[1] = len;
    var
     _ad_ = Stdlib_Sys[9],
     _ae_ = (runtime.caml_mul(fit_size(len), _ad_) / 8 | 0) - 1 | 0;
    caml_check_bound(methods, 1)[2] = _ae_;
    var _ag_ = len - 1 | 0, _af_ = 0;
    if(_ag_ >= 0){
     var i = _af_;
     for(;;){
      var
       _ai_ = (i * 2 | 0) + 3 | 0,
       _ah_ = caml_check_bound(pub_labels, i)[1 + i];
      caml_check_bound(methods, _ai_)[1 + _ai_] = _ah_;
      var _aj_ = i + 1 | 0;
      if(_ag_ === i) break;
      i = _aj_;
     }
    }
    return [0,
            initial_object_size,
            methods,
            Meths[1],
            Labs[1],
            0,
            0,
            Vars[1],
            0];
   }
   function resize(array, new_size){
    var old_size = array[2].length - 1, _ab_ = old_size < new_size ? 1 : 0;
    if(_ab_){
     var new_buck = caml_array_make(new_size, dummy_met);
     caml_call5(Stdlib_Array[9], array[2], 0, new_buck, 0, old_size);
     array[2] = new_buck;
     var _ac_ = 0;
    }
    else
     var _ac_ = _ab_;
    return _ac_;
   }
   var
    method_count = [0, 0],
    inst_var_count = [0, 0],
    _a_ = [0, cst_camlinternalOO_ml, 279, 50],
    _b_ = [0, cst_camlinternalOO_ml, 407, 13],
    _c_ = [0, cst_camlinternalOO_ml, 410, 13],
    _d_ = [0, cst_camlinternalOO_ml, 413, 13],
    _e_ = [0, cst_camlinternalOO_ml, 416, 13],
    _f_ = [0, cst_camlinternalOO_ml, 419, 13],
    _g_ = [0, cst_camlinternalOO_ml, 437, 17];
   function new_method(table){
    var index = table[2].length - 1;
    resize(table, index + 1 | 0);
    return index;
   }
   function get_method_label(table, name){
    try{var _$_ = caml_call2(Meths[17], name, table[3]); return _$_;}
    catch(_aa_){
     var ___ = caml_wrap_exception(_aa_);
     if(___ !== Stdlib[8]) throw caml_maybe_attach_backtrace(___, 0);
     var label = new_method(table);
     table[3] = caml_call3(Meths[2], name, label, table[3]);
     table[4] = caml_call3(Labs[2], label, 1, table[4]);
     return label;
    }
   }
   function get_method_labels(table, names){
    return caml_call2
            (Stdlib_Array[14],
             function(_Z_){return get_method_label(table, _Z_);},
             names);
   }
   function set_method(table, label, element){
    method_count[1]++;
    return caml_call2(Labs[17], label, table[4])
            ? (resize
               (table, label + 1 | 0),
              caml_check_bound(table[2], label)[1 + label] = element,
              0)
            : (table[6] = [0, [0, label, element], table[6]], 0);
   }
   function get_method(table, label){
    try{var _X_ = caml_call2(Stdlib_List[53], label, table[6]); return _X_;}
    catch(_Y_){
     var _W_ = caml_wrap_exception(_Y_);
     if(_W_ === Stdlib[8])
      return caml_check_bound(table[2], label)[1 + label];
     throw caml_maybe_attach_backtrace(_W_, 0);
    }
   }
   function to_list(arr){
    return 0 === arr ? 0 : caml_call1(Stdlib_Array[10], arr);
   }
   function narrow(table, vars, virt_meths, concr_meths){
    var
     vars$0 = to_list(vars),
     virt_meths$0 = to_list(virt_meths),
     concr_meths$0 = to_list(concr_meths),
     virt_meth_labs =
       caml_call2
        (Stdlib_List[20],
         function(_V_){return get_method_label(table, _V_);},
         virt_meths$0),
     concr_meth_labs =
       caml_call2
        (Stdlib_List[20],
         function(_U_){return get_method_label(table, _U_);},
         concr_meths$0);
    table[5] =
     [0,
      [0, table[3], table[4], table[6], table[7], virt_meth_labs, vars$0],
      table[5]];
    table[7] =
     caml_call3
      (Vars[24],
       function(lab, info, tvars){
        return caml_call2(Stdlib_List[37], lab, vars$0)
                ? caml_call3(Vars[2], lab, info, tvars)
                : tvars;
       },
       table[7],
       Vars[1]);
    var by_name = [0, Meths[1]], by_label = [0, Labs[1]];
    caml_call3
     (Stdlib_List[28],
      function(met, label){
       by_name[1] = caml_call3(Meths[2], met, label, by_name[1]);
       var _P_ = by_label[1];
       try{var _S_ = caml_call2(Labs[17], label, table[4]), _R_ = _S_;}
       catch(_T_){
        var _Q_ = caml_wrap_exception(_T_);
        if(_Q_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_Q_, 0);
        var _R_ = 1;
       }
       by_label[1] = caml_call3(Labs[2], label, _R_, _P_);
       return 0;
      },
      concr_meths$0,
      concr_meth_labs);
    caml_call3
     (Stdlib_List[28],
      function(met, label){
       by_name[1] = caml_call3(Meths[2], met, label, by_name[1]);
       by_label[1] = caml_call3(Labs[2], label, 0, by_label[1]);
       return 0;
      },
      virt_meths$0,
      virt_meth_labs);
    table[3] = by_name[1];
    table[4] = by_label[1];
    table[6] =
     caml_call3
      (Stdlib_List[27],
       function(met, hm){
        var lab = met[1];
        return caml_call2(Stdlib_List[37], lab, virt_meth_labs)
                ? hm
                : [0, met, hm];
       },
       table[6],
       0);
    return 0;
   }
   function widen(table){
    var
     match = caml_call1(Stdlib_List[6], table[5]),
     vars = match[6],
     virt_meths = match[5],
     saved_vars = match[4],
     saved_hidden_meths = match[3],
     by_label = match[2],
     by_name = match[1];
    table[5] = caml_call1(Stdlib_List[7], table[5]);
    table[7] =
     caml_call3
      (Stdlib_List[26],
       function(s, v){
        var _O_ = caml_call2(Vars[17], v, table[7]);
        return caml_call3(Vars[2], v, _O_, s);
       },
       saved_vars,
       vars);
    table[3] = by_name;
    table[4] = by_label;
    table[6] =
     caml_call3
      (Stdlib_List[27],
       function(met, hm){
        var lab = met[1];
        return caml_call2(Stdlib_List[37], lab, virt_meths)
                ? hm
                : [0, met, hm];
       },
       table[6],
       saved_hidden_meths);
    return 0;
   }
   function new_variable(table, name){
    try{var _M_ = caml_call2(Vars[17], name, table[7]); return _M_;}
    catch(_N_){
     var _L_ = caml_wrap_exception(_N_);
     if(_L_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_L_, 0);
     var index = table[1];
     table[1] = index + 1 | 0;
     if(name !== "") table[7] = caml_call3(Vars[2], name, index, table[7]);
     return index;
    }
   }
   function to_array(arr){return runtime.caml_equal(arr, 0) ? [0] : arr;}
   function new_methods_variables(table, meths, vals){
    var
     meths$0 = to_array(meths),
     nmeths = meths$0.length - 1,
     nvals = vals.length - 1,
     res = caml_array_make(nmeths + nvals | 0, 0),
     _D_ = nmeths - 1 | 0,
     _C_ = 0;
    if(_D_ >= 0){
     var i$0 = _C_;
     for(;;){
      var
       _J_ = get_method_label(table, caml_check_bound(meths$0, i$0)[1 + i$0]);
      caml_check_bound(res, i$0)[1 + i$0] = _J_;
      var _K_ = i$0 + 1 | 0;
      if(_D_ === i$0) break;
      i$0 = _K_;
     }
    }
    var _F_ = nvals - 1 | 0, _E_ = 0;
    if(_F_ >= 0){
     var i = _E_;
     for(;;){
      var
       _H_ = i + nmeths | 0,
       _G_ = new_variable(table, caml_check_bound(vals, i)[1 + i]);
      caml_check_bound(res, _H_)[1 + _H_] = _G_;
      var _I_ = i + 1 | 0;
      if(_F_ === i) break;
      i = _I_;
     }
    }
    return res;
   }
   function get_variable(table, name){
    try{var _A_ = caml_call2(Vars[17], name, table[7]); return _A_;}
    catch(_B_){
     var _z_ = caml_wrap_exception(_B_);
     if(_z_ === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     throw caml_maybe_attach_backtrace(_z_, 0);
    }
   }
   function get_variables(table, names){
    return caml_call2
            (Stdlib_Array[14],
             function(_y_){return get_variable(table, _y_);},
             names);
   }
   function add_initializer(table, f){table[8] = [0, f, table[8]]; return 0;}
   function create_table(public_methods){
    if(0 === public_methods) return new_table([0]);
    var
     tags = caml_call2(Stdlib_Array[14], public_method_label, public_methods),
     table = new_table(tags);
    caml_call2
     (Stdlib_Array[13],
      function(i, met){
       var lab = (i * 2 | 0) + 2 | 0;
       table[3] = caml_call3(Meths[2], met, lab, table[3]);
       table[4] = caml_call3(Labs[2], lab, 1, table[4]);
       return 0;
      },
      public_methods);
    return table;
   }
   function init_class(table){
    inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
    table[8] = caml_call1(Stdlib_List[10], table[8]);
    var _x_ = Stdlib_Sys[9];
    return resize
            (table,
             3 + caml_div(caml_check_bound(table[2], 1)[2] * 16 | 0, _x_) | 0);
   }
   function inherits(cla, vals, virt_meths, concr_meths, param, top){
    var env = param[3], super$0 = param[2];
    narrow(cla, vals, virt_meths, concr_meths);
    var init = top ? caml_call2(super$0, cla, env) : caml_call1(super$0, cla);
    widen(cla);
    var
     _s_ = to_array(concr_meths),
     _t_ =
       [0,
        caml_call2
         (Stdlib_Array[14],
          function(nm){return get_method(cla, get_method_label(cla, nm));},
          _s_),
        0],
     _u_ = to_array(vals),
     _v_ =
       [0,
        [0, init],
        [0,
         caml_call2
          (Stdlib_Array[14],
           function(_w_){return get_variable(cla, _w_);},
           _u_),
         _t_]];
    return caml_call1(Stdlib_Array[5], _v_);
   }
   function make_class(pub_meths, class_init){
    var
     table = create_table(pub_meths),
     env_init = caml_call1(class_init, table);
    init_class(table);
    return [0, caml_call1(env_init, 0), class_init, 0];
   }
   function make_class_store(pub_meths, class_init, init_table){
    var
     table = create_table(pub_meths),
     env_init = caml_call1(class_init, table);
    init_class(table);
    init_table[2] = class_init;
    init_table[1] = env_init;
    return 0;
   }
   function dummy_class(loc){
    function undef(param){
     throw caml_maybe_attach_backtrace([0, Stdlib[15], loc], 1);
    }
    return [0, undef, undef, 0];
   }
   function create_object(table){
    var obj = caml_obj_block(Stdlib_Obj[10], table[1]);
    obj[1] = table[2];
    return caml_set_oo_id(obj);
   }
   function create_object_opt(obj_0, table){
    if(obj_0) return obj_0;
    var obj = caml_obj_block(Stdlib_Obj[10], table[1]);
    obj[1] = table[2];
    return caml_set_oo_id(obj);
   }
   function iter_f(obj, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], f = param$0[1];
     caml_call1(f, obj);
     param$0 = l;
    }
   }
   function run_initializers(obj, table){
    var inits = table[8], _r_ = 0 !== inits ? 1 : 0;
    return _r_ ? iter_f(obj, inits) : _r_;
   }
   function run_initializers_opt(obj_0, obj, table){
    if(obj_0) return obj;
    var inits = table[8];
    if(0 !== inits) iter_f(obj, inits);
    return obj;
   }
   function create_object_and_run_initiali(obj_0, table){
    if(obj_0) return obj_0;
    var obj = create_object(table);
    run_initializers(obj, table);
    return obj;
   }
   function get_data(param){
    if(param) return param[2];
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function build_path(n, keys, tables){
    var res = [0, 0, 0, 0], r = [0, res], _o_ = 0;
    if(n >= 0){
     var i = _o_;
     for(;;){
      var _p_ = r[1];
      r[1] = [0, caml_check_bound(keys, i)[1 + i], _p_, 0];
      var _q_ = i + 1 | 0;
      if(n === i) break;
      i = _q_;
     }
    }
    var v = r[1];
    if(! tables)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    tables[2] = v;
    return res;
   }
   function lookup_tables(root, keys){
    var root_data = get_data(root);
    if(! root_data) return build_path(keys.length - 2 | 0, keys, root);
    var i$1 = keys.length - 2 | 0, i = i$1, tables$0 = root_data;
    for(;;){
     if(0 > i) return tables$0;
     var key = caml_check_bound(keys, i)[1 + i], tables$1 = tables$0;
     for(;;){
      if(! tables$1)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      if(tables$1[1] === key) break;
      if(! tables$1)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
      var tables = tables$1[3];
      if(! tables){
       var next = [0, key, 0, 0];
       if(! tables$1)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
       tables$1[3] = next;
       return build_path(i - 1 | 0, keys, next);
      }
      tables$1 = tables;
     }
     var tables_data = get_data(tables$1);
     if(! tables_data)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     var i$0 = i - 1 | 0;
     i = i$0;
     tables$0 = tables_data;
    }
   }
   function new_cache(table){
    var n = new_method(table);
    a:
    {
     if(0 !== (n % 2 | 0)){
      var _n_ = Stdlib_Sys[9];
      if
       ((2 + caml_div(caml_check_bound(table[2], 1)[2] * 16 | 0, _n_) | 0)
        >= n){
       var n$0 = new_method(table);
       break a;
      }
     }
     var n$0 = n;
    }
    caml_check_bound(table[2], n$0)[1 + n$0] = 0;
    return n$0;
   }
   function set_methods(table, methods){
    var len = methods.length - 1, i = [0, 0];
    for(;;){
     if(i[1] >= len) return 0;
     var
      _h_ = i[1],
      label = caml_check_bound(methods, _h_)[1 + _h_],
      next =
        function(param){
         i[1]++;
         var _m_ = i[1];
         return caml_check_bound(methods, _m_)[1 + _m_];
        },
      clo = next(0);
     if(typeof clo === "number")
      switch(clo){
        case 0:
         var x = next(0);
         let x$20 = x;
         var clo$0 = function(obj){return x$20;};
         break;
        case 1:
         var n = next(0);
         let n$38 = n;
         var clo$0 = function(obj){return obj[1 + n$38];};
         break;
        case 2:
         var e = next(0), n$0 = next(0);
         let e$10 = e, n$37 = n$0;
         var clo$0 = function(obj){return obj[1 + e$10][1 + n$37];};
         break;
        case 3:
         var n$1 = next(0);
         let n$36 = n$1;
         var clo$0 = function(obj){return caml_call1(obj[1][1 + n$36], obj);};
         break;
        case 4:
         var n$2 = next(0);
         let n$35 = n$2;
         var clo$0 = function(obj, x){obj[1 + n$35] = x; return 0;};
         break;
        case 5:
         var f = next(0), x$0 = next(0);
         let f$20 = f, x$19 = x$0;
         var clo$0 = function(obj){return caml_call1(f$20, x$19);};
         break;
        case 6:
         var f$0 = next(0), n$3 = next(0);
         let f$19 = f$0, n$34 = n$3;
         var clo$0 = function(obj){return caml_call1(f$19, obj[1 + n$34]);};
         break;
        case 7:
         var f$1 = next(0), e$0 = next(0), n$4 = next(0);
         let f$18 = f$1, e$9 = e$0, n$33 = n$4;
         var
          clo$0 =
            function(obj){return caml_call1(f$18, obj[1 + e$9][1 + n$33]);};
         break;
        case 8:
         var f$2 = next(0), n$5 = next(0);
         let f$17 = f$2, n$32 = n$5;
         var
          clo$0 =
            function(obj){
             return caml_call1(f$17, caml_call1(obj[1][1 + n$32], obj));
            };
         break;
        case 9:
         var f$3 = next(0), x$1 = next(0), y = next(0);
         let f$16 = f$3, x$18 = x$1, y$0 = y;
         var clo$0 = function(obj){return caml_call2(f$16, x$18, y$0);};
         break;
        case 10:
         var f$4 = next(0), x$2 = next(0), n$6 = next(0);
         let f$15 = f$4, x$17 = x$2, n$31 = n$6;
         var
          clo$0 = function(obj){return caml_call2(f$15, x$17, obj[1 + n$31]);};
         break;
        case 11:
         var f$5 = next(0), x$3 = next(0), e$1 = next(0), n$7 = next(0);
         let f$14 = f$5, x$16 = x$3, e$8 = e$1, n$30 = n$7;
         var
          clo$0 =
            function(obj){
             return caml_call2(f$14, x$16, obj[1 + e$8][1 + n$30]);
            };
         break;
        case 12:
         var f$6 = next(0), x$4 = next(0), n$8 = next(0);
         let f$13 = f$6, x$15 = x$4, n$29 = n$8;
         var
          clo$0 =
            function(obj){
             return caml_call2(f$13, x$15, caml_call1(obj[1][1 + n$29], obj));
            };
         break;
        case 13:
         var f$7 = next(0), n$9 = next(0), x$5 = next(0);
         let f$12 = f$7, n$28 = n$9, x$14 = x$5;
         var
          clo$0 = function(obj){return caml_call2(f$12, obj[1 + n$28], x$14);};
         break;
        case 14:
         var f$8 = next(0), e$2 = next(0), n$10 = next(0), x$6 = next(0);
         let f$11 = f$8, e$7 = e$2, n$27 = n$10, x$13 = x$6;
         var
          clo$0 =
            function(obj){
             return caml_call2(f$11, obj[1 + e$7][1 + n$27], x$13);
            };
         break;
        case 15:
         var f$9 = next(0), n$11 = next(0), x$7 = next(0);
         let f$10 = f$9, n$26 = n$11, x$12 = x$7;
         var
          clo$0 =
            function(obj){
             return caml_call2(f$10, caml_call1(obj[1][1 + n$26], obj), x$12);
            };
         break;
        case 16:
         var n$12 = next(0), x$8 = next(0);
         let n$25 = n$12, x$11 = x$8;
         var
          clo$0 =
            function(obj){return caml_call2(obj[1][1 + n$25], obj, x$11);};
         break;
        case 17:
         var n$13 = next(0), m = next(0);
         let n$24 = n$13, m$12 = m;
         var
          clo$0 =
            function(obj){
             return caml_call2(obj[1][1 + n$24], obj, obj[1 + m$12]);
            };
         break;
        case 18:
         var n$14 = next(0), e$3 = next(0), m$0 = next(0);
         let n$23 = n$14, e$6 = e$3, m$11 = m$0;
         var
          clo$0 =
            function(obj){
             return caml_call2(obj[1][1 + n$23], obj, obj[1 + e$6][1 + m$11]);
            };
         break;
        case 19:
         var n$15 = next(0), m$1 = next(0);
         let n$22 = n$15, m$10 = m$1;
         var
          clo$0 =
            function(obj){
             var _l_ = caml_call1(obj[1][1 + m$10], obj);
             return caml_call2(obj[1][1 + n$22], obj, _l_);
            };
         break;
        case 20:
         var m$2 = next(0), x$9 = next(0);
         new_cache(table);
         let m$9 = m$2, x$10 = x$9;
         var
          clo$0 =
            function(obj){
             return caml_call1(caml_get_public_method(x$10, m$9, 0), x$10);
            };
         break;
        case 21:
         var m$3 = next(0), n$16 = next(0);
         new_cache(table);
         let m$8 = m$3, n$21 = n$16;
         var
          clo$0 =
            function(obj){
             var _k_ = obj[1 + n$21];
             return caml_call1(caml_get_public_method(_k_, m$8, 0), _k_);
            };
         break;
        case 22:
         var m$4 = next(0), e$4 = next(0), n$17 = next(0);
         new_cache(table);
         let m$7 = m$4, e$5 = e$4, n$20 = n$17;
         var
          clo$0 =
            function(obj){
             var _j_ = obj[1 + e$5][1 + n$20];
             return caml_call1(caml_get_public_method(_j_, m$7, 0), _j_);
            };
         break;
        default:
         var m$5 = next(0), n$18 = next(0);
         new_cache(table);
         let m$6 = m$5, n$19 = n$18;
         var
          clo$0 =
            function(obj){
             var _i_ = caml_call1(obj[1][1 + n$19], obj);
             return caml_call1(caml_get_public_method(_i_, m$6, 0), _i_);
            };
      }
     else
      var clo$0 = clo;
     set_method(table, label, clo$0);
     i[1]++;
    }
   }
   function stats(param){
    return [0, table_count[1], method_count[1], inst_var_count[1]];
   }
   var
    CamlinternalOO =
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params,
       stats];
   runtime.caml_register_global(17, CamlinternalOO, "CamlinternalOO");
   return;
  }
  (globalThis));

//# 27211 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$19 = "",
    cst$23 = " ",
    cst_2$1 = " 2>",
    cst_2_1$1 = " 2>&1",
    cst$22 = " <",
    cst$21 = " >",
    cst$20 = '"',
    cst$24 = ".",
    cst$25 = "..",
    cst$28 = "../",
    cst$27 = "./",
    cst$26 = "/",
    cst_dev_null = "/dev/null",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$18 = cst$19,
    cst$17 = cst$19,
    cst$16 = cst$19,
    cst$8 = cst$21,
    cst$15 = cst$19,
    cst$9 = cst$22,
    cst$14 = cst$19,
    cst$10 = cst$23,
    cst$11 = cst$23,
    cst$12 = cst$20,
    cst$13 = cst$19,
    cst$6 = cst$20,
    cst$7 = cst$19,
    cst$4 = cst$19,
    cst = cst$21,
    cst$3 = cst$19,
    cst$0 = cst$22,
    cst$2 = cst$19,
    cst$1 = cst$23,
    null$0 = cst_dev_null,
    current_dir_name = cst$24,
    parent_dir_name = cst$25,
    dir_sep = cst$26,
    quotequote = "'\\''",
    null$1 = "NUL",
    current_dir_name$0 = cst$24,
    parent_dir_name$0 = cst$25,
    dir_sep$0 = "\\",
    cst$5 = cst$24,
    null$2 = cst_dev_null,
    current_dir_name$1 = cst$24,
    parent_dir_name$1 = cst$25,
    dir_sep$1 = cst$26,
    Stdlib = global_data.Stdlib,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function generic_basename(is_dir_sep, current_dir_name, name){
    if(name === cst$19) return current_dir_name;
    var n$3 = caml_ml_string_length(name) - 1 | 0, n = n$3;
    for(;;){
     if(0 > n) return caml_call3(Stdlib_String[16], name, 0, 1);
     if(! caml_call2(is_dir_sep, name, n)) break;
     var n$0 = n - 1 | 0;
     n = n$0;
    }
    var p = n + 1 | 0, n$1 = n;
    for(;;){
     if(0 > n$1) return caml_call3(Stdlib_String[16], name, 0, p);
     if(caml_call2(is_dir_sep, name, n$1))
      return caml_call3
              (Stdlib_String[16], name, n$1 + 1 | 0, (p - n$1 | 0) - 1 | 0);
     var n$2 = n$1 - 1 | 0;
     n$1 = n$2;
    }
   }
   function generic_dirname(is_dir_sep, current_dir_name, name){
    if(name === cst$19) return current_dir_name;
    var n$5 = caml_ml_string_length(name) - 1 | 0, n = n$5;
    for(;;){
     if(0 > n) return caml_call3(Stdlib_String[16], name, 0, 1);
     if(! caml_call2(is_dir_sep, name, n)) break;
     var n$0 = n - 1 | 0;
     n = n$0;
    }
    var n$1 = n;
    for(;;){
     if(0 > n$1) return current_dir_name;
     if(caml_call2(is_dir_sep, name, n$1)) break;
     var n$2 = n$1 - 1 | 0;
     n$1 = n$2;
    }
    var n$3 = n$1;
    for(;;){
     if(0 > n$3) return caml_call3(Stdlib_String[16], name, 0, 1);
     if(! caml_call2(is_dir_sep, name, n$3))
      return caml_call3(Stdlib_String[16], name, 0, n$3 + 1 | 0);
     var n$4 = n$3 - 1 | 0;
     n$3 = n$4;
    }
   }
   function is_dir_sep(s, i){return 47 === caml_string_get(s, i) ? 1 : 0;}
   function is_relative(n){
    var
     _aH_ = caml_ml_string_length(n) < 1 ? 1 : 0,
     _aI_ = _aH_ || (47 !== caml_string_get(n, 0) ? 1 : 0);
    return _aI_;
   }
   function is_implicit(n){
    var _aC_ = is_relative(n);
    if(_aC_){
     var
      _aD_ = caml_ml_string_length(n) < 2 ? 1 : 0,
      _aE_ =
        _aD_ || (caml_call3(Stdlib_String[16], n, 0, 2) !== cst$27 ? 1 : 0);
     if(_aE_)
      var
       _aF_ = caml_ml_string_length(n) < 3 ? 1 : 0,
       _aG_ =
         _aF_ || (caml_call3(Stdlib_String[16], n, 0, 3) !== cst$28 ? 1 : 0);
     else
      var _aG_ = _aE_;
    }
    else
     var _aG_ = _aC_;
    return _aG_;
   }
   function check_suffix(name, suff){
    return caml_call2(Stdlib_String[12], suff, name);
   }
   function chop_suffix_opt(suffix, filename){
    var
     len_s = caml_ml_string_length(suffix),
     len_f = caml_ml_string_length(filename);
    if(len_s > len_f) return 0;
    var r = caml_call3(Stdlib_String[16], filename, len_f - len_s | 0, len_s);
    return r === suffix
            ? [0,
              caml_call3(Stdlib_String[16], filename, 0, len_f - len_s | 0)]
            : 0;
   }
   var
    dummy = 0,
    _h_ = [0, 7, 0],
    _g_ = [0, 1, [0, 3, [0, 5, 0]]],
    _f_ = [0, [2, 0, [4, 6, [0, 2, 6], 0, [2, 0, 0]]], "%s%06x%s"],
    cst_Filename_chop_extension = "Filename.chop_extension",
    cst_Filename_chop_suffix = "Filename.chop_suffix",
    _d_ = [0, cst$20, 0],
    cst_2_1$0 = cst_2_1$1,
    cst_2$0 = cst_2$1,
    cst_Filename_quote_command_bad = "Filename.quote_command: bad file name ",
    _c_ = [0, cst$20, 0],
    cst_2_1 = cst_2_1$1,
    cst_2 = cst_2$1,
    cst_tmp = "/tmp";
   try{var _j_ = caml_sys_getenv("TMPDIR"), temp_dir_name = _j_;}
   catch(_aB_){
    var _a_ = caml_wrap_exception(_aB_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    var temp_dir_name = cst_tmp;
   }
   function quote(s){
    var
     l = caml_ml_string_length(s),
     b = caml_call1(Stdlib_Buffer[1], l + 20 | 0);
    caml_call2(Stdlib_Buffer[12], b, 39);
    var _ay_ = l - 1 | 0, _ax_ = 0;
    if(_ay_ >= 0){
     var i = _ax_;
     for(;;){
      if(39 === caml_string_get(s, i))
       caml_call2(Stdlib_Buffer[16], b, quotequote);
      else{
       var _aA_ = caml_string_get(s, i);
       caml_call2(Stdlib_Buffer[12], b, _aA_);
      }
      var _az_ = i + 1 | 0;
      if(_ay_ === i) break;
      i = _az_;
     }
    }
    caml_call2(Stdlib_Buffer[12], b, 39);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function quote_command(cmd, stdin, stdout, stderr, args){
    if(stderr){
     var f = stderr[1];
     if(caml_equal(stderr, stdout))
      var _am_ = cst_2_1;
     else
      var _aw_ = quote(f), _am_ = caml_call2(Stdlib[28], cst_2, _aw_);
     var _an_ = _am_;
    }
    else
     var _an_ = cst$4;
    if(stdout)
     var
      f$0 = stdout[1],
      _ao_ = quote(f$0),
      _ap_ = caml_call2(Stdlib[28], cst, _ao_);
    else
     var _ap_ = cst$3;
    var _aq_ = caml_call2(Stdlib[28], _ap_, _an_);
    if(stdin)
     var
      f$1 = stdin[1],
      _ar_ = quote(f$1),
      _as_ = caml_call2(Stdlib[28], cst$0, _ar_);
    else
     var _as_ = cst$2;
    var
     _at_ = caml_call2(Stdlib[28], _as_, _aq_),
     _au_ = caml_call2(Stdlib_List[20], quote, [0, cmd, args]),
     _av_ = caml_call2(Stdlib_String[7], cst$1, _au_);
    return caml_call2(Stdlib[28], _av_, _at_);
   }
   function basename(_al_){
    return generic_basename(is_dir_sep, current_dir_name, _al_);
   }
   function dirname(_ak_){
    return generic_dirname(is_dir_sep, current_dir_name, _ak_);
   }
   var
    Unix =
      [0,
       null$0,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       is_dir_sep,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       temp_dir_name,
       quote,
       quote_command,
       basename,
       dirname];
   function is_dir_sep$0(s, i){
    var c = caml_string_get(s, i), _ah_ = 47 === c ? 1 : 0;
    if(_ah_)
     var _ai_ = _ah_;
    else
     var _aj_ = 92 === c ? 1 : 0, _ai_ = _aj_ || (58 === c ? 1 : 0);
    return _ai_;
   }
   function is_relative$0(n){
    var
     _ab_ = caml_ml_string_length(n) < 1 ? 1 : 0,
     _ac_ = _ab_ || (47 !== caml_string_get(n, 0) ? 1 : 0);
    if(_ac_){
     var
      _ad_ = caml_ml_string_length(n) < 1 ? 1 : 0,
      _ae_ = _ad_ || (92 !== caml_string_get(n, 0) ? 1 : 0);
     if(_ae_)
      var
       _af_ = caml_ml_string_length(n) < 2 ? 1 : 0,
       _ag_ = _af_ || (58 !== caml_string_get(n, 1) ? 1 : 0);
     else
      var _ag_ = _ae_;
    }
    else
     var _ag_ = _ac_;
    return _ag_;
   }
   function is_implicit$0(n){
    var _U_ = is_relative$0(n);
    if(_U_){
     var
      _V_ = caml_ml_string_length(n) < 2 ? 1 : 0,
      _W_ = _V_ || (caml_call3(Stdlib_String[16], n, 0, 2) !== cst$27 ? 1 : 0);
     if(_W_){
      var
       _X_ = caml_ml_string_length(n) < 2 ? 1 : 0,
       _Y_ = _X_ || (caml_call3(Stdlib_String[16], n, 0, 2) !== ".\\" ? 1 : 0);
      if(_Y_){
       var
        _Z_ = caml_ml_string_length(n) < 3 ? 1 : 0,
        ___ =
          _Z_ || (caml_call3(Stdlib_String[16], n, 0, 3) !== cst$28 ? 1 : 0);
       if(___)
        var
         _$_ = caml_ml_string_length(n) < 3 ? 1 : 0,
         _aa_ =
           _$_ || (caml_call3(Stdlib_String[16], n, 0, 3) !== "..\\" ? 1 : 0);
       else
        var _aa_ = ___;
      }
      else
       var _aa_ = _Y_;
     }
     else
      var _aa_ = _W_;
    }
    else
     var _aa_ = _U_;
    return _aa_;
   }
   function check_suffix$0(name, suff){
    var
     _R_ = caml_ml_string_length(suff) <= caml_ml_string_length(name) ? 1 : 0;
    if(_R_)
     var
      s =
        caml_call3
         (Stdlib_String[16],
          name,
          caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
          caml_ml_string_length(suff)),
      _S_ = caml_call1(Stdlib_String[27], suff),
      _T_ = caml_call1(Stdlib_String[27], s) === _S_ ? 1 : 0;
    else
     var _T_ = _R_;
    return _T_;
   }
   function chop_suffix_opt$0(suffix, filename){
    var
     len_s = caml_ml_string_length(suffix),
     len_f = caml_ml_string_length(filename);
    if(len_s > len_f) return 0;
    var
     r = caml_call3(Stdlib_String[16], filename, len_f - len_s | 0, len_s),
     _Q_ = caml_call1(Stdlib_String[27], suffix);
    return caml_call1(Stdlib_String[27], r) === _Q_
            ? [0,
              caml_call3(Stdlib_String[16], filename, 0, len_f - len_s | 0)]
            : 0;
   }
   try{var _i_ = caml_sys_getenv("TEMP"), temp_dir_name$0 = _i_;}
   catch(_P_){
    var _b_ = caml_wrap_exception(_P_);
    if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
    var temp_dir_name$0 = cst$5;
   }
   function quote$0(s){
    var
     l = caml_ml_string_length(s),
     b = caml_call1(Stdlib_Buffer[1], l + 20 | 0);
    caml_call2(Stdlib_Buffer[12], b, 34);
    function loop$0(counter, i){
     var i$0 = i;
     for(;;){
      if(i$0 === l) return caml_call2(Stdlib_Buffer[12], b, 34);
      var c = caml_string_get(s, i$0);
      if(34 === c){
       var _N_ = 0;
       if(counter >= 50)
        return caml_trampoline_return(loop_bs, [0, _N_, i$0]);
       var counter$1 = counter + 1 | 0;
       return loop_bs(counter$1, _N_, i$0);
      }
      if(92 === c){
       var _O_ = 0;
       if(counter >= 50)
        return caml_trampoline_return(loop_bs, [0, _O_, i$0]);
       var counter$0 = counter + 1 | 0;
       return loop_bs(counter$0, _O_, i$0);
      }
      caml_call2(Stdlib_Buffer[12], b, c);
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    function loop(i){return caml_trampoline(loop$0(0, i));}
    function loop_bs(counter, n, i){
     var n$0 = n, i$0 = i;
     for(;;){
      if(i$0 === l){caml_call2(Stdlib_Buffer[12], b, 34); return add_bs(n$0);}
      var match = caml_string_get(s, i$0);
      if(34 === match){
       add_bs((2 * n$0 | 0) + 1 | 0);
       caml_call2(Stdlib_Buffer[12], b, 34);
       var _M_ = i$0 + 1 | 0;
       if(counter >= 50) return caml_trampoline_return(loop$0, [0, _M_]);
       var counter$1 = counter + 1 | 0;
       return loop$0(counter$1, _M_);
      }
      if(92 !== match){
       add_bs(n$0);
       if(counter >= 50) return caml_trampoline_return(loop$0, [0, i$0]);
       var counter$0 = counter + 1 | 0;
       return loop$0(counter$0, i$0);
      }
      var i$1 = i$0 + 1 | 0, n$1 = n$0 + 1 | 0;
      n$0 = n$1;
      i$0 = i$1;
     }
    }
    function add_bs(n){
     var _K_ = 1;
     if(n >= 1){
      var j = _K_;
      for(;;){
       caml_call2(Stdlib_Buffer[12], b, 92);
       var _L_ = j + 1 | 0;
       if(n === j) break;
       j = _L_;
      }
     }
    }
    loop(0);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function quote_cmd_filename(f){
    var
     f$0 =
       caml_call2(Stdlib_String[15], f, 47)
        ? caml_call2
          (Stdlib_String[18], function(c){return 47 === c ? 92 : c;}, f)
        : f;
    if
     (!
      caml_call2
       (Stdlib_String[23],
        function(param){if(34 !== param && 37 !== param) return 0; return 1;},
        f$0))
     return caml_call2(Stdlib_String[15], f$0, 32)
             ? caml_call2(Stdlib_String[7], cst$7, [0, cst$6, [0, f$0, _c_]])
             : f$0;
    var _J_ = caml_call2(Stdlib[28], cst_Filename_quote_command_bad, f$0);
    return caml_call1(Stdlib[2], _J_);
   }
   function quote_command$0(cmd, stdin, stdout, stderr, args){
    if(stderr){
     var f = stderr[1];
     if(caml_equal(stderr, stdout))
      var _w_ = cst_2_1$0;
     else
      var
       _H_ = quote_cmd_filename(f),
       _w_ = caml_call2(Stdlib[28], cst_2$0, _H_);
     var _x_ = _w_;
    }
    else
     var _x_ = cst$16;
    var _y_ = [0, _x_, _d_];
    if(stdout)
     var
      f$0 = stdout[1],
      _z_ = quote_cmd_filename(f$0),
      _A_ = caml_call2(Stdlib[28], cst$8, _z_);
    else
     var _A_ = cst$15;
    var _B_ = [0, _A_, _y_];
    if(stdin)
     var
      f$1 = stdin[1],
      _C_ = quote_cmd_filename(f$1),
      _D_ = caml_call2(Stdlib[28], cst$9, _C_);
    else
     var _D_ = cst$14;
    var
     _E_ = caml_call2(Stdlib_List[20], quote$0, args),
     s = caml_call2(Stdlib_String[7], cst$10, _E_),
     b = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s) + 20 | 0);
    caml_call2
     (Stdlib_String[30],
      function(c){
       a:
       {
        if(62 <= c){
         var _I_ = c - 63 | 0;
         if(60 < _I_ >>> 0){
          if(62 <= _I_) break a;
         }
         else if(31 !== _I_) break a;
        }
        else
         if(42 <= c){
          if(60 !== c) break a;
         }
         else{
          if(33 > c) break a;
          switch(c - 33 | 0){case 2:case 3:case 6: break a;
          }
         }
        caml_call2(Stdlib_Buffer[12], b, 94);
        return caml_call2(Stdlib_Buffer[12], b, c);
       }
       return caml_call2(Stdlib_Buffer[12], b, c);
      },
      s);
    var
     _F_ = [0, cst$11, [0, caml_call1(Stdlib_Buffer[2], b), [0, _D_, _B_]]],
     _G_ = [0, cst$12, [0, quote_cmd_filename(cmd), _F_]];
    return caml_call2(Stdlib_String[7], cst$13, _G_);
   }
   function drive_and_path(s){
    var _s_ = 2 <= caml_ml_string_length(s) ? 1 : 0;
    if(_s_){
     var param = caml_string_get(s, 0);
     a:
     {
      b:
      {
       if(91 <= param){
        if(25 < param - 97 >>> 0) break b;
       }
       else if(65 > param) break b;
       var _t_ = 1;
       break a;
      }
      var _t_ = 0;
     }
     var _u_ = _t_ ? 58 === caml_string_get(s, 1) ? 1 : 0 : _t_;
    }
    else
     var _u_ = _s_;
    if(! _u_) return [0, cst$17, s];
    var
     _v_ =
       caml_call3(Stdlib_String[16], s, 2, caml_ml_string_length(s) - 2 | 0);
    return [0, caml_call3(Stdlib_String[16], s, 0, 2), _v_];
   }
   function dirname$0(s){
    var
     match = drive_and_path(s),
     path = match[2],
     drive = match[1],
     dir = generic_dirname(is_dir_sep$0, current_dir_name$0, path);
    return caml_call2(Stdlib[28], drive, dir);
   }
   function basename$0(s){
    var path = drive_and_path(s)[2];
    return generic_basename(is_dir_sep$0, current_dir_name$0, path);
   }
   var
    Win32 =
      [0,
       null$1,
       current_dir_name$0,
       parent_dir_name$0,
       dir_sep$0,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name$0,
       quote$0,
       quote_command$0,
       basename$0,
       dirname$0];
   function basename$1(_r_){
    return generic_basename(is_dir_sep$0, current_dir_name$1, _r_);
   }
   function dirname$1(_q_){
    return generic_dirname(is_dir_sep$0, current_dir_name$1, _q_);
   }
   var
    Cygwin =
      [0,
       null$2,
       current_dir_name$1,
       parent_dir_name$1,
       dir_sep$1,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name,
       quote,
       quote_command,
       basename$1,
       dirname$1],
    _e_ = Stdlib_Sys[4],
    Sysdeps = _e_ !== "Cygwin" ? _e_ !== "Win32" ? Unix : Win32 : Cygwin,
    null$3 = Sysdeps[1],
    current_dir_name$2 = Sysdeps[2],
    parent_dir_name$2 = Sysdeps[3],
    dir_sep$2 = Sysdeps[4],
    is_dir_sep$1 = Sysdeps[5],
    is_relative$1 = Sysdeps[6],
    is_implicit$1 = Sysdeps[7],
    check_suffix$1 = Sysdeps[8],
    chop_suffix_opt$1 = Sysdeps[9],
    temp_dir_name$1 = Sysdeps[10],
    quote$1 = Sysdeps[11],
    quote_command$1 = Sysdeps[12],
    basename$2 = Sysdeps[13],
    dirname$2 = Sysdeps[14];
   function concat(dirname, filename){
    var l = caml_ml_string_length(dirname);
    if(0 !== l && ! is_dir_sep$1(dirname, l - 1 | 0)){
     var _p_ = caml_call2(Stdlib[28], dir_sep$2, filename);
     return caml_call2(Stdlib[28], dirname, _p_);
    }
    return caml_call2(Stdlib[28], dirname, filename);
   }
   function chop_suffix(name, suff){
    return check_suffix$1(name, suff)
            ? caml_call3
              (Stdlib_String[16],
               name,
               0,
               caml_ml_string_length(name) - caml_ml_string_length(suff) | 0)
            : caml_call1(Stdlib[1], cst_Filename_chop_suffix);
   }
   function extension_len(name){
    var i$3 = caml_ml_string_length(name) - 1 | 0, i0 = i$3;
    for(;;){
     if(0 <= i0 && ! is_dir_sep$1(name, i0)){
      if(46 === caml_string_get(name, i0)) break;
      var i$2 = i0 - 1 | 0;
      i0 = i$2;
      continue;
     }
     return 0;
    }
    var i$1 = i0 - 1 | 0, i = i$1;
    for(;;){
     if(0 <= i && ! is_dir_sep$1(name, i)){
      if(46 !== caml_string_get(name, i))
       return caml_ml_string_length(name) - i0 | 0;
      var i$0 = i - 1 | 0;
      i = i$0;
      continue;
     }
     return 0;
    }
   }
   function extension(name){
    var l = extension_len(name);
    return 0 === l
            ? cst$18
            : caml_call3
              (Stdlib_String[16],
               name,
               caml_ml_string_length(name) - l | 0,
               l);
   }
   function chop_extension(name){
    var l = extension_len(name);
    return 0 === l
            ? caml_call1(Stdlib[1], cst_Filename_chop_extension)
            : caml_call3
              (Stdlib_String[16],
               name,
               0,
               caml_ml_string_length(name) - l | 0);
   }
   function remove_extension(name){
    var l = extension_len(name);
    return 0 === l
            ? name
            : caml_call3
              (Stdlib_String[16],
               name,
               0,
               caml_ml_string_length(name) - l | 0);
   }
   var prng_key = caml_call2(Stdlib_Domain[11][1], 0, Stdlib_Random[19][2]);
   function temp_file_name(temp_dir, prefix, suffix){
    var
     random_state = caml_call1(Stdlib_Domain[11][2], prng_key),
     rnd = caml_call1(Stdlib_Random[19][4], random_state) & 16777215;
    return concat
            (temp_dir, caml_call4(Stdlib_Printf[4], _f_, prefix, rnd, suffix));
   }
   var
    current_temp_dir_name =
      caml_call2
       (Stdlib_Domain[11][1],
        [0, function(_o_){return _o_;}],
        function(param){return temp_dir_name$1;});
   function set_temp_dir_name(s){
    return caml_call2(Stdlib_Domain[11][3], current_temp_dir_name, s);
   }
   function get_temp_dir_name(param){
    return caml_call1(Stdlib_Domain[11][2], current_temp_dir_name);
   }
   function temp_file(opt, prefix, suffix){
    var
     temp_dir =
       opt ? opt[1] : caml_call1(Stdlib_Domain[11][2], current_temp_dir_name),
     counter = 0;
    for(;;){
     var name = temp_file_name(temp_dir, prefix, suffix);
     try{
      runtime.caml_sys_close(runtime.caml_sys_open(name, _g_, 384));
      return name;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
      if(20 <= counter) throw caml_maybe_attach_backtrace(e, 0);
      var counter$0 = counter + 1 | 0;
      counter = counter$0;
     }
    }
   }
   function open_temp_file(_m_, _l_, opt, prefix, suffix){
    var
     mode = _m_ ? _m_[1] : _h_,
     perms = _l_ ? _l_[1] : 384,
     temp_dir =
       opt ? opt[1] : caml_call1(Stdlib_Domain[11][2], current_temp_dir_name),
     counter = 0;
    for(;;){
     var name = temp_file_name(temp_dir, prefix, suffix);
     try{
      var
       _n_ =
         [0,
          name,
          caml_call3(Stdlib[62], [0, 1, [0, 3, [0, 5, mode]]], perms, name)];
      return _n_;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
      if(20 <= counter) throw caml_maybe_attach_backtrace(e, 0);
      var counter$0 = counter + 1 | 0;
      counter = counter$0;
     }
    }
   }
   function temp_dir(_k_, opt, prefix, suffix){
    var
     temp_dir =
       _k_ ? _k_[1] : caml_call1(Stdlib_Domain[11][2], current_temp_dir_name),
     perms = opt ? opt[1] : 448,
     counter = 0;
    for(;;){
     var name = temp_file_name(temp_dir, prefix, suffix);
     try{runtime.caml_sys_mkdir(name, perms); return name;}
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
      if(20 <= counter) throw caml_maybe_attach_backtrace(e, 0);
      var counter$0 = counter + 1 | 0;
      counter = counter$0;
     }
    }
   }
   var
    Stdlib_Filename =
      [0,
       current_dir_name$2,
       parent_dir_name$2,
       dir_sep$2,
       concat,
       is_relative$1,
       is_implicit$1,
       check_suffix$1,
       chop_suffix,
       chop_suffix_opt$1,
       extension,
       remove_extension,
       chop_extension,
       basename$2,
       dirname$2,
       null$3,
       temp_file,
       open_temp_file,
       temp_dir,
       get_temp_dir_name,
       set_temp_dir_name,
       quote$1,
       quote_command$1];
   runtime.caml_register_global(66, Stdlib_Filename, "Stdlib__Filename");
   return;
  }
  (globalThis));

//# 17 "../.js/default/js_of_ocaml-compiler.runtime/jsoo_runtime.cma.js"
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_5_9_1 = "5.9.1",
    s = cst_5_9_1,
    git_version = cst_5_9_1,
    Jsoo_runtime_Runtime_version = [0, s, git_version];
   runtime.caml_register_global
    (2, Jsoo_runtime_Runtime_version, "Jsoo_runtime__Runtime_version");
   return;
  }
  (globalThis));

//# 33 "../.js/default/js_of_ocaml-compiler.runtime/jsoo_runtime.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Jsoo_runtime_Runtime_version = global_data.Jsoo_runtime__Runtime_version,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Js = [0],
    Config = [0],
    version = Jsoo_runtime_Runtime_version[1],
    git_version = Jsoo_runtime_Runtime_version[2],
    Sys = [0, Config, version, git_version],
    Exn = [248, "Jsoo_runtime.Error.Exn", runtime.caml_fresh_oo_id(0)];
   caml_call2(Stdlib_Callback[2], "jsError", [0, Exn, [0]]);
   function raise(exn){throw exn;}
   var
    Error =
      [0,
       raise,
       runtime.caml_exn_with_js_backtrace,
       runtime.caml_js_error_option_of_exception,
       Exn],
    For_compatibility_only = [0],
    Bigstring = [0],
    Typed_array = [0, Bigstring],
    Int64 = [0],
    Jsoo_runtime =
      [0, Js, Sys, Error, For_compatibility_only, Typed_array, Int64];
   runtime.caml_register_global(5, Jsoo_runtime, "Jsoo_runtime");
   return;
  }
  (globalThis));

//# 18 "../.js/default/js_of_ocaml/js_of_ocaml.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar = [0, max, min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat = Stdlib_String[7],
    cat = Stdlib_String[8],
    compare = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map = Stdlib_String[18],
    mapi = Stdlib_String[19],
    fold_left = Stdlib_String[20],
    fold_right = Stdlib_String[21],
    for_all = Stdlib_String[22],
    exists = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter = Stdlib_String[30],
    iteri = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    equal = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase_ascii$0 = Stdlib_Char[3],
    uppercase_ascii$0 = Stdlib_Char[4],
    compare$0 = Stdlib_Char[5],
    seeded_hash$0 = Stdlib_Char[7],
    hash$0 = Stdlib_Char[8];
   function equal$0(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$0,
       seeded_hash$0,
       hash$0,
       equal$0],
    max$0 = Int_replace_polymorphic_compar[1],
    min$0 = Int_replace_polymorphic_compar[2],
    Js_of_ocaml_Import =
      [0, Poly, Int_replace_polymorphic_compar, String, Char, max$0, min$0];
   runtime.caml_register_global(2, Js_of_ocaml_Import, "Js_of_ocaml__Import");
   return;
  }
  (globalThis));

//# 191 "../.js/default/js_of_ocaml/js_of_ocaml.cma.js"
(function
  (globalThis){
   "use strict";
   var
    jsoo_exports = typeof module === "object" && module.exports || globalThis,
    runtime = globalThis.jsoo_runtime,
    cst_parseFloat$0 = "parseFloat",
    cst_parseInt$0 = "parseInt",
    caml_js_get = runtime.caml_js_get,
    caml_js_set = runtime.caml_js_set,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import,
    Stdlib = global_data.Stdlib,
    Jsoo_runtime = global_data.Jsoo_runtime,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    global = globalThis,
    Unsafe = [0, global],
    null$0 = null,
    undefined$0 = undefined;
   function return$0(_p_){return _p_;}
   function map(x, f){return x == null$0 ? null$0 : caml_call1(f, x);}
   function bind(x, f){return x == null$0 ? null$0 : caml_call1(f, x);}
   function test(x){return 1 - (x == null$0 ? 1 : 0);}
   function iter(x, f){
    var _o_ = 1 - (x == null$0 ? 1 : 0);
    return _o_ ? caml_call1(f, x) : _o_;
   }
   function case$0(x, f, g){
    return x == null$0 ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get(x, f){return x == null$0 ? caml_call1(f, 0) : x;}
   function option(x){if(! x) return null$0; var x$0 = x[1]; return x$0;}
   function to_option(x){return x == null$0 ? 0 : [0, x];}
   var
    Opt =
      [0,
       null$0,
       return$0,
       map,
       bind,
       test,
       iter,
       case$0,
       get,
       option,
       to_option];
   function return$1(_n_){return _n_;}
   function map$0(x, f){
    return x === undefined$0 ? undefined$0 : caml_call1(f, x);
   }
   function bind$0(x, f){
    return x === undefined$0 ? undefined$0 : caml_call1(f, x);
   }
   function test$0(x){return 1 - (x === undefined$0 ? 1 : 0);}
   function iter$0(x, f){
    var _m_ = 1 - (x === undefined$0 ? 1 : 0);
    return _m_ ? caml_call1(f, x) : _m_;
   }
   function case$1(x, f, g){
    return x === undefined$0 ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get$0(x, f){return x === undefined$0 ? caml_call1(f, 0) : x;}
   function option$0(x){
    if(! x) return undefined$0;
    var x$0 = x[1];
    return x$0;
   }
   function to_option$0(x){return x === undefined$0 ? 0 : [0, x];}
   var
    Optdef =
      [0,
       undefined$0,
       return$1,
       map$0,
       bind$0,
       test$0,
       iter$0,
       case$1,
       get$0,
       option$0,
       to_option$0];
   function coerce(x, f, g){
    var _l_ = caml_call1(f, x);
    return caml_call2(Opt[8], _l_, function(param){return caml_call1(g, x);});
   }
   function coerce_opt(x, f, g){
    var _k_ = caml_call2(Opt[4], x, f);
    return caml_call2(Opt[8], _k_, function(param){return caml_call1(g, x);});
   }
   var
    true$0 = true,
    false$0 = false,
    nfc = "NFC",
    nfd = "NFD",
    nfkc = "NFKC",
    nfkd = "NFKD",
    t0 = Unsafe[1],
    string_constr = t0.String,
    t1 = Unsafe[1],
    regExp = t1.RegExp,
    t2 = Unsafe[1],
    object_constructor = t2.Object;
   function object_keys(t3){return object_constructor.keys(t3);}
   var
    t5 = Unsafe[1],
    array_constructor = t5.Array,
    array_get = caml_js_get,
    array_set = caml_js_set;
   function array_map(f, t7){
    var
     cb =
       caml_js_wrap_callback
        (function(x, idx, param){return caml_call1(f, x);});
    return t7.map(cb);
   }
   function array_mapi(f, t7){
    var
     cb =
       caml_js_wrap_callback
        (function(x, idx, param){return caml_call2(f, idx, x);});
    return t7.map(cb);
   }
   function str_array(_j_){return _j_;}
   function match_result(_i_){return _i_;}
   var
    t8 = Unsafe[1],
    date_constr = t8.Date,
    t9 = Unsafe[1],
    math = t9.Math,
    t10 = Unsafe[1],
    error_constr = t10.Error,
    include = Jsoo_runtime[3],
    raise = include[1],
    exn_with_js_backtrace = include[2],
    of_exn = include[3],
    Error = include[4];
   function name(t11){return caml_string_of_jsstring(t11.name);}
   function message(t12){return caml_string_of_jsstring(t12.message);}
   function stack(t13){
    var _h_ = caml_call2(Opt[3], t13.stack, caml_string_of_jsstring);
    return caml_call1(Opt[10], _h_);
   }
   function to_string(t14){return caml_string_of_jsstring(t14.toString());}
   function raise_js_error(e){return caml_call1(raise, e);}
   function string_of_error(e){return to_string(e);}
   var
    t15 = Unsafe[1],
    JSON = t15.JSON,
    cst_parseInt = cst_parseInt$0,
    cst_parseFloat = cst_parseFloat$0;
   function decodeURI(s){var t16 = Unsafe[1]; return t16.decodeURI(s);}
   function decodeURIComponent(s){
    var t17 = Unsafe[1];
    return t17.decodeURIComponent(s);
   }
   function encodeURI(s){var t18 = Unsafe[1]; return t18.encodeURI(s);}
   function encodeURIComponent(s){
    var t19 = Unsafe[1];
    return t19.encodeURIComponent(s);
   }
   function escape(s){var t20 = Unsafe[1]; return t20.escape(s);}
   function unescape(s){var t21 = Unsafe[1]; return t21.unescape(s);}
   function isNaN(i){var t22 = Unsafe[1]; return t22.isNaN(i) | 0;}
   function parseInt(s){
    var t23 = Unsafe[1], s$0 = t23.parseInt(s);
    return isNaN(s$0) ? caml_call1(Stdlib[2], cst_parseInt) : s$0;
   }
   function parseFloat(s){
    var t24 = Unsafe[1], s$0 = t24.parseFloat(s);
    return isNaN(s$0) ? caml_call1(Stdlib[2], cst_parseFloat) : s$0;
   }
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      if(param[1] !== Error) return 0;
      var e = param[2];
      return [0, to_string(e)];
     });
   caml_call1
    (Stdlib_Printexc[9],
     function(t25){
      return t25 instanceof array_constructor
              ? 0
              : [0, caml_string_of_jsstring(t25.toString())];
     });
   var cst_function = "function";
   function export_js(field, x){
    var _f_ = caml_string_of_jsstring(typeof x);
    a:
    {
     if
      (caml_call2(Js_of_ocaml_Import[3][64], _f_, cst_function)
       && 0 < x.length){
      var _g_ = caml_js_wrap_callback(x);
      break a;
     }
     var _g_ = x;
    }
    return jsoo_exports[field] = _g_;
   }
   function export$0(field, x){
    return export_js(runtime.caml_jsstring_of_string(field), x);
   }
   function export_all(obj){
    var
     keys = object_constructor.keys(obj),
     t26 =
       caml_js_wrap_callback
        (function(key, _e_, param){return export_js(key, obj[key]);});
    return keys.forEach(t26);
   }
   var
    Js_of_ocaml_Js =
      [0,
       null$0,
       function(_d_){return _d_;},
       undefined$0,
       function(_c_){return _c_;},
       Opt,
       Optdef,
       true$0,
       false$0,
       nfd,
       nfc,
       nfkd,
       nfkc,
       string_constr,
       regExp,
       regExp,
       regExp,
       object_keys,
       array_constructor,
       array_constructor,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       math,
       error_constr,
       [0,
        to_string,
        name,
        message,
        stack,
        raise,
        exn_with_js_backtrace,
        of_exn,
        Error,
        function(_b_){return _b_;},
        function(_a_){return _a_;}],
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe,
       string_of_error,
       raise_js_error,
       exn_with_js_backtrace,
       runtime.caml_js_error_of_exception,
       Error];
   runtime.caml_register_global(43, Js_of_ocaml_Js, "Js_of_ocaml__Js");
   return;
  }
  (globalThis));

//# 492 "../.js/default/js_of_ocaml/js_of_ocaml.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List;
   function list_of_nodeList(nodeList){
    var length = nodeList.length, acc = 0, t1 = 0;
    for(;;){
     if(t1 >= length) return caml_call1(Stdlib_List[10], acc);
     var
      _g_ = nodeList.item(t1),
      match = caml_call1(Js_of_ocaml_Js[5][10], _g_);
     if(match){
      var e = match[1], i = t1 + 1 | 0, acc$0 = [0, e, acc];
      acc = acc$0;
      t1 = i;
     }
     else{var i$0 = t1 + 1 | 0; t1 = i$0;}
    }
   }
   function has(t, mask){return (t & mask) === mask ? 1 : 0;}
   function add(x, y){return x | y;}
   var DocumentPosition = [0, 1, 2, 4, 8, 16, 32, has, add, add];
   function appendChild(t4, t3){t4.appendChild(t3); return 0;}
   function removeChild(t6, t5){t6.removeChild(t5); return 0;}
   function replaceChild(t9, t7, t8){t9.replaceChild(t7, t8); return 0;}
   function insertBefore(t12, t10, t11){t12.insertBefore(t10, t11); return 0;}
   function nodeType(t13){
    var match = t13.nodeType;
    if(match)
     switch(match - 1 | 0){
       case 0:
        return [0, t13];
       case 1:
        return [1, t13];
       case 2:
       case 3:
        return [2, t13];
     }
    return [3, t13];
   }
   function cast(t14, t){
    return t14.nodeType === t
            ? caml_call1(Js_of_ocaml_Js[2], t14)
            : Js_of_ocaml_Js[1];
   }
   function element(e){return cast(e, 1);}
   function text(t15){
    if(3 !== t15.nodeType && 4 !== t15.nodeType) return Js_of_ocaml_Js[1];
    return caml_call1(Js_of_ocaml_Js[2], t15);
   }
   function attr(e){return cast(e, 2);}
   var
    no_handler = Js_of_ocaml_Js[1],
    _a_ = [0, "lib/js_of_ocaml/dom.ml", 342, 67];
   function handler(f){
    return caml_call1
            (Js_of_ocaml_Js[2],
             runtime.caml_js_wrap_callback_unsafe
              (function(t19){
                var _f_ = caml_call1(Js_of_ocaml_Js[2], t19);
                if(caml_call1(Js_of_ocaml_Js[5][5], _f_)){
                 var res = caml_call1(f, t19);
                 if(1 - (res | 0)) t19.preventDefault();
                 return res;
                }
                var t18 = event, res$0 = caml_call1(f, t18);
                if(1 - (res$0 | 0)) t18.returnValue = res$0;
                return res$0;
               }));
   }
   function full_handler(f){
    return caml_call1
            (Js_of_ocaml_Js[2],
             runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0, t22){
                var _e_ = caml_call1(Js_of_ocaml_Js[2], t22);
                if(caml_call1(Js_of_ocaml_Js[5][5], _e_)){
                 var res = caml_call2(f, this$0, t22);
                 if(1 - (res | 0)) t22.preventDefault();
                 return res;
                }
                var t21 = event, res$0 = caml_call2(f, this$0, t21);
                if(1 - (res$0 | 0)) t21.returnValue = res$0;
                return res$0;
               }));
   }
   function invoke_handler(f, this$0, event){return f.call(this$0, event);}
   function eventTarget(t24){
    var
     target =
       caml_call2
        (Js_of_ocaml_Js[5][8],
         t24.target,
         function(param){
          return caml_call2
                  (Js_of_ocaml_Js[5][8],
                   t24.srcElement,
                   function(param){
                    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
                   });
         }),
     t25 = Js_of_ocaml_Js[52][1];
    return target instanceof t25.Node
            ? 3
              === target.nodeType
              ? caml_call2
                (Js_of_ocaml_Js[5][8],
                 target.parentNode,
                 function(param){
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _a_], 1);
                 })
              : target
            : target;
   }
   var make = runtime.caml_jsstring_of_string, Event = [0, make];
   function addEventListenerWithOptions(t28, typ, capture, once, passive, t44){
    if(! caml_call1(Js_of_ocaml_Js[6][5], t28.addEventListener)){
     var
      t31 = "on".concat(typ),
      callback =
        function(e){
         var _b_ = [0, t44, e, [0]];
         return function(_c_, _d_){
          return runtime.caml_js_call(_b_, _c_, _d_);};
        };
     t28.attachEvent(t31, callback);
     return function(param){return t28.detachEvent(t31, callback);};
    }
    var opts = {};
    if(capture){var t37 = capture[1]; opts.capture = t37;}
    if(once){var t39 = once[1]; opts.once = t39;}
    if(passive){var t41 = passive[1]; opts.passive = t41;}
    t28.addEventListener(typ, t44, opts);
    return function(param){return t28.removeEventListener(typ, t44, opts);};
   }
   function addEventListener(e, typ, h, capt){
    return addEventListenerWithOptions(e, typ, [0, capt], 0, 0, h);
   }
   function removeEventListener(id){return caml_call1(id, 0);}
   function preventDefault(t51){
    if(caml_call1(Js_of_ocaml_Js[6][5], t51.preventDefault))
     return t51.preventDefault();
    var t53 = ! ! 0;
    return t51.returnValue = t53;
   }
   function createCustomEvent(bubbles, cancelable, detail, typ){
    var opts = {};
    if(bubbles){var x = bubbles[1], t55 = ! ! x; opts.bubbles = t55;}
    if(cancelable){
     var x$1 = cancelable[1], t57 = ! ! x$1;
     opts.cancelable = t57;
    }
    if(detail){
     var x$0 = detail[1], t59 = caml_call1(Js_of_ocaml_Js[2], x$0);
     opts.detail = t59;
    }
    var t61 = Js_of_ocaml_Js[52][1], constr = t61.CustomEvent;
    return new constr(typ, opts);
   }
   var
    Js_of_ocaml_Dom =
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0, element, text, attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       preventDefault,
       createCustomEvent];
   runtime.caml_register_global(42, Js_of_ocaml_Dom, "Js_of_ocaml__Dom");
   return;
  }
  (globalThis));

//# 699 "../.js/default/js_of_ocaml/js_of_ocaml.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_of_array = runtime.caml_bytes_of_array,
    caml_js_get = runtime.caml_js_get,
    caml_string_of_array = runtime.caml_string_of_array;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    t0 = Js_of_ocaml_Js[52][1],
    arrayBuffer = t0.ArrayBuffer;
   function from_genarray(param, a){return runtime.caml_ba_to_typed_array(a);}
   var
    t1 = Js_of_ocaml_Js[52][1],
    int8Array = t1.Int8Array,
    t2 = Js_of_ocaml_Js[52][1],
    uint8Array = t2.Uint8Array,
    t3 = Js_of_ocaml_Js[52][1],
    int16Array = t3.Int16Array,
    t4 = Js_of_ocaml_Js[52][1],
    uint16Array = t4.Uint16Array,
    t5 = Js_of_ocaml_Js[52][1],
    int32Array = t5.Int32Array,
    t6 = Js_of_ocaml_Js[52][1],
    uint32Array = t6.Uint32Array,
    t7 = Js_of_ocaml_Js[52][1],
    float32Array = t7.Float32Array,
    t8 = Js_of_ocaml_Js[52][1],
    float64Array = t8.Float64Array;
   function set(a, i, v){return caml_call3(Js_of_ocaml_Js[21], a, i, v);}
   var
    get = caml_js_get,
    unsafe_get = caml_js_get,
    t9 = Js_of_ocaml_Js[52][1],
    dataView = t9.DataView;
   function of_arrayBuffer(t10){
    var uint8 = new uint8Array(t10);
    return caml_string_of_array(uint8);
   }
   function of_arrayBuffer$0(t12){
    var uint8 = new uint8Array(t12);
    return caml_bytes_of_array(uint8);
   }
   var
    Js_of_ocaml_Typed_array =
      [0,
       arrayBuffer,
       runtime.caml_ba_kind_of_typed_array,
       from_genarray,
       runtime.caml_ba_from_typed_array,
       int8Array,
       int8Array,
       int8Array,
       int8Array,
       int8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       int16Array,
       int16Array,
       int16Array,
       int16Array,
       int16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       int32Array,
       int32Array,
       int32Array,
       int32Array,
       int32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       float32Array,
       float32Array,
       float32Array,
       float32Array,
       float32Array,
       float64Array,
       float64Array,
       float64Array,
       float64Array,
       float64Array,
       set,
       get,
       unsafe_get,
       dataView,
       dataView,
       [0,
        runtime.bigstring_to_array_buffer,
        runtime.bigstring_to_typed_array,
        runtime.bigstring_of_array_buffer,
        runtime.bigstring_of_typed_array],
       [0, of_arrayBuffer, caml_string_of_array],
       [0,
        caml_bytes_of_array,
        runtime.caml_uint8_array_of_bytes,
        of_arrayBuffer$0]];
   runtime.caml_register_global
    (11, Js_of_ocaml_Typed_array, "Js_of_ocaml__Typed_array");
   return;
  }
  (globalThis));

//# 966 "../.js/default/js_of_ocaml/js_of_ocaml.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst$0 = '"',
    cst_a$0 = "a",
    cst_area$0 = "area",
    cst_audio$0 = "audio",
    cst_base$0 = "base",
    cst_blockquote$0 = "blockquote",
    cst_body$0 = "body",
    cst_br$0 = "br",
    cst_button$1 = "button",
    cst_canvas$0 = "canvas",
    cst_caption$0 = "caption",
    cst_code$0 = "code",
    cst_col$0 = "col",
    cst_colgroup$0 = "colgroup",
    cst_del$0 = "del",
    cst_div$0 = "div",
    cst_dl$0 = "dl",
    cst_embed$0 = "embed",
    cst_fieldset$0 = "fieldset",
    cst_form$0 = "form",
    cst_frame$0 = "frame",
    cst_frameset$0 = "frameset",
    cst_h1$0 = "h1",
    cst_h2$0 = "h2",
    cst_h3$0 = "h3",
    cst_h4$0 = "h4",
    cst_h5$0 = "h5",
    cst_h6$0 = "h6",
    cst_head$0 = "head",
    cst_hr$0 = "hr",
    cst_html$0 = "html",
    cst_iframe$0 = "iframe",
    cst_img$0 = "img",
    cst_input$1 = "input",
    cst_ins$0 = "ins",
    cst_label$0 = "label",
    cst_legend$0 = "legend",
    cst_li$0 = "li",
    cst_lib_js_of_ocaml_dom_html_m = "lib/js_of_ocaml/dom_html.ml",
    cst_link$0 = "link",
    cst_map$0 = "map",
    cst_meta$0 = "meta",
    cst_mouseout = "mouseout",
    cst_mouseover = "mouseover",
    cst_object$0 = "object",
    cst_ol$0 = "ol",
    cst_optgroup$0 = "optgroup",
    cst_option$0 = "option",
    cst_p$0 = "p",
    cst_param$0 = "param",
    cst_pre$0 = "pre",
    cst_q$0 = "q",
    cst_script$0 = "script",
    cst_select$1 = "select",
    cst_style$0 = "style",
    cst_table$0 = "table",
    cst_tbody$0 = "tbody",
    cst_td$0 = "td",
    cst_textarea$1 = "textarea",
    cst_tfoot$0 = "tfoot",
    cst_th$0 = "th",
    cst_thead$0 = "thead",
    cst_title$0 = "title",
    cst_tr$0 = "tr",
    cst_ul$0 = "ul",
    cst_video$0 = "video",
    caml_js_html_escape = runtime.caml_js_html_escape,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name$56 = cst_canvas$0,
    name$55 = cst_video$0,
    name$54 = cst_audio$0,
    name$53 = cst_iframe$0,
    name$52 = cst_frame$0,
    name$51 = cst_frameset$0,
    name$50 = cst_td$0,
    name$49 = cst_th$0,
    name$48 = cst_tr$0,
    name$47 = cst_tbody$0,
    name$46 = cst_tfoot$0,
    name$45 = cst_thead$0,
    name$44 = cst_colgroup$0,
    name$43 = cst_col$0,
    name$42 = cst_caption$0,
    name$41 = cst_table$0,
    name$40 = cst_script$0,
    name$39 = cst_area$0,
    name$38 = cst_map$0,
    name$37 = cst_param$0,
    name$36 = cst_object$0,
    name$35 = cst_img$0,
    name$34 = cst_a$0,
    name$33 = cst_del$0,
    name$32 = cst_ins$0,
    name$31 = cst_hr$0,
    name$30 = cst_br$0,
    name$29 = cst_pre$0,
    name$28 = cst_blockquote$0,
    name$27 = cst_q$0,
    name$26 = cst_h6$0,
    name$25 = cst_h5$0,
    name$24 = cst_h4$0,
    name$23 = cst_h3$0,
    name$22 = cst_h2$0,
    name$21 = cst_h1$0,
    name$20 = cst_p$0,
    name$19 = cst_embed$0,
    name$18 = cst_div$0,
    name$17 = "dialog",
    name$16 = cst_li$0,
    name$15 = cst_dl$0,
    name$14 = cst_ol$0,
    name$13 = cst_ul$0,
    name$12 = cst_legend$0,
    name$11 = cst_fieldset$0,
    name$10 = cst_label$0,
    cst_input = cst_input$1,
    name$9 = cst_option$0,
    name$8 = cst_optgroup$0,
    name$7 = cst_form$0,
    name$6 = cst_body$0,
    name$5 = cst_style$0,
    name$4 = cst_base$0,
    name$3 = cst_meta$0,
    name$2 = cst_title$0,
    name$1 = cst_link$0,
    name$0 = cst_head$0,
    name = cst_html$0,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    onIE = runtime.caml_js_on_ie(0) | 0,
    cst_Invalid_entity = "Invalid entity ";
   function decode_html_entities(s){
    var _G_ = runtime.caml_js_html_entities(s);
    return caml_call2
            (Js_of_ocaml_Js[5][8],
             _G_,
             function(param){
              var
               _H_ =
                 caml_call2
                  (Stdlib[28], cst_Invalid_entity, caml_string_of_jsstring(s));
              return caml_call1(Stdlib[2], _H_);
             });
   }
   var
    no_handler = Js_of_ocaml_Dom[9],
    handler = Js_of_ocaml_Dom[10],
    full_handler = Js_of_ocaml_Dom[11],
    invoke_handler = Js_of_ocaml_Dom[12],
    cancel = caml_call1(Js_of_ocaml_Dom[14][1], "cancel"),
    click = caml_call1(Js_of_ocaml_Dom[14][1], "click"),
    close = caml_call1(Js_of_ocaml_Dom[14][1], "close"),
    copy = caml_call1(Js_of_ocaml_Dom[14][1], "copy"),
    cut = caml_call1(Js_of_ocaml_Dom[14][1], "cut"),
    paste = caml_call1(Js_of_ocaml_Dom[14][1], "paste"),
    dblclick = caml_call1(Js_of_ocaml_Dom[14][1], "dblclick"),
    mousedown = caml_call1(Js_of_ocaml_Dom[14][1], "mousedown"),
    mouseup = caml_call1(Js_of_ocaml_Dom[14][1], "mouseup"),
    mouseover = caml_call1(Js_of_ocaml_Dom[14][1], cst_mouseover),
    mousemove = caml_call1(Js_of_ocaml_Dom[14][1], "mousemove"),
    mouseout = caml_call1(Js_of_ocaml_Dom[14][1], cst_mouseout),
    keypress = caml_call1(Js_of_ocaml_Dom[14][1], "keypress"),
    keydown = caml_call1(Js_of_ocaml_Dom[14][1], "keydown"),
    keyup = caml_call1(Js_of_ocaml_Dom[14][1], "keyup"),
    mousewheel = caml_call1(Js_of_ocaml_Dom[14][1], "mousewheel"),
    wheel = caml_call1(Js_of_ocaml_Dom[14][1], "wheel"),
    DOMMouseScroll = caml_call1(Js_of_ocaml_Dom[14][1], "DOMMouseScroll"),
    touchstart = caml_call1(Js_of_ocaml_Dom[14][1], "touchstart"),
    touchmove = caml_call1(Js_of_ocaml_Dom[14][1], "touchmove"),
    touchend = caml_call1(Js_of_ocaml_Dom[14][1], "touchend"),
    touchcancel = caml_call1(Js_of_ocaml_Dom[14][1], "touchcancel"),
    dragstart = caml_call1(Js_of_ocaml_Dom[14][1], "dragstart"),
    dragend = caml_call1(Js_of_ocaml_Dom[14][1], "dragend"),
    dragenter = caml_call1(Js_of_ocaml_Dom[14][1], "dragenter"),
    dragover = caml_call1(Js_of_ocaml_Dom[14][1], "dragover"),
    dragleave = caml_call1(Js_of_ocaml_Dom[14][1], "dragleave"),
    drag = caml_call1(Js_of_ocaml_Dom[14][1], "drag"),
    drop = caml_call1(Js_of_ocaml_Dom[14][1], "drop"),
    hashchange = caml_call1(Js_of_ocaml_Dom[14][1], "hashchange"),
    change = caml_call1(Js_of_ocaml_Dom[14][1], "change"),
    input = caml_call1(Js_of_ocaml_Dom[14][1], cst_input$1),
    timeupdate = caml_call1(Js_of_ocaml_Dom[14][1], "timeupdate"),
    submit = caml_call1(Js_of_ocaml_Dom[14][1], "submit"),
    scroll = caml_call1(Js_of_ocaml_Dom[14][1], "scroll"),
    focus = caml_call1(Js_of_ocaml_Dom[14][1], "focus"),
    blur = caml_call1(Js_of_ocaml_Dom[14][1], "blur"),
    load = caml_call1(Js_of_ocaml_Dom[14][1], "load"),
    unload = caml_call1(Js_of_ocaml_Dom[14][1], "unload"),
    beforeunload = caml_call1(Js_of_ocaml_Dom[14][1], "beforeunload"),
    resize = caml_call1(Js_of_ocaml_Dom[14][1], "resize"),
    orientationchange =
      caml_call1(Js_of_ocaml_Dom[14][1], "orientationchange"),
    popstate = caml_call1(Js_of_ocaml_Dom[14][1], "popstate"),
    error = caml_call1(Js_of_ocaml_Dom[14][1], "error"),
    abort = caml_call1(Js_of_ocaml_Dom[14][1], "abort"),
    select = caml_call1(Js_of_ocaml_Dom[14][1], cst_select$1),
    online = caml_call1(Js_of_ocaml_Dom[14][1], "online"),
    offline = caml_call1(Js_of_ocaml_Dom[14][1], "offline"),
    checking = caml_call1(Js_of_ocaml_Dom[14][1], "checking"),
    noupdate = caml_call1(Js_of_ocaml_Dom[14][1], "noupdate"),
    downloading = caml_call1(Js_of_ocaml_Dom[14][1], "downloading"),
    progress = caml_call1(Js_of_ocaml_Dom[14][1], "progress"),
    updateready = caml_call1(Js_of_ocaml_Dom[14][1], "updateready"),
    cached = caml_call1(Js_of_ocaml_Dom[14][1], "cached"),
    obsolete = caml_call1(Js_of_ocaml_Dom[14][1], "obsolete"),
    domContentLoaded = caml_call1(Js_of_ocaml_Dom[14][1], "DOMContentLoaded"),
    animationstart = caml_call1(Js_of_ocaml_Dom[14][1], "animationstart"),
    animationend = caml_call1(Js_of_ocaml_Dom[14][1], "animationend"),
    animationiteration =
      caml_call1(Js_of_ocaml_Dom[14][1], "animationiteration"),
    animationcancel = caml_call1(Js_of_ocaml_Dom[14][1], "animationcancel"),
    transitionrun = caml_call1(Js_of_ocaml_Dom[14][1], "transitionrun"),
    transitionstart = caml_call1(Js_of_ocaml_Dom[14][1], "transitionstart"),
    transitionend = caml_call1(Js_of_ocaml_Dom[14][1], "transitionend"),
    transitioncancel = caml_call1(Js_of_ocaml_Dom[14][1], "transitioncancel"),
    canplay = caml_call1(Js_of_ocaml_Dom[14][1], "canplay"),
    canplaythrough = caml_call1(Js_of_ocaml_Dom[14][1], "canplaythrough"),
    durationchange = caml_call1(Js_of_ocaml_Dom[14][1], "durationchange"),
    emptied = caml_call1(Js_of_ocaml_Dom[14][1], "emptied"),
    ended = caml_call1(Js_of_ocaml_Dom[14][1], "ended"),
    gotpointercapture =
      caml_call1(Js_of_ocaml_Dom[14][1], "gotpointercapture"),
    loadeddata = caml_call1(Js_of_ocaml_Dom[14][1], "loadeddata"),
    loadedmetadata = caml_call1(Js_of_ocaml_Dom[14][1], "loadedmetadata"),
    loadstart = caml_call1(Js_of_ocaml_Dom[14][1], "loadstart"),
    lostpointercapture =
      caml_call1(Js_of_ocaml_Dom[14][1], "lostpointercapture"),
    message = caml_call1(Js_of_ocaml_Dom[14][1], "message"),
    pause = caml_call1(Js_of_ocaml_Dom[14][1], "pause"),
    play = caml_call1(Js_of_ocaml_Dom[14][1], "play"),
    playing = caml_call1(Js_of_ocaml_Dom[14][1], "playing"),
    pointerenter = caml_call1(Js_of_ocaml_Dom[14][1], "pointerenter"),
    pointercancel = caml_call1(Js_of_ocaml_Dom[14][1], "pointercancel"),
    pointerdown = caml_call1(Js_of_ocaml_Dom[14][1], "pointerdown"),
    pointerleave = caml_call1(Js_of_ocaml_Dom[14][1], "pointerleave"),
    pointermove = caml_call1(Js_of_ocaml_Dom[14][1], "pointermove"),
    pointerout = caml_call1(Js_of_ocaml_Dom[14][1], "pointerout"),
    pointerover = caml_call1(Js_of_ocaml_Dom[14][1], "pointerover"),
    pointerup = caml_call1(Js_of_ocaml_Dom[14][1], "pointerup"),
    ratechange = caml_call1(Js_of_ocaml_Dom[14][1], "ratechange"),
    seeked = caml_call1(Js_of_ocaml_Dom[14][1], "seeked"),
    seeking = caml_call1(Js_of_ocaml_Dom[14][1], "seeking"),
    stalled = caml_call1(Js_of_ocaml_Dom[14][1], "stalled"),
    suspend = caml_call1(Js_of_ocaml_Dom[14][1], "suspend"),
    volumechange = caml_call1(Js_of_ocaml_Dom[14][1], "volumechange"),
    waiting = caml_call1(Js_of_ocaml_Dom[14][1], "waiting"),
    toggle = caml_call1(Js_of_ocaml_Dom[14][1], "toggle"),
    make = Js_of_ocaml_Dom[14][1],
    addEventListener = Js_of_ocaml_Dom[16],
    addEventListenerWithOptions = Js_of_ocaml_Dom[15],
    removeEventListener = Js_of_ocaml_Dom[17],
    createCustomEvent = Js_of_ocaml_Dom[19],
    d = "2d";
   function location_origin(loc){
    return caml_call3
            (Js_of_ocaml_Js[6][7],
             loc.origin,
             function(param){
              var
               protocol = loc.protocol,
               hostname = loc.hostname,
               port = loc.port;
              if(0 === protocol.length && 0 === hostname.length) return cst;
              var origin = protocol.concat("//", hostname);
              if(0 >= port.length) return origin;
              var t12 = loc.port;
              return origin.concat(":", t12);
             },
             function(o){return o;});
   }
   var
    window = Js_of_ocaml_Js[52][1],
    document = window.document,
    _a_ =
      [0,
       [11, "getElementById_exn: ", [3, 0, [11, " not found", 0]]],
       "getElementById_exn: %S not found"];
   function getElementById(id){
    var t15 = caml_jsstring_of_string(id), _F_ = document.getElementById(t15);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _F_,
             function(param){throw caml_maybe_attach_backtrace(Stdlib[8], 1);},
             function(pnode){return pnode;});
   }
   function getElementById_exn(id){
    var t17 = caml_jsstring_of_string(id), _D_ = document.getElementById(t17);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _D_,
             function(param){
              var _E_ = caml_call2(Stdlib_Printf[4], _a_, id);
              return caml_call1(Stdlib[2], _E_);
             },
             function(pnode){return pnode;});
   }
   function getElementById_opt(id){
    var t19 = caml_jsstring_of_string(id), _C_ = document.getElementById(t19);
    return caml_call1(Js_of_ocaml_Js[5][10], _C_);
   }
   function getElementById_coerce(id, coerce){
    var t21 = caml_jsstring_of_string(id), _A_ = document.getElementById(t21);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _A_,
             function(param){return 0;},
             function(e){
              var _B_ = caml_call1(coerce, e);
              return caml_call1(Js_of_ocaml_Js[5][10], _B_);
             });
   }
   function createElement(doc, name){
    var t23 = caml_jsstring_of_string(name);
    return doc.createElement(t23);
   }
   var
    createElementSyntax = [0, 785140586],
    cst_select = cst_select$1,
    cst_textarea = cst_textarea$1,
    cst_button = cst_button$1,
    cst_sub = "sub",
    cst_sup = "sup",
    cst_span = "span",
    cst_tt = "tt",
    cst_i = "i",
    cst_b = "b",
    cst_big = "big",
    cst_small = "small",
    cst_em = "em",
    cst_strong = "strong",
    cst_cite = "cite",
    cst_dfn = "dfn",
    cst_code = cst_code$0,
    cst_samp = "samp",
    cst_kbd = "kbd",
    cst_var = "var",
    cst_abbr = "abbr",
    cst_dd = "dd",
    cst_dt = "dt",
    cst_noscript = "noscript",
    cst_address = "address";
   function unsafeCreateElementEx(type, name, doc, elt){
    for(;;){
     if(0 === type && 0 === name) return createElement(doc, elt);
     var _u_ = createElementSyntax[1];
     if(785140586 !== _u_){
      if(982028505 <= _u_){
       var
        t29 = Js_of_ocaml_Js[18],
        t32 = new t29,
        t31 = caml_jsstring_of_string(elt);
       t32.push("<", t31);
       if(type){
        var v$0 = type[1], t34 = caml_js_html_escape(v$0);
        t32.push(' type="', t34, cst$0);
       }
       if(name){
        var v = name[1], t38 = caml_js_html_escape(v);
        t32.push(' name="', t38, cst$0);
       }
       t32.push(">");
       var t45 = t32.join(cst);
       return doc.createElement(t45);
      }
      var res = createElement(doc, elt);
      if(type){var t25 = type[1]; res.type = t25;}
      if(name){var t27 = name[1]; res.name = t27;}
      return res;
     }
     try{
      var
       t49 = document.createElement('<input name="x">'),
       t50 = t49.tagName,
       _x_ = t50.toLowerCase() == cst_input$1 ? 1 : 0,
       _y_ = _x_ ? t49.name == "x" ? 1 : 0 : _x_,
       _v_ = _y_;
     }
     catch(_z_){var _v_ = 0;}
     var _w_ = _v_ ? 982028505 : -1003883683;
     createElementSyntax[1] = _w_;
    }
   }
   function createHtml(doc){return createElement(doc, name);}
   function createHead(doc){return createElement(doc, name$0);}
   function createLink(doc){return createElement(doc, name$1);}
   function createTitle(doc){return createElement(doc, name$2);}
   function createMeta(doc){return createElement(doc, name$3);}
   function createBase(doc){return createElement(doc, name$4);}
   function createStyle(doc){return createElement(doc, name$5);}
   function createBody(doc){return createElement(doc, name$6);}
   function createForm(doc){return createElement(doc, name$7);}
   function createOptgroup(doc){return createElement(doc, name$8);}
   function createOption(doc){return createElement(doc, name$9);}
   function createSelect(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_select);
   }
   function createInput(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_input);
   }
   function createTextarea(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_textarea);
   }
   function createButton(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_button);
   }
   function createLabel(doc){return createElement(doc, name$10);}
   function createFieldset(doc){return createElement(doc, name$11);}
   function createLegend(doc){return createElement(doc, name$12);}
   function createUl(doc){return createElement(doc, name$13);}
   function createOl(doc){return createElement(doc, name$14);}
   function createDl(doc){return createElement(doc, name$15);}
   function createLi(doc){return createElement(doc, name$16);}
   function createDialog(doc){return createElement(doc, name$17);}
   function createDiv(doc){return createElement(doc, name$18);}
   function createEmbed(doc){return createElement(doc, name$19);}
   function createP(doc){return createElement(doc, name$20);}
   function createH1(doc){return createElement(doc, name$21);}
   function createH2(doc){return createElement(doc, name$22);}
   function createH3(doc){return createElement(doc, name$23);}
   function createH4(doc){return createElement(doc, name$24);}
   function createH5(doc){return createElement(doc, name$25);}
   function createH6(doc){return createElement(doc, name$26);}
   function createQ(doc){return createElement(doc, name$27);}
   function createBlockquote(doc){return createElement(doc, name$28);}
   function createPre(doc){return createElement(doc, name$29);}
   function createBr(doc){return createElement(doc, name$30);}
   function createHr(doc){return createElement(doc, name$31);}
   function createIns(doc){return createElement(doc, name$32);}
   function createDel(doc){return createElement(doc, name$33);}
   function createA(doc){return createElement(doc, name$34);}
   function createImg(doc){return createElement(doc, name$35);}
   function createObject(doc){return createElement(doc, name$36);}
   function createParam(doc){return createElement(doc, name$37);}
   function createMap(doc){return createElement(doc, name$38);}
   function createArea(doc){return createElement(doc, name$39);}
   function createScript(doc){return createElement(doc, name$40);}
   function createTable(doc){return createElement(doc, name$41);}
   function createCaption(doc){return createElement(doc, name$42);}
   function createCol(doc){return createElement(doc, name$43);}
   function createColgroup(doc){return createElement(doc, name$44);}
   function createThead(doc){return createElement(doc, name$45);}
   function createTfoot(doc){return createElement(doc, name$46);}
   function createTbody(doc){return createElement(doc, name$47);}
   function createTr(doc){return createElement(doc, name$48);}
   function createTh(doc){return createElement(doc, name$49);}
   function createTd(doc){return createElement(doc, name$50);}
   function createSub(doc){return createElement(doc, cst_sub);}
   function createSup(doc){return createElement(doc, cst_sup);}
   function createSpan(doc){return createElement(doc, cst_span);}
   function createTt(doc){return createElement(doc, cst_tt);}
   function createI(doc){return createElement(doc, cst_i);}
   function createB(doc){return createElement(doc, cst_b);}
   function createBig(doc){return createElement(doc, cst_big);}
   function createSmall(doc){return createElement(doc, cst_small);}
   function createEm(doc){return createElement(doc, cst_em);}
   function createStrong(doc){return createElement(doc, cst_strong);}
   function createCite(doc){return createElement(doc, cst_cite);}
   function createDfn(doc){return createElement(doc, cst_dfn);}
   function createCode(doc){return createElement(doc, cst_code);}
   function createSamp(doc){return createElement(doc, cst_samp);}
   function createKbd(doc){return createElement(doc, cst_kbd);}
   function createVar(doc){return createElement(doc, cst_var);}
   function createAbbr(doc){return createElement(doc, cst_abbr);}
   function createDd(doc){return createElement(doc, cst_dd);}
   function createDt(doc){return createElement(doc, cst_dt);}
   function createNoscript(doc){return createElement(doc, cst_noscript);}
   function createAddress(doc){return createElement(doc, cst_address);}
   function createFrameset(doc){return createElement(doc, name$51);}
   function createFrame(doc){return createElement(doc, name$52);}
   function createIframe(doc){return createElement(doc, name$53);}
   function createAudio(doc){return createElement(doc, name$54);}
   function createVideo(doc){return createElement(doc, name$55);}
   var
    Canvas_not_available =
      [248,
       "Js_of_ocaml__Dom_html.Canvas_not_available",
       runtime.caml_fresh_oo_id(0)];
   function createCanvas(doc){
    var t52 = createElement(doc, name$56);
    if(1 - caml_call1(Js_of_ocaml_Js[5][5], t52.getContext))
     throw caml_maybe_attach_backtrace(Canvas_not_available, 1);
    return t52;
   }
   var
    t53 = Js_of_ocaml_Js[52][1],
    html_element = t53.HTMLElement,
    _b_ = caml_call1(Js_of_ocaml_Js[4], html_element),
    _d_ = [0, cst_lib_js_of_ocaml_dom_html_m, 2885, 58],
    _c_ = [0, cst_lib_js_of_ocaml_dom_html_m, 2884, 61],
    cst_video = cst_video$0,
    cst_audio = cst_audio$0,
    cst_ul = cst_ul$0,
    cst_tr = cst_tr$0,
    cst_title = cst_title$0,
    cst_thead = cst_thead$0,
    cst_th = cst_th$0,
    cst_tfoot = cst_tfoot$0,
    cst_textarea$0 = cst_textarea$1,
    cst_td = cst_td$0,
    cst_tbody = cst_tbody$0,
    cst_table = cst_table$0,
    cst_style = cst_style$0,
    cst_select$0 = cst_select$1,
    cst_script = cst_script$0,
    cst_q = cst_q$0,
    cst_pre = cst_pre$0,
    cst_param = cst_param$0,
    cst_p = cst_p$0,
    cst_option = cst_option$0,
    cst_optgroup = cst_optgroup$0,
    cst_ol = cst_ol$0,
    cst_object = cst_object$0,
    cst_meta = cst_meta$0,
    cst_map = cst_map$0,
    cst_link = cst_link$0,
    cst_li = cst_li$0,
    cst_legend = cst_legend$0,
    cst_label = cst_label$0,
    cst_ins = cst_ins$0,
    cst_input$0 = cst_input$1,
    cst_img = cst_img$0,
    cst_iframe = cst_iframe$0,
    cst_html = cst_html$0,
    cst_hr = cst_hr$0,
    cst_head = cst_head$0,
    cst_h6 = cst_h6$0,
    cst_h5 = cst_h5$0,
    cst_h4 = cst_h4$0,
    cst_h3 = cst_h3$0,
    cst_h2 = cst_h2$0,
    cst_h1 = cst_h1$0,
    cst_frame = cst_frame$0,
    cst_frameset = cst_frameset$0,
    cst_form = cst_form$0,
    cst_embed = cst_embed$0,
    cst_fieldset = cst_fieldset$0,
    cst_dl = cst_dl$0,
    cst_div = cst_div$0,
    cst_details = "details",
    cst_del = cst_del$0,
    cst_colgroup = cst_colgroup$0,
    cst_col = cst_col$0,
    cst_caption = cst_caption$0,
    cst_canvas = cst_canvas$0,
    cst_button$0 = cst_button$1,
    cst_br = cst_br$0,
    cst_body = cst_body$0,
    cst_blockquote = cst_blockquote$0,
    cst_base = cst_base$0,
    cst_area = cst_area$0,
    cst_a = cst_a$0,
    element =
      caml_call1(Js_of_ocaml_Js[6][5], _b_)
       ? function
        (e){
         return e instanceof html_element
                 ? caml_call1(Js_of_ocaml_Js[2], e)
                 : Js_of_ocaml_Js[1];
        }
       : function
        (t54){
         var _t_ = caml_call1(Js_of_ocaml_Js[4], t54.innerHTML);
         return caml_call1(Js_of_ocaml_Js[6][5], _t_)
                 ? caml_call1(Js_of_ocaml_Js[2], t54)
                 : Js_of_ocaml_Js[1];
        };
   function unsafeCoerce(tag, t55){
    var t56 = t55.tagName;
    return t56.toLowerCase() == caml_jsstring_of_string(tag)
            ? caml_call1(Js_of_ocaml_Js[2], t55)
            : Js_of_ocaml_Js[1];
   }
   function a(e){return unsafeCoerce(cst_a, e);}
   function area(e){return unsafeCoerce(cst_area, e);}
   function base(e){return unsafeCoerce(cst_base, e);}
   function blockquote(e){return unsafeCoerce(cst_blockquote, e);}
   function body(e){return unsafeCoerce(cst_body, e);}
   function br(e){return unsafeCoerce(cst_br, e);}
   function button(e){return unsafeCoerce(cst_button$0, e);}
   function canvas(e){return unsafeCoerce(cst_canvas, e);}
   function caption(e){return unsafeCoerce(cst_caption, e);}
   function col(e){return unsafeCoerce(cst_col, e);}
   function colgroup(e){return unsafeCoerce(cst_colgroup, e);}
   function del(e){return unsafeCoerce(cst_del, e);}
   function details(e){return unsafeCoerce(cst_details, e);}
   function div(e){return unsafeCoerce(cst_div, e);}
   function dl(e){return unsafeCoerce(cst_dl, e);}
   function fieldset(e){return unsafeCoerce(cst_fieldset, e);}
   function embed(e){return unsafeCoerce(cst_embed, e);}
   function form(e){return unsafeCoerce(cst_form, e);}
   function frameset(e){return unsafeCoerce(cst_frameset, e);}
   function frame(e){return unsafeCoerce(cst_frame, e);}
   function h1(e){return unsafeCoerce(cst_h1, e);}
   function h2(e){return unsafeCoerce(cst_h2, e);}
   function h3(e){return unsafeCoerce(cst_h3, e);}
   function h4(e){return unsafeCoerce(cst_h4, e);}
   function h5(e){return unsafeCoerce(cst_h5, e);}
   function h6(e){return unsafeCoerce(cst_h6, e);}
   function head(e){return unsafeCoerce(cst_head, e);}
   function hr(e){return unsafeCoerce(cst_hr, e);}
   function html(e){return unsafeCoerce(cst_html, e);}
   function iframe(e){return unsafeCoerce(cst_iframe, e);}
   function img(e){return unsafeCoerce(cst_img, e);}
   function input$0(e){return unsafeCoerce(cst_input$0, e);}
   function ins(e){return unsafeCoerce(cst_ins, e);}
   function label(e){return unsafeCoerce(cst_label, e);}
   function legend(e){return unsafeCoerce(cst_legend, e);}
   function li(e){return unsafeCoerce(cst_li, e);}
   function link(e){return unsafeCoerce(cst_link, e);}
   function map(e){return unsafeCoerce(cst_map, e);}
   function meta(e){return unsafeCoerce(cst_meta, e);}
   function object(e){return unsafeCoerce(cst_object, e);}
   function ol(e){return unsafeCoerce(cst_ol, e);}
   function optgroup(e){return unsafeCoerce(cst_optgroup, e);}
   function option(e){return unsafeCoerce(cst_option, e);}
   function p(e){return unsafeCoerce(cst_p, e);}
   function pre(e){return unsafeCoerce(cst_pre, e);}
   function q(e){return unsafeCoerce(cst_q, e);}
   function script(e){return unsafeCoerce(cst_script, e);}
   function select$0(e){return unsafeCoerce(cst_select$0, e);}
   function style(e){return unsafeCoerce(cst_style, e);}
   function table(e){return unsafeCoerce(cst_table, e);}
   function tbody(e){return unsafeCoerce(cst_tbody, e);}
   function td(e){return unsafeCoerce(cst_td, e);}
   function textarea(e){return unsafeCoerce(cst_textarea$0, e);}
   function tfoot(e){return unsafeCoerce(cst_tfoot, e);}
   function th(e){return unsafeCoerce(cst_th, e);}
   function thead(e){return unsafeCoerce(cst_thead, e);}
   function title(e){return unsafeCoerce(cst_title, e);}
   function tr(e){return unsafeCoerce(cst_tr, e);}
   function ul(e){return unsafeCoerce(cst_ul, e);}
   function audio(e){return unsafeCoerce(cst_audio, e);}
   function video(e){return unsafeCoerce(cst_video, e);}
   function unsafeCoerceEvent(constr, ev){
    var _s_ = caml_call1(Js_of_ocaml_Js[4], constr);
    if(caml_call1(Js_of_ocaml_Js[6][5], _s_) && ev instanceof constr)
     return caml_call1(Js_of_ocaml_Js[2], ev);
    return Js_of_ocaml_Js[1];
   }
   function mouseEvent(ev){
    var t57 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t57.MouseEvent, ev);
   }
   function keyboardEvent(ev){
    var t58 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t58.KeyboardEvent, ev);
   }
   function wheelEvent(ev){
    var t59 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t59.WheelEvent, ev);
   }
   function mouseScrollEvent(ev){
    var t60 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t60.MouseScrollEvent, ev);
   }
   function popStateEvent(ev){
    var t61 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t61.PopStateEvent, ev);
   }
   function messageEvent(ev){
    var t62 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t62.MessageEvent, ev);
   }
   var eventTarget = Js_of_ocaml_Dom[13];
   function eventRelatedTarget(t64){
    return caml_call2
            (Js_of_ocaml_Js[6][8],
             t64.relatedTarget,
             function(param){
              var match = caml_string_of_jsstring(t64.type);
              return match !== cst_mouseout
                      ? match
                        !== cst_mouseover
                        ? Js_of_ocaml_Js[1]
                        : caml_call2
                          (Js_of_ocaml_Js[6][8],
                           t64.fromElement,
                           function(param){
                            throw caml_maybe_attach_backtrace
                                   ([0, Assert_failure, _c_], 1);
                           })
                      : caml_call2
                        (Js_of_ocaml_Js[6][8],
                         t64.toElement,
                         function(param){
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _d_], 1);
                         });
             });
   }
   function eventAbsolutePosition(t72){
    var body = document.body, html = document.documentElement;
    return [0,
            (t72.clientX + body.scrollLeft | 0) + html.scrollLeft | 0,
            (t72.clientY + body.scrollTop | 0) + html.scrollTop | 0];
   }
   function eventAbsolutePosition$0(t76){
    return caml_call3
            (Js_of_ocaml_Js[6][7],
             t76.pageX,
             function(param){return eventAbsolutePosition(t76);},
             function(x){
              return caml_call3
                      (Js_of_ocaml_Js[6][7],
                       t76.pageY,
                       function(param){return eventAbsolutePosition(t76);},
                       function(y){return [0, x, y];});
             });
   }
   function elementClientPosition(t77){
    var
     t83 = t77.getBoundingClientRect(),
     body = document.body,
     html = document.documentElement;
    return [0,
            ((t83.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
            ((t83.top | 0) - body.clientTop | 0) - html.clientTop | 0];
   }
   function getDocumentScroll(param){
    var body = document.body, html = document.documentElement;
    return [0,
            body.scrollLeft + html.scrollLeft | 0,
            body.scrollTop + html.scrollTop | 0];
   }
   function buttonPressed(t93){
    return caml_call3
            (Js_of_ocaml_Js[6][7],
             t93.which,
             function(param){
              var switcher = t93.button - 1 | 0;
              if(3 >= switcher >>> 0)
               switch(switcher){
                 case 0:
                  return 1;
                 case 1:
                  return 3;
                 case 2: break;
                 default: return 2;
               }
              return 0;
             },
             function(x){return x;});
   }
   function addMousewheelEventListenerWith(e, capture, once, passive, h){
    return caml_call6
            (addEventListenerWithOptions,
             e,
             wheel,
             capture,
             once,
             passive,
             caml_call1
              (handler,
               function(t94){
                var
                 dx =
                   (-
                   caml_call2
                    (Js_of_ocaml_Js[6][8],
                     t94.wheelDeltaX,
                     function(param){return 0;})
                   | 0)
                   / 40
                   | 0,
                 dy =
                   (-
                   caml_call2
                    (Js_of_ocaml_Js[6][8],
                     t94.wheelDeltaY,
                     function(param){return t94.wheelDelta;})
                   | 0)
                   / 40
                   | 0;
                return caml_call3(h, t94, dx, dy);
               }));
   }
   function addMousewheelEventListener(e, h, capt){
    return addMousewheelEventListenerWith(e, [0, capt], 0, 0, h);
   }
   function try_code(v){
    var
     match = caml_string_of_jsstring(v),
     switch$0 = caml_string_compare(match, "KeyH");
    if(0 <= switch$0){
     if(0 >= switch$0) return 8;
     var switch$1 = caml_string_compare(match, "Numpad4");
     if(0 <= switch$1){
      if(0 >= switch$1) return 72;
      var switch$2 = caml_string_compare(match, "PageUp");
      if(0 <= switch$2){
       if(0 >= switch$2) return 98;
       var switch$3 = caml_string_compare(match, "ShiftRight");
       if(0 <= switch$3){
        if(0 >= switch$3) return 91;
        if(match === "Slash") return 55;
        if(match === "Space") return 41;
        if(match === "Tab") return 39;
        if(match === "VolumeDown") return 103;
        if(match === "VolumeMute") return 102;
        if(match === "VolumeUp") return 104;
       }
       else{
        if(match === "Pause") return 123;
        if(match === "Period") return 54;
        if(match === "PrintScreen") return 120;
        if(match === "Quote") return 50;
        if(match === "ScrollLock") return 119;
        if(match === "Semicolon") return 49;
        if(match === "ShiftLeft") return 90;
       }
      }
      else{
       var switch$4 = caml_string_compare(match, "NumpadDivide");
       if(0 <= switch$4){
        if(0 >= switch$4) return 84;
        if(match === "NumpadEnter") return 83;
        if(match === "NumpadEqual") return 82;
        if(match === "NumpadMultiply") return 78;
        if(match === "NumpadSubtract") return 79;
        if(match === "OSLeft") return 117;
        if(match === "OSRight") return 118;
        if(match === "PageDown") return 99;
       }
       else{
        if(match === "Numpad5") return 73;
        if(match === "Numpad6") return 74;
        if(match === "Numpad7") return 75;
        if(match === "Numpad8") return 76;
        if(match === "Numpad9") return 77;
        if(match === "NumpadAdd") return 80;
        if(match === "NumpadDecimal") return 81;
       }
      }
     }
     else{
      var switch$5 = caml_string_compare(match, "KeyX");
      if(0 <= switch$5){
       if(0 >= switch$5) return 24;
       var switch$6 = caml_string_compare(match, "MetaRight");
       if(0 <= switch$6){
        if(0 >= switch$6) return 89;
        if(match === "Minus") return 37;
        if(match === "NumLock") return 85;
        if(match === "Numpad0") return 68;
        if(match === "Numpad1") return 69;
        if(match === "Numpad2") return 70;
        if(match === "Numpad3") return 71;
       }
       else{
        if(match === "KeyY") return 25;
        if(match === "KeyZ") return 26;
        if(match === "MediaPlayPause") return 107;
        if(match === "MediaStop") return 108;
        if(match === "MediaTrackNext") return 106;
        if(match === "MediaTrackPrevious") return 105;
        if(match === "MetaLeft") return 88;
       }
      }
      else{
       var switch$7 = caml_string_compare(match, "KeyP");
       if(0 <= switch$7){
        if(0 >= switch$7) return 16;
        if(match === "KeyQ") return 17;
        if(match === "KeyR") return 18;
        if(match === "KeyS") return 19;
        if(match === "KeyT") return 20;
        if(match === "KeyU") return 21;
        if(match === "KeyV") return 22;
        if(match === "KeyW") return 23;
       }
       else{
        if(match === "KeyI") return 9;
        if(match === "KeyJ") return 10;
        if(match === "KeyK") return 11;
        if(match === "KeyL") return 12;
        if(match === "KeyM") return 13;
        if(match === "KeyN") return 14;
        if(match === "KeyO") return 15;
       }
      }
     }
    }
    else{
     var switch$8 = caml_string_compare(match, "Digit6");
     if(0 <= switch$8){
      if(0 >= switch$8) return 33;
      var switch$9 = caml_string_compare(match, "F6");
      if(0 <= switch$9){
       if(0 >= switch$9) return 61;
       var switch$10 = caml_string_compare(match, "KeyA");
       if(0 <= switch$10){
        if(0 >= switch$10) return 1;
        if(match === "KeyB") return 2;
        if(match === "KeyC") return 3;
        if(match === "KeyD") return 4;
        if(match === "KeyE") return 5;
        if(match === "KeyF") return 6;
        if(match === "KeyG") return 7;
       }
       else{
        if(match === "F7") return 62;
        if(match === "F8") return 63;
        if(match === "F9") return 64;
        if(match === "Home") return 100;
        if(match === "Insert") return 44;
        if(match === "IntlBackslash") return 121;
        if(match === "IntlYen") return 122;
       }
      }
      else{
       var switch$11 = caml_string_compare(match, "F1");
       if(0 <= switch$11){
        if(0 >= switch$11) return 56;
        if(match === "F10") return 65;
        if(match === "F11") return 66;
        if(match === "F12") return 67;
        if(match === "F2") return 57;
        if(match === "F3") return 58;
        if(match === "F4") return 59;
        if(match === "F5") return 60;
       }
       else{
        if(match === "Digit7") return 34;
        if(match === "Digit8") return 35;
        if(match === "Digit9") return 36;
        if(match === "End") return 101;
        if(match === "Enter") return 40;
        if(match === "Equal") return 38;
        if(match === "Escape") return 42;
       }
      }
     }
     else{
      var switch$12 = caml_string_compare(match, "BrowserRefresh");
      if(0 <= switch$12){
       if(0 >= switch$12) return 113;
       var switch$13 = caml_string_compare(match, "Delete");
       if(0 <= switch$13){
        if(0 >= switch$13) return 45;
        if(match === "Digit0") return 27;
        if(match === "Digit1") return 28;
        if(match === "Digit2") return 29;
        if(match === "Digit3") return 30;
        if(match === "Digit4") return 31;
        if(match === "Digit5") return 32;
       }
       else{
        if(match === "BrowserSearch") return 110;
        if(match === "BrowserStop") return 114;
        if(match === "CapsLock") return 46;
        if(match === "Comma") return 53;
        if(match === "ContextMenu") return 109;
        if(match === "ControlLeft") return 86;
        if(match === "ControlRight") return 87;
       }
      }
      else{
       var switch$14 = caml_string_compare(match, "Backslash");
       if(0 <= switch$14){
        if(0 >= switch$14) return 52;
        if(match === "Backspace") return 43;
        if(match === "BracketLeft") return 47;
        if(match === "BracketRight") return 48;
        if(match === "BrowserBack") return 116;
        if(match === "BrowserFavorites") return 112;
        if(match === "BrowserForward") return 115;
        if(match === "BrowserHome") return 111;
       }
       else{
        if(match === "AltLeft") return 92;
        if(match === "AltRight") return 93;
        if(match === "ArrowDown") return 97;
        if(match === "ArrowLeft") return 94;
        if(match === "ArrowRight") return 95;
        if(match === "ArrowUp") return 96;
        if(match === "Backquote") return 51;
       }
      }
     }
    }
    return 0;
   }
   function try_key_code_normal(param){
    var switcher = param - 8 | 0;
    if(214 >= switcher >>> 0){
     var _r_ = switcher;
     if(67 <= _r_)
      switch(_r_){
        case 67:
         return 11;
        case 68:
         return 12;
        case 69:
         return 13;
        case 70:
         return 14;
        case 71:
         return 15;
        case 72:
         return 16;
        case 73:
         return 17;
        case 74:
         return 18;
        case 75:
         return 19;
        case 76:
         return 20;
        case 77:
         return 21;
        case 78:
         return 22;
        case 79:
         return 23;
        case 80:
         return 24;
        case 81:
         return 25;
        case 82:
         return 26;
        case 85:
         return 109;
        case 104:
         return 56;
        case 105:
         return 57;
        case 106:
         return 58;
        case 107:
         return 59;
        case 108:
         return 60;
        case 109:
         return 61;
        case 110:
         return 62;
        case 111:
         return 63;
        case 112:
         return 64;
        case 113:
         return 65;
        case 114:
         return 66;
        case 115:
         return 67;
        case 137:
         return 119;
        case 178:
         return 49;
        case 179:
         return 38;
        case 180:
         return 53;
        case 181:
         return 37;
        case 182:
         return 54;
        case 183:
         return 55;
        case 184:
         return 51;
        case 211:
         return 47;
        case 212:
         return 52;
        case 213:
         return 48;
        case 214:
         return 50;
      }
     else
      switch(_r_){
        case 0:
         return 43;
        case 1:
         return 39;
        case 5:
         return 40;
        case 11:
         return 123;
        case 12:
         return 46;
        case 19:
         return 42;
        case 24:
         return 41;
        case 25:
         return 98;
        case 26:
         return 99;
        case 27:
         return 101;
        case 28:
         return 100;
        case 29:
         return 94;
        case 30:
         return 96;
        case 31:
         return 95;
        case 32:
         return 97;
        case 34:
         return 120;
        case 37:
         return 44;
        case 38:
         return 45;
        case 40:
         return 27;
        case 41:
         return 28;
        case 42:
         return 29;
        case 43:
         return 30;
        case 44:
         return 31;
        case 45:
         return 32;
        case 46:
         return 33;
        case 47:
         return 34;
        case 48:
         return 35;
        case 49:
         return 36;
        case 57:
         return 1;
        case 58:
         return 2;
        case 59:
         return 3;
        case 60:
         return 4;
        case 61:
         return 5;
        case 62:
         return 6;
        case 63:
         return 7;
        case 64:
         return 8;
        case 65:
         return 9;
        case 66:
         return 10;
      }
    }
    return 0;
   }
   function make_unidentified(param){return 0;}
   function of_event(evt){
    var value = evt.keyCode, switcher = evt.location - 1 | 0;
    if(2 < switcher >>> 0)
     var f = make_unidentified;
    else
     switch(switcher){
       case 0:
        var
         value$3 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(19 <= value$3){
             if(91 === value$3) return 88;
            }
            else if(16 <= value$3)
             switch(value$3 - 16 | 0){
               case 0:
                return 90;
               case 1:
                return 86;
               default: return 92;
             }
            return 0;
           };
        break;
       case 1:
        var
         value$2 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(19 <= value$2){
             if(91 === value$2) return 89;
            }
            else if(16 <= value$2)
             switch(value$2 - 16 | 0){
               case 0:
                return 91;
               case 1:
                return 87;
               default: return 93;
             }
            return 0;
           };
        break;
       default:
        var
         value$1 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(47 <= value$1){
             var switcher = value$1 - 96 | 0;
             if(15 >= switcher >>> 0)
              switch(switcher){
                case 0:
                 return 68;
                case 1:
                 return 69;
                case 2:
                 return 70;
                case 3:
                 return 71;
                case 4:
                 return 72;
                case 5:
                 return 73;
                case 6:
                 return 74;
                case 7:
                 return 75;
                case 8:
                 return 76;
                case 9:
                 return 77;
                case 10:
                 return 78;
                case 11:
                 return 80;
                case 12: break;
                case 13:
                 return 79;
                case 14:
                 return 81;
                default: return 84;
              }
            }
            else if(12 <= value$1)
             switch(value$1 - 12 | 0){
               case 0:
                return 73;
               case 1:
                return 83;
               case 21:
                return 77;
               case 22:
                return 71;
               case 23:
                return 69;
               case 24:
                return 75;
               case 25:
                return 72;
               case 26:
                return 76;
               case 27:
                return 74;
               case 28:
                return 70;
               case 33:
                return 68;
               case 34:
                return 81;
             }
            return 0;
           };
     }
    var
     value$0 = evt.code,
     x =
       caml_call3(Js_of_ocaml_Js[6][7], value$0, make_unidentified, try_code),
     x$0 = f(x);
    return x$0 ? x$0 : try_key_code_normal(value);
   }
   function char_of_int(value){
    if(0 >= value) return 0;
    try{var _p_ = [0, caml_call1(Stdlib_Uchar[8], value)]; return _p_;}
    catch(_q_){return 0;}
   }
   function empty_string(param){return cst;}
   function none(param){return 0;}
   function of_event$0(t100){
    var
     t101 = caml_call2(Js_of_ocaml_Js[6][8], t100.key, empty_string),
     match = t101.length;
    return 0 === match
            ? caml_call3
              (Js_of_ocaml_Js[6][7], t100.charCode, none, char_of_int)
            : 1 === match ? char_of_int(t101.charCodeAt(0) | 0) : 0;
   }
   function element$0(_o_){return _o_;}
   function tagged(t105){
    var
     t106 = t105.tagName,
     tag = runtime.caml_string_of_jsbytes(t106.toLowerCase());
    if(0 === runtime.caml_ml_string_length(tag)) return [62, t105];
    var switcher = runtime.caml_string_unsafe_get(tag, 0) - 97 | 0;
    if(21 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return tag !== cst_a$0
                ? tag
                  !== cst_area$0
                  ? tag !== cst_audio$0 ? [62, t105] : [2, t105]
                  : [1, t105]
                : [0, t105];
       case 1:
        return tag !== cst_base$0
                ? tag
                  !== cst_blockquote$0
                  ? tag
                    !== cst_body$0
                    ? tag
                      !== cst_br$0
                      ? tag !== cst_button$1 ? [62, t105] : [7, t105]
                      : [6, t105]
                    : [5, t105]
                  : [4, t105]
                : [3, t105];
       case 2:
        return tag !== cst_canvas$0
                ? tag
                  !== cst_caption$0
                  ? tag
                    !== cst_col$0
                    ? tag !== cst_colgroup$0 ? [62, t105] : [11, t105]
                    : [10, t105]
                  : [9, t105]
                : [8, t105];
       case 3:
        return tag !== cst_del$0
                ? tag
                  !== cst_div$0
                  ? tag !== cst_dl$0 ? [62, t105] : [15, t105]
                  : [14, t105]
                : [12, t105];
       case 4:
        return tag !== cst_embed$0 ? [62, t105] : [16, t105];
       case 5:
        return tag !== cst_fieldset$0
                ? tag
                  !== cst_form$0
                  ? tag
                    !== cst_frame$0
                    ? tag !== cst_frameset$0 ? [62, t105] : [19, t105]
                    : [20, t105]
                  : [18, t105]
                : [17, t105];
       case 7:
        return tag !== cst_h1$0
                ? tag
                  !== cst_h2$0
                  ? tag
                    !== cst_h3$0
                    ? tag
                      !== cst_h4$0
                      ? tag
                        !== cst_h5$0
                        ? tag
                          !== cst_h6$0
                          ? tag
                            !== cst_head$0
                            ? tag
                              !== cst_hr$0
                              ? tag !== cst_html$0 ? [62, t105] : [29, t105]
                              : [28, t105]
                            : [27, t105]
                          : [26, t105]
                        : [25, t105]
                      : [24, t105]
                    : [23, t105]
                  : [22, t105]
                : [21, t105];
       case 8:
        return tag !== cst_iframe$0
                ? tag
                  !== cst_img$0
                  ? tag
                    !== cst_input$1
                    ? tag !== cst_ins$0 ? [62, t105] : [33, t105]
                    : [32, t105]
                  : [31, t105]
                : [30, t105];
       case 11:
        return tag !== cst_label$0
                ? tag
                  !== cst_legend$0
                  ? tag
                    !== cst_li$0
                    ? tag !== cst_link$0 ? [62, t105] : [37, t105]
                    : [36, t105]
                  : [35, t105]
                : [34, t105];
       case 12:
        return tag !== cst_map$0
                ? tag !== cst_meta$0 ? [62, t105] : [39, t105]
                : [38, t105];
       case 14:
        return tag !== cst_object$0
                ? tag
                  !== cst_ol$0
                  ? tag
                    !== cst_optgroup$0
                    ? tag !== cst_option$0 ? [62, t105] : [43, t105]
                    : [42, t105]
                  : [41, t105]
                : [40, t105];
       case 15:
        return tag !== cst_p$0
                ? tag
                  !== cst_param$0
                  ? tag !== cst_pre$0 ? [62, t105] : [46, t105]
                  : [45, t105]
                : [44, t105];
       case 16:
        return tag !== cst_q$0 ? [62, t105] : [47, t105];
       case 18:
        return tag !== cst_script$0
                ? tag
                  !== cst_select$1
                  ? tag !== cst_style$0 ? [62, t105] : [50, t105]
                  : [49, t105]
                : [48, t105];
       case 19:
        return tag !== cst_table$0
                ? tag
                  !== cst_tbody$0
                  ? tag
                    !== cst_td$0
                    ? tag
                      !== cst_textarea$1
                      ? tag
                        !== cst_tfoot$0
                        ? tag
                          !== cst_th$0
                          ? tag
                            !== cst_thead$0
                            ? tag
                              !== cst_title$0
                              ? tag !== cst_tr$0 ? [62, t105] : [59, t105]
                              : [58, t105]
                            : [57, t105]
                          : [56, t105]
                        : [55, t105]
                      : [54, t105]
                    : [53, t105]
                  : [52, t105]
                : [51, t105];
       case 20:
        return tag !== cst_ul$0 ? [62, t105] : [60, t105];
       case 21:
        return tag !== cst_video$0 ? [62, t105] : [61, t105];
     }
    return [62, t105];
   }
   function opt_tagged(e){
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             e,
             function(param){return 0;},
             function(e){return [0, tagged(e)];});
   }
   function taggedEvent(ev){
    var _i_ = mouseEvent(ev);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _i_,
             function(param){
              var _j_ = keyboardEvent(ev);
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       _j_,
                       function(param){
                        var _k_ = wheelEvent(ev);
                        return caml_call3
                                (Js_of_ocaml_Js[5][7],
                                 _k_,
                                 function(param){
                                  var _l_ = mouseScrollEvent(ev);
                                  return caml_call3
                                          (Js_of_ocaml_Js[5][7],
                                           _l_,
                                           function(param){
                                            var _m_ = popStateEvent(ev);
                                            return caml_call3
                                                    (Js_of_ocaml_Js[5][7],
                                                     _m_,
                                                     function(param){
                                                      var _n_ = messageEvent(ev);
                                                      return caml_call3
                                                              (Js_of_ocaml_Js[5][7],
                                                               _n_,
                                                               function(param){return [6, ev];},
                                                               function(ev){return [2, ev];});
                                                     },
                                                     function(ev){return [5, ev];});
                                           },
                                           function(ev){return [4, ev];});
                                 },
                                 function(ev){return [3, ev];});
                       },
                       function(ev){return [1, ev];});
             },
             function(ev){return [0, ev];});
   }
   function opt_taggedEvent(ev){
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             ev,
             function(param){return 0;},
             function(ev){return [0, taggedEvent(ev)];});
   }
   function stopPropagation(t110){
    return caml_call3
            (Js_of_ocaml_Js[6][7],
             t110.stopPropagation,
             function(param){
              var t108 = Js_of_ocaml_Js[7];
              return t110.cancelBubble = t108;
             },
             function(param){return t110.stopPropagation();});
   }
   var
    requestAnimationFrame =
      runtime.caml_js_pure_expr
       (function(param){
         var
          l =
            [0,
             window.requestAnimationFrame,
             [0,
              window.mozRequestAnimationFrame,
              [0,
               window.webkitRequestAnimationFrame,
               [0,
                window.oRequestAnimationFrame,
                [0, window.msRequestAnimationFrame, 0]]]]];
         try{
          var
           req =
             caml_call2
              (Stdlib_List[39],
               function(c){return caml_call1(Js_of_ocaml_Js[6][5], c);},
               l),
           _g_ = function(callback){return req(callback);};
          return _g_;
         }
         catch(_h_){
          var _f_ = caml_wrap_exception(_h_);
          if(_f_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_f_, 0);
          var
           now =
             function(param){
              var t116 = Js_of_ocaml_Js[26], t117 = new t116;
              return t117.getTime();
             },
           last = [0, now(0)];
          return function(callback){
           var
            t = now(0),
            dt = last[1] + 16.666666666666668 - t,
            t119 = dt < 0. ? 0. : dt;
           last[1] = t;
           window.setTimeout(callback, t119);
           return 0;};
         }
        });
   function hasPushState(param){
    var t122 = window.history;
    return caml_call1(Js_of_ocaml_Js[6][5], t122.pushState);
   }
   function hasPlaceholder(param){
    var t123 = unsafeCreateElementEx(0, 0, document, cst_input);
    return caml_call1(Js_of_ocaml_Js[6][5], t123.placeholder);
   }
   function hasRequired(param){
    var t124 = unsafeCreateElementEx(0, 0, document, cst_input);
    return caml_call1(Js_of_ocaml_Js[6][5], t124.required);
   }
   var overflow_limit = 2147483000.;
   function setTimeout(callback, d){
    var id = [0, 0];
    function loop(d, param){
     if(2147483000. < d)
      var remain = d - 2147483000., step = overflow_limit;
     else
      var remain = 0., step = d;
     var
      cb = remain === 0. ? callback : function(_e_){return loop(remain, _e_);},
      t125 = runtime.caml_js_wrap_callback(cb);
     id[1] = [0, window.setTimeout(t125, step)];
     return 0;
    }
    loop(d, 0);
    return id;
   }
   function clearTimeout(id){
    var match = id[1];
    if(! match) return 0;
    var t128 = match[1];
    id[1] = 0;
    return window.clearTimeout(t128);
   }
   function js_array_of_collection(c){return [].slice.call(c);}
   var
    Js_of_ocaml_Dom_html =
      [0,
       d,
       document,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       window,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       [0,
        cancel,
        click,
        close,
        copy,
        cut,
        paste,
        dblclick,
        mousedown,
        mouseup,
        mouseover,
        mousemove,
        mouseout,
        keypress,
        keydown,
        keyup,
        mousewheel,
        DOMMouseScroll,
        wheel,
        touchstart,
        touchmove,
        touchend,
        touchcancel,
        dragstart,
        dragend,
        dragenter,
        dragover,
        dragleave,
        drag,
        drop,
        hashchange,
        change,
        input,
        timeupdate,
        submit,
        scroll,
        focus,
        blur,
        load,
        unload,
        beforeunload,
        resize,
        orientationchange,
        popstate,
        error,
        abort,
        select,
        online,
        offline,
        checking,
        noupdate,
        downloading,
        progress,
        updateready,
        cached,
        obsolete,
        domContentLoaded,
        animationstart,
        animationend,
        animationiteration,
        animationcancel,
        transitionrun,
        transitionstart,
        transitionend,
        transitioncancel,
        canplay,
        canplaythrough,
        durationchange,
        emptied,
        ended,
        gotpointercapture,
        loadeddata,
        loadedmetadata,
        loadstart,
        lostpointercapture,
        message,
        pause,
        play,
        playing,
        pointerenter,
        pointercancel,
        pointerdown,
        pointerleave,
        pointermove,
        pointerout,
        pointerover,
        pointerup,
        ratechange,
        seeked,
        seeking,
        stalled,
        suspend,
        volumechange,
        waiting,
        toggle,
        make],
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       addMousewheelEventListenerWith,
       addMousewheelEventListener,
       createCustomEvent,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0, of_event, try_key_code_normal],
       [0, of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDialog,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$0,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        details,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map,
        meta,
        object,
        ol,
        optgroup,
        option,
        p,
        function(e){return unsafeCoerce(cst_param, e);},
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent,
        messageEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       decode_html_entities,
       onIE,
       hasPushState,
       hasPlaceholder,
       hasRequired];
   runtime.caml_register_global
    (559, Js_of_ocaml_Dom_html, "Js_of_ocaml__Dom_html");
   return;
  }
  (globalThis));

//# 5 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib;
   function default$0(s){
    caml_call1(Stdlib[49], s);
    return caml_call1(Stdlib[63], Stdlib[40]);
   }
   var logger = [0, default$0];
   function log(s){return caml_call1(logger[1], s);}
   var Pdfe = [0, default$0, logger, log];
   runtime.caml_register_global(1, Pdfe, "Pdfe");
   return;
  }
  (globalThis));

//# 31 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst$4 = " ",
    cst_C = "C",
    cst_I = "I",
    cst_Pdfutil_drop$1 = "Pdfutil.drop",
    cst_Pdfutil_take$1 = "Pdfutil.take",
    cst_X = "X",
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mul = runtime.caml_mul,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$3,
    cst$2 = cst$3,
    cst$0 = cst$4,
    cst = cst$4,
    roman_vals =
      caml_list_of_js_array
       ([[0, 900, "CM"],
         [0, 500, "D"],
         [0, 400, "CD"],
         [0, 100, cst_C],
         [0, 100, cst_C],
         [0, 100, cst_C],
         [0, 90, "XC"],
         [0, 50, "L"],
         [0, 40, "XL"],
         [0, 10, cst_X],
         [0, 10, cst_X],
         [0, 10, cst_X],
         [0, 9, "IX"],
         [0, 5, "V"],
         [0, 4, "IV"],
         [0, 1, cst_I],
         [0, 1, cst_I],
         [0, 1, cst_I]]),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String;
   global_data.Stdlib__Filename;
   var
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64;
   function position_gen(n, e, param){
    var n$0 = n, param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var e$0 = param$0[1];
     if(caml_equal(e, e$0)) return [0, n$0];
     var t = param$0[2], n$1 = n$0 + 1 | 0;
     n$0 = n$1;
     param$0 = t;
    }
   }
   function position(e, l){return position_gen(0, e, l);}
   function position_1(e, l){return position_gen(1, e, l);}
   function string_replace_all(x$0, x, s){
    if(x$0 === cst$3) return s;
    var
     p = [0, 0],
     slen = caml_ml_string_length(s),
     xlen = caml_ml_string_length(x$0),
     output = caml_call1(Stdlib_Buffer[1], slen * 2 | 0);
    for(;;){
     if(p[1] >= slen) return caml_call1(Stdlib_Buffer[2], output);
     try{
      if(caml_call3(Stdlib_String[16], s, p[1], xlen) === x$0){
       caml_call2(Stdlib_Buffer[16], output, x);
       p[1] = p[1] + xlen | 0;
      }
      else{
       var _br_ = caml_string_get(s, p[1]);
       caml_call2(Stdlib_Buffer[12], output, _br_);
       p[1]++;
      }
     }
     catch(_bs_){
      var _bq_ = caml_string_get(s, p[1]);
      caml_call2(Stdlib_Buffer[12], output, _bq_);
      p[1]++;
      continue;
     }
    }
   }
   function string_replace_all_lazy(x$0, x, s){
    if(x$0 === cst$3) return s;
    var
     p = [0, 0],
     slen = caml_ml_string_length(s),
     xlen = caml_ml_string_length(x$0),
     output = caml_call1(Stdlib_Buffer[1], slen * 2 | 0);
    for(;;){
     if(p[1] >= slen) return caml_call1(Stdlib_Buffer[2], output);
     try{
      if(caml_call3(Stdlib_String[16], s, p[1], xlen) === x$0){
       var _bn_ = caml_call1(x, 0);
       caml_call2(Stdlib_Buffer[16], output, _bn_);
       p[1] = p[1] + xlen | 0;
      }
      else{
       var _bo_ = caml_string_get(s, p[1]);
       caml_call2(Stdlib_Buffer[12], output, _bo_);
       p[1]++;
      }
     }
     catch(_bp_){
      var _bm_ = caml_string_get(s, p[1]);
      caml_call2(Stdlib_Buffer[12], output, _bm_);
      p[1]++;
      continue;
     }
    }
   }
   function flprint(s){
    caml_call1(Stdlib[42], s);
    return caml_call1(Stdlib[63], Stdlib[39]);
   }
   function fleprint(s){
    caml_call1(Stdlib[42], s);
    return caml_call1(Stdlib[63], Stdlib[40]);
   }
   var
    sort = Stdlib_List[63],
    hd = Stdlib_List[6],
    tl = Stdlib_List[7],
    rev = Stdlib_List[10],
    iter = Stdlib_List[18],
    iter2 = Stdlib_List[28],
    cst_Pdfutil_iter3 = "Pdfutil.iter3";
   function iter3(f, a, b, c){
    var a$0 = a, b$0 = b, c$0 = c;
    for(;;){
     if(a$0){
      if(b$0 && c$0){
       var
        c$1 = c$0[2],
        ch = c$0[1],
        b$1 = b$0[2],
        bh = b$0[1],
        a$1 = a$0[2],
        ah = a$0[1];
       caml_call3(f, ah, bh, ch);
       a$0 = a$1;
       b$0 = b$1;
       c$0 = c$1;
       continue;
      }
     }
     else if(! b$0 && ! c$0) return 0;
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_iter3], 1);
    }
   }
   function append(a, b){
    var _bl_ = caml_call1(rev, a);
    return caml_call2(Stdlib_List[13], _bl_, b);
   }
   function flatten(lists){
    var out = 0, param = caml_call1(rev, lists);
    for(;;){
     if(! param) return out;
     var ls = param[2], l = param[1], out$0 = append(l, out);
     out = out$0;
     param = ls;
    }
   }
   var
    rev_map = Stdlib_List[22],
    _a_ = [0, 0, 0],
    _b_ = [0, 0, 0, 0],
    _c_ = [0, 0, 0, 0, 0, 0],
    _d_ = [0, 0, 0, 0, 0, 0, 0],
    _e_ = [0, 0, 0, 0, 0, 0, 0, 0, 0],
    cst_Pdfutil_combine = "Pdfutil.combine",
    cst_Pdfutil_combine3 = "Pdfutil.combine3";
   function map(f, l){
    return caml_call1(rev, caml_call2(Stdlib_List[22], f, l));
   }
   function map2(f, a, b){
    return caml_call1(rev, caml_call3(Stdlib_List[30], f, a, b));
   }
   function split(l){
    var _bj_ = _a_, param = l;
    for(;;){
     var l2 = _bj_[2], l1 = _bj_[1];
     if(! param){
      var _bk_ = caml_call1(rev, l2);
      return [0, caml_call1(rev, l1), _bk_];
     }
     var t = param[2], match = param[1], b = match[2], a = match[1];
     _bj_ = [0, [0, a, l1], [0, b, l2]];
     param = t;
    }
   }
   function split3(l){
    var _bg_ = _b_, param = l;
    for(;;){
     var l3 = _bg_[3], l2 = _bg_[2], l1 = _bg_[1];
     if(! param){
      var _bh_ = caml_call1(rev, l3), _bi_ = caml_call1(rev, l2);
      return [0, caml_call1(rev, l1), _bi_, _bh_];
     }
     var
      t = param[2],
      match = param[1],
      c = match[3],
      b = match[2],
      a = match[1];
     _bg_ = [0, [0, a, l1], [0, b, l2], [0, c, l3]];
     param = t;
    }
   }
   function split5(l){
    var _bb_ = _c_, param = l;
    for(;;){
     var l5 = _bb_[5], l4 = _bb_[4], l3 = _bb_[3], l2 = _bb_[2], l1 = _bb_[1];
     if(! param){
      var
       _bc_ = caml_call1(rev, l5),
       _bd_ = caml_call1(rev, l4),
       _be_ = caml_call1(rev, l3),
       _bf_ = caml_call1(rev, l2);
      return [0, caml_call1(rev, l1), _bf_, _be_, _bd_, _bc_];
     }
     var
      t = param[2],
      match = param[1],
      e = match[5],
      d = match[4],
      c = match[3],
      b = match[2],
      a = match[1];
     _bb_ = [0, [0, a, l1], [0, b, l2], [0, c, l3], [0, d, l4], [0, e, l5]];
     param = t;
    }
   }
   function split6(l){
    var _a7_ = _d_, param = l;
    for(;;){
     var
      l6 = _a7_[6],
      l5 = _a7_[5],
      l4 = _a7_[4],
      l3 = _a7_[3],
      l2 = _a7_[2],
      l1 = _a7_[1];
     if(! param){
      var
       _a8_ = caml_call1(rev, l6),
       _a9_ = caml_call1(rev, l5),
       _a__ = caml_call1(rev, l4),
       _a$_ = caml_call1(rev, l3),
       _ba_ = caml_call1(rev, l2);
      return [0, caml_call1(rev, l1), _ba_, _a$_, _a__, _a9_, _a8_];
     }
     var
      t = param[2],
      match = param[1],
      f = match[6],
      e = match[5],
      d = match[4],
      c = match[3],
      b = match[2],
      a = match[1];
     _a7_ =
      [0,
       [0, a, l1],
       [0, b, l2],
       [0, c, l3],
       [0, d, l4],
       [0, e, l5],
       [0, f, l6]];
     param = t;
    }
   }
   function split8(l){
    var _aZ_ = _e_, param = l;
    for(;;){
     var
      l8 = _aZ_[8],
      l7 = _aZ_[7],
      l6 = _aZ_[6],
      l5 = _aZ_[5],
      l4 = _aZ_[4],
      l3 = _aZ_[3],
      l2 = _aZ_[2],
      l1 = _aZ_[1];
     if(! param){
      var
       _a0_ = caml_call1(rev, l8),
       _a1_ = caml_call1(rev, l7),
       _a2_ = caml_call1(rev, l6),
       _a3_ = caml_call1(rev, l5),
       _a4_ = caml_call1(rev, l4),
       _a5_ = caml_call1(rev, l3),
       _a6_ = caml_call1(rev, l2);
      return [0,
              caml_call1(rev, l1),
              _a6_,
              _a5_,
              _a4_,
              _a3_,
              _a2_,
              _a1_,
              _a0_];
     }
     var
      t = param[2],
      match = param[1],
      h = match[8],
      g = match[7],
      f = match[6],
      e = match[5],
      d = match[4],
      c = match[3],
      b = match[2],
      a = match[1];
     _aZ_ =
      [0,
       [0, a, l1],
       [0, b, l2],
       [0, c, l3],
       [0, d, l4],
       [0, e, l5],
       [0, f, l6],
       [0, g, l7],
       [0, h, l8]];
     param = t;
    }
   }
   function combine(a, b){
    var pairs = [0, 0];
    try{
     caml_call3
      (Stdlib_List[28],
       function(x, y){pairs[1] = [0, [0, x, y], pairs[1]]; return 0;},
       a,
       b);
     var _aX_ = caml_call1(rev, pairs[1]);
     return _aX_;
    }
    catch(_aY_){
     var _aW_ = caml_wrap_exception(_aY_);
     if(_aW_[1] === Stdlib[6])
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[6], cst_Pdfutil_combine], 1);
     throw caml_maybe_attach_backtrace(_aW_, 0);
    }
   }
   function combine3(a, b, c){
    var pairs = [0, 0];
    try{
     iter3
      (function(x, y, z){pairs[1] = [0, [0, x, y, z], pairs[1]]; return 0;},
       a,
       b,
       c);
     var _aU_ = caml_call1(rev, pairs[1]);
     return _aU_;
    }
    catch(_aV_){
     var _aT_ = caml_wrap_exception(_aV_);
     if(_aT_[1] === Stdlib[6])
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[6], cst_Pdfutil_combine3], 1);
     throw caml_maybe_attach_backtrace(_aT_, 0);
    }
   }
   function fold_left(f, b, l){return caml_call3(Stdlib_List[26], f, b, l);}
   function fold_right(f, l, e){
    var _aS_ = caml_call1(rev, l);
    return caml_call3
            (Stdlib_List[26],
             function(x, y){return caml_call2(f, y, x);},
             e,
             _aS_);
   }
   var
    length = Stdlib_List[1],
    cst_Pdfutil_map3 = "Pdfutil.map3",
    cst_Pdfutil_map4 = "Pdfutil.map4",
    cst_Pdfutil_map5 = "Pdfutil.map5",
    cst_Pdfutil_map6 = "Pdfutil.map6";
   function rev_map3(f, a$0, b$0, c$0){
    var a = a$0, b = b$0, c = c$0, outputs = 0;
    for(;;){
     if(a){
      if(b && c){
       var
        tc = c[2],
        hc = c[1],
        tb = b[2],
        hb = b[1],
        ta = a[2],
        ha = a[1],
        outputs$0 = [0, caml_call3(f, ha, hb, hc), outputs];
       a = ta;
       b = tb;
       c = tc;
       outputs = outputs$0;
       continue;
      }
     }
     else if(! b && ! c) return outputs;
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_map3], 1);
    }
   }
   function map3(f, a, b, c){return caml_call1(rev, rev_map3(f, a, b, c));}
   function rev_map4(f, a$0, b$0, c$0, d$0){
    var a = a$0, b = b$0, c = c$0, d = d$0, outputs = 0;
    for(;;){
     if(a){
      if(b && c && d){
       var
        td = d[2],
        hd = d[1],
        tc = c[2],
        hc = c[1],
        tb = b[2],
        hb = b[1],
        ta = a[2],
        ha = a[1],
        outputs$0 = [0, caml_call4(f, ha, hb, hc, hd), outputs];
       a = ta;
       b = tb;
       c = tc;
       d = td;
       outputs = outputs$0;
       continue;
      }
     }
     else if(! b && ! c && ! d) return outputs;
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_map4], 1);
    }
   }
   function map4(f, a, b, c, d){
    return caml_call1(rev, rev_map4(f, a, b, c, d));
   }
   function rev_map5(f, a$0, b$0, c$0, d$0, e$0){
    var a = a$0, b = b$0, c = c$0, d = d$0, e = e$0, outputs = 0;
    for(;;){
     if(a){
      if(b && c && d && e){
       var
        te = e[2],
        he = e[1],
        td = d[2],
        hd = d[1],
        tc = c[2],
        hc = c[1],
        tb = b[2],
        hb = b[1],
        ta = a[2],
        ha = a[1],
        outputs$0 = [0, caml_call5(f, ha, hb, hc, hd, he), outputs];
       a = ta;
       b = tb;
       c = tc;
       d = td;
       e = te;
       outputs = outputs$0;
       continue;
      }
     }
     else if(! b && ! c && ! d && ! e) return outputs;
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_map5], 1);
    }
   }
   function map5(f, a, b, c, d, e){
    return caml_call1(rev, rev_map5(f, a, b, c, d, e));
   }
   function rev_map6(f, a$0, b$0, c$0, d$0, e$0, g$0){
    var a = a$0, b = b$0, c = c$0, d = d$0, e = e$0, g = g$0, outputs = 0;
    for(;;){
     if(a){
      if(b && c && d && e && g){
       var
        tg = g[2],
        hg = g[1],
        te = e[2],
        he = e[1],
        td = d[2],
        hd = d[1],
        tc = c[2],
        hc = c[1],
        tb = b[2],
        hb = b[1],
        ta = a[2],
        ha = a[1],
        outputs$0 = [0, caml_call6(f, ha, hb, hc, hd, he, hg), outputs];
       a = ta;
       b = tb;
       c = tc;
       d = td;
       e = te;
       g = tg;
       outputs = outputs$0;
       continue;
      }
     }
     else if(! b && ! c && ! d && ! e && ! g) return outputs;
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_map6], 1);
    }
   }
   function map6(f, a, b, c, d, e, g){
    return caml_call1(rev, rev_map6(f, a, b, c, d, e, g));
   }
   var _f_ = 0;
   function _g_(_aR_, _aQ_){return _aR_ + _aQ_ | 0;}
   function sum(_aP_){return fold_left(_g_, _f_, _aP_);}
   var _h_ = 0.;
   function _i_(_aO_, _aN_){return _aO_ + _aN_;}
   function fsum(_aM_){return fold_left(_i_, _h_, _aM_);}
   function cumulative_sum(bse, l){
    var prev = 0, bse$0 = bse, param = l;
    for(;;){
     if(! param) return caml_call1(rev, prev);
     var
      t = param[2],
      h = param[1],
      bse$1 = bse$0 + h | 0,
      prev$0 = [0, bse$0 + h | 0, prev];
     prev = prev$0;
     bse$0 = bse$1;
     param = t;
    }
   }
   function split_around(p, l){
    var prev = 0, curr = 0, param = l;
    for(;;){
     if(! param)
      return 0 === curr
              ? caml_call1(rev, prev)
              : caml_call1(rev, [0, caml_call1(rev, curr), prev]);
     var t = param[2], h = param[1];
     if(caml_call1(p, h)){
      var prev$0 = [0, caml_call1(rev, curr), prev];
      prev = prev$0;
      curr = 0;
      param = t;
     }
     else{var curr$0 = [0, h, curr]; curr = curr$0; param = t;}
    }
   }
   function lcount(p, l){
    var c = 0, param = l;
    for(;;){
     if(! param) return c;
     var t = param[2], h = param[1];
     if(caml_call1(p, h)){
      var c$0 = c + 1 | 0;
      c = c$0;
      param = t;
     }
     else
      param = t;
    }
   }
   function index(n$1, p){
    var n = 1, param = p;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var h = param[1];
     if(caml_call1(n$1, h)) return n;
     var t = param[2], n$0 = n + 1 | 0;
     n = n$0;
     param = t;
    }
   }
   function firstchar(s){
    try{var _aK_ = [0, caml_string_get(s, 0)]; return _aK_;}
    catch(_aL_){
     var _aJ_ = caml_wrap_exception(_aL_);
     if(_aJ_[1] === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(_aJ_, 0);
    }
   }
   function lastchar(s){
    try{
     var _aH_ = [0, caml_string_get(s, caml_ml_string_length(s) - 1 | 0)];
     return _aH_;
    }
    catch(_aI_){
     var _aG_ = caml_wrap_exception(_aI_);
     if(_aG_[1] === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(_aG_, 0);
    }
   }
   function explode(s){
    var l = [0, 0], _aE_ = caml_ml_string_length(s);
    if(_aE_ >= 1){
     var p = _aE_;
     for(;;){
      l[1] = [0, runtime.caml_string_unsafe_get(s, p - 1 | 0), l[1]];
      var _aF_ = p - 1 | 0;
      if(1 === p) break;
      p = _aF_;
     }
    }
    return l[1];
   }
   function implode(l){
    var
     s = runtime.caml_create_bytes(caml_call1(length, l)),
     x = 0,
     param = l;
    for(;;){
     if(! param) return caml_call1(Stdlib_Bytes[6], s);
     var t = param[2], i = param[1];
     runtime.caml_bytes_unsafe_set(s, x, i);
     var x$0 = x + 1 | 0;
     x = x$0;
     param = t;
    }
   }
   function string_of_char(c){return caml_call2(Stdlib_String[1], 1, c);}
   function i32ofi(_aD_){return _aD_;}
   function i32toi(_aC_){return _aC_;}
   function i32tof(_aB_){return _aB_;}
   function i32add(_aA_, _az_){return _aA_ + _az_ | 0;}
   function i32sub(_ay_, _ax_){return _ay_ - _ax_ | 0;}
   var i32mul = caml_mul, i32div = caml_div;
   function sr32(_aw_, _av_){return _aw_ >> _av_;}
   function lsr32(_au_, _at_){return _au_ >>> _at_ | 0;}
   function lsl32(_as_, _ar_){return _as_ << _ar_;}
   function lor32(_aq_, _ap_){return _aq_ | _ap_;}
   function land32(_ao_, _an_){return _ao_ & _an_;}
   var lnot32 = Stdlib_Int32[11];
   function lxor32(_am_, _al_){return _am_ ^ _al_;}
   var
    i32succ = Stdlib_Int32[6],
    i32pred = Stdlib_Int32[7],
    i32max = Stdlib[17],
    i32min = Stdlib[16],
    i64ofi = caml_int64_of_int32,
    i64toi = caml_int64_to_int32,
    i64tof = runtime.caml_int64_to_float,
    i64add = runtime.caml_int64_add,
    i64sub = runtime.caml_int64_sub,
    i64mul = runtime.caml_int64_mul,
    i64div = runtime.caml_int64_div,
    sr64 = runtime.caml_int64_shift_right,
    lsr64 = runtime.caml_int64_shift_right_unsigned,
    lsl64 = runtime.caml_int64_shift_left,
    land64 = runtime.caml_int64_and,
    lor64 = runtime.caml_int64_or,
    lnot64 = Stdlib_Int64[11],
    lxor64 = runtime.caml_int64_xor,
    i64succ = Stdlib_Int64[6],
    i64pred = Stdlib_Int64[7],
    i64max = Stdlib[17],
    i64min = Stdlib[16],
    i32ofi64 = caml_int64_to_int32,
    i64ofi32 = caml_int64_of_int32,
    cst_Pdfutil_do_many = "Pdfutil.do_many",
    cst_Pdfutil_interleave_lists = "Pdfutil.interleave_lists";
   function sign_extend(l, n){
    var
     _ak_ = 32 === Stdlib_Nativeint[9] ? 33 : Stdlib_Nativeint[9],
     shift = (_ak_ - 1 | 0) - l | 0;
    return n << shift >> shift;
   }
   function set_array(a, v){
    return caml_call4(Stdlib_Array[8], a, 0, a.length - 1, v);
   }
   function do_return(v, f){
    var r = caml_call1(v, 0);
    caml_call1(f, 0);
    return r;
   }
   function do_many(f, n){
    var n$0 = n;
    for(;;){
     if(0 > n$0)
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[6], cst_Pdfutil_do_many], 1);
     if(0 === n$0) return 0;
     caml_call1(f, 0);
     var n$1 = n$0 - 1 | 0;
     n$0 = n$1;
    }
   }
   function interleave(elt, l){
    var result = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, result);
     var e = param[1];
     if(param[2]){
      var t = param[2], result$0 = [0, elt, [0, e, result]];
      result = result$0;
      param = t;
     }
     else{var result$1 = [0, e, result]; result = result$1; param = 0;}
    }
   }
   function interleave_lists(a, b){
    var r = 0, a$0 = a, b$0 = b;
    for(;;){
     if(a$0){
      if(b$0){
       var
        t = b$0[2],
        h = b$0[1],
        t$0 = a$0[2],
        h$0 = a$0[1],
        r$0 = [0, h, [0, h$0, r]];
       r = r$0;
       a$0 = t$0;
       b$0 = t;
       continue;
      }
     }
     else if(! b$0) return caml_call1(rev, r);
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Pdfutil_interleave_lists], 1);
    }
   }
   function symbol(r, e){r[1] = [0, e, r[1]]; return 0;}
   function symbol$0(r, l){r[1] = append(l, r[1]); return 0;}
   function isdigit(x){if(48 <= x && 57 >= x) return 1; return 0;}
   function toint(x){return x | 0;}
   function notpred(f, e){return 1 - caml_call1(f, e);}
   var
    eq = caml_equal,
    neq = runtime.caml_notequal,
    cst_Pdfutil_pairs_of_list = "Pdfutil.pairs_of_list";
   function map_lol(f){
    function _ah_(_aj_){return map(f, _aj_);}
    return function(_ai_){return map(_ah_, _ai_);};
   }
   function pow(i, x){
    if(0 === i) return 1;
    if(1 === i) return x;
    var _ag_ = 0 === (i % 2 | 0) ? 1 : x;
    return caml_mul(pow(i / 2 | 0, caml_mul(x, x)), _ag_);
   }
   function lookup(k, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var t = param$0[2], match = param$0[1], v = match[2], k$0 = match[1];
     if(caml_equal(k$0, k)) return [0, v];
     param$0 = t;
    }
   }
   function lookup_failnull(k, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var t = param$0[2], match = param$0[1], v = match[2], k$0 = match[1];
     if(caml_equal(k$0, k)) return v;
     param$0 = t;
    }
   }
   function add(k, v, d){
    var r = 0, param = d;
    for(;;){
     if(! param) return [0, [0, k, v], r];
     var h = param[1], t = param[2], k$0 = h[1];
     if(caml_equal(k$0, k)) return append(r, [0, [0, k, v], t]);
     var t$0 = param[2], r$0 = [0, h, r];
     r = r$0;
     param = t$0;
    }
   }
   function replace(k, v, l){
    var r = 0, param = l;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var h = param[1], t = param[2], k$0 = h[1];
     if(caml_equal(k$0, k))
      return caml_call2(Stdlib_List[13], r, [0, [0, k, v], t]);
     var t$0 = param[2], r$0 = [0, h, r];
     r = r$0;
     param = t$0;
    }
   }
   function remove(k, l){
    var r = 0, param = l;
    for(;;){
     if(! param) return r;
     var h = param[1], t = param[2], k$0 = h[1];
     if(caml_equal(k$0, k)) return caml_call2(Stdlib_List[13], r, t);
     var t$0 = param[2], r$0 = [0, h, r];
     r = r$0;
     param = t$0;
    }
   }
   function mergedict(d, param){
    var d$0 = d, param$0 = param;
    for(;;){
     if(! param$0) return d$0;
     var
      es = param$0[2],
      match = param$0[1],
      v = match[2],
      k = match[1],
      d$1 = add(k, v, d$0);
     d$0 = d$1;
     param$0 = es;
    }
   }
   function symbol$1(a, b){return caml_call1(a, b);}
   function symbol$2(a, b){return append(b, a);}
   function conspair(param){
    var
     _af_ = param[2],
     ys = _af_[2],
     xs = _af_[1],
     match = param[1],
     y = match[2],
     x = match[1];
    return [0, [0, x, xs], [0, y, ys]];
   }
   function conspairopt(param){
    var
     _ac_ = param[2],
     ys = _ac_[2],
     xs = _ac_[1],
     match = param[1],
     yo = match[2],
     xo = match[1];
    if(yo) var y = yo[1], _ad_ = [0, y, ys]; else var _ad_ = ys;
    if(xo) var x = xo[1], _ae_ = [0, x, xs]; else var _ae_ = xs;
    return [0, _ae_, _ad_];
   }
   function pairs_of_list(l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var match = param[2], h = param[1];
     if(! match)
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[6], cst_Pdfutil_pairs_of_list], 1);
     var t = match[2], h$0 = match[1], r$0 = [0, [0, h, h$0], r];
     r = r$0;
     param = t;
    }
   }
   function replaceinlist(p, o, l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var t = param[2], h = param[1];
     if(caml_call1(p, h)){
      var r$0 = [0, o, r];
      r = r$0;
      param = t;
     }
     else{var r$1 = [0, h, r]; r = r$1; param = t;}
    }
   }
   function pairs(l){
    var r = 0, param = l;
    for(;;){
     if(param){
      var match = param[2];
      if(match){
       var
        rest = match[2],
        b = match[1],
        a = param[1],
        r$0 = [0, [0, a, b], r];
       r = r$0;
       param = [0, b, rest];
       continue;
      }
     }
     return caml_call1(rev, r);
    }
   }
   var
    mem = Stdlib_List[37],
    cst_Pdfutil_couple_reduce = "Pdfutil.couple_reduce",
    cst_Pdfutil_pair_reduce = "Pdfutil.pair_reduce";
   function mem$0(l, x){return caml_call2(mem, x, l);}
   function setify_preserving_order(l){
    var l$0 = caml_call1(rev, l), r = 0, param = l$0;
    for(;;){
     if(! param) return r;
     var t = param[2], h = param[1];
     if(caml_call2(mem, h, t))
      param = t;
     else{var r$0 = [0, h, r]; r = r$0; param = t;}
    }
   }
   function setify(l){
    var prev = 0, param = caml_call2(Stdlib_List[63], caml_compare, l);
    for(;;){
     if(! param) return caml_call1(rev, prev);
     var x = param[1], match = param[2];
     if(! match) return caml_call1(rev, [0, x, prev]);
     var t = match[2], b = match[1];
     if(caml_equal(x, b))
      param = [0, b, t];
     else{
      var t$0 = param[2], prev$0 = [0, x, prev];
      prev = prev$0;
      param = t$0;
     }
    }
   }
   function setify_large(l){
    var
     _ab_ = caml_call1(length, l),
     h = caml_call2(Stdlib_Hashtbl[1], 0, _ab_);
    caml_call2
     (iter, function(k){return caml_call3(Stdlib_Hashtbl[11], h, k, 0);}, l);
    return caml_call3
            (Stdlib_Hashtbl[14],
             function(k, param, acc){return [0, k, acc];},
             h,
             0);
   }
   function setminus(l$0, l){
    var r = 0, l$1 = l$0;
    for(;;){
     if(! l$1) return r;
     var t = l$1[2], h = l$1[1];
     if(caml_call2(mem, h, l))
      l$1 = t;
     else{var r$0 = [0, h, r]; r = r$0; l$1 = t;}
    }
   }
   function setminus_preserving_order(l$0, l){return caml_call1(rev, setminus(l$0, l));
   }
   function heads(l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var t = param[2], h = param[1], r$0 = [0, caml_call1(hd, h), r];
     r = r$0;
     param = t;
    }
   }
   function tails(l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var t = param[2], h = param[1], r$0 = [0, caml_call1(tl, h), r];
     r = r$0;
     param = t;
    }
   }
   function zipn(l){
    var r = 0, l$0 = l;
    for(;;){
     if(l$0 && l$0[1]){
      var l$1 = tails(l$0), r$0 = [0, heads(l$0), r];
      r = r$0;
      l$0 = l$1;
      continue;
     }
     return caml_call1(rev, r);
    }
   }
   function drop_evens(l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var _aa_ = param[2], h = param[1];
     if(! _aa_) return caml_call1(rev, [0, h, r]);
     var match = _aa_[2], h$0 = _aa_[1];
     if(! match) return caml_call1(rev, [0, h$0, [0, h, r]]);
     var t = match[2], h$1 = match[1], r$0 = [0, h, r];
     r = r$0;
     param = [0, h$1, t];
    }
   }
   function really_drop_evens(l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var match = param[2], h = param[1];
     if(match){
      var more = match[2], r$0 = [0, h, r];
      r = r$0;
      param = more;
     }
     else{var r$1 = [0, h, r]; r = r$1; param = 0;}
    }
   }
   function drop_odds(l){
    var r = 0, param = l;
    for(;;){
     if(param){
      var match = param[2];
      if(match){
       var t = match[2], h = match[1], r$0 = [0, h, r];
       r = r$0;
       param = t;
       continue;
      }
     }
     return caml_call1(rev, r);
    }
   }
   function tail_no_fail(param){
    if(! param) return 0;
    var t = param[2];
    return t;
   }
   function couple(f, l){
    var r = 0, param = l;
    for(;;){
     if(param){
      var match = param[2];
      if(match){
       var
        xs = match[2],
        x = match[1],
        x$0 = param[1],
        r$0 = [0, caml_call2(f, x$0, x), r];
       r = r$0;
       param = [0, x, xs];
       continue;
      }
     }
     return caml_call1(rev, r);
    }
   }
   function couple_ext(f, g, l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var match = param[2], x = param[1];
     if(match){
      var xs = match[2], x$0 = match[1], r$0 = [0, caml_call2(f, x, x$0), r];
      r = r$0;
      param = [0, x$0, xs];
     }
     else{var r$1 = [0, caml_call1(g, x), r]; r = r$1; param = 0;}
    }
   }
   function couple_reduce(f, l){
    var l$0 = l;
    for(;;){
     if(! l$0)
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[6], cst_Pdfutil_couple_reduce], 1);
     if(! l$0[2]){var a = l$0[1]; return a;}
     var l$1 = couple(f, l$0);
     l$0 = l$1;
    }
   }
   function pair(f, l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var match = param[2], a = param[1];
     if(match){
      var t = match[2], b = match[1], r$0 = [0, caml_call2(f, a, b), r];
      r = r$0;
      param = t;
     }
     else{var r$1 = [0, a, r]; r = r$1; param = 0;}
    }
   }
   function pair_ext(f, g, l){
    var r = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, r);
     var match = param[2], a = param[1];
     if(match){
      var t = match[2], b = match[1], r$0 = [0, caml_call2(f, a, b), r];
      r = r$0;
      param = t;
     }
     else{var r$1 = [0, caml_call1(g, a), r]; r = r$1; param = 0;}
    }
   }
   function pair_reduce(f, l){
    var l$0 = l;
    for(;;){
     if(! l$0)
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[6], cst_Pdfutil_pair_reduce], 1);
     if(! l$0[2]){var a = l$0[1]; return a;}
     var l$1 = pair(f, l$0);
     l$0 = l$1;
    }
   }
   var
    keep = Stdlib_List[44],
    cst_Pdfutil_take = cst_Pdfutil_take$1,
    cst_Pdfutil_take$0 = cst_Pdfutil_take$1,
    cst_Pdfutil_drop = cst_Pdfutil_drop$1,
    cst_Pdfutil_drop$0 = cst_Pdfutil_drop$1,
    cst_Pdfutil_cleave_not_enough_ = "Pdfutil.cleave: not enough elements",
    cst_Pdfutil_cleave_negative_ar = "Pdfutil.cleave: negative argument",
    cst_Pdfutil_select = "Pdfutil.select",
    cst_Pdfutil_last = "Pdfutil.last",
    cst_Pdfutil_extremes = "Pdfutil.extremes",
    cst_Pdfutil_extremes_and_middl = "Pdfutil.extremes_and_middle",
    cst_Pdfutil_ilist = "Pdfutil.ilist",
    cst_Pdfutil_array_iter2 = "Pdfutil.array_iter2",
    cst_Pdfutil_array_map2 = "Pdfutil.array_map2",
    cst_unopt = "unopt";
   function lose(p){
    var prev = 0;
    return function(param$0){
     var prev$0 = prev, param = param$0;
     for(;;){
      if(! param) return caml_call1(rev, prev$0);
      var t = param[2], h = param[1];
      if(caml_call1(p, h))
       param = t;
      else{var prev$1 = [0, h, prev$0]; prev$0 = prev$1; param = t;}
     }};
   }
   function many(x, n){
    return caml_call1(Stdlib_Array[10], runtime.caml_array_make(n, x));
   }
   function manyunique(f, n){
    var r = 0, n$0 = n;
    for(;;){
     if(0 === n$0) return caml_call1(rev, r);
     var n$1 = n$0 - 1 | 0, r$0 = [0, caml_call1(f, 0), r];
     r = r$0;
     n$0 = n$1;
    }
   }
   function take(l, n){
    if(0 > n)
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_take$0], 1);
    var r = 0, l$0 = l, n$0 = n;
    for(;;){
     if(0 === n$0) return caml_call1(rev, r);
     if(! l$0)
      throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_take], 1);
     var t = l$0[2], h = l$0[1], n$1 = n$0 - 1 | 0, r$0 = [0, h, r];
     r = r$0;
     l$0 = t;
     n$0 = n$1;
    }
   }
   function take$0(n, l){return take(l, n);}
   function takewhile_reverse(p, l){
    var r = 0, param = l;
    for(;;){
     if(! param) return r;
     var t = param[2], h = param[1];
     if(! caml_call1(p, h)) return r;
     var r$0 = [0, h, r];
     r = r$0;
     param = t;
    }
   }
   function takewhile(p, l){
    var r = 0, l$0 = l;
    for(;;){
     if(! l$0) return caml_call1(rev, r);
     var t = l$0[2], h = l$0[1];
     if(! caml_call1(p, h)) return caml_call1(rev, r);
     var r$0 = [0, h, r];
     r = r$0;
     l$0 = t;
    }
   }
   function drop(l, n$1){
    if(0 > n$1)
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_drop$0], 1);
    if(0 === n$1) return l;
    var n = n$1, param = l;
    for(;;){
     if(! param)
      throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_drop], 1);
     var t = param[2];
     if(1 === n) return t;
     var n$0 = n - 1 | 0;
     n = n$0;
     param = t;
    }
   }
   function drop$0(n, l){return drop(l, n);}
   function dropwhile(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var t = param$0[2], h = param$0[1];
     if(! caml_call1(p, h)) return [0, h, t];
     param$0 = t;
    }
   }
   function cleave(l, n){
    if(0 > n)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Pdfutil_cleave_negative_ar], 1);
    var l$0 = l, left = 0, n$0 = n;
    for(;;){
     if(0 === n$0) return [0, caml_call1(rev, left), l$0];
     if(! l$0)
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[6], cst_Pdfutil_cleave_not_enough_], 1);
     var
      n$1 = n$0 - 1 | 0,
      left$0 = [0, caml_call1(hd, l$0), left],
      l$1 = caml_call1(tl, l$0);
     l$0 = l$1;
     left = left$0;
     n$0 = n$1;
    }
   }
   function cleavewhile(p, l){
    var l$0 = l, elts = 0;
    for(;;){
     if(! l$0) return [0, caml_call1(rev, elts), 0];
     var es = l$0[2], e = l$0[1];
     if(! caml_call1(p, e)) return [0, caml_call1(rev, elts), l$0];
     var elts$0 = [0, e, elts];
     l$0 = es;
     elts = elts$0;
    }
   }
   function cleavewhile_unordered(p, l){
    var l$0 = l, elts = 0;
    for(;;){
     if(! l$0) return [0, elts, 0];
     var es = l$0[2], e = l$0[1];
     if(! caml_call1(p, e)) return [0, elts, l$0];
     var elts$0 = [0, e, elts];
     l$0 = es;
     elts = elts$0;
    }
   }
   function isolate(p$0, p, l){
    var
     during_and_after =
       cleavewhile(function(_$_){return notpred(p$0, _$_);}, l)[2];
    if(! during_and_after) return 0;
    var t = during_and_after[2];
    return cleavewhile(function(___){return notpred(p, ___);}, t)[1];
   }
   function collate(cmp, l){
    var prev = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, prev);
     var t = param[2], h = param[1];
     let h$0 = h;
     var
      match =
        cleavewhile
         (function(a){return 0 === caml_call2(cmp, h$0, a) ? 1 : 0;},
          [0, h, t]),
      y = match[2],
      x = match[1],
      prev$0 = [0, x, prev];
     prev = prev$0;
     param = y;
    }
   }
   function splitinto(n, l){
    var len$1 = caml_call1(length, l), a = 0, l$0 = l, len = len$1;
    for(;;){
     if(! l$0) return caml_call1(rev, a);
     if(len < n) return caml_call1(rev, [0, l$0, a]);
     var
      match = cleave(l$0, n),
      t = match[2],
      h = match[1],
      len$0 = len - n | 0,
      a$0 = [0, h, a];
     a = a$0;
     l$0 = t;
     len = len$0;
    }
   }
   function takeatmost(n, l){
    if(l){
     var t = l[2], h = l[1];
     if(0 < n) return [0, h, takeatmost(n - 1 | 0, t)];
    }
    return 0;
   }
   function splitinto_small(n$1, l$0){
    if(! l$0) return 0;
    var first = takeatmost(n$1, l$0), n = n$1, l = l$0;
    for(;;){
     if(l){
      var t = l[2];
      if(0 < n){var n$0 = n - 1 | 0; n = n$0; l = t; continue;}
     }
     return [0, first, splitinto_small(n$1, l)];
    }
   }
   function splitat(points, l$0){
    var
     prev = 0,
     l = l$0,
     param = couple(function(a, b){return b - a | 0;}, [0, 0, points]);
    for(;;){
     if(! param)
      return l ? caml_call1(rev, [0, l, prev]) : caml_call1(rev, prev);
     var
      t = param[2],
      h = param[1],
      match = cleave(l, h),
      rest = match[2],
      this$0 = match[1],
      prev$0 = [0, this$0, prev];
     prev = prev$0;
     l = rest;
     param = t;
    }
   }
   function select(n, l){
    try{var _Y_ = caml_call1(hd, drop(l, n - 1 | 0)); return _Y_;}
    catch(_Z_){
     var _X_ = caml_wrap_exception(_Z_);
     if(_X_[1] !== Stdlib[6] && _X_[1] !== Stdlib[7])
      throw caml_maybe_attach_backtrace(_X_, 0);
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_select], 1);
    }
   }
   function replace_number(n$2, e, l$0){
    var prev = 0, n = n$2, param = l$0;
    for(;;){
     if(! param) return caml_call1(rev, prev);
     var ls = param[2], l = param[1];
     if(1 === n){
      var n$0 = n - 1 | 0, prev$0 = [0, e, prev];
      prev = prev$0;
      n = n$0;
      param = ls;
     }
     else{
      var n$1 = n - 1 | 0, prev$1 = [0, l, prev];
      prev = prev$1;
      n = n$1;
      param = ls;
     }
    }
   }
   function isnull(param){return param ? 0 : 1;}
   function notnull(param){return param ? 1 : 0;}
   function last(param){
    var param$0 = param;
    for(;;){
     if(! param$0)
      throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_last], 1);
     var x = param$0[1];
     if(! param$0[2]) return x;
     var xs = param$0[2];
     param$0 = xs;
    }
   }
   function all_but_last(l){
    if(l && l[2]) return caml_call1(rev, caml_call1(tl, caml_call1(rev, l)));
    return 0;
   }
   function extremes(param){
    if(! param)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Pdfutil_extremes], 1);
    var x = param[1];
    if(! param[2]) return [0, x, x];
    var xs = param[2];
    return [0, x, last(xs)];
   }
   function extremes_and_middle(param){
    if(param){
     var h = param[1];
     if(param[2]){
      var
       t = param[2],
       match = cleave(t, caml_call1(length, t) - 1 | 0),
       l = match[2],
       m = match[1];
      return [0, h, m, caml_call1(hd, l)];
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[6], cst_Pdfutil_extremes_and_middl], 1);
   }
   function set(r){r[1] = 1; return 0;}
   function clear(r){r[1] = 0; return 0;}
   function flip(r){r[1] = 1 - r[1]; return 0;}
   function symbol$3(r, n){r[1] = r[1] + n | 0; return 0;}
   function symbol$4(r, n){r[1] = r[1] - n | 0; return 0;}
   function symbol$5(r, n){r[1] = caml_div(r[1], n); return 0;}
   function symbol$6(r, n){r[1] = caml_mul(r[1], n); return 0;}
   function symbol$7(r, n){r[1] = r[1] + n; return 0;}
   function symbol$8(r, n){r[1] = r[1] - n; return 0;}
   function symbol$9(r, n){r[1] = r[1] / n; return 0;}
   function symbol$10(r, n){r[1] = r[1] * n; return 0;}
   function mkvector(_W_, param){
    var y1 = param[2], x1 = param[1], y0 = _W_[2], x0 = _W_[1];
    return [0, x1 - x0, y1 - y0];
   }
   function invert(param){
    var b = param[2], a = param[1];
    return [0, - a, - b];
   }
   function offset_point(_V_, param){
    var py = param[2], px = param[1], y = _V_[2], x = _V_[1];
    return [0, px + x, py + y];
   }
   function perpendicular(param){
    var b = param[2], a = param[1];
    return [0, - b, a];
   }
   function sqr(x){return x * x;}
   function veclength(param){
    var y = param[2], x = param[1];
    return Math.sqrt(x * x + y * y);
   }
   function scalevectolength(l, param){
    var b = param[2], a = param[1], currentlength = veclength([0, a, b]);
    if(currentlength === 0.) return [0, a, b];
    var factor = l / currentlength;
    return [0, a * factor, b * factor];
   }
   function mkunitvector(s, e){return scalevectolength(1., mkvector(s, e));}
   function between(_U_, param){
    var y = param[2], x = param[1], y$0 = _U_[2], x$0 = _U_[1];
    return [0, (x$0 + x) / 2., (y$0 + y) / 2.];
   }
   function distance_between(_T_, param){
    var
     py = param[2],
     px = param[1],
     py$0 = _T_[2],
     px$0 = _T_[1],
     x = py - py$0,
     x$0 = px$0 - px;
    return Math.sqrt(x$0 * x$0 + x * x);
   }
   function largest_pow2_divisible(n){
    var test = 1;
    for(;;){
     if(0 !== runtime.caml_mod(n, test)) return test / 2 | 0;
     var test$0 = test * 2 | 0;
     test = test$0;
    }
   }
   function pow2lt(target){
    var current = 1;
    for(;;){
     if(target < (current * 2 | 0)) return current;
     var current$0 = current * 2 | 0;
     current = current$0;
    }
   }
   function pow2gt(t){var lt = pow2lt(t); return lt === t ? t : lt * 2 | 0;}
   function log2of(t){
    function log2of_i(target, num){
     if(target < (num * 2 | 0)) return 0;
     var n = log2of_i(target, num * 2 | 0);
     return n + 1 | 0;
    }
    return log2of_i(t, 1);
   }
   function compare_i(a, b){return a < b ? -1 : b < a ? 1 : 0;}
   function rev_compare(a, b){return - caml_compare(a, b) | 0;}
   function ilist(s, e){
    if(e < s)
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Pdfutil_ilist], 1);
    var nums = [0, 0], s$0 = s;
    for(;;){
     if(s$0 === e){symbol(nums, e); return caml_call1(rev, nums[1]);}
     symbol(nums, s$0);
     var s$1 = s$0 + 1 | 0;
     s$0 = s$1;
    }
   }
   function ilist_null(s, e){return s === e ? 0 : ilist(s, e);}
   function ilist_fail_null(s, e){return e < s ? 0 : ilist_null(s, e);}
   function indx(l){return 0 === l ? 0 : ilist(1, caml_call1(length, l));}
   function indx0(l){
    return 0 === l ? 0 : ilist(0, caml_call1(length, l) - 1 | 0);
   }
   function indxn(n, l){
    return 0 === l ? 0 : ilist(n, (n + caml_call1(length, l) | 0) - 1 | 0);
   }
   function even(x){return 0 === (x % 2 | 0) ? 1 : 0;}
   function odd(_S_){return notpred(even, _S_);}
   function symbol$11(a, b){
    var a$0 = a || b;
    if(a$0) var b$0 = a ? b : a, _R_ = 1 - b$0; else var _R_ = a$0;
    return _R_;
   }
   function ident(x){return x;}
   function array_iter2(f, a, b){
    if(a.length - 1 !== b.length - 1)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Pdfutil_array_iter2], 1);
    if(0 === a.length - 1) return 0;
    var _O_ = a.length - 2 | 0, _N_ = 0;
    if(_O_ >= 0){
     var x = _N_;
     for(;;){
      var _P_ = caml_check_bound(b, x)[1 + x];
      caml_call2(f, caml_check_bound(a, x)[1 + x], _P_);
      var _Q_ = x + 1 | 0;
      if(_O_ === x) break;
      x = _Q_;
     }
    }
    return 0;
   }
   function array_map2(f, a, b){
    if(a.length - 1 === b.length - 1)
     return caml_call2
             (Stdlib_Array[1],
              a.length - 1,
              function(i){
               var _M_ = caml_check_bound(b, i)[1 + i];
               return caml_call2(f, caml_check_bound(a, i)[1 + i], _M_);
              });
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[6], cst_Pdfutil_array_map2], 1);
   }
   function some(param){return param ? 1 : 0;}
   function none(param){return param ? 0 : 1;}
   function unopt(param){
    if(! param) return caml_call1(Stdlib[2], cst_unopt);
    var x = param[1];
    return x;
   }
   function losenones(l){
    var prev = 0, param = l;
    for(;;){
     if(! param) return caml_call1(rev, prev);
     var match = param[1];
     if(match){
      var t = param[2], h = match[1], prev$0 = [0, h, prev];
      prev = prev$0;
      param = t;
     }
     else{var t$0 = param[2]; param = t$0;}
    }
   }
   function option_map(f, l){return losenones(map(f, l));}
   function option_map2(f, a, b){return losenones(map2(f, a, b));}
   function min(a, b){return a < b ? a : b;}
   function max(a, b){return b < a ? a : b;}
   function fmin(a, b){return a < b ? a : b;}
   function fmax(a, b){return b < a ? a : b;}
   function fabs(x){return Math.abs(x);}
   function box_union(_I_, param){
    var
     ymax1 = param[4],
     ymin1 = param[3],
     xmax1 = param[2],
     xmin1 = param[1],
     ymax0 = _I_[4],
     ymin0 = _I_[3],
     xmax0 = _I_[2],
     xmin0 = _I_[1],
     _J_ = max(ymax0, ymax1),
     _K_ = min(ymin0, ymin1),
     _L_ = max(xmax0, xmax1);
    return [0, min(xmin0, xmin1), _L_, _K_, _J_];
   }
   function box_union_float(_E_, param){
    var
     ymax1 = param[4],
     ymin1 = param[3],
     xmax1 = param[2],
     xmin1 = param[1],
     ymax0 = _E_[4],
     ymin0 = _E_[3],
     xmax0 = _E_[2],
     xmin0 = _E_[1],
     _F_ = fmax(ymax0, ymax1),
     _G_ = fmin(ymin0, ymin1),
     _H_ = fmax(xmax0, xmax1);
    return [0, fmin(xmin0, xmin1), _H_, _G_, _F_];
   }
   function box_overlap(ax0, ay0, ax1, ay1, bx0, by0, bx1, by1){
    if(bx1 >= ax0 && by1 >= ay0 && ax1 >= bx0 && ay1 >= by0){
     var _B_ = min(ay1, by1), _C_ = min(ax1, bx1), _D_ = max(ay0, by0);
     return [0, [0, max(ax0, bx0), _D_, _C_, _B_]];
    }
    return 0;
   }
   function box_overlap_float(ax0, ay0, ax1, ay1, bx0, by0, bx1, by1){
    if(! (bx1 < ax0) && ! (by1 < ay0) && ! (ax1 < bx0) && ! (ay1 < by0)){
     var _y_ = fmin(ay1, by1), _z_ = fmin(ax1, bx1), _A_ = fmax(ay0, by0);
     return [0, [0, fmax(ax0, bx0), _A_, _z_, _y_]];
    }
    return 0;
   }
   function applyn(f, n, arg){
    var n$0 = n, arg$0 = arg;
    for(;;){
     if(0 === n$0) return arg$0;
     var arg$1 = caml_call1(f, arg$0), n$1 = n$0 - 1 | 0;
     n$0 = n$1;
     arg$0 = arg$1;
    }
   }
   var
    _j_ = [0, [5, 3, 0, 0, [12, 32, 0]], "%li "],
    _k_ = [0, "pdfutil.ml", 1263, 6];
   function rad_of_deg(a){return a * 3.141592653589793 / 180.;}
   function deg_of_rad(a){return a * 180. / 3.141592653589793;}
   function always(param){return 1;}
   function never(param){return 0;}
   function null_hash(param){return caml_call2(Stdlib_Hashtbl[1], 0, 0);}
   function tryfind(table, k){
    try{var _w_ = [0, caml_call2(Stdlib_Hashtbl[6], table, k)]; return _w_;}
    catch(_x_){
     var _v_ = caml_wrap_exception(_x_);
     if(_v_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_v_, 0);
    }
   }
   function list_of_hashtbl(t){
    var contents = [0, 0];
    caml_call2
     (Stdlib_Hashtbl[12],
      function(k, v){return symbol(contents, [0, k, v]);},
      t);
    return contents[1];
   }
   function hashtable_of_dictionary(pairs){
    var
     _u_ = caml_call1(length, pairs) * 2 | 0,
     table = caml_call2(Stdlib_Hashtbl[1], 0, _u_);
    caml_call2
     (iter,
      function(param){
       var v = param[2], k = param[1];
       return caml_call3(Stdlib_Hashtbl[5], table, k, v);
      },
      pairs);
    return table;
   }
   function hashset_of_list(l){
    var
     _t_ = caml_call1(length, l) * 2 | 0,
     table = caml_call2(Stdlib_Hashtbl[1], 0, _t_);
    caml_call2
     (iter,
      function(k){return caml_call3(Stdlib_Hashtbl[5], table, k, 0);},
      l);
    return table;
   }
   function round(x){
    var c = Math.ceil(x), f = Math.floor(x);
    return c - x <= x - f ? c : f;
   }
   function iround(x){return round(x) | 0;}
   function safe_float(f){return runtime.caml_classify_float(f) ? 0. : f;}
   function tuple(x, y){return [0, x, y];}
   function mkunit(f, x){return function(param){return caml_call1(f, x);};}
   function swap(a, i, j){
    var t = caml_check_bound(a, i)[1 + i];
    a[1 + i] = caml_check_bound(a, j)[1 + j];
    a[1 + j] = t;
    return 0;
   }
   function print_floats(fs){
    caml_call2
     (iter,
      function(x){
       caml_call1(Stdlib[45], x);
       return caml_call1(Stdlib[42], cst);
      },
      fs);
    return caml_call1(Stdlib[47], 0);
   }
   function print_ints(is){
    caml_call2
     (iter,
      function(x){
       caml_call1(Stdlib[44], x);
       return caml_call1(Stdlib[42], cst$0);
      },
      is);
    return caml_call1(Stdlib[47], 0);
   }
   function print_int32s(is){
    caml_call2
     (iter, function(x){return caml_call2(Stdlib_Printf[2], _j_, x);}, is);
    return caml_call1(Stdlib[47], 0);
   }
   function leafnames_of_dir(d){
    var _s_ = runtime.caml_sys_read_directory(d);
    return caml_call1(Stdlib_Array[10], _s_);
   }
   function roman(n){
    if(1 > n) return cst$2;
    if(1000 <= n){
     var _p_ = roman(n % 1000 | 0), _q_ = implode(many(77, n / 1000 | 0));
     return caml_call2(Stdlib[28], _q_, _p_);
    }
    function roman_recurse(n, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return cst$1;
      var t = param$0[2], match = param$0[1], s = match[2], n$0 = match[1];
      if(n$0 <= n){
       var _r_ = roman_recurse(n - n$0 | 0, t);
       return caml_call2(Stdlib[28], s, _r_);
      }
      param$0 = t;
     }
    }
    if(0 < n && 1000 > n) return roman_recurse(n, roman_vals);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
   }
   function roman_lower(n){
    var _o_ = roman(n);
    return caml_call1(Stdlib_String[27], _o_);
   }
   function memoize(f){
    var result = [0, 0];
    return function(param){
     var match = result[1];
     if(match){var thing = match[1]; return thing;}
     result[1] = [0, caml_call1(f, 0)];
     return unopt(result[1]);};
   }
   function contents_of_file(filename){
    var ch = caml_call1(Stdlib[80], filename);
    try{
     var
      _n_ = caml_call1(Stdlib[92], ch),
      s = caml_call2(Stdlib[86], ch, _n_);
     caml_call1(Stdlib[93], ch);
     return s;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[93], ch);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function tt(param){return 0;}
   function starts_with(prefix, s){
    var
     len_s = caml_ml_string_length(s),
     len_pre = caml_ml_string_length(prefix),
     _m_ = len_pre <= len_s ? 1 : 0;
    if(! _m_) return _m_;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     var _l_ = caml_string_get(prefix, i);
     if(caml_string_get(s, i) !== _l_) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   var
    Pdfutil =
      [0,
       flprint,
       fleprint,
       print_floats,
       print_ints,
       print_int32s,
       firstchar,
       lastchar,
       explode,
       implode,
       string_of_char,
       string_replace_all,
       string_replace_all_lazy,
       starts_with,
       hd,
       tl,
       rev,
       iter,
       iter2,
       iter3,
       append,
       append,
       flatten,
       rev_map,
       map,
       map2,
       split,
       split3,
       split5,
       split6,
       split8,
       combine,
       combine3,
       fold_left,
       fold_right,
       length,
       sort,
       sum,
       fsum,
       cumulative_sum,
       lcount,
       losenones,
       option_map,
       option_map2,
       mem,
       position,
       position_1,
       rev_map3,
       map3,
       rev_map4,
       map4,
       rev_map5,
       map5,
       rev_map6,
       map6,
       take,
       take$0,
       drop,
       drop$0,
       takewhile,
       takewhile_reverse,
       dropwhile,
       cleave,
       cleavewhile,
       cleavewhile_unordered,
       isolate,
       interleave,
       interleave_lists,
       collate,
       map_lol,
       pairs,
       mem$0,
       setify,
       setify_preserving_order,
       setify_large,
       setminus,
       setminus_preserving_order,
       heads,
       tails,
       zipn,
       couple,
       couple_ext,
       couple_reduce,
       pair,
       pair_ext,
       pair_reduce,
       keep,
       lose,
       many,
       manyunique,
       splitinto,
       splitinto_small,
       splitat,
       select,
       replace_number,
       isnull,
       notnull,
       last,
       all_but_last,
       extremes,
       extremes_and_middle,
       ilist,
       ilist_null,
       ilist_fail_null,
       indx,
       indx0,
       indxn,
       drop_evens,
       really_drop_evens,
       drop_odds,
       tail_no_fail,
       symbol$2,
       replaceinlist,
       index,
       split_around,
       i32ofi,
       i32toi,
       i32tof,
       i32add,
       i32sub,
       i32div,
       i32mul,
       sr32,
       lsr32,
       lsl32,
       lor32,
       land32,
       lnot32,
       lxor32,
       i32succ,
       i32pred,
       i32max,
       i32min,
       i64ofi,
       i64toi,
       i64tof,
       i64add,
       i64sub,
       i64div,
       i64mul,
       sr64,
       lsr64,
       lsl64,
       lor64,
       land64,
       lnot64,
       lxor64,
       i64succ,
       i64pred,
       i64max,
       i64min,
       i32ofi64,
       i64ofi32,
       lookup,
       lookup_failnull,
       add,
       replace,
       remove,
       mergedict,
       set,
       clear,
       flip,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       symbol,
       symbol$0,
       mkvector,
       invert,
       offset_point,
       perpendicular,
       sqr,
       veclength,
       scalevectolength,
       mkunitvector,
       between,
       distance_between,
       round,
       iround,
       largest_pow2_divisible,
       pow2lt,
       pow2gt,
       log2of,
       pow,
       compare_i,
       min,
       max,
       fmin,
       fmax,
       fabs,
       even,
       odd,
       3.141592653589793,
       1.4142135623730951,
       rad_of_deg,
       deg_of_rad,
       sign_extend,
       isdigit,
       toint,
       safe_float,
       some,
       none,
       unopt,
       null_hash,
       tryfind,
       list_of_hashtbl,
       hashtable_of_dictionary,
       hashset_of_list,
       array_iter2,
       array_map2,
       swap,
       set_array,
       memoize,
       ident,
       applyn,
       symbol$1,
       mkunit,
       tuple,
       conspair,
       conspairopt,
       pairs_of_list,
       do_return,
       do_many,
       eq,
       neq,
       rev_compare,
       always,
       never,
       symbol$11,
       notpred,
       box_union,
       box_union_float,
       box_overlap,
       box_overlap_float,
       leafnames_of_dir,
       contents_of_file,
       roman,
       roman_lower,
       tt];
   runtime.caml_register_global(76, Pdfutil, "Pdfutil");
   return;
  }
  (globalThis));

//# 2080 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\n",
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Pdfutil = global_data.Pdfutil,
    Pdfe = global_data.Pdfe,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    _a_ = [0, [4, 3, 0, 0, [12, 32, 0]], "%i "];
   function raw_of_bytes(param){
    if(0 === param[0]){var b = param[1]; return b;}
    var
     b$0 = param[1],
     l =
       caml_call3
        (Stdlib_Bigarray[20][1],
         Stdlib_Bigarray[7],
         Stdlib_Bigarray[16],
         caml_ml_bytes_length(b$0)),
     _bh_ = caml_ml_bytes_length(b$0) - 1 | 0,
     _bg_ = 0;
    if(_bh_ >= 0){
     var x = _bg_;
     for(;;){
      caml_ba_set_1(l, x, caml_bytes_unsafe_get(b$0, x));
      var _bi_ = x + 1 | 0;
      if(_bh_ === x) break;
      x = _bi_;
     }
    }
    return l;
   }
   function bytes_of_raw(b){return [0, b];}
   function mkbytes(l){
    return l <= Stdlib_Sys[12]
            ? [1, caml_create_bytes(l)]
            : [0,
              caml_call3
               (Stdlib_Bigarray[20][1],
                Stdlib_Bigarray[7],
                Stdlib_Bigarray[16],
                l)];
   }
   function bytes_size(param){
    if(0 === param[0]){var b = param[1]; return runtime.caml_ba_dim_1(b);}
    var s = param[1];
    return caml_ml_bytes_length(s);
   }
   function bset(s, n, v){
    if(0 === s[0]){var s$0 = s[1]; return caml_ba_set_1(s$0, n, v);}
    var s$1 = s[1];
    return runtime.caml_bytes_set(s$1, n, v);
   }
   function bset_unsafe(s, n, v){
    if(0 === s[0]){var s$0 = s[1]; return caml_ba_set_1(s$0, n, v);}
    var s$1 = s[1];
    caml_bytes_unsafe_set(s$1, n, v);
    return 0;
   }
   function bget(s, n){
    if(0 === s[0]){var s$0 = s[1]; return caml_ba_get_1(s$0, n);}
    var s$1 = s[1];
    return runtime.caml_bytes_get(s$1, n);
   }
   function bget_unsafe(s, n){
    if(0 === s[0]){var s$0 = s[1]; return caml_ba_get_1(s$0, n);}
    var s$1 = s[1];
    return caml_bytes_unsafe_get(s$1, n);
   }
   function fillbytes(v, s){
    var _be_ = bytes_size(s) - 1 | 0, _bd_ = 0;
    if(_be_ >= 0){
     var x = _bd_;
     for(;;){
      bset_unsafe(s, x, v);
      var _bf_ = x + 1 | 0;
      if(_be_ === x) break;
      x = _bf_;
     }
    }
    return 0;
   }
   function print_bytes(s){
    var _a9_ = 0 < bytes_size(s) ? 1 : 0;
    if(_a9_){
     var _a$_ = bytes_size(s) - 1 | 0, _a__ = 0;
     if(_a$_ >= 0){
      var x = _a__;
      for(;;){
       var _bb_ = bget(s, x);
       caml_call2(Stdlib_Printf[2], _a_, _bb_);
       var _bc_ = x + 1 | 0;
       if(_a$_ === x) break;
       x = _bc_;
      }
     }
     var _ba_ = 0;
    }
    else
     var _ba_ = _a9_;
    return _ba_;
   }
   function bytes_of_string(s){
    var l = caml_ml_string_length(s), stream = mkbytes(l);
    if(0 < l){
     var _a7_ = l - 1 | 0, _a6_ = 0;
     if(_a7_ >= 0){
      var k = _a6_;
      for(;;){
       bset_unsafe(stream, k, caml_string_unsafe_get(s, k));
       var _a8_ = k + 1 | 0;
       if(_a7_ === k) break;
       k = _a8_;
      }
     }
    }
    return stream;
   }
   function bytes_of_caml_bytes(s){
    var l = caml_ml_bytes_length(s), stream = mkbytes(l);
    if(0 < l){
     var _a4_ = l - 1 | 0, _a3_ = 0;
     if(_a4_ >= 0){
      var k = _a3_;
      for(;;){
       bset_unsafe(stream, k, caml_bytes_unsafe_get(s, k));
       var _a5_ = k + 1 | 0;
       if(_a4_ === k) break;
       k = _a5_;
      }
     }
    }
    return stream;
   }
   function bytes_of_list(l){
    var length = caml_call1(Pdfutil[35], l);
    if(0 === length) return mkbytes(0);
    var s = mkbytes(length), l$0 = [0, l], _a1_ = length - 1 | 0, _a0_ = 0;
    if(_a1_ >= 0){
     var pos = _a0_;
     for(;;){
      bset_unsafe(s, pos, caml_call1(Pdfutil[14], l$0[1]));
      l$0[1] = caml_call1(Pdfutil[15], l$0[1]);
      var _a2_ = pos + 1 | 0;
      if(_a1_ === pos) break;
      pos = _a2_;
     }
    }
    return s;
   }
   function bytes_of_charlist(cs){
    var length = caml_call1(Pdfutil[35], cs);
    if(0 === length) return mkbytes(0);
    var s = mkbytes(length), cs$0 = [0, cs], _aY_ = length - 1 | 0, _aX_ = 0;
    if(_aY_ >= 0){
     var pos = _aX_;
     for(;;){
      bset_unsafe(s, pos, caml_call1(Pdfutil[14], cs$0[1]));
      cs$0[1] = caml_call1(Pdfutil[15], cs$0[1]);
      var _aZ_ = pos + 1 | 0;
      if(_aY_ === pos) break;
      pos = _aZ_;
     }
    }
    return s;
   }
   function bytes_of_arraylist(l){
    var
     _aS_ =
       caml_call2(Pdfutil[24], function(_aW_){return _aW_.length - 1;}, l),
     totalsize = caml_call1(Pdfutil[37], _aS_),
     output = mkbytes(totalsize),
     pos = [0, 0];
    caml_call2
     (Pdfutil[17],
      function(a){
       var _aU_ = a.length - 2 | 0, _aT_ = 0;
       if(_aU_ >= 0){
        var x = _aT_;
        for(;;){
         bset_unsafe(output, pos[1], a[1 + x]);
         pos[1]++;
         var _aV_ = x + 1 | 0;
         if(_aU_ === x) break;
         x = _aV_;
        }
       }
       return 0;
      },
      l);
    return output;
   }
   function string_of_bytes(s){
    var
     l = bytes_size(s),
     buf = caml_call1(Stdlib_Buffer[1], l),
     _aP_ = l - 1 | 0,
     _aO_ = 0;
    if(_aP_ >= 0){
     var x = _aO_;
     for(;;){
      var _aQ_ = bget_unsafe(s, x);
      caml_call2(Stdlib_Buffer[12], buf, _aQ_);
      var _aR_ = x + 1 | 0;
      if(_aP_ === x) break;
      x = _aR_;
     }
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function bytes_of_int_array(a){
    var s = mkbytes(a.length - 1), _aM_ = bytes_size(s) - 1 | 0, _aL_ = 0;
    if(_aM_ >= 0){
     var i = _aL_;
     for(;;){
      bset_unsafe(s, i, a[1 + i]);
      var _aN_ = i + 1 | 0;
      if(_aM_ === i) break;
      i = _aN_;
     }
    }
    return s;
   }
   function int_array_of_bytes(s){
    var
     a = runtime.caml_array_make(bytes_size(s), 0),
     _aJ_ = a.length - 2 | 0,
     _aI_ = 0;
    if(_aJ_ >= 0){
     var i = _aI_;
     for(;;){
      a[1 + i] = bget_unsafe(s, i);
      var _aK_ = i + 1 | 0;
      if(_aJ_ === i) break;
      i = _aK_;
     }
    }
    return a;
   }
   function copybytes(s){
    var l = bytes_size(s), s$0 = mkbytes(l);
    if(0 < l){
     var _aG_ = l - 1 | 0, _aF_ = 0;
     if(_aG_ >= 0){
      var k = _aF_;
      for(;;){
       bset_unsafe(s$0, k, bget_unsafe(s, k));
       var _aH_ = k + 1 | 0;
       if(_aG_ === k) break;
       k = _aH_;
      }
     }
    }
    return s$0;
   }
   function int_array_of_string(s){
    return caml_call2
            (Stdlib_Array[1],
             caml_ml_string_length(s),
             function(i){return caml_string_unsafe_get(s, i);});
   }
   function string_of_int_arrays(arrays){
    var
     _aC_ =
       caml_call2
        (Pdfutil[24], function(_aE_){return _aE_.length - 1;}, arrays),
     len = caml_call1(Pdfutil[37], _aC_),
     buf = caml_call1(Stdlib_Buffer[1], len),
     _aD_ =
       caml_call1
        (Stdlib_Array[12],
         function(v){return caml_call2(Stdlib_Buffer[12], buf, v);});
    caml_call2(Pdfutil[17], _aD_, arrays);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function string_of_int_array(a){return string_of_int_arrays([0, a, 0]);}
   function bytes_selfmap(f, s){
    var l = bytes_size(s), _aA_ = l - 1 | 0, _az_ = 0;
    if(_aA_ >= 0){
     var k = _az_;
     for(;;){
      bset_unsafe(s, k, caml_call1(f, bget_unsafe(s, k)));
      var _aB_ = k + 1 | 0;
      if(_aA_ === k) break;
      k = _aB_;
     }
    }
    return 0;
   }
   function charlist_of_bytes(s){
    var l = [0, 0], _aw_ = bytes_size(s) - 1 | 0;
    if(_aw_ >= 0){
     var x = _aw_;
     for(;;){
      var _ax_ = bget_unsafe(s, x);
      caml_call2(Pdfutil[170], l, _ax_);
      var _ay_ = x - 1 | 0;
      if(0 === x) break;
      x = _ay_;
     }
    }
    return l[1];
   }
   var
    no_more = -1,
    cst_channel = "channel",
    cst_bytes = "bytes",
    cst_string_input_char_attempt_ =
      "string input_char: attempt to be before beginning",
    cst_string_input_byte_attempt_ =
      "string input_byte: attempt to be before beginning",
    cst_string_seek_in_seek_before = "string seek_in: seek before beginning",
    cst_string = "string",
    cst_channel_length_inconsisten = "channel length inconsistent";
   function input_of_channel(opt, ch){
    var source = opt ? opt[1] : cst_channel, offset = [0, 0];
    return [0,
            function(param){
             var _av_ = offset[1];
             return caml_call1(Stdlib[91], ch) - _av_ | 0;
            },
            function(x){return caml_call2(Stdlib[90], ch, x + offset[1] | 0);},
            function(param){
             try{var _at_ = [0, caml_call1(Stdlib[82], ch)]; return _at_;}
             catch(_au_){
              var _as_ = caml_wrap_exception(_au_);
              if(_as_ === Stdlib[12]) return 0;
              throw caml_maybe_attach_backtrace(_as_, 0);
             }
            },
            function(param){
             try{var _aq_ = caml_call1(Stdlib[87], ch); return _aq_;}
             catch(_ar_){
              var _ap_ = caml_wrap_exception(_ar_);
              if(_ap_ === Stdlib[12]) return no_more;
              throw caml_maybe_attach_backtrace(_ap_, 0);
             }
            },
            caml_call1(Stdlib[92], ch),
            function(o){
             var
              _an_ = 0 === offset[1] ? 1 : 0,
              _ao_ = _an_ ? (offset[1] = o, 0) : _an_;
             return _ao_;
            },
            [0, ch],
            source];
   }
   function input_of_bytes(opt, b){
    var
     source = opt ? opt[1] : cst_bytes,
     s = [0, 0, [0, b]],
     offset = [0, 0],
     ssize = bytes_size(s[2][1]);
    function input_int(param){
     var r = (ssize - 1 | 0) < s[1] ? no_more : bget_unsafe(s[2][1], s[1]);
     s[1] = s[1] + 1 | 0;
     return r;
    }
    return [0,
            function(param){return s[1] - offset[1] | 0;},
            function(p){s[1] = p + offset[1] | 0; return 0;},
            function(param){
             var x = input_int(0);
             return x === -1 ? 0 : [0, x];
            },
            input_int,
            ssize,
            function(o){
             var
              _al_ = 0 === offset[1] ? 1 : 0,
              _am_ = _al_ ? (offset[1] = o, 0) : _al_;
             return _am_;
            },
            0,
            source];
   }
   function input_of_string(opt, s){
    var source = opt ? opt[1] : cst_string, pos = [0, 0];
    return [0,
            function(param){return pos[1];},
            function(p){
             if(p < 0) caml_call1(Stdlib[2], cst_string_seek_in_seek_before);
             pos[1] = p;
             return 0;
            },
            function(param){
             return 0 <= pos[1]
                     ? (caml_ml_string_length
                        (s)
                       - 1
                       | 0)
                       < pos[1]
                       ? (pos[1] = pos[1] + 1 | 0, 0)
                       : (pos
                          [1]
                         = pos[1] + 1 | 0,
                         [0, caml_string_unsafe_get(s, pos[1] - 1 | 0)])
                     : caml_call1(Stdlib[2], cst_string_input_char_attempt_);
            },
            function(param){
             return 0 <= pos[1]
                     ? (caml_ml_string_length
                        (s)
                       - 1
                       | 0)
                       < pos[1]
                       ? (pos[1] = pos[1] + 1 | 0, no_more)
                       : (pos
                          [1]
                         = pos[1] + 1 | 0,
                         caml_string_unsafe_get(s, pos[1] - 1 | 0))
                     : caml_call1(Stdlib[2], cst_string_input_byte_attempt_);
            },
            caml_ml_string_length(s),
            function(param){return 0;},
            0,
            source];
   }
   function output_of_channel(ch){
    var _aj_ = caml_call1(Stdlib[66], ch), _ak_ = caml_call1(Stdlib[70], ch);
    return [0,
            function(param){return caml_call1(Stdlib[74], ch);},
            caml_call1(Stdlib[73], ch),
            function(c){return caml_call2(Stdlib[70], ch, c);},
            _ak_,
            _aj_,
            [0, ch],
            function(param){return caml_call1(Stdlib[75], ch);}];
   }
   function input_output_of_bytes(l){
    var data = [0, mkbytes(l)], s = [0, 0, data], highest_written = [0, 0];
    function output_int(i){
     var _af_ = bytes_size(s[2][1]) - 1 | 0;
     if(_af_ >= s[1]){
      highest_written[1] = caml_call2(Pdfutil[191], highest_written[1], s[1]);
      bset_unsafe(s[2][1], s[1], i);
      s[1] = s[1] + 1 | 0;
      return 0;
     }
     var
      newstream = mkbytes(caml_call2(Pdfutil[191], 1, s[1] * 2 | 0)),
      _ah_ = bytes_size(s[2][1]) - 1 | 0,
      _ag_ = 0;
     if(_ah_ >= 0){
      var x = _ag_;
      for(;;){
       bset_unsafe(newstream, x, bget_unsafe(s[2][1], x));
       var _ai_ = x + 1 | 0;
       if(_ah_ === x) break;
       x = _ai_;
      }
     }
     bset_unsafe(newstream, s[1], i);
     highest_written[1] = caml_call2(Pdfutil[191], highest_written[1], s[1]);
     s[1] = s[1] + 1 | 0;
     s[2][1] = newstream;
     return 0;
    }
    return [0,
            [0,
             function(param){return s[1];},
             function(p){s[1] = p; return 0;},
             function(c){return output_int(c);},
             output_int,
             caml_call1(Stdlib_String[30], function(c){return output_int(c);}),
             0,
             function(param){return highest_written[1] + 1 | 0;}],
            data];
   }
   function extract_bytes_from_input_outpu(o, data){
    var
     len = caml_call1(o[1], 0),
     b = mkbytes(len),
     _ad_ = len - 1 | 0,
     _ac_ = 0;
    if(_ad_ >= 0){
     var x = _ac_;
     for(;;){
      bset_unsafe(b, x, bget_unsafe(data[1], x));
      var _ae_ = x + 1 | 0;
      if(_ad_ === x) break;
      x = _ae_;
     }
    }
    return b;
   }
   function nudge(i){caml_call1(i[4], 0); return 0;}
   function read_char_back(i){
    var pos = caml_call1(i[1], 0);
    caml_call1(i[2], pos - 1 | 0);
    var chr = caml_call1(i[3], 0);
    caml_call1(i[2], pos - 1 | 0);
    return chr;
   }
   function rewind(i){
    var _ab_ = caml_call1(i[1], 0) - 1 | 0;
    return caml_call1(i[2], _ab_);
   }
   function peek_char(i){var r = caml_call1(i[3], 0); rewind(i); return r;}
   function peek_byte(i){var r = caml_call1(i[4], 0); rewind(i); return r;}
   function bytes_of_input_channel(ch){
    var
     fi = input_of_channel(0, ch),
     size = fi[5],
     s = mkbytes(size),
     _$_ = 1;
    if(size >= 1){
     var x = _$_;
     for(;;){
      var b = caml_call1(fi[4], 0);
      if(b === -1)
       caml_call1(Stdlib[2], cst_channel_length_inconsisten);
      else
       bset_unsafe(s, x - 1 | 0, b);
      var _aa_ = x + 1 | 0;
      if(size === x) break;
      x = _aa_;
     }
    }
    return s;
   }
   function bytes_to_output_channel(ch, data){
    if(0 !== data[0]){
     var caml_bytes = data[1];
     return caml_call2(Stdlib[66], ch, caml_bytes);
    }
    var _Y_ = bytes_size(data), _X_ = 1;
    if(_Y_ >= 1){
     var x = _X_;
     for(;;){
      var _Z_ = bget_unsafe(data, x - 1 | 0);
      caml_call2(Stdlib[70], ch, _Z_);
      var ___ = x + 1 | 0;
      if(_Y_ === x) break;
      x = ___;
     }
    }
    return 0;
   }
   var
    b = caml_call1(Stdlib_Buffer[1], 256),
    cst_setinit = "setinit",
    cst_setinit_string = "setinit_string",
    cst_getinit = "getinit",
    cst_Pdfio_getval_32_n_0 = "Pdfio.getval_32 - n < 0",
    cst_Pdfio_getval_31_n_0 = "Pdfio.getval_31 - n < 0",
    _b_ = [0, "pdfio.ml", 622, 2],
    cst_putval = "putval",
    _c_ = [0, [1, [11, " = ", [4, 3, 0, 0, [12, 10, 0]]]], "%C = %i\n"];
   function read_line(i){
    caml_call1(Stdlib_Buffer[8], b);
    var x = caml_call1(i[4], 0);
    if(x === -1) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
    rewind(i);
    for(;;){
     var x$0 = caml_call1(i[4], 0);
     if(x$0 === -1) return caml_call1(Stdlib_Buffer[2], b);
     if(10 === x$0){
      caml_call2(Stdlib_Buffer[12], b, 10);
      return caml_call1(Stdlib_Buffer[2], b);
     }
     caml_call2(Stdlib_Buffer[12], b, x$0);
    }
   }
   function read_lines(i){
    var ls = [0, 0];
    try{for(;;){var _V_ = ls[1]; ls[1] = [0, read_line(i), _V_];}}
    catch(_W_){
     var _U_ = caml_wrap_exception(_W_);
     if(_U_ === Stdlib[12]) return caml_call1(Pdfutil[16], ls[1]);
     throw caml_maybe_attach_backtrace(_U_, 0);
    }
   }
   function setinit(i, s, o, l){
    if(0 === l) return 0;
    var max = bytes_size(s) - 1 | 0, last = (o + 1 | 0) - 1 | 0;
    if(max >= o && 0 <= o && 0 <= last && max >= last){
     if(0 === s[0]){
      var s$0 = s[1], _Q_ = (o + l | 0) - 1 | 0;
      if(_Q_ >= o){
       var x = o;
       for(;;){
        caml_ba_set_1(s$0, x, caml_call1(i[4], 0));
        var _R_ = x + 1 | 0;
        if(_Q_ === x) break;
        x = _R_;
       }
      }
      return 0;
     }
     var s$1 = s[1], match = i[7];
     if(match){
      var ch = match[1];
      return caml_call4(Stdlib[85], ch, s$1, o, l);
     }
     var _S_ = (o + l | 0) - 1 | 0;
     if(_S_ >= o){
      var x$0 = o;
      for(;;){
       caml_bytes_unsafe_set(s$1, x$0, caml_call1(i[4], 0));
       var _T_ = x$0 + 1 | 0;
       if(_S_ === x$0) break;
       x$0 = _T_;
      }
     }
     return 0;
    }
    throw caml_maybe_attach_backtrace([0, Stdlib[7], cst_setinit], 1);
   }
   function setinit_string(i, s, o, l){
    if(0 === l) return 0;
    var max = caml_ml_bytes_length(s) - 1 | 0, last = (o + 1 | 0) - 1 | 0;
    if(max >= o && 0 <= o && 0 <= last && max >= last){
     var match = i[7];
     if(match){var ch = match[1]; return caml_call4(Stdlib[85], ch, s, o, l);}
     var _O_ = (o + l | 0) - 1 | 0;
     if(_O_ >= o){
      var x = o;
      for(;;){
       caml_bytes_unsafe_set(s, x, caml_call1(i[4], 0));
       var _P_ = x + 1 | 0;
       if(_O_ === x) break;
       x = _P_;
      }
     }
     return 0;
    }
    throw caml_maybe_attach_backtrace([0, Stdlib[7], cst_setinit_string], 1);
   }
   function bytes_of_input(i, o, l){
    caml_call1(i[2], o);
    var s = caml_create_bytes(l);
    setinit_string(i, s, 0, l);
    return l <= Stdlib_Sys[12] ? [1, s] : bytes_of_caml_bytes(s);
   }
   function string_of_input(i){
    return string_of_bytes(bytes_of_input(i, 0, i[5]));
   }
   function getinit(i, s, o, l){
    if(0 === l) return 0;
    var max = bytes_size(s) - 1 | 0, last = (o + 1 | 0) - 1 | 0;
    if(max >= o && 0 <= o && 0 <= last && max >= last){
     if(0 === s[0]){
      var s$0 = s[1], _K_ = (o + l | 0) - 1 | 0;
      if(_K_ >= o){
       var x = o;
       for(;;){
        var _J_ = caml_ba_get_1(s$0, x);
        caml_call1(i[4], _J_);
        var _L_ = x + 1 | 0;
        if(_K_ === x) break;
        x = _L_;
       }
      }
      return 0;
     }
     var s$1 = s[1], match = i[6];
     if(match){
      var ch = match[1];
      return caml_call4(Stdlib[68], ch, s$1, o, l);
     }
     var _M_ = (o + l | 0) - 1 | 0;
     if(_M_ >= o){
      var x$0 = o;
      for(;;){
       caml_call1(i[4], caml_bytes_unsafe_get(s$1, x$0));
       var _N_ = x$0 + 1 | 0;
       if(_M_ === x$0) break;
       x$0 = _N_;
      }
     }
     return 0;
    }
    throw caml_maybe_attach_backtrace([0, Stdlib[7], cst_getinit], 1);
   }
   function bitstream_pos(b){
    var _G_ = b[4], _H_ = b[3], _I_ = b[2];
    return [0, caml_call1(b[1][1], 0), _I_, _H_, _G_];
   }
   function bitstream_seek(b, param){
    var
     bitsread = param[4],
     bit = param[3],
     currbyte = param[2],
     pos = param[1];
    caml_call1(b[1][2], pos);
    b[2] = currbyte;
    b[3] = bit;
    b[4] = bitsread;
    return 0;
   }
   function bitbytes_of_input(i){return [0, i, 0, 0, 0];}
   function getbit(b){
    for(;;){
     if(0 !== b[3]){
      var r = 0 < (b[2] & b[3]) ? 1 : 0;
      b[4] = b[4] + 1 | 0;
      b[3] = b[3] / 2 | 0;
      return r;
     }
     var x = caml_call1(b[1][4], 0);
     if(x === -1) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
     b[2] = x;
     b[3] = 128;
    }
   }
   function getbitint(i){return getbit(i) ? 1 : 0;}
   function align(b){
    if(0 < b[3]) b[4] = ((b[4] / 8 | 0) + 1 | 0) * 8 | 0;
    b[3] = 0;
    return 0;
   }
   function getval_32(b, n){
    if(0 > n)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Pdfio_getval_32_n_0], 1);
    if(0 === n) return 0;
    var r = [0, Stdlib_Int32[1]], _C_ = n - 1 | 0;
    if(_C_ >= 0){
     var x = _C_;
     for(;;){
      var _D_ = getbitint(b), _E_ = caml_call1(Pdfutil[115], _D_) << x;
      r[1] = r[1] | _E_;
      var _F_ = x - 1 | 0;
      if(0 === x) break;
      x = _F_;
     }
    }
    return r[1];
   }
   function getval_31(b, n){
    if(0 > n)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Pdfio_getval_31_n_0], 1);
    if(0 === n) return 0;
    var r = [0, 0], _z_ = n - 1 | 0;
    if(_z_ >= 0){
     var x = _z_;
     for(;;){
      var _A_ = getbitint(b) << x;
      r[1] = r[1] | _A_;
      var _B_ = x - 1 | 0;
      if(0 === x) break;
      x = _B_;
     }
    }
    return r[1];
   }
   function make_write_bitstream(param){return [0, 0, 0, 0];}
   function putbit(b, bit){
    if(0 !== bit && 1 !== bit)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    return 7 === b[2]
            ? (b[3] = [0, b[1] | bit, b[3]], b[2] = 0, b[1] = 0, 0)
            : (b[2] = b[2] + 1 | 0, b[1] = b[1] | bit << (8 - b[2] | 0), 0);
   }
   function putval(b, bs, n){
    var bs$0 = bs;
    for(;;){
     var _w_ = bs$0 < 0 ? 1 : 0, _x_ = _w_ || (32 < bs$0 ? 1 : 0);
     if(_x_) throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_putval], 1);
     if(0 === bs$0) return 0;
     var
      _y_ = caml_call1(Pdfutil[115], 1 << (bs$0 - 1 | 0)),
      bit =
        runtime.caml_greaterthan(caml_call2(Pdfutil[126], n, _y_), 0) ? 1 : 0;
     putbit(b, bit);
     var bs$1 = bs$0 - 1 | 0;
     bs$0 = bs$1;
    }
   }
   function align_write(b){
    var _r_ = 0 < b[2] ? 1 : 0;
    if(_r_){
     var _t_ = 8 - b[2] | 0, _s_ = 1;
     if(_t_ >= 1){
      var x = _s_;
      for(;;){
       putbit(b, 0);
       var _v_ = x + 1 | 0;
       if(_t_ === x) break;
       x = _v_;
      }
     }
     var _u_ = 0;
    }
    else
     var _u_ = _r_;
    return _u_;
   }
   function bytes_of_write_bitstream(b){
    align_write(b);
    return bytes_of_list(caml_call1(Pdfutil[16], b[3]));
   }
   function bits_of_write_bitstream(b){
    var
     _n_ = b[2],
     numbits = (caml_call1(Pdfutil[35], b[3]) * 8 | 0) + _n_ | 0,
     bytes = bytes_of_write_bitstream(b),
     bits = [0, 0],
     bitstream = bitbytes_of_input(input_of_bytes(0, bytes)),
     _o_ = 1;
    if(numbits >= 1){
     var x = _o_;
     for(;;){
      var _p_ = getbit(bitstream);
      caml_call2(Pdfutil[170], bits, _p_);
      var _q_ = x + 1 | 0;
      if(numbits === x) break;
      x = _q_;
     }
    }
    return caml_call1(Pdfutil[16], bits[1]);
   }
   function write_bitstream_append_aligned(a, b$0){
    var b = make_write_bitstream(0);
    b[1] = a[1];
    b[2] = a[2];
    b[3] = a[3];
    align_write(b);
    var
     ss = [0, b, [0, b$0, 0]],
     c = make_write_bitstream(0),
     _k_ = caml_call2(Pdfutil[24], bits_of_write_bitstream, ss),
     _l_ = caml_call1(Pdfutil[22], _k_);
    caml_call2
     (Pdfutil[17],
      function(bit){var _m_ = bit ? 1 : 0; return putbit(c, _m_);},
      _l_);
    return c;
   }
   function debug_next_n_chars(n, i){
    var _f_ = 1;
    if(n >= 1){
     var x$0 = _f_;
     for(;;){
      try{
       var
        _d_ = caml_call1(i[3], 0),
        a = caml_call1(Pdfutil[207], _d_),
        _e_ = caml_call3(Stdlib_Printf[4], _c_, a, a);
       caml_call1(Pdfe[3], _e_);
      }
      catch(_j_){}
      var _i_ = x$0 + 1 | 0;
      if(n === x$0) break;
      x$0 = _i_;
     }
    }
    caml_call1(Pdfe[3], cst);
    var _g_ = 1;
    if(n >= 1){
     var x = _g_;
     for(;;){rewind(i); var _h_ = x + 1 | 0; if(n === x) break; x = _h_;}
    }
    return 0;
   }
   var
    Pdfio =
      [0,
       no_more,
       input_of_channel,
       input_of_bytes,
       input_of_string,
       output_of_channel,
       input_output_of_bytes,
       extract_bytes_from_input_outpu,
       nudge,
       rewind,
       peek_char,
       peek_byte,
       read_char_back,
       read_line,
       read_lines,
       raw_of_bytes,
       bytes_of_raw,
       mkbytes,
       bytes_size,
       fillbytes,
       print_bytes,
       bget,
       bget_unsafe,
       getinit,
       bset,
       bset_unsafe,
       setinit,
       setinit_string,
       bytes_of_input,
       string_of_input,
       bytes_of_string,
       bytes_of_caml_bytes,
       bytes_of_list,
       bytes_of_charlist,
       bytes_of_arraylist,
       bytes_of_int_array,
       int_array_of_bytes,
       int_array_of_string,
       string_of_int_arrays,
       string_of_int_array,
       bytes_selfmap,
       string_of_bytes,
       charlist_of_bytes,
       copybytes,
       bytes_to_output_channel,
       bytes_of_input_channel,
       bitbytes_of_input,
       bitstream_pos,
       bitstream_seek,
       getbit,
       getbitint,
       align,
       getval_32,
       getval_31,
       make_write_bitstream,
       putbit,
       putval,
       align_write,
       write_bitstream_append_aligned,
       bytes_of_write_bitstream,
       debug_next_n_chars];
   runtime.caml_register_global(32, Pdfio, "Pdfio");
   return;
  }
  (globalThis));

//# 3049 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_proportionality_constant = "), proportionality constant ",
    cst$0 = ", ",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [8, [0, 0, 0], 0, 0, 0],
    cst = "",
    i_matrix = [254, 1., 0., 0., 1., 0., 0.],
    Pdfutil = global_data.Pdfutil,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    _a_ =
      [0,
       [11,
        "Scale about (",
        [8,
         [0, 0, 0],
         0,
         0,
         [11,
          cst$0,
          [8,
           [0, 0, 0],
           0,
           0,
           [11,
            ") by ",
            [8,
             [0, 0, 0],
             0,
             0,
             [11, " in x and ", [8, [0, 0, 0], 0, 0, [11, " in y\n", 0]]]]]]]]],
       "Scale about (%f, %f) by %f in x and %f in y\n"],
    _b_ =
      [0,
       [11,
        "Rotate by ",
        [8,
         [0, 0, 0],
         0,
         0,
         [11,
          " about (",
          [8,
           [0, 0, 0],
           0,
           0,
           [11, cst$0, [8, [0, 0, 0], 0, 0, [11, ")\n", 0]]]]]]],
       "Rotate by %f about (%f, %f)\n"],
    _c_ =
      [0,
       [11,
        "Translate by ",
        [8, [0, 0, 0], 0, 0, [11, cst$0, [8, [0, 0, 0], 0, 0, [12, 10, 0]]]]],
       "Translate by %f, %f\n"],
    _d_ =
      [0,
       [11,
        "Shear in X about (",
        [8,
         [0, 0, 0],
         0,
         0,
         [11,
          cst$0,
          [8,
           [0, 0, 0],
           0,
           0,
           [11,
            cst_proportionality_constant,
            [8, [0, 0, 0], 0, 0, [12, 10, 0]]]]]]],
       "Shear in X about (%f, %f), proportionality constant %f\n"],
    _e_ =
      [0,
       [11,
        "Shear in Y about (",
        [8,
         [0, 0, 0],
         0,
         0,
         [11,
          cst$0,
          [8,
           [0, 0, 0],
           0,
           0,
           [11,
            cst_proportionality_constant,
            [8, [0, 0, 0], 0, 0, [12, 10, 0]]]]]]],
       "Shear in Y about (%f, %f), proportionality constant %f\n"];
   function string_of_trop(param){
    switch(param[0]){
      case 0:
       var
        sy = param[3],
        sx = param[2],
        match = param[1],
        y = match[2],
        x = match[1];
       return caml_call5(Stdlib_Printf[4], _a_, x, y, sx, sy);
      case 1:
       var
        a = param[2],
        match$0 = param[1],
        y$0 = match$0[2],
        x$0 = match$0[1];
       return caml_call4(Stdlib_Printf[4], _b_, a, x$0, y$0);
      case 2:
       var dy = param[2], dx = param[1];
       return caml_call3(Stdlib_Printf[4], _c_, dx, dy);
      case 3:
       var
        sx$0 = param[2],
        match$1 = param[1],
        y$1 = match$1[2],
        x$1 = match$1[1];
       return caml_call4(Stdlib_Printf[4], _d_, x$1, y$1, sx$0);
      default:
       var
        sy$0 = param[2],
        match$2 = param[1],
        y$2 = match$2[2],
        x$2 = match$2[1];
       return caml_call4(Stdlib_Printf[4], _e_, x$2, y$2, sy$0);
    }
   }
   function string_of_transform(tr){
    var _q_ = caml_call2(Pdfutil[23], string_of_trop, tr);
    return caml_call3(Pdfutil[33], Stdlib[28], cst, _q_);
   }
   function compose(t, param){
    if(! param) return [0, t, 0];
    var r = param[2], h = param[1];
    switch(h[0]){
      case 0:
       if(0 === t[0]){
        var
         sy = t[3],
         sx = t[2],
         p = t[1],
         sy$0 = h[3],
         sx$0 = h[2],
         p$0 = h[1];
        if(caml_equal(p$0, p)) return [0, [0, p$0, sx$0 * sx, sy$0 * sy], r];
       }
       break;
      case 1:
       if(1 === t[0]){
        var a = t[2], p$1 = t[1], a$0 = h[2], p$2 = h[1];
        if(caml_equal(p$2, p$1)) return [0, [1, p$2, a$0 + a], r];
       }
       break;
      case 2:
       if(2 === t[0]){
        var dy = t[2], dx = t[1], dy$0 = h[2], dx$0 = h[1];
        return [0, [2, dx$0 + dx, dy$0 + dy], r];
       }
       break;
      case 3:
       if(3 === t[0]){
        var a$1 = t[2], p$3 = t[1], a$2 = h[2], p$4 = h[1];
        if(caml_equal(p$4, p$3)) return [0, [3, p$4, a$2 + a$1], r];
       }
       break;
      default:
       if(4 === t[0]){
        var a$3 = t[2], p$5 = t[1], a$4 = h[2], p$6 = h[1];
        if(caml_equal(p$6, p$5)) return [0, [4, p$6, a$4 + a$3], r];
       }
    }
    return [0, t, [0, h, r]];
   }
   var
    append = Pdfutil[21],
    _f_ =
      [0,
       [8,
        [0, 0, 0],
        0,
        0,
        [11,
         cst$0,
         [8,
          [0, 0, 0],
          0,
          0,
          [11,
           cst$0,
           [8,
            [0, 0, 0],
            0,
            0,
            [11,
             cst$0,
             [8,
              [0, 0, 0],
              0,
              0,
              [11, cst$0, [8, [0, 0, 0], 0, 0, [11, cst$0, partial]]]]]]]]]],
       "%f, %f, %f, %f, %f, %f"];
   function matrix_compose(m$0, m){
    return [254,
            m$0[1] * m[1] + m$0[3] * m[2],
            m$0[2] * m[1] + m$0[4] * m[2],
            m$0[1] * m[3] + m$0[3] * m[4],
            m$0[2] * m[3] + m$0[4] * m[4],
            m$0[1] * m[5] + m$0[3] * m[6] + m$0[5],
            m$0[2] * m[5] + m$0[4] * m[6] + m$0[6]];
   }
   function string_of_matrix(m){
    return caml_call7
            (Stdlib_Printf[4], _f_, m[1], m[2], m[3], m[4], m[5], m[6]);
   }
   var
    NonInvertable =
      [248, "Pdftransform.NonInvertable", runtime.caml_fresh_oo_id(0)],
    _g_ = [0, 0., 0.];
   function matrix_invert(m){
    var divisor = m[1] * m[4] - m[2] * m[3];
    if(divisor === 0.) throw caml_maybe_attach_backtrace(NonInvertable, 1);
    var d = 1. / divisor;
    if(d !== 0.)
     return [254,
             d * m[4],
             d * - m[2],
             d * - m[3],
             d * m[1],
             d * (m[3] * m[6] - m[4] * m[5]),
             d * (m[2] * m[5] - m[1] * m[6])];
    throw caml_maybe_attach_backtrace(NonInvertable, 1);
   }
   function mktranslate(tx, ty){
    return [254, i_matrix[1], i_matrix[2], i_matrix[3], i_matrix[4], tx, ty];
   }
   function mkscale(param, sx, sy){
    var
     oy = param[2],
     ox = param[1],
     translate = mktranslate(- ox, - oy),
     translateback = mktranslate(ox, oy);
    return matrix_compose
            (translateback,
             matrix_compose
              ([254,
                sx,
                i_matrix[2],
                i_matrix[3],
                sy,
                i_matrix[5],
                i_matrix[6]],
               translate));
   }
   function mkrotate(param, angle){
    var
     oy = param[2],
     ox = param[1],
     translate = mktranslate(- ox, - oy),
     translateback = mktranslate(ox, oy);
    return matrix_compose
            (translateback,
             matrix_compose
              ([254,
                Math.cos(angle),
                Math.sin(angle),
                - Math.sin(angle),
                Math.cos(angle),
                i_matrix[5],
                i_matrix[6]],
               translate));
   }
   function mkshearx(param, factor){
    var
     oy = param[2],
     ox = param[1],
     translate = mktranslate(- ox, - oy),
     translateback = mktranslate(ox, oy);
    return matrix_compose
            (translateback,
             matrix_compose
              ([254,
                i_matrix[1],
                i_matrix[2],
                factor,
                i_matrix[4],
                i_matrix[5],
                i_matrix[6]],
               translate));
   }
   function mksheary(param, factor){
    var
     oy = param[2],
     ox = param[1],
     translate = mktranslate(- ox, - oy),
     translateback = mktranslate(ox, oy);
    return matrix_compose
            (translateback,
             matrix_compose
              ([254,
                i_matrix[1],
                factor,
                i_matrix[3],
                i_matrix[4],
                i_matrix[5],
                i_matrix[6]],
               translate));
   }
   function matrix_of_op(param){
    switch(param[0]){
      case 0:
       var sy = param[3], sx = param[2], c = param[1];
       return mkscale(c, sx, sy);
      case 1:
       var a = param[2], c$0 = param[1]; return mkrotate(c$0, a);
      case 2:
       var dy = param[2], dx = param[1]; return mktranslate(dx, dy);
      case 3:
       var a$0 = param[2], c$1 = param[1]; return mkshearx(c$1, a$0);
      default: var a$1 = param[2], c$2 = param[1]; return mksheary(c$2, a$1);
    }
   }
   function transform_matrix(m, param){
    var y = param[2], x = param[1];
    return [0, x * m[1] + y * m[3] + m[5], x * m[2] + y * m[4] + m[6]];
   }
   function matrix_of_transform(tr){
    var matrices = caml_call2(Pdfutil[24], matrix_of_op, tr);
    return caml_call3(Pdfutil[33], matrix_compose, i_matrix, matrices);
   }
   function transform(ts, param){
    var
     y = param[2],
     x = param[1],
     x$0 = [0, x],
     y$0 = [0, y],
     _p_ = caml_call1(Pdfutil[16], ts);
    caml_call2
     (Pdfutil[17],
      function(param){
       switch(param[0]){
         case 0:
          var
           sy = param[3],
           sx = param[2],
           match = param[1],
           cy = match[2],
           cx = match[1],
           x = x$0[1] - cx,
           y = y$0[1] - cy,
           x$1 = x * sx,
           y$1 = y * sy;
          x$0[1] = x$1 + cx;
          y$0[1] = y$1 + cy;
          return 0;
         case 1:
          var
           a = param[2],
           match$0 = param[1],
           cy$0 = match$0[2],
           cx$0 = match$0[1],
           cosine = Math.cos(a),
           sine = Math.sin(a),
           invsine = - sine,
           x$2 = x$0[1] - cx$0,
           y$2 = y$0[1] - cy$0,
           x$3 = x$2 * cosine + y$2 * invsine,
           y$3 = x$2 * sine + y$2 * cosine;
          x$0[1] = x$3 + cx$0;
          y$0[1] = y$3 + cy$0;
          return 0;
         case 2:
          var dy = param[2], dx = param[1];
          x$0[1] = x$0[1] + dx;
          y$0[1] = y$0[1] + dy;
          return 0;
         case 3:
          var
           a$0 = param[2],
           match$1 = param[1],
           cy$1 = match$1[2],
           cx$1 = match$1[1],
           x$4 = x$0[1] - cx$1,
           y$4 = y$0[1] - cy$1,
           x$5 = x$4 + y$4 * a$0;
          x$0[1] = x$5 + cx$1;
          y$0[1] = y$4 + cy$1;
          return 0;
         default:
          var
           a$1 = param[2],
           match$2 = param[1],
           cy$2 = match$2[2],
           cx$2 = match$2[1],
           x$6 = x$0[1] - cx$2,
           y$5 = y$0[1] - cy$2,
           y$6 = x$6 * a$1 + y$5;
          x$0[1] = x$6 + cx$2;
          y$0[1] = y$6 + cy$2;
          return 0;
       }
      },
      _p_);
    return [0, x$0[1], y$0[1]];
   }
   function decompose(m){
    var
     axb = m[1] * m[4] - m[3] * m[2],
     moda = Math.sqrt(m[1] * m[1] + m[2] * m[2]),
     modb = Math.sqrt(m[3] * m[3] + m[4] * m[4]),
     adotb = m[1] * m[3] + m[2] * m[4],
     scale = axb / moda,
     aspect =
       caml_call1(Pdfutil[194], scale) === 0.
        ? 1.
        : moda / caml_call1(Pdfutil[194], scale),
     rotation = Math.atan2(m[2], m[1]),
     shear =
       moda * modb === 0.
        ? 0.
        : Pdfutil[197] / 2. - Math.acos(adotb / (moda * modb)),
     _k_ = caml_call1(Pdfutil[204], m[6]),
     _l_ = caml_call1(Pdfutil[204], m[5]),
     _m_ = caml_call1(Pdfutil[204], shear),
     _n_ = caml_call1(Pdfutil[204], rotation),
     _o_ = caml_call1(Pdfutil[204], aspect);
    return [0, caml_call1(Pdfutil[204], scale), _o_, _n_, _m_, _l_, _k_];
   }
   function recompose(scale, aspect, rotation, shear, tx, ty){
    var
     _h_ = i_matrix[6],
     _i_ = i_matrix[5],
     _j_ = i_matrix[2],
     scale_aspect_shear =
       [254,
        caml_call1(Pdfutil[194], scale) * aspect,
        _j_,
        scale * Math.tan(shear),
        scale,
        _i_,
        _h_],
     rotated = matrix_compose(mkrotate(_g_, rotation), scale_aspect_shear);
    return matrix_compose(mktranslate(tx, ty), rotated);
   }
   var
    Pdftransform =
      [0,
       0,
       string_of_transform,
       i_matrix,
       string_of_matrix,
       mktranslate,
       mkscale,
       mkrotate,
       mkshearx,
       mksheary,
       compose,
       append,
       matrix_compose,
       matrix_of_op,
       matrix_of_transform,
       NonInvertable,
       matrix_invert,
       transform,
       transform_matrix,
       decompose,
       recompose];
   runtime.caml_register_global(21, Pdftransform, "Pdftransform");
   return;
  }
  (globalThis));

//# 3654 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_make = runtime.caml_array_make,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Pdfio = global_data.Pdfio,
    Pdfutil = global_data.Pdfutil,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Random = global_data.Stdlib__Random;
   function key_expansion(nk, key){
    return runtime.camlpdf_caml_aes_cook_encrypt_key
            (caml_call1(Pdfio[39], key));
   }
   function key_expansion_decrypt(nk, key){
    return runtime.camlpdf_caml_aes_cook_decrypt_key
            (caml_call1(Pdfio[39], key));
   }
   function crypt(key, data){
    var
     _aW_ = caml_call1(Pdfio[18], data),
     out = caml_call1(Pdfio[17], _aW_),
     pj = [0, 0],
     pi = [0, 0],
     s = caml_array_make(256, 0),
     keylength = key.length - 1,
     i$0 = 0;
    for(;;){
     caml_check_bound(s, i$0)[1 + i$0] = i$0;
     var _aO_ = i$0 + 1 | 0;
     if(255 === i$0) break;
     i$0 = _aO_;
    }
    var j = [0, 0], i = 0;
    for(;;){
     var
      _aK_ = runtime.caml_mod(i, keylength),
      _aL_ = caml_check_bound(key, _aK_)[1 + _aK_],
      _aM_ = caml_check_bound(s, i)[1 + i];
     j[1] = ((j[1] + _aM_ | 0) + _aL_ | 0) % 256 | 0;
     caml_call3(Pdfutil[215], s, i, j[1]);
     var _aN_ = i + 1 | 0;
     if(255 === i) break;
     i = _aN_;
    }
    var _aY_ = caml_call1(Pdfio[18], data) - 1 | 0, _aX_ = 0;
    if(_aY_ >= 0){
     var x = _aX_;
     for(;;){
      pi[1] = (pi[1] + 1 | 0) % 256 | 0;
      var _aP_ = pi[1], _aQ_ = caml_check_bound(s, _aP_)[1 + _aP_];
      pj[1] = (pj[1] + _aQ_ | 0) % 256 | 0;
      caml_call3(Pdfutil[215], s, pi[1], pj[1]);
      var
       _aR_ = pj[1],
       _aS_ = caml_check_bound(s, _aR_)[1 + _aR_],
       _aT_ = pi[1],
       _aU_ = (caml_check_bound(s, _aT_)[1 + _aT_] + _aS_ | 0) % 256 | 0,
       _aV_ = caml_check_bound(s, _aU_)[1 + _aU_],
       _aZ_ = caml_call2(Pdfio[21], data, x) ^ _aV_;
      caml_call3(Pdfio[24], out, x, _aZ_);
      var _a0_ = x + 1 | 0;
      if(_aY_ === x) break;
      x = _a0_;
     }
    }
    return out;
   }
   caml_call1(Stdlib_Random[3], 0);
   var
    _a_ = [0, "pdfcryptprimitives.ml", 120, 4],
    cst_decrypt_no_key_C = "decrypt: no key C";
   function ran255(param){return caml_call1(Stdlib_Random[5], 255);}
   function cutshort(s){
    if(0 === caml_call1(Pdfio[18], s)) return caml_call1(Pdfio[17], 0);
    if(16 > caml_call1(Pdfio[18], s)) return s;
    var l = caml_call1(Pdfio[18], s);
    if(16 > l) throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var potential = caml_call2(Pdfio[21], s, l - 1 | 0);
    a:
    {
     if(16 >= potential && 1 <= potential){
      var t = l - 1 | 0, f$1 = l - potential | 0;
      b:
      {
       c:
       {
        var f = f$1;
        for(;;){
         if(f === t) break c;
         var _aD_ = potential === caml_call2(Pdfio[21], s, f) ? 1 : 0;
         if(! _aD_) break;
         var f$0 = f + 1 | 0;
         f = f$0;
        }
        var _aE_ = _aD_;
        break b;
       }
       var _aE_ = potential === caml_call2(Pdfio[21], s, t) ? 1 : 0;
      }
      if(_aE_){var match = [0, potential]; break a;}
      var match = 0;
      break a;
     }
     var match = 0;
    }
    if(! match) return s;
    var
     padding = match[1],
     _aF_ = caml_call1(Pdfio[18], s) - padding | 0,
     s$0 = caml_call1(Pdfio[17], _aF_),
     _aH_ = caml_call1(Pdfio[18], s$0) - 1 | 0,
     _aG_ = 0;
    if(_aH_ >= 0){
     var x = _aG_;
     for(;;){
      var _aI_ = caml_call2(Pdfio[22], s, x);
      caml_call3(Pdfio[25], s$0, x, _aI_);
      var _aJ_ = x + 1 | 0;
      if(_aH_ === x) break;
      x = _aJ_;
     }
    }
    return s$0;
   }
   function aes_decrypt_data(opt, nk, key, data){
    var
     remove_padding = opt ? opt[1] : 1,
     key$0 = key_expansion_decrypt(nk, key),
     len = caml_call1(Pdfio[18], data);
    if(16 >= len) return caml_call1(Pdfio[17], 0);
    var
     output = caml_call1(Pdfio[17], len - 16 | 0),
     prev_ciphertext = caml_call1(Pdfio[17], 16),
     x$2 = 0;
    for(;;){
     var _aB_ = caml_call2(Pdfio[22], data, x$2);
     caml_call3(Pdfio[25], prev_ciphertext, x$2, _aB_);
     var _aC_ = x$2 + 1 | 0;
     if(15 === x$2) break;
     x$2 = _aC_;
    }
    var pos = [0, 16];
    for(;;){
     if(pos[1] >= len) return remove_padding ? cutshort(output) : output;
     var
      i = caml_call2(Stdlib_Bytes[1], 16, 32),
      o = caml_call2(Stdlib_Bytes[1], 16, 32),
      x$1 = 0;
     for(;;){
      var _az_ = caml_call2(Pdfio[22], data, x$1 + pos[1] | 0);
      caml_bytes_set(i, x$1, caml_call1(Stdlib[29], _az_));
      var _aA_ = x$1 + 1 | 0;
      if(15 === x$1) break;
      x$1 = _aA_;
     }
     runtime.camlpdf_caml_aes_decrypt(key$0, i, 0, o, 0);
     var x$0 = 0;
     for(;;){
      var _ax_ = caml_bytes_get(o, x$0);
      caml_call3(Pdfio[25], output, (x$0 + pos[1] | 0) - 16 | 0, _ax_);
      var _ay_ = x$0 + 1 | 0;
      if(15 === x$0) break;
      x$0 = _ay_;
     }
     var x = 0;
     for(;;){
      var
       _at_ = caml_call2(Pdfio[22], output, (x + pos[1] | 0) - 16 | 0),
       _au_ = caml_call2(Pdfio[22], prev_ciphertext, x) ^ _at_;
      caml_call3(Pdfio[25], output, (x + pos[1] | 0) - 16 | 0, _au_);
      var _av_ = caml_call2(Pdfio[22], data, x + pos[1] | 0);
      caml_call3(Pdfio[25], prev_ciphertext, x, _av_);
      var _aw_ = x + 1 | 0;
      if(15 === x) break;
      x = _aw_;
     }
     caml_call2(Pdfutil[162], pos, 16);
    }
   }
   function aes_decrypt_data_ecb(opt, nk, key, data){
    var
     remove_padding = opt ? opt[1] : 1,
     key$0 = key_expansion_decrypt(nk, key),
     size = caml_call1(Pdfio[18], data);
    if(0 === size) return caml_call1(Pdfio[17], 0);
    var output = caml_call1(Pdfio[17], size), pos = [0, 0];
    for(;;){
     if(pos[1] >= size){
      var _as_ = remove_padding ? cutshort : Pdfutil[218];
      return caml_call1(_as_, output);
     }
     var
      i = caml_call2(Stdlib_Bytes[1], 16, 32),
      o = caml_call2(Stdlib_Bytes[1], 16, 32),
      x$0 = 0;
     for(;;){
      var _aq_ = caml_call2(Pdfio[22], data, x$0 + pos[1] | 0);
      caml_bytes_set(i, x$0, caml_call1(Stdlib[29], _aq_));
      var _ar_ = x$0 + 1 | 0;
      if(15 === x$0) break;
      x$0 = _ar_;
     }
     runtime.camlpdf_caml_aes_decrypt(key$0, i, 0, o, 0);
     var x = 0;
     for(;;){
      var _ao_ = caml_bytes_get(o, x);
      caml_call3(Pdfio[25], output, x + pos[1] | 0, _ao_);
      var _ap_ = x + 1 | 0;
      if(15 === x) break;
      x = _ap_;
     }
     caml_call2(Pdfutil[162], pos, 16);
    }
   }
   function aes_encrypt_data(opt, nk, key, data){
    if(opt)
     var firstblock = opt[1];
    else
     var
      _N_ = ran255(0),
      _O_ = ran255(0),
      _P_ = ran255(0),
      _Q_ = ran255(0),
      _R_ = ran255(0),
      _S_ = ran255(0),
      _T_ = ran255(0),
      _U_ = ran255(0),
      _V_ = ran255(0),
      _W_ = ran255(0),
      _X_ = ran255(0),
      _Y_ = ran255(0),
      _Z_ = ran255(0),
      ___ = ran255(0),
      _$_ = ran255(0),
      firstblock =
        [0,
         ran255(0),
         _$_,
         ___,
         _Z_,
         _Y_,
         _X_,
         _W_,
         _V_,
         _U_,
         _T_,
         _S_,
         _R_,
         _Q_,
         _P_,
         _O_,
         _N_];
    var
     key$0 = key_expansion(nk, key),
     outblocks = [0, 0],
     prev_ciphertext = [0, firstblock],
     l = caml_call1(Pdfio[18], data);
    if(16 <= l){
     var blocks = [0, 0], _ab_ = (l / 16 | 0) - 1 | 0, _aa_ = 0;
     if(_ab_ >= 0){
      var x$0 = _aa_;
      for(;;){
       var a = caml_array_make(16, 0), y = 0;
       for(;;){
        a[1 + y] = caml_call2(Pdfio[22], data, (x$0 * 16 | 0) + y | 0);
        var _al_ = y + 1 | 0;
        if(15 === y) break;
        y = _al_;
       }
       caml_call2(Pdfutil[170], blocks, a);
       var _ak_ = x$0 + 1 | 0;
       if(_ab_ === x$0) break;
       x$0 = _ak_;
      }
     }
     var fullblocks = caml_call1(Pdfutil[16], blocks[1]);
    }
    else
     var fullblocks = 0;
    var
     overflow = l % 16 | 0,
     n = 16 - overflow | 0,
     _ag_ = caml_call2(Pdfutil[88], n, n);
    if(0 === overflow)
     var _ah_ = 0;
    else{
     var bytes = [0, 0], _ad_ = overflow - 1 | 0, _ac_ = 0;
     if(_ad_ >= 0){
      var x = _ac_;
      for(;;){
       var _ae_ = caml_call2(Pdfio[21], data, (l - 1 | 0) - x | 0);
       caml_call2(Pdfutil[170], bytes, _ae_);
       var _af_ = x + 1 | 0;
       if(_ad_ === x) break;
       x = _af_;
      }
     }
     var _ah_ = bytes[1];
    }
    var
     _ai_ = caml_call2(Pdfutil[21], _ah_, _ag_),
     lastblock = caml_call1(Stdlib_Array[11], _ai_),
     _aj_ = caml_call2(Pdfutil[21], fullblocks, [0, lastblock, 0]);
    caml_call2
     (Pdfutil[17],
      function(block){
       var
        a =
          caml_call3
           (Pdfutil[214],
            function(_an_, _am_){return _an_ ^ _am_;},
            block,
            prev_ciphertext[1]),
        src =
          caml_call2
           (Stdlib_Bytes[2],
            a.length - 1,
            function(i){return caml_check_bound(a, i)[1 + i];}),
        dst = caml_call2(Stdlib_Bytes[1], 16, 32);
       runtime.camlpdf_caml_aes_encrypt(key$0, src, 0, dst, 0);
       var
        ciphertext =
          caml_call2
           (Stdlib_Array[1],
            runtime.caml_ml_bytes_length(dst),
            function(i){return runtime.caml_bytes_unsafe_get(dst, i);});
       prev_ciphertext[1] = ciphertext;
       return caml_call2(Pdfutil[170], outblocks, ciphertext);
      },
      _aj_);
    var
     blocks$0 = [0, firstblock, caml_call1(Pdfutil[16], outblocks[1])],
     len = 16 * caml_call1(Pdfutil[35], blocks$0) | 0,
     s = caml_call1(Pdfio[17], len),
     p = [0, 0];
    caml_call2
     (Pdfutil[17],
      function(a){
       return caml_call2
               (Stdlib_Array[12],
                function(v){
                 caml_call3(Pdfio[24], s, p[1], v);
                 p[1]++;
                 return 0;
                },
                a);
      },
      blocks$0);
    return s;
   }
   function aes_encrypt_data_ecb(nk, key, data){
    var key$0 = key_expansion(nk, key), size = caml_call1(Pdfio[18], data);
    if(0 === size) return caml_call1(Pdfio[17], 0);
    var output = caml_call1(Pdfio[17], size), pos = [0, 0];
    for(;;){
     if(pos[1] >= size) return output;
     var
      i = caml_call2(Stdlib_Bytes[1], 16, 32),
      o = caml_call2(Stdlib_Bytes[1], 16, 32),
      x$0 = 0;
     for(;;){
      var _L_ = caml_call2(Pdfio[21], data, x$0 + pos[1] | 0);
      caml_bytes_set(i, x$0, caml_call1(Stdlib[29], _L_));
      var _M_ = x$0 + 1 | 0;
      if(15 === x$0) break;
      x$0 = _M_;
     }
     runtime.camlpdf_caml_aes_encrypt(key$0, i, 0, o, 0);
     var x = 0;
     for(;;){
      var _J_ = caml_bytes_get(o, x);
      caml_call3(Pdfio[24], output, x + pos[1] | 0, _J_);
      var _K_ = x + 1 | 0;
      if(15 === x) break;
      x = _K_;
     }
     caml_call2(Pdfutil[162], pos, 16);
    }
   }
   function string_of_input(i){
    var b = caml_call1(Stdlib_Buffer[1], 100);
    try{
     for(;;){
      var match = caml_call1(i[3], 0);
      if(! match) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
      var c = match[1];
      caml_call2(Stdlib_Buffer[12], b, c);
     }
    }
    catch(_I_){
     var _H_ = caml_wrap_exception(_I_);
     if(_H_ === Stdlib[12]) return caml_call1(Stdlib_Buffer[2], b);
     throw caml_maybe_attach_backtrace(_H_, 0);
    }
   }
   function sha256(i){return runtime.camlpdf_caml_sha256(string_of_input(i));}
   function sha384(i){return runtime.camlpdf_caml_sha384(string_of_input(i));}
   function sha512(i){return runtime.camlpdf_caml_sha512(string_of_input(i));}
   function find_hash(crypt_type, obj, gen, key, keylength){
    var
     _t_ = caml_call2(Pdfutil[126], obj, 16711680),
     _u_ = caml_call2(Pdfutil[123], _t_, 16),
     _v_ = caml_call1(Pdfutil[116], _u_),
     _w_ = caml_call2(Pdfutil[126], obj, 65280),
     _x_ = caml_call2(Pdfutil[123], _w_, 8),
     _y_ = caml_call1(Pdfutil[116], _x_),
     _z_ = caml_call2(Pdfutil[126], obj, 255),
     from_obj = [0, caml_call1(Pdfutil[116], _z_), _y_, _v_],
     _A_ = caml_call2(Pdfutil[126], gen, 65280),
     _B_ = caml_call2(Pdfutil[123], _A_, 8),
     _C_ = caml_call1(Pdfutil[116], _B_),
     _D_ = caml_call2(Pdfutil[126], gen, 255),
     from_gen = [0, caml_call1(Pdfutil[116], _D_), _C_],
     extra = 0 === crypt_type ? [0, 115, 65, 108, 84] : [0],
     digest_input =
       caml_call1
        (Pdfio[38], [0, key, [0, from_obj, [0, from_gen, [0, extra, 0]]]]),
     _E_ = caml_call2(Pdfutil[190], 16, (keylength / 8 | 0) + 5 | 0),
     _F_ = caml_call1(Stdlib_Digest[3], digest_input),
     _G_ = caml_call3(Stdlib_String[16], _F_, 0, _E_);
    return caml_call1(Pdfio[37], _G_);
   }
   function decrypt_stream_data
   (crypt_type,
    encrypt,
    file_encryption_key,
    obj,
    gen,
    key,
    keylength,
    r,
    data){
    if(0 === crypt_type)
     if(encrypt)
      var
       _b_ = 4,
       _c_ = 0,
       f = function(_l_, _m_){return aes_encrypt_data(_c_, _b_, _l_, _m_);};
     else
      var
       _e_ = 4,
       _f_ = 0,
       f = function(_n_, _o_){return aes_decrypt_data(_f_, _e_, _n_, _o_);};
    else{
     a:
     {
      if(typeof crypt_type !== "number" && 1 === crypt_type[0]){var _g_ = 1; break a;}
      var _g_ = 0;
     }
     if(_g_)
      if(encrypt)
       var
        _h_ = 8,
        _i_ = 0,
        f = function(_p_, _q_){return aes_encrypt_data(_i_, _h_, _p_, _q_);};
      else
       var
        _j_ = 8,
        _k_ = 0,
        f = function(_r_, _s_){return aes_decrypt_data(_k_, _j_, _r_, _s_);};
     else
      var f = crypt;
    }
    if(5 !== r && 6 !== r){
     var
      _d_ = caml_call1(Pdfutil[115], gen),
      hash =
        find_hash
         (crypt_type, caml_call1(Pdfutil[115], obj), _d_, key, keylength);
     return f(hash, data);
    }
    if(file_encryption_key)
     var k = file_encryption_key[1], key$0 = k;
    else
     var key$0 = caml_call1(Stdlib[2], cst_decrypt_no_key_C);
    return f(caml_call1(Pdfio[37], key$0), data);
   }
   var
    Pdfcryptprimitives =
      [0,
       crypt,
       aes_decrypt_data,
       aes_decrypt_data_ecb,
       aes_encrypt_data,
       aes_encrypt_data_ecb,
       sha256,
       sha384,
       sha512,
       find_hash,
       decrypt_stream_data];
   runtime.caml_register_global(18, Pdfcryptprimitives, "Pdfcryptprimitives");
   return;
  }
  (globalThis));

//# 4180 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Kids$3 = "/Kids",
    cst_Names$2 = "/Names",
    cst_Nums$2 = "/Nums",
    cst_Page = "/Page",
    cst_Type$1 = "/Type",
    cst_pdf_ml = "pdf.ml",
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Pdfutil = global_data.Pdfutil,
    Stdlib = global_data.Stdlib,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Pdfe = global_data.Pdfe,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Pdftransform = global_data.Pdftransform,
    Stdlib_Random = global_data.Stdlib__Random,
    Pdfio = global_data.Pdfio,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Pdfcryptprimitives = global_data.Pdfcryptprimitives;
   function is_delimiter(param){
    a:
    {
     if(93 <= param){
      var _bL_ = param - 94 | 0;
      if(30 < _bL_ >>> 0){
       if(32 <= _bL_) break a;
      }
      else if(29 !== _bL_) break a;
     }
     else
      if(63 <= param){
       if(91 !== param) break a;
      }
      else{
       if(37 > param) break a;
       switch(param - 37 | 0){
         case 0:
         case 3:
         case 4:
         case 10:
         case 23:
         case 25: break;
         default: break a;
       }
      }
     return 1;
    }
    return 0;
   }
   function toget(opt, input, position, length){
    var crypt = opt ? opt[1] : 0;
    return [0, input, position, length, crypt];
   }
   function length_of_toget(t){return t[3];}
   function position_of_toget(t){return t[2];}
   function input_of_toget(t){return t[1];}
   var string_of_pdf = [0, function(param){return cst;}];
   function pdfobjmap_empty(param){
    return caml_call2(Stdlib_Hashtbl[1], 0, 500);
   }
   function pdfobjmap_find(key, map){
    return caml_call2(Stdlib_Hashtbl[6], map, key);
   }
   function pdfobjmap_add(key, value, map){
    caml_call3(Stdlib_Hashtbl[11], map, key, value);
    return map;
   }
   var pdfobjmap_iter = Stdlib_Hashtbl[12], _a_ = [6, 0];
   function empty(param){
    var _bK_ = caml_call1(Pdfutil[208], 0);
    return [0, 2, 0, 0, [0, 0, 0, pdfobjmap_empty(0), _bK_], _a_, 0, 0];
   }
   var
    PDFError = [248, "Pdf.PDFError", runtime.caml_fresh_oo_id(0)],
    _b_ =
      [0,
       [2,
        0,
        [11,
         " whilst reading file ",
         [2, 0, [11, " at position ", [4, 3, 0, 0, 0]]]]],
       "%s whilst reading file %s at position %i"],
    cst_remove_dict_entry_not_a_di = "remove_dict_entry: not a dictionary",
    cst_replace_dict_entry_not_a_d = "replace_dict_entry: not a dictionary.",
    cst_add_dict_entry_not_a_dicti = "add_dict_entry: not a dictionary.",
    cst_Pdf_getstream_not_a_stream = "Pdf.getstream: not a stream",
    cst_Pdf_getstream_can_t_read_s = "Pdf.getstream: can't read stream",
    cst_Length = "/Length",
    _c_ = [0, cst_pdf_ml, 292, 12],
    cst_Pdf_getnum_not_a_number = "Pdf.getnum: not a number",
    cst_Pdf_parse_rectangle_not_a_ = "Pdf.parse_rectangle: not a rectangle",
    cst_Pdf_parse_rectangle_bad_re = "Pdf.parse_rectangle: bad rectangle",
    cst_No_catalog = "No catalog",
    _d_ = [0, cst_pdf_ml, 482, 19],
    _e_ = [0, cst_pdf_ml, 490, 23],
    cst_replace_chain_all_direct_b = "replace_chain_all_direct: bad chain",
    cst_replace_chain_all_direct_b$0 =
      "replace_chain_all_direct: bad array chain",
    cst_replace_chain_all_direct_n =
      "replace_chain_all_direct: nothing to put in array",
    cst_no_chain = "no chain",
    cst_chain_must_already_exist = "chain must already exist",
    cst_Malformed_matrix = "Malformed matrix",
    cst_Type = cst_Type$1,
    cst_Kids = cst_Kids$3,
    cst_Pages = "/Pages",
    cst_No_Pages_found_in_Root = "No /Pages found in /Root",
    cst_Type$0 = cst_Type$1,
    cst_couldn_t_extract_raw_strea = "couldn't extract raw stream",
    cst_unique_key_Not_a_dictionar = "unique_key: Not a dictionary or stream",
    _f_ = [0, [12, 47, [2, 0, [4, 3, 0, 0, 0]]], "/%s%i"],
    cst_CAMLPDF_REPRODUCIBLE_IDS = "CAMLPDF_REPRODUCIBLE_IDS",
    cst_camlpdf = "camlpdf",
    cst_find_indirect_not_a_dictio = "find_indirect: not a dictionary",
    cst_nametree_lookup_kids_malfo =
      "nametree_lookup_kids: malformed name tree",
    cst_Bad_lookup_array = "Bad lookup array",
    cst_Limits = "/Limits",
    cst_Malformed_name_tree = "Malformed name tree",
    cst_Kids$0 = cst_Kids$3,
    cst_Nums = cst_Nums$2,
    cst_Names = cst_Names$2,
    cst_Malformed_name_tree_entry = "Malformed name tree entry",
    cst_Kids$1 = cst_Kids$3,
    cst_Nums$0 = cst_Nums$2,
    cst_Names$0 = cst_Names$2,
    cst_Missing_name_tree_entry = "Missing name tree entry",
    cst_Nums$1 = cst_Nums$2,
    cst_Names$1 = cst_Names$2,
    cst_Kids$2 = cst_Kids$3,
    cst_contents_of_nametree_neith =
      "contents_of_nametree: neither names nor kids",
    cst_warning_contents_of_nametr =
      "warning: contents_of_nametree: odd number of /Names\n",
    _g_ = [0, cst_pdf_ml, 1084, 16],
    cst_Bad_trailer_dictionary = "Bad trailer dictionary",
    cst_ID = "/ID",
    cst_Malformed_QuadPoints_forma =
      "Malformed /QuadPoints format: must be a multiple of 8 entries\n",
    _h_ =
      [0,
       [11, "Unknown or malformed /QuadPoints format ", [2, 0, [12, 10, 0]]],
       "Unknown or malformed /QuadPoints format %s\n"],
    dummy = 0;
   function input_pdferror(i, s){
    var _bJ_ = caml_call1(i[1], 0);
    return caml_call4(Stdlib_Printf[4], _b_, s, i[8], _bJ_);
   }
   function is_whitespace(param){
    a:
    {
     if(14 <= param){
      if(32 === param) break a;
     }
     else{
      if(12 <= param) break a;
      switch(param){case 0:case 9:case 10: break a;
      }
     }
     return 0;
    }
    return 1;
   }
   function is_not_whitespace(param){
    a:
    {
     if(14 <= param){
      if(32 === param) break a;
     }
     else{
      if(12 <= param) break a;
      switch(param){case 0:case 9:case 10: break a;
      }
     }
     return 1;
    }
    return 0;
   }
   function remove_dict_entry(dict, key){
    if(typeof dict !== "number")
     switch(dict[0]){
       case 6:
        var d = dict[1], r = 0, param = d;
        for(;;){
         if(param){
          var h = param[1], t = param[2], k = h[1];
          if(k !== key){
           var t$0 = param[2], r$0 = [0, h, r];
           r = r$0;
           param = t$0;
           continue;
          }
          var _bI_ = caml_call2(Stdlib_List[13], r, t);
         }
         else
          var _bI_ = r;
         return [6, _bI_];
        }
       case 7:
        var s = dict[1], match = s[1], stream = match[2], dict$0 = match[1];
        s[1] = [0, remove_dict_entry(dict$0, key), stream];
        return [7, s];
     }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_remove_dict_entry_not_a_di], 1);
   }
   function replace_dict_entry(dict, key, value){
    if(typeof dict === "number")
     return [6, caml_call3(Pdfutil[156], key, value, 0)];
    switch(dict[0]){
      case 6:
       var d = dict[1]; return [6, caml_call3(Pdfutil[156], key, value, d)];
      case 7:
       var s = dict[1], match = s[1], stream = match[2], dict$0 = match[1];
       s[1] = [0, replace_dict_entry(dict$0, key, value), stream];
       return [7, s];
      default:
       throw caml_maybe_attach_backtrace
              ([0, PDFError, cst_replace_dict_entry_not_a_d], 1);
    }
   }
   function add_dict_entry(dict, key, value){
    if(typeof dict === "number")
     return [6, caml_call3(Pdfutil[155], key, value, 0)];
    switch(dict[0]){
      case 6:
       var d = dict[1]; return [6, caml_call3(Pdfutil[155], key, value, d)];
      case 7:
       var s = dict[1], match = s[1], stream = match[2], dict$0 = match[1];
       s[1] = [0, add_dict_entry(dict$0, key, value), stream];
       return [7, s];
      default:
       throw caml_maybe_attach_backtrace
              ([0, PDFError, cst_add_dict_entry_not_a_dicti], 1);
    }
   }
   function getstream(param){
    if(typeof param !== "number" && 7 === param[0]){
     var stream = param[1], _bE_ = stream[1], _bF_ = _bE_[2], d = _bE_[1];
     if(0 === _bF_[0]) return 0;
     var
      match = _bF_[1],
      toget_crypt = match[4],
      l = match[3],
      o = match[2],
      i = match[1];
     if(0 === l){stream[1] = [0, d, [0, caml_call1(Pdfio[17], 0)]]; return 0;}
     try{
      var data = caml_call3(Pdfio[28], i, o, l);
      if(toget_crypt)
       var
        saved = toget_crypt[1],
        data$0 =
          caml_call9
           (Pdfcryptprimitives[10],
            saved[1],
            0,
            saved[2],
            saved[3],
            saved[4],
            saved[5],
            saved[6],
            saved[7],
            data);
      else
       var data$0 = data;
      a:
      {
       if(typeof d !== "number" && 6 === d[0]){
        var
         d$0 =
           replace_dict_entry
            (d, cst_Length, [1, caml_call1(Pdfio[18], data$0)]);
        break a;
       }
       var d$0 = d;
      }
      stream[1] = [0, d$0, [0, data$0]];
      var _bH_ = 0;
      return _bH_;
     }
     catch(e$0){
      var
       e = caml_wrap_exception(e$0),
       _bG_ = caml_call1(Stdlib_Printexc[1], e);
      throw caml_maybe_attach_backtrace
             ([0,
               PDFError,
               caml_call2(Stdlib[28], cst_Pdf_getstream_can_t_read_s, _bG_)],
              1);
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_Pdf_getstream_not_a_stream], 1);
   }
   function recurse_array(f, elts){
    return [5, caml_call2(Pdfutil[24], f, elts)];
   }
   function recurse_dict(f, elts){
    var prev = 0, param = elts;
    for(;;){
     if(! param) return [6, prev];
     var
      t = param[2],
      match = param[1],
      o = match[2],
      n = match[1],
      prev$0 = [0, [0, n, caml_call1(f, o)], prev];
     prev = prev$0;
     param = t;
    }
   }
   function parse_lazy(pdf, n){
    var match = pdf[4][2];
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var f = match[1], obj = caml_call1(f, n);
    pdfobjmap_find(n, pdf[4][3])[1][1] = [0, obj];
    return obj;
   }
   function removeobj(doc, key){
    var init = doc[4], map = doc[4][3], _bD_ = init[4];
    caml_call2(Stdlib_Hashtbl[10], map, key);
    doc[4] = [0, init[1], init[2], map, _bD_];
    return 0;
   }
   function lookup_obj(doc, i){
    try{
     var match = pdfobjmap_find(i, doc[4][3])[1][1];
     if(typeof match === "number")
      var _bB_ = parse_lazy(doc, i);
     else if(2 === match[0])
      var
       objstreamparser = match[4],
       streamobjnum = match[2],
       themap = match[1],
       _bB_ =
         parse_delayed_object_stream
          (themap, i, streamobjnum, doc, objstreamparser);
     else
      var obj = match[1], _bB_ = obj;
     return _bB_;
    }
    catch(_bC_){
     var _bA_ = caml_wrap_exception(_bC_);
     if(_bA_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_bA_, 0);
    }
   }
   function parse_delayed_object_stream
   (themap, objnum, streamobjnum, pdf, objstreamparser){
    var
     indexes = caml_call2(Stdlib_Hashtbl[6], themap, objnum),
     objectsfromstream = caml_call2(objstreamparser, streamobjnum, indexes);
    caml_call2
     (Pdfutil[17],
      function(param){
       var
        newobject = param[2],
        objnum = param[1],
        _bz_ = pdfobjmap_add(objnum, newobject, pdf[4][3]);
       pdf[4][3] = _bz_;
       return 0;
      },
      objectsfromstream);
    removeobj(pdf, streamobjnum);
    var
     _bx_ =
       caml_call2
        (Pdfutil[24], function(_by_){return _by_[1];}, objectsfromstream);
    return caml_call2(Pdfutil[44], objnum, _bx_) ? lookup_obj(pdf, objnum) : 0;
   }
   function resolve_all_delayed_object_str(pdf){
    var map = pdf[4][3], r = [0, 0];
    caml_call2
     (Stdlib_Hashtbl[12],
      function(k, v){r[1] = [0, [0, k, v], r[1]]; return 0;},
      map);
    return caml_call2
            (Pdfutil[17],
             function(param){var n = param[1]; lookup_obj(pdf, n); return 0;},
             r[1]);
   }
   function getnum(pdf, param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 !== "number")
      switch(param$0[0]){
        case 1:
         var a = param$0[1]; return a;
        case 2:
         var a$0 = param$0[1]; return a$0;
        case 8:
         var i = param$0[1]; param$0 = lookup_obj(pdf, i); continue;
      }
     throw caml_maybe_attach_backtrace
            ([0, PDFError, cst_Pdf_getnum_not_a_number], 1);
    }
   }
   function parse_rectangle(pdf, param){
    if(typeof param !== "number" && 5 === param[0]){
     var _bn_ = param[1];
     if(_bn_){
      var _bo_ = _bn_[2];
      if(_bo_){
       var _bp_ = _bo_[2];
       if(_bp_){
        var _bq_ = _bp_[2];
        if(_bq_ && ! _bq_[2]){
         var d = _bq_[1], c = _bp_[1], b = _bo_[1], a = _bn_[1];
         try{
          var
           y = getnum(pdf, d),
           x = getnum(pdf, c),
           y$0 = getnum(pdf, b),
           x$0 = getnum(pdf, a),
           _bs_ = caml_call2(Pdfutil[193], y$0, y),
           _bt_ = caml_call2(Pdfutil[193], x$0, x),
           _bu_ = caml_call2(Pdfutil[192], y$0, y),
           _bv_ = [0, caml_call2(Pdfutil[192], x$0, x), _bu_, _bt_, _bs_];
          return _bv_;
         }
         catch(_bw_){
          var _br_ = caml_wrap_exception(_bw_);
          if(_br_[1] === PDFError)
           throw caml_maybe_attach_backtrace
                  ([0, PDFError, cst_Pdf_parse_rectangle_bad_re], 1);
          throw caml_maybe_attach_backtrace(_br_, 0);
         }
        }
       }
      }
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_Pdf_parse_rectangle_not_a_], 1);
   }
   function catalog_of_pdf(pdf){
    try{var _bl_ = lookup_obj(pdf, pdf[3]); return _bl_;}
    catch(_bm_){
     var _bk_ = caml_wrap_exception(_bm_);
     if(_bk_ === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, PDFError, cst_No_catalog], 1);
     throw caml_maybe_attach_backtrace(_bk_, 0);
    }
   }
   function direct(pdf, obj){
    if(typeof obj !== "number" && 8 === obj[0]){
     var i = obj[1];
     try{
      var match = pdfobjmap_find(i, pdf[4][3])[1][1];
      if(typeof match === "number")
       var _bi_ = parse_lazy(pdf, i);
      else if(2 === match[0])
       var
        objstreamparser = match[4],
        streamobjnum = match[2],
        themap = match[1],
        _bi_ =
          parse_delayed_object_stream
           (themap, i, streamobjnum, pdf, objstreamparser);
      else
       var pdfobject = match[1], _bi_ = direct(pdf, pdfobject);
      return _bi_;
     }
     catch(_bj_){
      var _bh_ = caml_wrap_exception(_bj_);
      if(_bh_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_bh_, 0);
     }
    }
    return obj;
   }
   function iter_stream(f, pdf){
    return caml_call2
            (pdfobjmap_iter,
             function(i, param$0){
              var param = param$0;
              for(;;){
               var r = param[1], _be_ = r[1];
               if(typeof _be_ !== "number"){
                a:
                {
                 switch(_be_[0]){
                   case 0:
                    var _bf_ = _be_[1];
                    if(typeof _bf_ !== "number" && 7 === _bf_[0]){var stream = _bf_; break;}
                    break a;
                   case 1:
                    var _bg_ = _be_[1];
                    if(typeof _bg_ !== "number" && 7 === _bg_[0]){var stream = _bg_; break;}
                    break a;
                   default: return 0;
                 }
                 return caml_call1(f, stream);
                }
                return 0;
               }
               r[1] = [0, parse_lazy(pdf, i)];
               param = [0, r];
              }
             },
             pdf[4][3]);
   }
   function lookup_string_compare(k, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var t = param$0[2], match = param$0[1], v = match[2], k$0 = match[1];
     if(k$0 === k) return [0, v];
     param$0 = t;
    }
   }
   function lookup_direct(pdf, key, dict){
    var match = direct(pdf, dict);
    a:
    if(typeof match !== "number"){
     switch(match[0]){
       case 6:
        var d = match[1]; break;
       case 7:
        var _bd_ = match[1][1][1];
        if(typeof _bd_ !== "number" && 6 === _bd_[0]){var d = _bd_[1]; break;}
        break a;
       default: break a;
     }
     var match$0 = lookup_string_compare(key, d);
     if(match$0){
      var o = match$0[1];
      if(typeof o !== "number") return [0, direct(pdf, o)];
     }
     return 0;
    }
    return 0;
   }
   function lookup_immediate(key, dict){
    a:
    if(typeof dict !== "number"){
     switch(dict[0]){
       case 6:
        var d = dict[1]; break;
       case 7:
        var _bc_ = dict[1][1][1];
        if(typeof _bc_ !== "number" && 6 === _bc_[0]){var d = _bc_[1]; break;}
        break a;
       default: break a;
     }
     return lookup_string_compare(key, d);
    }
    return 0;
   }
   function lookup_direct_or_array(pdf, name, obj){
    var match = caml_call1(Pdfutil[8], name);
    if(match && 47 === match[1]){
     var _ba_ = match[2];
     if(_ba_ && 91 === _ba_[1]){
      var
       num = _ba_[2],
       digits = caml_call2(Pdfutil[63], Pdfutil[202], num)[1];
      if(typeof obj !== "number" && 5 === obj[0]){
       var
        a = obj[1],
        _bb_ = caml_int_of_string(caml_call1(Pdfutil[9], digits));
       return [0, direct(pdf, caml_call2(Stdlib_List[8], a, _bb_))];
      }
      return 0;
     }
    }
    return lookup_direct(pdf, name, obj);
   }
   function lookup_chain(pdf, obj, param){
    var obj$0 = obj, param$0 = param;
    for(;;){
     if(! param$0) return [0, obj$0];
     var n = param$0[1];
     if(! param$0[2]) return lookup_direct_or_array(pdf, n, obj$0);
     var ns = param$0[2], match = lookup_direct_or_array(pdf, n, obj$0);
     if(! match) return 0;
     var obj$1 = match[1];
     obj$0 = obj$1;
     param$0 = ns;
    }
   }
   function indirect_number(pdf, key, dict){
    var match = direct(pdf, dict);
    a:
    if(typeof match !== "number"){
     switch(match[0]){
       case 6:
        var d = match[1]; break;
       case 7:
        var _a$_ = match[1][1][1];
        if(typeof _a$_ !== "number" && 6 === _a$_[0]){var d = _a$_[1]; break;}
        break a;
       default: break a;
     }
     var match$0 = lookup_string_compare(key, d);
     if(match$0){
      var match$1 = match$0[1];
      if(typeof match$1 !== "number" && 8 === match$1[0]){var i = match$1[1]; return [0, i];}
     }
     return 0;
    }
    return 0;
   }
   function addobj_given_num(doc, param){
    var
     obj = param[2],
     num = param[1],
     _a9_ = caml_call2(Pdfutil[191], doc[4][1], num);
    doc[4][1] = _a9_;
    var _a__ = pdfobjmap_add(num, [0, [0, [0, obj]], 0], doc[4][3]);
    doc[4][3] = _a__;
    return 0;
   }
   function replace_chain_all_direct(finalobj, chain, param){
    var v = param[2], k = param[1];
    a:
    if(typeof finalobj !== "number"){
     switch(finalobj[0]){
       case 5:
        var a = finalobj[1];
        if(chain){
         var cs = chain[2], c = chain[1], match = caml_call1(Pdfutil[8], c);
         if(match && 47 === match[1]){
          var _a5_ = match[2];
          if(_a5_ && 91 === _a5_[1]){
           var
            num = _a5_[2],
            digits = caml_call2(Pdfutil[63], Pdfutil[202], num)[1],
            n = caml_int_of_string(caml_call1(Pdfutil[9], digits));
           return [5,
                   caml_call2
                    (Stdlib_List[21],
                     function(n$0, e){
                      return n$0 === n
                              ? replace_chain_all_direct(e, cs, [0, k, v])
                              : e;
                     },
                     a)];
          }
         }
         throw caml_maybe_attach_backtrace
                ([0, PDFError, cst_replace_chain_all_direct_b$0], 1);
        }
        var match$0 = caml_call1(Pdfutil[8], k);
        if(match$0 && 47 === match$0[1]){
         var _a6_ = match$0[2];
         if(_a6_ && 91 === _a6_[1]){
          var
           num$0 = _a6_[2],
           digits$0 = caml_call2(Pdfutil[63], Pdfutil[202], num$0)[1],
           n$0 = caml_int_of_string(caml_call1(Pdfutil[9], digits$0));
          return [5,
                  caml_call2
                   (Stdlib_List[21],
                    function(n, e){return n === n$0 ? v : e;},
                    a)];
         }
        }
        throw caml_maybe_attach_backtrace
               ([0, PDFError, cst_replace_chain_all_direct_n], 1);
       case 6:
        var d = finalobj, dd = finalobj[1]; break;
       case 7:
        var _a8_ = finalobj[1][1][1];
        if(typeof _a8_ !== "number" && 6 === _a8_[0]){var d = _a8_, dd = _a8_[1]; break;}
        break a;
       default: break a;
     }
     if(! chain) return add_dict_entry(d, k, v);
     var
      cs$0 = chain[2],
      c$0 = chain[1],
      _a7_ = caml_call2(Pdfutil[153], c$0, dd);
     return add_dict_entry
             (d,
              c$0,
              replace_chain_all_direct
               (caml_call1(Pdfutil[207], _a7_), cs$0, [0, k, v]));
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_replace_chain_all_direct_b], 1);
   }
   function replace_chain(pdf, chain, obj$4){
    function wrap_obj(obj, param){
     if(! param) return obj;
     var t = param[2], h = param[1];
     return [6, [0, [0, h, wrap_obj(obj, t)], 0]];
    }
    a:
    b:
    {
     var to_fake = 0, chain$0 = chain;
     for(;;){
      if(0 === chain$0) break b;
      if(lookup_chain(pdf, pdf[5], chain$0)) break;
      var
       _aZ_ = caml_call1(Pdfutil[16], chain$0),
       _a0_ = caml_call1(Pdfutil[15], _aZ_),
       chain$1 = caml_call1(Pdfutil[16], _a0_),
       _a1_ = caml_call1(Pdfutil[16], chain$0),
       to_fake$0 = [0, caml_call1(Pdfutil[14], _a1_), to_fake];
      to_fake = to_fake$0;
      chain$0 = chain$1;
     }
     break a;
    }
    if(to_fake)
     var
      t = to_fake[2],
      h = to_fake[1],
      obj$5 = wrap_obj(obj$4, t),
      key = h,
      chain$2 = chain$0;
    else
     var
      _a2_ = caml_call1(Pdfutil[16], chain$0),
      key$0 = caml_call1(Pdfutil[14], _a2_),
      _a3_ = caml_call1(Pdfutil[16], chain$0),
      _a4_ = caml_call1(Pdfutil[15], _a3_),
      chain$3 = caml_call1(Pdfutil[16], _a4_),
      obj$5 = obj$4,
      key = key$0,
      chain$2 = chain$3;
    if(0 === chain$2){pdf[5] = add_dict_entry(pdf[5], key, obj$5); return 0;}
    if(! lookup_chain(pdf, pdf[5], chain$2))
     throw caml_maybe_attach_backtrace
            ([0, PDFError, cst_chain_must_already_exist], 1);
    if(! chain$2)
     throw caml_maybe_attach_backtrace([0, PDFError, cst_no_chain], 1);
    var
     obj$3 = pdf[5],
     remaining_chain = 0,
     obj = obj$3,
     finalobjnum = 0,
     param = chain$2;
    for(;;){
     if(! param){
      var
       remaining_chain$2 = caml_call1(Pdfutil[16], remaining_chain),
       _aX_ = [0, key, obj$5],
       _aY_ = 0 === finalobjnum ? pdf[5] : lookup_obj(pdf, finalobjnum),
       newobj$0 = replace_chain_all_direct(_aY_, remaining_chain$2, _aX_);
      return 0 === finalobjnum
              ? (pdf[5] = newobj$0, 0)
              : addobj_given_num(pdf, [0, finalobjnum, newobj$0]);
     }
     var ks = param[2], k = param[1], match = caml_call1(Pdfutil[8], k);
     if(match && 47 === match[1]){
      var _aV_ = match[2];
      if(_aV_ && 91 === _aV_[1]){
       var
        num = _aV_[2],
        digits = caml_call2(Pdfutil[63], Pdfutil[202], num)[1];
       if(typeof obj !== "number" && 5 === obj[0]){
        var
         a = obj[1],
         _aW_ = caml_int_of_string(caml_call1(Pdfutil[9], digits)),
         newobj = caml_call2(Stdlib_List[8], a, _aW_);
        if(typeof newobj !== "number" && 8 === newobj[0]){
         var objnum = newobj[1], obj$0 = lookup_obj(pdf, objnum);
         remaining_chain = 0;
         obj = obj$0;
         finalobjnum = objnum;
         param = ks;
         continue;
        }
        var remaining_chain$0 = [0, k, remaining_chain];
        remaining_chain = remaining_chain$0;
        obj = newobj;
        param = ks;
        continue;
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      }
     }
     var match$0 = indirect_number(pdf, k, obj);
     if(match$0){
      var objnum$0 = match$0[1], obj$1 = lookup_obj(pdf, objnum$0);
      remaining_chain = 0;
      obj = obj$1;
      finalobjnum = objnum$0;
      param = ks;
     }
     else{
      var match$1 = lookup_immediate(k, obj);
      if(! match$1)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
      var obj$2 = match$1[1], remaining_chain$1 = [0, k, remaining_chain];
      remaining_chain = remaining_chain$1;
      obj = obj$2;
      param = ks;
     }
    }
   }
   function lookup_direct_orelse(pdf, k$0, k, d){
    var result = lookup_direct(pdf, k$0, d);
    return result ? result : lookup_direct(pdf, k, d);
   }
   function lookup_exception(exp, pdf, key, dict){
    var match = direct(pdf, dict);
    a:
    if(typeof match !== "number"){
     switch(match[0]){
       case 6:
        var dict$0 = match[1]; break;
       case 7:
        var _aU_ = match[1][1][1];
        if(typeof _aU_ !== "number" && 6 === _aU_[0]){var dict$0 = _aU_[1]; break;}
        break a;
       default: break a;
     }
     var match$0 = caml_call2(Pdfutil[153], key, dict$0);
     if(match$0){
      var v = match$0[1];
      if(typeof v !== "number") return direct(pdf, v);
     }
     throw caml_maybe_attach_backtrace(exp, 1);
    }
    throw caml_maybe_attach_backtrace(exp, 1);
   }
   function lookup_fail(text){
    var _aQ_ = [0, PDFError, text];
    return function(_aR_, _aS_, _aT_){
     return lookup_exception(_aQ_, _aR_, _aS_, _aT_);};
   }
   function parse_matrix(pdf, name, dict){
    var match = lookup_direct(pdf, name, dict);
    if(! match) return Pdftransform[3];
    var _aJ_ = match[1];
    a:
    if(typeof _aJ_ !== "number" && 5 === _aJ_[0]){
     var _aK_ = _aJ_[1];
     if(! _aK_) break a;
     var _aL_ = _aK_[2];
     if(! _aL_) break a;
     var _aM_ = _aL_[2];
     if(! _aM_) break a;
     var _aN_ = _aM_[2];
     if(! _aN_) break a;
     var _aO_ = _aN_[2];
     if(! _aO_) break a;
     var _aP_ = _aO_[2];
     if(! _aP_) break a;
     if(_aP_[2]) break a;
     var
      f = _aP_[1],
      e = _aO_[1],
      d = _aN_[1],
      c = _aM_[1],
      b = _aL_[1],
      a = _aK_[1],
      a$0 = getnum(pdf, a),
      b$0 = getnum(pdf, b),
      c$0 = getnum(pdf, c),
      d$0 = getnum(pdf, d),
      e$0 = getnum(pdf, e),
      f$0 = getnum(pdf, f);
     return [254, a$0, b$0, c$0, d$0, e$0, f$0];
    }
    throw caml_maybe_attach_backtrace([0, PDFError, cst_Malformed_matrix], 1);
   }
   function make_matrix(tr){
    return [5,
            [0,
             [2, tr[1]],
             [0,
              [2, tr[2]],
              [0,
               [2, tr[3]],
               [0, [2, tr[4]], [0, [2, tr[5]], [0, [2, tr[6]], 0]]]]]]];
   }
   function objiter(f, doc){
    resolve_all_delayed_object_str(doc);
    function f$0(k, v){
     var match = v[1][1];
     if(typeof match === "number")
      return caml_call2(f, k, parse_lazy(doc, k));
     switch(match[0]){
       case 0:
        var obj = match[1]; return caml_call2(f, k, obj);
       case 1:
        var obj$0 = match[1]; return caml_call2(f, k, obj$0);
       default:
        var func = match[4], s = match[2], themap = match[1];
        return caml_call2
                (f, k, parse_delayed_object_stream(themap, k, s, doc, func));
     }
    }
    return caml_call2(pdfobjmap_iter, f$0, doc[4][3]);
   }
   function objselect(p, doc){
    var ns = [0, 0];
    objiter
     (function(n, obj){
       var _aI_ = caml_call1(p, obj);
       return _aI_ ? caml_call2(Pdfutil[170], ns, n) : _aI_;
      },
      doc);
    return ns[1];
   }
   function objselfmap(f, doc){
    resolve_all_delayed_object_str(doc);
    function f$0(k, v){
     for(;;){
      var r = v[1], match = r[1];
      if(typeof match === "number")
       parse_lazy(doc, k);
      else
       switch(match[0]){
         case 0:
          var obj = match[1]; r[1] = [0, caml_call1(f, obj)]; return 0;
         case 1:
          var obj$0 = match[1]; r[1] = [1, caml_call1(f, obj$0)]; return 0;
         default:
          var func = match[4], s = match[2], themap = match[1];
          parse_delayed_object_stream(themap, k, s, doc, func);
       }
     }
    }
    return caml_call2(pdfobjmap_iter, f$0, doc[4][3]);
   }
   function objiter_inorder(f, doc){
    resolve_all_delayed_object_str(doc);
    var map = doc[4][3], r = [0, 0];
    caml_call2
     (Stdlib_Hashtbl[12],
      function(k, v){r[1] = [0, [0, k, v], r[1]]; return 0;},
      map);
    var
     _aG_ =
       caml_call2
        (Pdfutil[36],
         function(_aH_, param){
          var b = param[1], a = _aH_[1];
          return runtime.caml_compare(a, b);
         },
         r[1]);
    return caml_call2
            (Pdfutil[17],
             function(param){
              var v = param[2], k = param[1], match = v[1][1];
              if(typeof match === "number")
               return caml_call2(f, k, parse_lazy(doc, k));
              switch(match[0]){
                case 0:
                 var obj = match[1]; return caml_call2(f, k, obj);
                case 1:
                 var obj$0 = match[1]; return caml_call2(f, k, obj$0);
                default:
                 var func = match[4], s = match[2], themap = match[1];
                 return caml_call2
                         (f, k, parse_delayed_object_stream(themap, k, s, doc, func));
              }
             },
             _aG_);
   }
   function objiter_gen(f, doc){
    resolve_all_delayed_object_str(doc);
    function f$0(k, v){
     var match = v[1][1];
     if(typeof match !== "number")
      switch(match[0]){
        case 0:
         var g$0 = v[2], obj = match[1]; return caml_call3(f, k, g$0, obj);
        case 1:
         var g$1 = v[2], obj$0 = match[1];
         return caml_call3(f, k, g$1, obj$0);
        default:
         var g$2 = v[2], func = match[4], s = match[2], themap = match[1];
         return caml_call3
                 (f,
                  k,
                  g$2,
                  parse_delayed_object_stream(themap, k, s, doc, func));
      }
     var g = v[2];
     return caml_call3(f, k, g, parse_lazy(doc, k));
    }
    return caml_call2(pdfobjmap_iter, f$0, doc[4][3]);
   }
   function objnumbers(pdf){
    var keys = [0, 0];
    objiter
     (function(k, param){return caml_call2(Pdfutil[170], keys, k);}, pdf);
    return caml_call1(Pdfutil[16], keys[1]);
   }
   function objcard(pdf){
    var card = [0, 0];
    objiter(function(_aF_, param){card[1]++; return 0;}, pdf);
    return card[1];
   }
   function addobj(doc, obj){
    var num = doc[4][1] + 1 | 0;
    addobj_given_num(doc, [0, num, obj]);
    return num;
   }
   function objects_of_list(parse, l){
    var maxobj = [0, 0], map = [0, pdfobjmap_empty(0)];
    caml_call2
     (Pdfutil[17],
      function(param){
       var v = param[2], k = param[1];
       maxobj[1] = caml_call2(Pdfutil[191], maxobj[1], k);
       map[1] = pdfobjmap_add(k, v, map[1]);
       return 0;
      },
      l);
    var _aE_ = caml_call1(Pdfutil[208], 0);
    return [0, maxobj[1], parse, map[1], _aE_];
   }
   function page_reference_numbers_inner(pdf, pages_node, node_number){
    var match = lookup_direct(pdf, cst_Type, pages_node);
    a:
    if(match){
     var _aC_ = match[1];
     if(typeof _aC_ !== "number" && 4 === _aC_[0]){
      if(_aC_[1] !== cst_Page) break a;
      return [0, node_number, 0];
     }
    }
    var match$0 = lookup_direct(pdf, cst_Kids, pages_node);
    if(match$0){
     var match$1 = match$0[1];
     if(typeof match$1 !== "number" && 5 === match$1[0]){
      var
       elts = match$1[1],
       _aD_ =
         caml_call2
          (Pdfutil[42],
           function(param){
            if(typeof param !== "number" && 8 === param[0]){
             var i = param[1];
             return [0,
                     page_reference_numbers_inner(pdf, direct(pdf, [8, i]), i)];
            }
            return 0;
           },
           elts);
      return caml_call1(Pdfutil[22], _aD_);
     }
    }
    return [0, node_number, 0];
   }
   function page_reference_numbers(pdf){
    var
     root = lookup_obj(pdf, pdf[3]),
     match = lookup_direct(pdf, cst_Pages, root);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, PDFError, cst_No_Pages_found_in_Root], 1);
    var pages_node = match[1];
    return page_reference_numbers_inner(pdf, pages_node, -1);
   }
   function renumber_object_parsed(pdf, changes, obj){
    if(typeof obj !== "number")
     switch(obj[0]){
       case 5:
        var a = obj[1];
        return recurse_array
                (function(_aB_){
                  return renumber_object_parsed(pdf, changes, _aB_);
                 },
                 a);
       case 6:
        var d = obj[1];
        return recurse_dict
                (function(_aA_){
                  return renumber_object_parsed(pdf, changes, _aA_);
                 },
                 d);
       case 7:
        var match = obj[1][1], s = match[2], p = match[1];
        return [7, [0, [0, renumber_object_parsed(pdf, changes, p), s]]];
       case 8:
        var i = obj[1], match$0 = caml_call2(Pdfutil[209], changes, i);
        if(match$0) var x = match$0[1], i$0 = x; else var i$0 = i;
        return [8, i$0];
     }
    return obj;
   }
   function renumber_object(pdf, changes, objnum, param){
    if(typeof param === "number")
     return renumber_object_parsed(pdf, changes, parse_lazy(pdf, objnum));
    if(2 === param[0]){
     var func = param[4], s = param[2], themap = param[1];
     return renumber_object_parsed
             (pdf,
              changes,
              parse_delayed_object_stream(themap, objnum, s, pdf, func));
    }
    var obj = param[1];
    return renumber_object_parsed(pdf, changes, obj);
   }
   function changes(pdf){
    var
     card = objcard(pdf),
     order = caml_call2(Pdfutil[103], 1, card),
     change_table = caml_call2(Stdlib_Hashtbl[1], 0, card),
     _ay_ = objnumbers(pdf),
     _az_ = caml_call1(Stdlib_Hashtbl[5], change_table);
    caml_call3(Stdlib_List[28], _az_, _ay_, order);
    return change_table;
   }
   function renumber(change_table, pdf){
    var match = caml_call2(Pdfutil[209], change_table, pdf[3]);
    if(match) var x = match[1], root = x; else var root = pdf[3];
    var
     trailerdict = renumber_object(pdf, change_table, 0, [0, pdf[5]]),
     objs = [0, 0];
    objiter
     (function(k, v){return caml_call2(Pdfutil[170], objs, [0, k, [0, v]]);},
      pdf);
    var
     match$0 = caml_call1(Pdfutil[26], objs[1]),
     objs$0 = match$0[2],
     nums = match$0[1],
     objs$1 =
       caml_call3
        (Pdfutil[25],
         function(_aw_, _ax_){
          return renumber_object(pdf, change_table, _aw_, _ax_);
         },
         nums,
         objs$0),
     nums$0 =
       caml_call2
        (Pdfutil[24],
         function(k){
          var match = caml_call2(Pdfutil[209], change_table, k);
          if(! match) return k;
          var x = match[1];
          return x;
         },
         nums),
     _au_ =
       caml_call2
        (Pdfutil[24], function(x){return [0, [0, [0, x]], 0];}, objs$1),
     _av_ = caml_call2(Pdfutil[31], nums$0, _au_),
     objects = objects_of_list(pdf[4][2], _av_),
     newids = caml_call1(Pdfutil[208], 0);
    caml_call2
     (Stdlib_Hashtbl[12],
      function(o, s){
       var match = caml_call2(Pdfutil[209], change_table, o);
       if(! match) return 0;
       var o$0 = match[1];
       return caml_call3(Stdlib_Hashtbl[5], newids, o$0, s);
      },
      pdf[4][4]);
    objects[4] = newids;
    return [0, pdf[1], pdf[2], root, objects, trailerdict, pdf[6], pdf[7]];
   }
   function renumber_pdfs(pdfs){
    var
     keylists = caml_call2(Pdfutil[24], objnumbers, pdfs),
     bse = [0, 1],
     tables = [0, 0];
    caml_call2
     (Pdfutil[17],
      function(k){
       var
        length = caml_call1(Pdfutil[35], k),
        table = caml_call2(Stdlib_Hashtbl[1], 0, length),
        _as_ = caml_call2(Pdfutil[101], bse[1], (bse[1] + length | 0) - 1 | 0),
        _at_ = caml_call1(Stdlib_Hashtbl[5], table);
       caml_call3(Stdlib_List[28], _at_, k, _as_);
       caml_call2(Pdfutil[170], tables, table);
       return caml_call2(Pdfutil[162], bse, length);
      },
      keylists);
    var _ar_ = caml_call1(Pdfutil[16], tables[1]);
    return caml_call3(Pdfutil[25], renumber, _ar_, pdfs);
   }
   function refset_empty(param){return caml_call2(Stdlib_Hashtbl[1], 0, 500);}
   function refset_add(n, rs){
    caml_call3(Stdlib_Hashtbl[11], rs, n, 0);
    return rs;
   }
   function refset_elts(rs){
    var r = [0, 0];
    caml_call2
     (Stdlib_Hashtbl[12],
      function(k, param){r[1] = [0, k, r[1]]; return 0;},
      rs);
    return r[1];
   }
   function referenced_pdfobj
   (no_follow_entries, no_follow_contains, pdf, found, i, param$0){
    var i$0 = i, param$1 = param$0;
    for(;;){
     if(typeof param$1 !== "number")
      switch(param$1[0]){
        case 5:
         var a = param$1[1];
         return caml_call2
                 (Pdfutil[17],
                  function(_aq_){
                   return referenced_pdfobj
                           (no_follow_entries,
                            no_follow_contains,
                            pdf,
                            found,
                            i$0,
                            _aq_);
                  },
                  a);
        case 6:
         var
          d = param$1[1],
          d$0 =
            0 === no_follow_entries
             ? d
             : caml_call2
               (Pdfutil[87],
                function(param){
                 var k = param[1];
                 return caml_call2(Pdfutil[44], k, no_follow_entries);
                },
                d);
         return caml_call2
                 (Pdfutil[17],
                  function(param){
                   var v = param[2];
                   return referenced_pdfobj
                           (no_follow_entries, no_follow_contains, pdf, found, i$0, v);
                  },
                  d$0);
        case 7:
         var s = param$1[1][1][1]; param$1 = s; continue;
        case 8:
         var
          j = param$1[1],
          rs = found[1],
          _aj_ = 1 - caml_call2(Stdlib_Hashtbl[9], rs, j);
         if(! _aj_) return _aj_;
         try{var _am_ = lookup_obj(pdf, j), obj = _am_;}
         catch(_ap_){
          var _ak_ = caml_wrap_exception(_ap_);
          if(_ak_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ak_, 0);
          var obj = 0;
         }
         if(typeof obj !== "number" && 6 === obj[0]){
          var
           d$1 = obj[1],
           _ah_ = caml_call1(Pdfutil[95], no_follow_entries),
           _ai_ = _ah_ ? caml_call1(Pdfutil[95], no_follow_contains) : _ah_;
          a:
          if(_ai_)
           var _al_ = _ai_;
          else{
           let d = d$1;
           b:
           {
            var
             param =
               caml_call2
                (Pdfutil[24],
                 function(a){
                  var l = d;
                  for(;;){
                   if(! l) return 0;
                   var _an_ = a[2], name = a[1];
                   a:
                   if(typeof _an_ !== "number" && 4 === _an_[0]){
                    var _ao_ = l[1], match = _ao_[2];
                    if(typeof match !== "number" && 4 === match[0]){
                     var hh = match[1], h = _ao_[1], n = _an_[1];
                     if(runtime.caml_equal(name, h) && n === hh) return 1;
                     break a;
                    }
                   }
                   var t = l[2];
                   l = t;
                  }
                 },
                 no_follow_contains);
            for(;;){
             if(! param) break;
             var t = param[2], h = param[1], _ag_ = 1 - h;
             if(! _ag_) break b;
             param = t;
            }
            var _al_ = 1;
            break a;
           }
           var _al_ = _ag_;
          }
          if(! _al_) return _al_;
          found[1] = refset_add(j, found[1]);
          i$0 = j;
          param$1 = obj;
          continue;
         }
         found[1] = refset_add(j, found[1]);
         i$0 = j;
         param$1 = obj;
         continue;
      }
     return 0;
    }
   }
   function referenced
   (no_follow_entries, no_follow_contains, pdf, found, i, param){
    var param$0 = param;
    for(;;)
     if(typeof param$0 === "number")
      param$0 = [0, parse_lazy(pdf, i)];
     else
      switch(param$0[0]){
        case 0:
         var o = param$0[1];
         if(typeof o !== "number" && 4 < o[0])
          return referenced_pdfobj
                  (no_follow_entries, no_follow_contains, pdf, found, i, o);
         return;
        case 1:
         var x = param$0[1]; param$0 = [0, x]; break;
        default:
         var
          func = param$0[4],
          s = param$0[2],
          themap = param$0[1],
          result = parse_delayed_object_stream(themap, i, s, pdf, func);
         param$0 = [1, result];
      }
   }
   function remove_unreferenced(pdf){
    var nums = [0, 0];
    function f2(objnum){
     function f1(param){
      if(typeof param !== "number" && 6 === param[0]){
       var d = param[1], match = caml_call2(Pdfutil[153], cst_Type$0, d);
       a:
       {
        b:
        if(match){
         var _ae_ = match[1];
         if(typeof _ae_ !== "number" && 4 === _ae_[0]){
          if(_ae_[1] !== cst_Page) break b;
          var _af_ = 1;
          break a;
         }
        }
        var _af_ = 0;
       }
       if(_af_){nums[1] = [0, objnum, nums[1]]; return 0;}
      }
      return 0;
     }
     return f1;
    }
    objiter(f2, pdf);
    var page_object_numbers = nums[1];
    function nullify(numbers, x){
     if(typeof x !== "number")
      switch(x[0]){
        case 5:
         var elts = x[1];
         return recurse_array
                 (function(_ad_){return nullify(numbers, _ad_);}, elts);
        case 6:
         var
          elts$0 = x[1],
          p2 = function(_ac_){return nullify(numbers, _ac_);};
         return recurse_dict(p2, elts$0);
        case 7:
         var match = x[1][1], s = match[2], p = match[1];
         return [7, [0, [0, nullify(numbers, p), s]]];
        case 8:
         var i = x[1];
         if(0 !== caml_call2(Pdfutil[209], numbers, i)) return 0;
         break;
      }
     return x;
    }
    var
     refnums = page_reference_numbers(pdf),
     _T_ = caml_call1(Pdfutil[35], page_object_numbers);
    if(caml_call1(Pdfutil[35], refnums) !== _T_){
     var table = caml_call2(Stdlib_Hashtbl[1], 0, 50);
     caml_call2
      (Pdfutil[17],
       function(x){return caml_call3(Stdlib_Hashtbl[5], table, x, 0);},
       page_object_numbers);
     var _U_ = caml_call1(Stdlib_Hashtbl[10], table);
     caml_call2(Pdfutil[17], _U_, refnums);
     objselfmap(function(_ab_){return nullify(table, _ab_);}, pdf);
    }
    var found = [0, refset_empty(0)], _V_ = [0, lookup_obj(pdf, pdf[3])];
    referenced(0, 0, pdf, found, pdf[3], _V_);
    referenced(0, 0, pdf, found, 0, [0, pdf[5]]);
    found[1] = refset_add(pdf[3], found[1]);
    var
     eltnumbers = refset_elts(found[1]),
     elements =
       caml_call2
        (Pdfutil[24],
         function(n){
          try{var _$_ = lookup_obj(pdf, n); return _$_;}
          catch(_aa_){
           var ___ = caml_wrap_exception(_aa_);
           if(___ === Stdlib[8]) return 0;
           throw caml_maybe_attach_backtrace(___, 0);
          }
         },
         eltnumbers),
     init = pdf[4],
     _W_ = init[4],
     _X_ = pdfobjmap_empty(0);
    pdf[4] = [0, 0, init[2], _X_, _W_];
    var _Y_ = caml_call2(Pdfutil[31], eltnumbers, elements);
    return caml_call2
            (Pdfutil[17],
             function(_Z_){return addobj_given_num(pdf, _Z_);},
             _Y_);
   }
   function objects_referenced
   (no_follow_entries, no_follow_contains, pdf, pdfobject){
    var set = [0, refset_empty(0)];
    referenced
     (no_follow_entries, no_follow_contains, pdf, set, 0, [0, pdfobject]);
    return refset_elts(set[1]);
   }
   function bigarray_of_stream(s){
    getstream(s);
    if(typeof s !== "number" && 7 === s[0]){
     var match = s[1][1][2];
     if(0 === match[0]){var bytes = match[1]; return bytes;}
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_couldn_t_extract_raw_strea], 1);
   }
   function unique_key(prefix, obj){
    a:
    if(typeof obj !== "number"){
     switch(obj[0]){
       case 6:
        var elts = obj[1]; break;
       case 7:
        var _S_ = obj[1][1][1];
        if(typeof _S_ !== "number" && 6 === _S_[0]){var elts = _S_[1]; break;}
        break a;
       default: break a;
     }
     var
      names = caml_call1(Pdfutil[26], elts)[1],
      name_of_num =
        function(n){return caml_call3(Stdlib_Printf[4], _f_, prefix, n);},
      num = [0, 0];
     for(;;){
      var _R_ = name_of_num(num[1]);
      if(! caml_call2(Pdfutil[44], _R_, names)) return name_of_num(num[1]);
      num[1]++;
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_unique_key_Not_a_dictionar], 1);
   }
   function generate_id(param, path, gettime){
    var match = caml_call1(Stdlib_Sys[2], cst_CAMLPDF_REPRODUCIBLE_IDS);
    a:
    {
     if(match && match[1] === "true"){
      var d = caml_call1(Stdlib_Digest[3], cst_camlpdf);
      break a;
     }
     var
      _O_ = caml_call1(gettime, 0),
      _P_ = caml_call1(Stdlib[35], _O_),
      _Q_ = caml_call2(Stdlib[28], path, _P_),
      d = caml_call1(Stdlib_Digest[3], _Q_);
    }
    return [5, [0, [3, d], [0, [3, d], 0]]];
   }
   function find_indirect(key, dict){
    if(typeof dict !== "number" && 6 === dict[0]){
     var d = dict[1], match = caml_call2(Pdfutil[153], key, d);
     if(match){
      var match$0 = match[1];
      if(typeof match$0 !== "number" && 8 === match$0[0]){var i = match$0[1]; return [0, i];}
     }
     return 0;
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_find_indirect_not_a_dictio], 1);
   }
   function nametree_lookup_kids(pdf, k, param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 !== "number" && 5 === param$0[0]){
      var match = param$0[1];
      if(! match) return 0;
      var t = match[2], h = match[1], match$0 = nametree_lookup(pdf, k, h);
      if(match$0){var result = match$0[1]; return [0, result];}
      param$0 = [5, t];
      continue;
     }
     throw caml_maybe_attach_backtrace
            ([0, PDFError, cst_nametree_lookup_kids_malfo], 1);
    }
   }
   function array_lookup(k, param){
    if(typeof param !== "number" && 5 === param[0]){
     var elts = param[1], _N_ = caml_call1(Pdfutil[225], elts);
     return caml_call2(Pdfutil[153], k, _N_);
    }
    throw caml_maybe_attach_backtrace([0, PDFError, cst_Bad_lookup_array], 1);
   }
   function nametree_lookup(pdf, k, dict){
    var match = lookup_direct(pdf, cst_Limits, dict);
    if(! match){
     var match$2 = lookup_direct(pdf, cst_Kids$1, dict);
     if(match$2){
      var kids$0 = match$2[1];
      return nametree_lookup_kids(pdf, k, kids$0);
     }
     var match$3 = lookup_direct_orelse(pdf, cst_Names$0, cst_Nums$0, dict);
     if(! match$3)
      throw caml_maybe_attach_backtrace
             ([0, PDFError, cst_Missing_name_tree_entry], 1);
     var names$0 = match$3[1];
     return array_lookup(k, names$0);
    }
    var _K_ = match[1];
    a:
    if(typeof _K_ !== "number" && 5 === _K_[0]){
     var _L_ = _K_[1];
     if(! _L_) break a;
     var _M_ = _L_[2];
     if(! _M_) break a;
     if(_M_[2]) break a;
     var r = _M_[1], l = _L_[1];
     if(! runtime.caml_lessthan(k, l) && ! runtime.caml_greaterthan(k, r)){
      var match$0 = lookup_direct(pdf, cst_Kids$0, dict);
      if(match$0){
       var kids = match$0[1];
       return nametree_lookup_kids(pdf, k, kids);
      }
      var match$1 = lookup_direct_orelse(pdf, cst_Names, cst_Nums, dict);
      if(! match$1)
       throw caml_maybe_attach_backtrace
              ([0, PDFError, cst_Malformed_name_tree_entry], 1);
      var names = match$1[1];
      return array_lookup(k, names);
     }
     return 0;
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_Malformed_name_tree], 1);
   }
   function contents_of_nametree(pdf, tree){
    var match = lookup_direct_orelse(pdf, cst_Names$1, cst_Nums$1, tree);
    if(match){
     var match$0 = match[1];
     if(typeof match$0 !== "number" && 5 === match$0[0]){
      var names = match$0[1], prev = 0, param = names;
      for(;;){
       if(! param) return caml_call1(Pdfutil[16], prev);
       var match$3 = param[2], k = param[1];
       if(! match$3){
        caml_call1(Pdfe[3], cst_warning_contents_of_nametr);
        return caml_call1(Pdfutil[16], prev);
       }
       var r = match$3[2], v = match$3[1], prev$0 = [0, [0, k, v], prev];
       prev = prev$0;
       param = r;
      }
     }
    }
    var match$1 = lookup_direct(pdf, cst_Kids$2, tree);
    if(match$1){
     var match$2 = match$1[1];
     if(typeof match$2 !== "number" && 5 === match$2[0]){
      var
       kids = match$2[1],
       _I_ =
         caml_call2
          (Pdfutil[24],
           function(_J_){return contents_of_nametree(pdf, _J_);},
           kids);
      return caml_call1(Pdfutil[22], _I_);
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_contents_of_nametree_neith], 1);
   }
   function deep_copy(frompdf){
    var
     _C_ = frompdf[7],
     _D_ = frompdf[6],
     _E_ = frompdf[5],
     _F_ = caml_call1(Stdlib_Hashtbl[4], frompdf[4][4]),
     from = frompdf[4][3];
    resolve_all_delayed_object_str(frompdf);
    var pdfobjmap = pdfobjmap_empty(0);
    caml_call2
     (pdfobjmap_iter,
      function(objnum, param){
       var objdata = param[1][1], gen = param[2];
       function deep_copy_pdfobject(s){
        if(typeof s !== "number" && 7 === s[0]){
         getstream(s);
         if(typeof s !== "number" && 7 === s[0]){
          var _H_ = s[1][1], match = _H_[2], dict = _H_[1];
          if(0 === match[0]){
           var stream = match[1];
           return [7, [0, [0, dict, [0, caml_call1(Pdfio[43], stream)]]]];
          }
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
        }
        return s;
       }
       if(typeof objdata === "number")
        var _G_ = 0;
       else
        switch(objdata[0]){
          case 0:
           var obj = objdata[1], _G_ = [0, deep_copy_pdfobject(obj)]; break;
          case 1:
           var obj$0 = objdata[1], _G_ = [1, deep_copy_pdfobject(obj$0)];
           break;
          default:
           var
            z = objdata[4],
            y = objdata[3],
            x = objdata[2],
            themap = objdata[1],
            _G_ = [2, themap, x, y, z];
        }
       pdfobjmap_add(objnum, [0, [0, _G_], gen], pdfobjmap);
       return 0;
      },
      from);
    return [0,
            frompdf[1],
            frompdf[2],
            frompdf[3],
            [0, frompdf[4][1], frompdf[4][2], pdfobjmap, _F_],
            _E_,
            _D_,
            _C_];
   }
   function change_id(pdf, f){
    var match = pdf[5];
    if(typeof match !== "number" && 6 === match[0]){
     var
      d = match[1],
      _B_ =
        generate_id
         (pdf, f, function(param){return caml_call1(Stdlib_Random[14], 1.);});
     pdf[5] = [6, caml_call3(Pdfutil[155], cst_ID, _B_, d)];
     return 0;
    }
    throw caml_maybe_attach_backtrace
           ([0, PDFError, cst_Bad_trailer_dictionary], 1);
   }
   function transform_rect(pdf, transform, rect){
    var
     match = parse_rectangle(pdf, rect),
     maxy = match[4],
     maxx = match[3],
     miny = match[2],
     minx = match[1],
     match$0 = caml_call2(Pdftransform[18], transform, [0, minx, miny]),
     y0 = match$0[2],
     x0 = match$0[1],
     match$1 = caml_call2(Pdftransform[18], transform, [0, maxx, maxy]),
     y1 = match$1[2],
     x1 = match$1[1],
     match$2 = caml_call2(Pdftransform[18], transform, [0, minx, maxy]),
     y2 = match$2[2],
     x2 = match$2[1],
     match$3 = caml_call2(Pdftransform[18], transform, [0, maxx, miny]),
     y3 = match$3[2],
     x3 = match$3[1],
     _t_ = caml_call2(Pdfutil[192], x2, x3),
     _u_ = caml_call2(Pdfutil[192], x0, x1),
     minx$0 = caml_call2(Pdfutil[192], _u_, _t_),
     _v_ = caml_call2(Pdfutil[192], y2, y3),
     _w_ = caml_call2(Pdfutil[192], y0, y1),
     miny$0 = caml_call2(Pdfutil[192], _w_, _v_),
     _x_ = caml_call2(Pdfutil[193], x2, x3),
     _y_ = caml_call2(Pdfutil[193], x0, x1),
     maxx$0 = caml_call2(Pdfutil[193], _y_, _x_),
     _z_ = caml_call2(Pdfutil[193], y2, y3),
     _A_ = caml_call2(Pdfutil[193], y0, y1),
     maxy$0 = caml_call2(Pdfutil[193], _A_, _z_);
    return [5,
            [0,
             [2, minx$0],
             [0, [2, miny$0], [0, [2, maxx$0], [0, [2, maxy$0], 0]]]]];
   }
   function transform_quadpoints(pdf, transform, qp){
    if(typeof qp !== "number" && 5 === qp[0]){
     var
      qps = qp[1],
      _k_ = caml_call2(Pdfutil[90], 8, qps),
      _l_ =
        caml_call2
         (Pdfutil[24],
          function(qp){
           if(qp){
            var _m_ = qp[2];
            if(_m_){
             var _n_ = _m_[2];
             if(_n_){
              var _o_ = _n_[2];
              if(_o_){
               var _p_ = _o_[2];
               if(_p_){
                var _q_ = _p_[2];
                if(_q_){
                 var _r_ = _q_[2];
                 if(_r_){
                  var _s_ = _r_[2];
                  if(_s_ && ! _s_[2]){
                   var
                    y4 = _s_[1],
                    x4 = _r_[1],
                    y3 = _q_[1],
                    x3 = _p_[1],
                    y2 = _o_[1],
                    x2 = _n_[1],
                    y1 = _m_[1],
                    x1 = qp[1],
                    y4$0 = getnum(pdf, y4),
                    x4$0 = getnum(pdf, x4),
                    y3$0 = getnum(pdf, y3),
                    x3$0 = getnum(pdf, x3),
                    y2$0 = getnum(pdf, y2),
                    x2$0 = getnum(pdf, x2),
                    y1$0 = getnum(pdf, y1),
                    x1$0 = getnum(pdf, x1),
                    match =
                      caml_call2(Pdftransform[18], transform, [0, x1$0, y1$0]),
                    y1$1 = match[2],
                    x1$1 = match[1],
                    match$0 =
                      caml_call2(Pdftransform[18], transform, [0, x2$0, y2$0]),
                    y2$1 = match$0[2],
                    x2$1 = match$0[1],
                    match$1 =
                      caml_call2(Pdftransform[18], transform, [0, x3$0, y3$0]),
                    y3$1 = match$1[2],
                    x3$1 = match$1[1],
                    match$2 =
                      caml_call2(Pdftransform[18], transform, [0, x4$0, y4$0]),
                    y4$1 = match$2[2],
                    x4$1 = match$2[1];
                   return caml_call2
                           (Pdfutil[24],
                            function(x){return [2, x];},
                            [0,
                             x1$1,
                             [0,
                              y1$1,
                              [0,
                               x2$1,
                               [0, y2$1, [0, x3$1, [0, y3$1, [0, x4$1, [0, y4$1, 0]]]]]]]]);
                  }
                 }
                }
               }
              }
             }
            }
           }
           caml_call1(Pdfe[3], cst_Malformed_QuadPoints_forma);
           return qp;
          },
          _k_);
     return [5, caml_call1(Pdfutil[22], _l_)];
    }
    var
     _i_ = caml_call1(string_of_pdf[1], qp),
     _j_ = caml_call2(Stdlib_Printf[4], _h_, _i_);
    caml_call1(Pdfe[3], _j_);
    return qp;
   }
   var
    Pdf =
      [0,
       pdfobjmap_empty,
       pdfobjmap_find,
       empty,
       PDFError,
       input_pdferror,
       getstream,
       getnum,
       lookup_obj,
       lookup_fail,
       lookup_exception,
       lookup_direct,
       lookup_immediate,
       lookup_chain,
       replace_chain,
       indirect_number,
       lookup_direct_orelse,
       remove_dict_entry,
       replace_dict_entry,
       add_dict_entry,
       direct,
       objcard,
       removeobj,
       addobj,
       addobj_given_num,
       parse_rectangle,
       parse_matrix,
       make_matrix,
       renumber_pdfs,
       unique_key,
       objiter,
       objiter_inorder,
       objiter_gen,
       objselfmap,
       iter_stream,
       objselect,
       remove_unreferenced,
       is_whitespace,
       is_not_whitespace,
       is_delimiter,
       page_reference_numbers,
       objnumbers,
       recurse_dict,
       recurse_array,
       changes,
       renumber,
       renumber_object_parsed,
       bigarray_of_stream,
       objects_of_list,
       objects_referenced,
       generate_id,
       catalog_of_pdf,
       find_indirect,
       nametree_lookup,
       contents_of_nametree,
       deep_copy,
       change_id,
       length_of_toget,
       input_of_toget,
       position_of_toget,
       toget,
       string_of_pdf,
       transform_rect,
       transform_quadpoints];
   runtime.caml_register_global(74, Pdf, "Pdf");
   return;
  }
  (globalThis));

//# 6072 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$22 = "",
    cst_AESV2 = "/AESV2",
    cst_AESV3 = "/AESV3",
    cst_AuthEvent = "/AuthEvent",
    cst_CF$0 = "/CF",
    cst_CFM$0 = "/CFM",
    cst_Crypt = "/Crypt",
    cst_DocOpen = "/DocOpen",
    cst_Encrypt$11 = "/Encrypt",
    cst_EncryptMetadata$4 = "/EncryptMetadata",
    cst_Filter$1 = "/Filter",
    cst_ID$2 = "/ID",
    cst_Length$2 = "/Length",
    cst_O$6 = "/O",
    cst_OE$1 = "/OE",
    cst_P$5 = "/P",
    cst_Perms$2 = "/Perms",
    cst_R$1 = "/R",
    cst_Standard = "/Standard",
    cst_StdCF$0 = "/StdCF",
    cst_StmF = "/StmF",
    cst_StrF = "/StrF",
    cst_U$6 = "/U",
    cst_UE$1 = "/UE",
    cst_V$0 = "/V",
    cst_V2 = "/V2",
    cst_pdfcrypt_ml = "pdfcrypt.ml",
    cst_recrypt_pdf_bad_oe$1 = "recrypt_pdf: bad /oe",
    cst_recrypt_pdf_bad_ue$1 = "recrypt_pdf: bad /ue",
    cst_recrypt_pdf_no_saved_encry$1 = "recrypt_pdf: no saved encryption",
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$19 = cst$22,
    cst$20 = cst$22,
    cst$21 = cst$22,
    cst$16 = cst$22,
    cst$17 = cst$22,
    cst$18 = cst$22,
    cst$15 = cst$22,
    cst$14 = cst$22,
    cst$12 = cst$22,
    cst$13 = cst$22,
    cst$11 = cst$22,
    cst$10 = cst$22,
    cst$9 = cst$22,
    cst$8 = cst$22,
    cst$7 = cst$22,
    cst$6 = cst$22,
    cst$5 = cst$22,
    cst$4 = cst$22,
    cst$3 = cst$22,
    cst$2 = cst$22,
    cst$1 = cst$22,
    cst$0 = "\n",
    cst = cst$22,
    Pdf = global_data.Pdf,
    Pdfcryptprimitives = global_data.Pdfcryptprimitives,
    Pdfio = global_data.Pdfio,
    Pdfutil = global_data.Pdfutil,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Pdfe = global_data.Pdfe,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    crypt_debug = [0, 0],
    paddings =
      [0,
        40,
        191,
        78,
        94,
        78,
        117,
        138,
        65,
        100,
        0,
        78,
        86,
        255,
        250,
        1,
        8,
        46,
        46,
        0,
        182,
        208,
        104,
        62,
        128,
        47,
        12,
        169,
        254,
        100,
        83,
        105,
        122].slice
       ();
   function pad_password(password){
    var pw = caml_array_make(32, 0);
    caml_call2
     (Stdlib_Array[13],
      function(i, v){
       var
        _er_ = i < 32 ? 1 : 0,
        _es_ = _er_ ? (caml_check_bound(pw, i)[1 + i] = v, 0) : _er_;
       return _es_;
      },
      password);
    var n = password.length - 1;
    if(n < 32 && 31 >= n){
     var x = n;
     for(;;){
      var _eo_ = x - n | 0, _ep_ = caml_check_bound(paddings, _eo_)[1 + _eo_];
      caml_check_bound(pw, x)[1 + x] = _ep_;
      var _eq_ = x + 1 | 0;
      if(31 === x) break;
      x = _eq_;
     }
    }
    return pw;
   }
   function find_key(no_encrypt_metadata, password, r, o, p, id, keylength){
    var
     password$0 = caml_call1(Pdfio[37], password),
     o$0 = caml_call1(Pdfio[37], o),
     id$0 = caml_call1(Pdfio[37], id),
     pw = pad_password(password$0),
     _ea_ = caml_call2(Pdfutil[126], p, -16777216),
     _eb_ = caml_call2(Pdfutil[123], _ea_, 24),
     _ec_ = caml_call1(Pdfutil[116], _eb_),
     _ed_ = caml_call2(Pdfutil[126], p, 16711680),
     _ee_ = caml_call2(Pdfutil[123], _ed_, 16),
     _ef_ = caml_call1(Pdfutil[116], _ee_),
     _eg_ = caml_call2(Pdfutil[126], p, 65280),
     _eh_ = caml_call2(Pdfutil[123], _eg_, 8),
     _ei_ = caml_call1(Pdfutil[116], _eh_),
     _ej_ = caml_call2(Pdfutil[126], p, 255),
     from_p = [0, caml_call1(Pdfutil[116], _ej_), _ei_, _ef_, _ec_];
    a:
    {
     if(4 <= r && no_encrypt_metadata){
      var rev4_no_metadata = [0, 255, 255, 255, 255];
      break a;
     }
     var rev4_no_metadata = [0];
    }
    var
     todigest =
       [0, pw, [0, o$0, [0, from_p, [0, id$0, [0, rev4_no_metadata, 0]]]]],
     hash_input = caml_call1(Pdfio[38], todigest),
     hashed = caml_call1(Stdlib_Digest[3], hash_input);
    if(3 <= r){
     var h = [0, hashed], x = 1;
     for(;;){
      var
       hashed$1 = caml_call1(Stdlib_Digest[3], h[1]),
       _el_ = caml_call1(Pdfio[37], hashed$1),
       _em_ = caml_call3(Stdlib_Array[6], _el_, 0, keylength / 8 | 0);
      h[1] = caml_call1(Pdfio[39], _em_);
      var _en_ = x + 1 | 0;
      if(50 === x){var hashed$0 = h[1]; break;}
      x = _en_;
     }
    }
    else
     var hashed$0 = hashed;
    var _ek_ = caml_call1(Pdfio[37], hashed$0);
    return caml_call3(Stdlib_Array[6], _ek_, 0, keylength / 8 | 0);
   }
   function authenticate_user
   (no_encrypt_metadata, password, r, u, o, p, id, keylength){
    var
     u$0 = caml_call1(Pdfio[37], u),
     key = find_key(no_encrypt_metadata, password, r, o, p, id, keylength);
    if(3 > r){
     var
      _d__ = caml_call1(Pdfio[35], paddings),
      _d$_ = caml_call2(Pdfcryptprimitives[1], key, _d__);
     return caml_equal(u$0, caml_call1(Pdfio[36], _d$_));
    }
    var
     id$0 = caml_call1(Pdfio[37], id),
     todigest = [0, paddings, [0, id$0, 0]],
     hash_input = caml_call1(Pdfio[38], todigest),
     hashed = caml_call1(Stdlib_Digest[3], hash_input),
     _d0_ = caml_call1(Pdfio[30], hashed),
     _d1_ = caml_call2(Pdfcryptprimitives[1], key, _d0_),
     encrypted_hashed = caml_call1(Pdfio[36], _d1_),
     u$1 = [0, [0]];
    u$1[1] = encrypted_hashed;
    var x = 1;
    for(;;){
     var
      key$0 = caml_array_make(keylength / 8 | 0, 0),
      _d4_ = (keylength / 8 | 0) - 1 | 0,
      _d3_ = 0;
     if(_d4_ >= 0){
      var k = _d3_;
      for(;;){
       var _d8_ = caml_check_bound(key, k)[1 + k] ^ x;
       caml_check_bound(key$0, k)[1 + k] = _d8_;
       var _d9_ = k + 1 | 0;
       if(_d4_ === k) break;
       k = _d9_;
      }
     }
     var
      _d5_ = caml_call1(Pdfio[35], u$1[1]),
      _d6_ = caml_call2(Pdfcryptprimitives[1], key$0, _d5_);
     u$1[1] = caml_call1(Pdfio[36], _d6_);
     var _d7_ = x + 1 | 0;
     if(19 === x){
      var _d2_ = u$1[1];
      return caml_equal(caml_call3(Stdlib_Array[6], u$0, 0, 16), _d2_);
     }
     x = _d7_;
    }
   }
   var
    string_of_pdf = [0, function(param){return cst;}],
    cst_decrypt_no_key_B = "decrypt: no key B",
    cst_Filter = cst_Filter$1,
    cst_Type = "/Type",
    cst_DecodeParms = "/DecodeParms",
    cst_Name = "/Name",
    _a_ = [0, cst_pdfcrypt_ml, 296, 9],
    _b_ = [0, cst_pdfcrypt_ml, 253, 27],
    cst_Length = cst_Length$2,
    cst_decrypt_no_key_C = "decrypt: no key C",
    cst_Encrypt = cst_Encrypt$11,
    cst_Encrypt$0 = cst_Encrypt$11,
    cst_Encrypt$1 = cst_Encrypt$11,
    cst_Filter$0 = cst_Filter$1,
    cst_V = cst_V$0,
    cst_Length$0 = cst_Length$2,
    cst_R = cst_R$1,
    cst_too_small_in_get_encryptio = ": too small in get_encryption_values",
    cst_O = cst_O$6,
    cst_Bad_or_missing_O_entry = "Bad or missing /O entry",
    cst_O$0 = cst_O$6,
    cst_U = cst_U$6,
    cst_Bad_or_missing_U_entry = "Bad or missing /U entry",
    cst_U$0 = cst_U$6,
    cst_P = cst_P$5,
    cst_Bad_or_missing_P_entry = "Bad or missing /P entry",
    cst_ID = cst_ID$2,
    cst_Bad_or_missing_ID_element = "Bad or missing /ID element",
    cst_OE = cst_OE$1,
    cst_UE = cst_UE$1,
    cst_No_encryption_method = "No encryption method",
    cst_CF = cst_CF$0,
    cst_StdCF = cst_StdCF$0,
    cst_CFM = cst_CFM$0,
    cst_Length$1 = cst_Length$2,
    _c_ = [0, 0],
    cst_get_encryption_values_unen = "get_encryption_values: unencrypted pdf",
    _d_ = [0, [4, 6, [0, 2, 2], 0, 0], "%02x"];
   function decrypt
   (crypt_type,
    pdf,
    no_encrypt_metadata,
    encrypt,
    obj,
    gen,
    key,
    keylength,
    r,
    file_encryption_key,
    l){
    if(typeof l !== "number")
     switch(l[0]){
       case 3:
        var s = l[1], _dQ_ = caml_call2(Pdf[2], obj, pdf[4][3])[1][1];
        if(typeof _dQ_ !== "number" && 1 === _dQ_[0]) return [3, s];
        if(0 === crypt_type)
         var
          f =
            encrypt
             ? caml_call2(Pdfcryptprimitives[4], 0, 4)
             : caml_call2(Pdfcryptprimitives[2], 0, 4);
        else{
         a:
         {
          if(typeof crypt_type !== "number" && 1 === crypt_type[0]){var _dV_ = 1; break a;}
          var _dV_ = 0;
         }
         var
          f =
            _dV_
             ? encrypt
               ? caml_call2(Pdfcryptprimitives[4], 0, 8)
               : caml_call2(Pdfcryptprimitives[2], 0, 8)
             : Pdfcryptprimitives[1];
        }
        var s_ints = caml_call1(Pdfio[30], s);
        if(5 !== r && 6 !== r){
         var
          _dS_ = caml_call1(Pdfutil[115], gen),
          _dT_ = caml_call1(Pdfutil[115], obj),
          hash =
            caml_call5
             (Pdfcryptprimitives[9], crypt_type, _dT_, _dS_, key, keylength),
          _dU_ = caml_call2(f, hash, s_ints);
         return [3, caml_call1(Pdfio[41], _dU_)];
        }
        if(! file_encryption_key)
         throw caml_maybe_attach_backtrace
                ([0, Pdf[4], cst_decrypt_no_key_B], 1);
        var
         key$0 = file_encryption_key[1],
         _dR_ = caml_call2(f, caml_call1(Pdfio[37], key$0), s_ints);
        return [3, caml_call1(Pdfio[41], _dR_)];
       case 5:
        var a = l[1], _dW_ = caml_call2(Pdf[2], obj, pdf[4][3])[1][1];
        if(typeof _dW_ !== "number" && 1 === _dW_[0]) return [5, a];
        return caml_call2
                (Pdf[43],
                 function(_dZ_){
                  return decrypt
                          (crypt_type,
                           pdf,
                           no_encrypt_metadata,
                           encrypt,
                           obj,
                           gen,
                           key,
                           keylength,
                           r,
                           file_encryption_key,
                           _dZ_);
                 },
                 a);
       case 6:
        var d = l[1], _dX_ = caml_call2(Pdf[2], obj, pdf[4][3])[1][1];
        if(typeof _dX_ !== "number" && 1 === _dX_[0]) return [6, d];
        return caml_call2
                (Pdf[42],
                 function(_dY_){
                  return decrypt
                          (crypt_type,
                           pdf,
                           no_encrypt_metadata,
                           encrypt,
                           obj,
                           gen,
                           key,
                           keylength,
                           r,
                           file_encryption_key,
                           _dY_);
                 },
                 d);
       case 7:
        return decrypt_stream
                (crypt_type,
                 pdf,
                 no_encrypt_metadata,
                 encrypt,
                 obj,
                 gen,
                 key,
                 keylength,
                 r,
                 file_encryption_key,
                 l);
     }
    return l;
   }
   function decrypt_stream
   (crypt_type,
    pdf,
    no_encrypt_metadata,
    encrypt,
    obj,
    gen,
    key,
    keylength,
    r,
    file_encryption_key,
    stream){
    if(typeof stream !== "number" && 7 === stream[0]){
     var match$3 = stream[1][1], d = match$3[1];
     if(typeof d !== "number" && 6 === d[0]){
      var
       data = match$3[2],
       dict = d[1],
       match = caml_call3(Pdf[11], pdf, cst_Filter, d);
      a:
      {
       b:
       if(match){
        var _do_ = match[1];
        c:
        if(typeof _do_ !== "number"){
         switch(_do_[0]){
           case 4:
            if(_do_[1] !== cst_Crypt) break b; break;
           case 5:
            var _dz_ = _do_[1];
            if(! _dz_) break b;
            var _dA_ = _dz_[1];
            if(typeof _dA_ !== "number" && 4 === _dA_[0]){if(_dA_[1] !== cst_Crypt) break b; break;}
            break b;
           default: break c;
         }
         var match$1 = caml_call3(Pdf[11], pdf, cst_DecodeParms, d);
         d:
         {
          e:
          if(match$1){
           var _dt_ = match$1[1];
           f:
           if(typeof _dt_ !== "number"){
            switch(_dt_[0]){
              case 5:
               var _dv_ = _dt_[1];
               if(! _dv_) break e;
               var _dw_ = _dv_[1];
               if(typeof _dw_ !== "number" && 6 === _dw_[0]){var decodeparmsdict = _dw_[1]; break;}
               break e;
              case 6:
               var decodeparmsdict = _dt_[1]; break;
              default: break f;
            }
            var
             match$2 =
               caml_call3(Pdf[11], pdf, cst_Name, [6, decodeparmsdict]);
            g:
            {
             h:
             if(match$2){
              var _dx_ = match$2[1];
              i:
              if(typeof _dx_ !== "number" && 4 === _dx_[0]){
               if(_dx_[1] !== "/Identity") break i;
               break h;
              }
              var _dy_ = 0;
              break g;
             }
             var _dy_ = 1;
            }
            var _du_ = _dy_;
            break d;
           }
          }
          var _du_ = 1;
         }
         var identity_crypt_filter_present = _du_;
         break a;
        }
       }
       var identity_crypt_filter_present = 0;
      }
      if(no_encrypt_metadata){
       var match$0 = caml_call3(Pdf[11], pdf, cst_Type, d);
       a:
       {
        b:
        if(match$0){
         var _dp_ = match$0[1];
         if(typeof _dp_ !== "number" && 4 === _dp_[0]){
          if(_dp_[1] !== "/Metadata") break b;
          var _dq_ = 1;
          break a;
         }
        }
        var _dq_ = 0;
       }
       var _dr_ = _dq_;
      }
      else
       var _dr_ = no_encrypt_metadata;
      var _ds_ = _dr_ || identity_crypt_filter_present;
      if(_ds_) return stream;
      var
       f =
         function(unhashed_key, key, data){
          var data$0 = data;
          for(;;){
           var
            crypt =
              [0,
               [0,
                crypt_type,
                file_encryption_key,
                obj,
                gen,
                unhashed_key,
                keylength,
                r]];
           if(0 !== data$0[0]){
            var toget = data$0[1];
            if(! encrypt){
             var
              crypt$0 =
                [0,
                 [0,
                  crypt_type,
                  file_encryption_key,
                  obj,
                  gen,
                  unhashed_key,
                  keylength,
                  r]],
              _dN_ = caml_call1(Pdf[57], toget),
              _dO_ = caml_call1(Pdf[59], toget),
              _dP_ = caml_call1(Pdf[58], toget);
             return [1, caml_call4(Pdf[60], [0, crypt$0], _dP_, _dO_, _dN_)];
            }
            caml_call1(Pdf[6], stream);
            if(typeof stream !== "number" && 7 === stream[0]){
             var data$2 = stream[1][1][2];
             data$0 = data$2;
             continue;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
           }
           var data$1 = data$0[1];
           if(0 === crypt_type){
            if(encrypt)
             return [0, caml_call4(Pdfcryptprimitives[4], 0, 4, key, data$1)];
            var
             _dG_ = caml_call1(Pdfio[18], data$1),
             _dH_ = caml_call2(Pdfio[3], 0, data$1);
            return [1, caml_call4(Pdf[60], [0, crypt], _dH_, 0, _dG_)];
           }
           a:
           {
            if(typeof crypt_type !== "number" && 1 === crypt_type[0]){var _dI_ = 1; break a;}
            var _dI_ = 0;
           }
           if(_dI_){
            if(encrypt)
             return [0, caml_call4(Pdfcryptprimitives[4], 0, 8, key, data$1)];
            var
             _dJ_ = caml_call1(Pdfio[18], data$1),
             _dK_ = caml_call2(Pdfio[3], 0, data$1);
            return [1, caml_call4(Pdf[60], [0, crypt], _dK_, 0, _dJ_)];
           }
           if(encrypt)
            return [0, caml_call2(Pdfcryptprimitives[1], key, data$1)];
           var
            _dL_ = caml_call1(Pdfio[18], data$1),
            _dM_ = caml_call2(Pdfio[3], 0, data$1);
           return [1, caml_call4(Pdf[60], [0, crypt], _dM_, 0, _dL_)];
          }
         };
      a:
      {
       if(5 !== r && 6 !== r){
        var
         _dD_ = caml_call1(Pdfutil[115], gen),
         _dE_ = caml_call1(Pdfutil[115], obj),
         hash =
           caml_call5
            (Pdfcryptprimitives[9], crypt_type, _dE_, _dD_, key, keylength),
         data$0 = f(key, hash, data);
        break a;
       }
       if(! file_encryption_key)
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_decrypt_no_key_C], 1);
       var
        key$0 = file_encryption_key[1],
        _dB_ = caml_call1(Pdfio[37], key$0),
        data$0 = f(caml_call1(Pdfio[37], key$0), _dB_, data);
      }
      var
       dict$0 =
         caml_call2
          (Pdf[42],
           function(_dF_){
            return decrypt
                    (crypt_type,
                     pdf,
                     no_encrypt_metadata,
                     encrypt,
                     obj,
                     gen,
                     key,
                     keylength,
                     r,
                     file_encryption_key,
                     _dF_);
           },
           dict);
      if(0 === data$0[0])
       var
        data$1 = data$0[1],
        _dC_ = [1, caml_call1(Pdfio[18], data$1)],
        dict$1 = caml_call3(Pdf[18], dict$0, cst_Length, _dC_);
      else
       var dict$1 = dict$0;
      return [7, [0, [0, dict$1, data$0]]];
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function process_cryption
   (no_encrypt_metadata,
    encrypt,
    pdf,
    crypt_type,
    user_pw,
    r,
    u,
    o,
    p,
    id,
    keylength,
    file_encryption_key){
    var match = pdf[5];
    a:
    {
     if(typeof match !== "number" && 6 === match[0]){
      var d = match[1], match$0 = caml_call2(Pdfutil[153], cst_Encrypt$0, d);
      b:
      {
       if(match$0){
        var match$1 = match$0[1];
        if(typeof match$1 !== "number" && 8 === match$1[0]){var i = match$1[1], _dk_ = i; break b;}
       }
       var _dk_ = -1;
      }
      var encryption_object_number = _dk_;
      break a;
     }
     var encryption_object_number = -1;
    }
    function do_encryption(key){
     caml_call2
      (Pdf[32],
       function(objnum, gennum, obj){
        var _dl_ = objnum !== encryption_object_number ? 1 : 0;
        if(_dl_){
         var
          _dm_ =
            [0,
             objnum,
             decrypt
              (crypt_type,
               pdf,
               no_encrypt_metadata,
               encrypt,
               objnum,
               gennum,
               key,
               keylength,
               r,
               file_encryption_key,
               obj)];
         caml_call2(Pdf[24], pdf, _dm_);
         var _dn_ = 0;
        }
        else
         var _dn_ = _dl_;
        return _dn_;
       },
       pdf);
     var trailerdict = caml_call2(Pdf[17], pdf[5], cst_Encrypt);
     pdf[5] = trailerdict;
     return [0, pdf];
    }
    if(5 !== r && 6 !== r)
     return authenticate_user
              (no_encrypt_metadata, user_pw, r, u, o, p, id, keylength)
             ? do_encryption
               (find_key(no_encrypt_metadata, user_pw, r, o, p, id, keylength))
             : 0;
    if(! file_encryption_key) return 0;
    var k = file_encryption_key[1];
    return do_encryption(caml_call1(Pdfio[37], k));
   }
   function get_encryption_values(pdf){
    var match = caml_call3(Pdf[11], pdf, cst_Encrypt$1, pdf[5]);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_get_encryption_values_unen], 1);
    var
     encryptdict = match[1],
     match$0 = caml_call3(Pdf[11], pdf, cst_Filter$0, encryptdict),
     match$1 = caml_call3(Pdf[11], pdf, cst_V, encryptdict),
     length = caml_call3(Pdf[11], pdf, cst_Length$0, encryptdict),
     match$2 = caml_call3(Pdf[11], pdf, cst_R, encryptdict);
    a:
    {
     b:
     if(match$0){
      var _c4_ = match$0[1];
      if(typeof _c4_ !== "number" && 4 === _c4_[0]){
       if(_c4_[1] !== cst_Standard) break b;
       if(! match$1) break b;
       var _c9_ = match$1[1];
       if(typeof _c9_ !== "number" && 1 === _c9_[0]){
        var switcher = _c9_[1] - 1 | 0;
        if(4 < switcher >>> 0) break b;
        c:
        {
         switch(switcher){
           case 0:
            if(! match$2) break b;
            var _c__ = match$2[1];
            if(typeof _c__ !== "number" && 1 === _c__[0]){var r = _c__[1]; break c;}
            break b;
           case 1:
            if(! length){
             if(! match$2) break b;
             var _da_ = match$2[1];
             if(typeof _da_ !== "number" && 1 === _da_[0]){var r = _da_[1]; break c;}
             break b;
            }
            var match$14 = length[1];
            if(typeof match$14 !== "number" && 1 === match$14[0]){
             var n = match$14[1];
             if(0 === (n % 8 | 0) && 40 <= n && 128 >= n){var _c$_ = [0, [0, n, 3]]; break;}
             break b;
            }
            break b;
           case 2:
            break b;
           default:
            if(! match$2) break b;
            var match$15 = match$2[1];
            if(typeof match$15 !== "number" && 1 === match$15[0]){
             var
              r$0 = match$15[1],
              match$16 = caml_call3(Pdf[11], pdf, cst_CF, encryptdict);
             if(match$16){
              var
               cfdict = match$16[1],
               match$17 = caml_call3(Pdf[11], pdf, cst_StdCF, cfdict);
              if(match$17){
               var
                stdcfdict = match$17[1],
                match$18 = caml_call3(Pdf[11], pdf, cst_CFM, stdcfdict);
               d:
               {
                e:
                if(match$18){
                 var _db_ = match$18[1];
                 if(typeof _db_ !== "number" && 4 === _db_[0]){
                  var _df_ = _db_[1];
                  f:
                  if(_df_ !== cst_AESV2)
                   if(_df_ !== cst_AESV3){
                    if(_df_ !== cst_V2) break e;
                    if(length){
                     var match$19 = length[1];
                     if(typeof match$19 !== "number" && 1 === match$19[0]){
                      var i$0 = match$19[1], _dh_ = [0, [0, i$0, 4]];
                      break f;
                     }
                    }
                    var
                     match$20 = caml_call3(Pdf[11], pdf, cst_Length$1, cfdict);
                    g:
                    {
                     if(match$20){
                      var match$21 = match$20[1];
                      if(typeof match$21 !== "number" && 1 === match$21[0]){var i = match$21[1], _dg_ = [0, [0, i, 4]]; break g;
                      }
                     }
                     var _dg_ = 0;
                    }
                    var _dh_ = _dg_;
                   }
                   else
                    var _dh_ = [0, [1, 6 === r$0 ? 1 : 0]];
                  else
                   var _dh_ = _c_;
                  var _dc_ = _dh_;
                  break d;
                 }
                }
                var _dc_ = 0;
               }
               var _dd_ = _dc_;
              }
              else
               var _dd_ = 0;
              var _de_ = _dd_;
             }
             else
              var _de_ = 0;
             var _c$_ = _de_;
             break;
            }
            break b;
         }
         var crypt_type = _c$_;
         break a;
        }
        var crypt_type = [0, [0, 40, r]];
        break a;
       }
       break b;
      }
     }
     var crypt_type = 0;
    }
    function chop_string3248(n, s){
     a:
     {
      if(crypt_type){
       var _di_ = crypt_type[1];
       if(typeof _di_ !== "number" && 0 !== _di_[0]){var need = 48; break a;}
      }
      var need = 32;
     }
     if(caml_ml_string_length(s) >= need)
      return caml_call3(Stdlib_String[16], s, 0, need);
     var _dj_ = caml_call2(Stdlib[28], n, cst_too_small_in_get_encryptio);
     throw caml_maybe_attach_backtrace([0, Pdf[4], _dj_], 1);
    }
    if(! crypt_type)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_No_encryption_method], 1);
    var
     crypt_type$0 = crypt_type[1],
     match$3 = caml_call3(Pdf[11], pdf, cst_O, encryptdict);
    if(match$3){
     var match$4 = match$3[1];
     if(typeof match$4 !== "number" && 3 === match$4[0]){
      var
       o = match$4[1],
       o$0 = chop_string3248(cst_O$0, o),
       match$5 = caml_call3(Pdf[11], pdf, cst_U, encryptdict);
      if(match$5){
       var match$6 = match$5[1];
       if(typeof match$6 !== "number" && 3 === match$6[0]){
        var
         u = match$6[1],
         u$0 = chop_string3248(cst_U$0, u),
         match$7 = caml_call3(Pdf[11], pdf, cst_P, encryptdict);
        if(match$7){
         var match$8 = match$7[1];
         if(typeof match$8 !== "number" && 1 === match$8[0]){
          var
           flags = match$8[1],
           p = caml_call1(Pdfutil[115], flags),
           match$9 = caml_call3(Pdf[11], pdf, cst_ID, pdf[5]);
          a:
          if(match$9){
           var _c5_ = match$9[1];
           if(typeof _c5_ !== "number" && 5 === _c5_[0]){
            var _c6_ = _c5_[1];
            if(! _c6_) break a;
            var _c7_ = _c6_[1];
            if(typeof _c7_ !== "number" && 3 === _c7_[0]){
             var _c8_ = _c6_[2];
             if(! _c8_) break a;
             if(_c8_[2]) break a;
             var
              id = _c7_[1],
              match$10 = caml_call3(Pdf[11], pdf, cst_OE, encryptdict);
             b:
             {
              if(match$10){
               var match$11 = match$10[1];
               if(typeof match$11 !== "number" && 3 === match$11[0]){var s$0 = match$11[1], oe = [0, s$0]; break b;}
              }
              var oe = 0;
             }
             var match$12 = caml_call3(Pdf[11], pdf, cst_UE, encryptdict);
             b:
             {
              if(match$12){
               var match$13 = match$12[1];
               if(typeof match$13 !== "number" && 3 === match$13[0]){var s = match$13[1], ue = [0, s]; break b;}
              }
              var ue = 0;
             }
             return [0, crypt_type$0, u$0, o$0, p, id, ue, oe];
            }
            break a;
           }
          }
          throw caml_maybe_attach_backtrace
                 ([0, Pdf[4], cst_Bad_or_missing_ID_element], 1);
         }
        }
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_Bad_or_missing_P_entry], 1);
       }
      }
      throw caml_maybe_attach_backtrace
             ([0, Pdf[4], cst_Bad_or_missing_U_entry], 1);
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, Pdf[4], cst_Bad_or_missing_O_entry], 1);
   }
   function p_of_banlist(toban){
    var p = [0, 0];
    function setbit(n, b){
     var _c3_ = b ? (p[1] = p[1] | 1 << (n - 1 | 0), 0) : b;
     return _c3_;
    }
    var
     _c1_ = caml_call1(Pdfutil[71], toban),
     notin = caml_call1(Pdfutil[234], _c1_);
    setbit(3, caml_call1(notin, 1));
    setbit(4, caml_call1(notin, 0));
    setbit(5, caml_call1(notin, 2));
    setbit(6, caml_call1(notin, 3));
    setbit(7, 1);
    setbit(8, 1);
    setbit(9, caml_call1(notin, 4));
    setbit(10, caml_call1(notin, 5));
    setbit(11, caml_call1(notin, 6));
    setbit(12, caml_call1(notin, 7));
    var _c2_ = caml_call2(Pdfutil[101], 13, 32);
    caml_call2(Pdfutil[17], function(x){return setbit(x, 1);}, _c2_);
    return p[1];
   }
   function banlist_of_p(p){
    var l = [0, 0];
    function bitset(n){return caml_equal(p >> (n - 1 | 0) & 1, 0);}
    if(bitset(3)) caml_call2(Pdfutil[170], l, 1);
    if(bitset(4)) caml_call2(Pdfutil[170], l, 0);
    if(bitset(5)) caml_call2(Pdfutil[170], l, 2);
    if(bitset(6)) caml_call2(Pdfutil[170], l, 3);
    if(bitset(9)) caml_call2(Pdfutil[170], l, 4);
    if(bitset(10)) caml_call2(Pdfutil[170], l, 5);
    if(bitset(11)) caml_call2(Pdfutil[170], l, 6);
    if(bitset(12)) caml_call2(Pdfutil[170], l, 7);
    return l[1];
   }
   function prs(s){
    var
     _c0_ =
       16 < caml_ml_string_length(s)
        ? caml_call3(Stdlib_String[16], s, 0, 16)
        : s;
    caml_call2
     (Stdlib_String[30],
      function(x){return caml_call2(Stdlib_Printf[2], _d_, x);},
      _c0_);
    return caml_call1(Pdfutil[1], cst$0);
   }
   var
    shamix_cache = caml_call2(Stdlib_Hashtbl[1], 0, 16),
    cst_Beginning_of_shamix_Passwo = "Beginning of shamix\n Password is\n",
    cst_udata_is = "udata is\n",
    cst_RESULT = "RESULT:\n";
   function shamix(password, udata, s){
    try{
     var
      _cY_ =
        caml_call2(Stdlib_Hashtbl[6], shamix_cache, [0, password, udata, s]);
     return _cY_;
    }
    catch(_cZ_){
     var _cN_ = caml_wrap_exception(_cZ_);
     if(_cN_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_cN_, 0);
     var i$0 = caml_call2(Pdfio[4], 0, s);
     if(crypt_debug[1]){
      caml_call1(Pdfutil[1], cst_Beginning_of_shamix_Passwo);
      prs(password);
      caml_call1(Pdfutil[1], cst_udata_is);
      if(udata) var x$0 = udata[1], x$1 = x$0; else var x$1 = cst$3;
      prs(x$1);
     }
     var
      k = [0, caml_call1(Pdfcryptprimitives[6], i$0)],
      fin = [0, 0],
      round = [0, 0],
      last_e = [0, 0];
     for(;;){
      if(fin[1]){
       var result = caml_call3(Stdlib_String[16], k[1], 0, 32);
       if(crypt_debug[1]){caml_call1(Pdfutil[1], cst_RESULT); prs(result);}
       caml_call3
        (Stdlib_Hashtbl[5], shamix_cache, [0, password, udata, s], result);
       return result;
      }
      caml_call2(Pdfutil[162], round, 1);
      if(udata) var x$2 = udata[1], x$3 = x$2; else var x$3 = cst$2;
      var
       _cO_ = caml_call2(Stdlib[28], k[1], x$3),
       k1 = caml_call2(Stdlib[28], password, _cO_),
       _cP_ = caml_call2(Pdfutil[88], k1, 64),
       k1_64 = caml_call2(Stdlib_String[7], cst$1, _cP_),
       _cQ_ = caml_call3(Stdlib_String[16], k[1], 0, 16),
       key = caml_call1(Pdfio[37], _cQ_),
       _cR_ = caml_call3(Stdlib_String[16], k[1], 16, 16),
       firstblock = caml_call1(Pdfio[37], _cR_),
       _cS_ = caml_call1(Pdfio[30], k1_64),
       _cT_ = caml_call4(Pdfcryptprimitives[4], [0, firstblock], 4, key, _cS_),
       raw = caml_call1(Pdfio[41], _cT_),
       e =
         caml_call3
          (Stdlib_String[16], raw, 16, caml_ml_string_length(raw) - 32 | 0);
      last_e[1] = caml_string_get(e, caml_ml_string_length(e) - 1 | 0);
      var x = [0, 0], i = 0, _cU_ = caml_call2(Pdfio[4], 0, e);
      for(;;){
       var _cL_ = caml_string_get(e, i);
       caml_call2(Pdfutil[162], x, _cL_);
       var _cM_ = i + 1 | 0;
       if(15 === i) break;
       i = _cM_;
      }
      var
       match = x[1] % 3 | 0,
       _cV_ =
         0 === match
          ? Pdfcryptprimitives[6]
          : 1 === match ? Pdfcryptprimitives[7] : Pdfcryptprimitives[8];
      k[1] = caml_call1(_cV_, _cU_);
      var
       _cW_ = 64 <= round[1] ? 1 : 0,
       _cX_ = _cW_ ? last_e[1] <= (round[1] - 32 | 0) ? 1 : 0 : _cW_;
      fin[1] = _cX_;
     }
    }
   }
   function make_utf8(pw){
    return 127 < caml_ml_string_length(pw)
            ? caml_call3(Stdlib_String[16], pw, 0, 127)
            : pw;
   }
   var
    zero_iv = caml_call2(Stdlib_String[1], 16, 0),
    _e_ =
      [0,
       [11,
        "file_encryption_key_aesv3 pre-made length ",
        [4, 3, 0, 0, [12, 10, 0]]],
       "file_encryption_key_aesv3 pre-made length %i\n"],
    _f_ = [0, 0],
    _g_ =
      [0,
       [11,
        "file_encryption_key_aesv3 made length ",
        [4, 3, 0, 0, [12, 10, 0]]],
       "file_encryption_key_aesv3 made length %i\n"],
    cst_O_too_short_in_make_interm =
      "/O too short in make_intermediate_owner_key_aesv3",
    _h_ = [0, 0],
    cst_U_too_short_in_file_encryp =
      "/U too short in file_encryption_key_aesv3_user",
    cst_O_too_short_in_authenticat =
      "/O too short in authenticate_owner_password",
    cst_U_too_short_in_authenticat =
      "/U too short in authenticate_owner_password",
    _i_ = [0, 0],
    cst_Wrong_length_in_Perms = "Wrong length in /Perms",
    cst_Encrypt$2 = cst_Encrypt$11,
    cst_EncryptMetadata = cst_EncryptMetadata$4,
    cst_Perms = cst_Perms$2,
    cst_decrypt_pdf_ready_to_call_ =
      "decrypt_pdf: ready to call process_cryption\n",
    cst_Perms$0 = cst_Perms$2,
    cst_Missing_Perms_in_encryptio = "Missing /Perms in encryption dictionary",
    cst_Mismatched_Perms_and_P_per = "Mismatched /Perms and /P permissions",
    cst_Perms_file_permissions_cor = "/Perms file permissions corrupted",
    cst_decrypt_pdf_no_oe = "decrypt_pdf: no oe",
    cst_Encrypt$3 = cst_Encrypt$11,
    cst_EncryptMetadata$0 = cst_EncryptMetadata$4,
    cst_Encryption_Bad_or_not_supp =
      "Encryption: Bad or not supplied password when decrypting single stream",
    cst_Encryption_Bad_or_not_supp$0 =
      "Encryption: Bad or not supplied owner password when decrypting single stream",
    cst_Encryption_Could_not_decry =
      "Encryption: Could not decrypt single stream: Bad or not supplied AESV3 user or owner password",
    cst_decrypt_pdf_owner_No_OE_en = "decrypt_pdf_owner: No /OE entry found",
    cst_Encrypt$4 = cst_Encrypt$11,
    cst_ID$0 = cst_ID$2,
    cst_ID$1 = cst_ID$2,
    _j_ = [0, cst_pdfcrypt_ml, 866, 17],
    cst_P$0 = cst_P$5,
    cst_U$1 = cst_U$6,
    cst_O$1 = cst_O$6,
    _k_ = [0, cst_R$1, [1, 2]],
    _l_ = [0, cst_V$0, [1, 1]],
    _m_ = [0, cst_Filter$1, [4, cst_Standard]],
    _n_ = [0, 40, 2],
    cst_Encrypt$5 = cst_Encrypt$11,
    cst_Encryption_40_failed = "Encryption 40 failed",
    cst_P$1 = cst_P$5,
    _o_ = [0, cst_Length$2, [1, 128]],
    cst_U$2 = cst_U$6,
    cst_O$2 = cst_O$6,
    _p_ = [0, cst_R$1, [1, 3]],
    _q_ = [0, cst_V$0, [1, 2]],
    _r_ = [0, cst_Filter$1, [4, cst_Standard]],
    _s_ = [0, 128, 3],
    cst_Encrypt$6 = cst_Encrypt$11,
    cst_Encryption_128_failed = "Encryption 128 failed",
    _t_ =
      [0,
       [0, cst_StrF, [4, cst_StdCF$0]],
       [0, [0, cst_StmF, [4, cst_StdCF$0]], 0]],
    cst_P$2 = cst_P$5,
    cst_U$3 = cst_U$6,
    cst_O$3 = cst_O$6,
    _u_ = [0, cst_R$1, [1, 4]],
    _v_ = [0, cst_Length$2, [1, 128]],
    cst_EncryptMetadata$1 = cst_EncryptMetadata$4,
    _w_ =
      [0,
       cst_CF$0,
       [6,
        [0,
         [0,
          cst_StdCF$0,
          [6,
           [0,
            [0, cst_Length$2, [1, 16]],
            [0,
             [0, cst_AuthEvent, [4, cst_DocOpen]],
             [0, [0, cst_CFM$0, [4, cst_V2]], 0]]]]],
         0]]],
    _x_ = [0, cst_V$0, [1, 4]],
    _y_ = [0, cst_Filter$1, [4, cst_Standard]],
    _z_ = [0, 128, 4],
    cst_Encrypt$7 = cst_Encrypt$11,
    cst_Encryption_128_r4_failed = "Encryption 128 r4 failed",
    _A_ =
      [0,
       [0, cst_StrF, [4, cst_StdCF$0]],
       [0, [0, cst_StmF, [4, cst_StdCF$0]], 0]],
    cst_P$3 = cst_P$5,
    cst_U$4 = cst_U$6,
    cst_O$4 = cst_O$6,
    _B_ = [0, cst_R$1, [1, 4]],
    _C_ = [0, cst_Length$2, [1, 128]],
    cst_EncryptMetadata$2 = cst_EncryptMetadata$4,
    _D_ =
      [0,
       cst_CF$0,
       [6,
        [0,
         [0,
          cst_StdCF$0,
          [6,
           [0,
            [0, cst_Length$2, [1, 16]],
            [0,
             [0, cst_AuthEvent, [4, cst_DocOpen]],
             [0, [0, cst_CFM$0, [4, cst_AESV2]], 0]]]]],
         0]]],
    _E_ = [0, cst_V$0, [1, 4]],
    _F_ = [0, cst_Filter$1, [4, cst_Standard]],
    cst_Encrypt$8 = cst_Encrypt$11,
    cst_Encryption_AES_failed = "Encryption AES failed",
    _G_ =
      [0,
       [11, "encrypt_pdf_AES256_inner, ISO = ", [9, 0, [12, 10, 0]]],
       "encrypt_pdf_AES256_inner, ISO = %b\n"],
    cst_UE$0 = cst_UE$1,
    cst_OE$0 = cst_OE$1,
    cst_Perms$1 = cst_Perms$2,
    _H_ = [0, cst_StmF, [4, cst_StdCF$0]],
    _I_ = [0, cst_StrF, [4, cst_StdCF$0]],
    cst_P$4 = cst_P$5,
    cst_U$5 = cst_U$6,
    cst_O$5 = cst_O$6,
    cst_R$0 = cst_R$1,
    _J_ = [0, cst_Length$2, [1, 256]],
    cst_EncryptMetadata$3 = cst_EncryptMetadata$4,
    _K_ =
      [0,
       cst_CF$0,
       [6,
        [0,
         [0,
          cst_StdCF$0,
          [6,
           [0,
            [0, cst_Length$2, [1, 32]],
            [0,
             [0, cst_AuthEvent, [4, cst_DocOpen]],
             [0, [0, cst_CFM$0, [4, cst_AESV3]], 0]]]]],
         0]]],
    _L_ = [0, cst_V$0, [1, 5]],
    _M_ = [0, cst_Filter$1, [4, cst_Standard]],
    cst_Encrypt$9 = cst_Encrypt$11,
    cst_256_bit_Encryption_AES_fai = "256 bit Encryption AES failed",
    _N_ = runtime.caml_int64_create_lo_mi_hi(0, 16776960, 65535),
    _O_ = runtime.caml_int64_create_lo_mi_hi(255, 0, 0),
    _P_ = runtime.caml_int64_create_lo_mi_hi(255, 0, 0);
   function file_encryption_key_aesv3(digest, iso, utf8pw, o, oe, u){
    if(48 <= caml_ml_string_length(o) && 48 <= caml_ml_string_length(u)){
     if(digest){
      var d = digest[1];
      if(32 !== d.length - 1){
       var _cz_ = caml_call2(Stdlib_Printf[4], _e_, d.length - 1);
       caml_call1(Pdfe[3], _cz_);
      }
      var d$0 = d;
     }
     else{
      var
       _cC_ = [0, caml_call3(Stdlib_String[16], u, 0, 48), 0],
       _cD_ = [0, utf8pw, [0, caml_call3(Stdlib_String[16], o, 40, 8), _cC_]],
       _cE_ = caml_call2(Stdlib_String[7], cst$4, _cD_);
      if(iso)
       var
        _cF_ = [0, u],
        _cG_ = function(_cJ_){return shamix(utf8pw, _cF_, _cJ_);};
      else
       var
        _cG_ =
          function(x){
           var _cK_ = caml_call2(Pdfio[4], 0, x);
           return caml_call1(Pdfcryptprimitives[6], _cK_);
          };
      var _cH_ = _cG_(_cE_), i = caml_call1(Pdfio[37], _cH_);
      if(32 !== i.length - 1){
       var _cI_ = caml_call2(Stdlib_Printf[4], _g_, i.length - 1);
       caml_call1(Pdfe[3], _cI_);
      }
      var d$0 = i;
     }
     var
      _cA_ = caml_call2(Stdlib[28], zero_iv, oe),
      _cB_ = caml_call1(Pdfio[30], _cA_);
     return caml_call4(Pdfcryptprimitives[2], _f_, 8, d$0, _cB_);
    }
    throw caml_maybe_attach_backtrace
           ([0, Pdf[4], cst_O_too_short_in_make_interm], 1);
   }
   function file_encryption_key_aesv3_user(iso, utf8pw, u, ue){
    if(48 > caml_ml_string_length(u))
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_U_too_short_in_file_encryp], 1);
    var
     _cp_ = caml_call2(Stdlib[28], zero_iv, ue),
     _cq_ = caml_call1(Pdfio[30], _cp_),
     _cr_ = [0, utf8pw, [0, caml_call3(Stdlib_String[16], u, 40, 8), 0]],
     _cs_ = caml_call2(Stdlib_String[7], cst$5, _cr_);
    if(iso)
     var _ct_ = 0, _cu_ = function(_cx_){return shamix(utf8pw, _ct_, _cx_);};
    else
     var
      _cu_ =
        function(x){
         var _cy_ = caml_call2(Pdfio[4], 0, x);
         return caml_call1(Pdfcryptprimitives[6], _cy_);
        };
    var _cv_ = _cu_(_cs_), _cw_ = caml_call1(Pdfio[37], _cv_);
    return caml_call4(Pdfcryptprimitives[2], _h_, 8, _cw_, _cq_);
   }
   function authenticate_owner_password_ae(iso, utf8pw, u, o){
    if(48 <= caml_ml_string_length(o) && 48 <= caml_ml_string_length(u)){
     var
      _ch_ = caml_call3(Stdlib_String[16], o, 0, 32),
      _ci_ = [0, caml_call3(Stdlib_String[16], u, 0, 48), 0],
      _cj_ = [0, utf8pw, [0, caml_call3(Stdlib_String[16], o, 32, 8), _ci_]],
      _ck_ = caml_call2(Stdlib_String[7], cst$6, _cj_);
     if(iso)
      var
       _cl_ = [0, u],
       _cm_ = function(_cn_){return shamix(utf8pw, _cl_, _cn_);};
     else
      var
       _cm_ =
         function(x){
          var _co_ = caml_call2(Pdfio[4], 0, x);
          return caml_call1(Pdfcryptprimitives[6], _co_);
         };
     return _cm_(_ck_) === _ch_ ? 1 : 0;
    }
    throw caml_maybe_attach_backtrace
           ([0, Pdf[4], cst_O_too_short_in_authenticat], 1);
   }
   function authenticate_user_password_aes(iso, utf8pw, u){
    if(48 > caml_ml_string_length(u))
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_U_too_short_in_authenticat], 1);
    var
     _ca_ = caml_call3(Stdlib_String[16], u, 0, 32),
     _cb_ = [0, utf8pw, [0, caml_call3(Stdlib_String[16], u, 32, 8), 0]],
     _cc_ = caml_call2(Stdlib_String[7], cst$7, _cb_);
    if(iso)
     var _cd_ = 0, _ce_ = function(_cf_){return shamix(utf8pw, _cd_, _cf_);};
    else
     var
      _ce_ =
        function(x){
         var _cg_ = caml_call2(Pdfio[4], 0, x);
         return caml_call1(Pdfcryptprimitives[6], _cg_);
        };
    return _ce_(_cc_) === _ca_ ? 1 : 0;
   }
   function decrypt_pdf(keyfromowner, user_pw, pdf){
    var match = caml_call3(Pdf[11], pdf, cst_Encrypt$2, pdf[5]);
    if(! match) return [0, [0, pdf], 0];
    var
     encrypt_dict = match[1],
     match$0 = get_encryption_values(pdf),
     oe = match$0[7],
     ue = match$0[6],
     id = match$0[5],
     p = match$0[4],
     o = match$0[3],
     u = match$0[2],
     crypt_type = match$0[1];
    a:
    if(typeof crypt_type === "number")
     var file_encryption_key = 0, keylength = 128, r = 4;
    else{
     if(0 !== crypt_type[0]){
      var iso = crypt_type[1];
      if(oe && ue){
       var ue$0 = ue[1];
       if(keyfromowner){
        var
         k$0 = keyfromowner[1],
         file_encryption_key = [0, k$0],
         keylength = 256,
         r = 5;
        break a;
       }
       var match$4 = caml_call3(Pdf[11], pdf, cst_Perms$0, encrypt_dict);
       if(match$4){
        var match$5 = match$4[1];
        if(typeof match$5 !== "number" && 3 === match$5[0]){
         var
          perms$0 = match$5[1],
          auth = authenticate_user_password_aes(iso, make_utf8(user_pw), u);
         if(! auth){
          var file_encryption_key = 0, keylength = 256, r = 5;
          break a;
         }
         var
          key =
            file_encryption_key_aesv3_user(iso, make_utf8(user_pw), u, ue$0);
         if(16 > caml_ml_string_length(perms$0))
          throw caml_maybe_attach_backtrace
                 ([0, Pdf[4], cst_Wrong_length_in_Perms], 1);
         var
          _bU_ = caml_call1(Pdfio[30], perms$0),
          _bV_ = caml_call1(Pdfio[36], key),
          ps = caml_call4(Pdfcryptprimitives[3], _i_, 8, _bV_, _bU_),
          ints = caml_call1(Pdfio[36], ps);
         b:
         {
          if
           (97 === caml_check_bound(ints, 9)[10]
            &&
             100 === caml_check_bound(ints, 10)[11]
             && 98 === caml_check_bound(ints, 11)[12]){
           var
            _bW_ = caml_check_bound(ints, 3)[4],
            _bX_ = caml_call1(Pdfutil[115], _bW_),
            _bY_ = caml_call2(Pdfutil[124], _bX_, 24),
            _bZ_ = caml_check_bound(ints, 2)[3],
            _b0_ = caml_call1(Pdfutil[115], _bZ_),
            _b1_ = caml_call2(Pdfutil[124], _b0_, 16),
            _b2_ = caml_call2(Pdfutil[125], _b1_, _bY_),
            _b3_ = caml_check_bound(ints, 1)[2],
            _b4_ = caml_call1(Pdfutil[115], _b3_),
            _b5_ = caml_call2(Pdfutil[124], _b4_, 8),
            _b6_ = caml_check_bound(ints, 0)[1],
            _b7_ = caml_call1(Pdfutil[115], _b6_),
            _b8_ = caml_call2(Pdfutil[124], _b7_, 0),
            _b9_ = caml_call2(Pdfutil[125], _b8_, _b5_),
            match$6 = [0, caml_call2(Pdfutil[125], _b9_, _b2_)];
           break b;
          }
          var match$6 = 0;
         }
         if(! match$6)
          throw caml_maybe_attach_backtrace
                 ([0, Stdlib[7], cst_Perms_file_permissions_cor], 1);
         var x = match$6[1];
         if(! caml_equal(x, p))
          throw caml_maybe_attach_backtrace
                 ([0, Stdlib[7], cst_Mismatched_Perms_and_P_per], 1);
         var
          file_encryption_key = [0, caml_call1(Pdfio[41], key)],
          keylength = 256,
          r = 5;
         break a;
        }
       }
       throw caml_maybe_attach_backtrace
              ([0, Pdf[4], cst_Missing_Perms_in_encryptio], 1);
      }
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[7], cst_decrypt_pdf_no_oe], 1);
     }
     var
      r$0 = crypt_type[2],
      k = crypt_type[1],
      file_encryption_key = 0,
      keylength = k,
      r = r$0;
    }
    var match$1 = caml_call3(Pdf[11], pdf, cst_EncryptMetadata, encrypt_dict);
    a:
    {
     b:
     if(match$1){
      var _b__ = match$1[1];
      if(typeof _b__ !== "number" && 0 === _b__[0]){
       if(_b__[1]) break b;
       var encrypt_metadata = 0;
       break a;
      }
     }
     var encrypt_metadata = 1;
    }
    var match$2 = caml_call3(Pdf[11], pdf, cst_Perms, encrypt_dict);
    a:
    {
     if(match$2){
      var match$3 = match$2[1];
      if(typeof match$3 !== "number" && 3 === match$3[0]){var s = match$3[1], perms = s; break a;}
     }
     var perms = cst$8;
    }
    pdf[7] =
     [0, [0, [0, crypt_type, u, o, p, id, ue, oe], encrypt_metadata, perms]];
    if(crypt_debug[1]) caml_call1(Pdfe[3], cst_decrypt_pdf_ready_to_call_);
    var _b$_ = banlist_of_p(p);
    return [0,
            process_cryption
             (1 - encrypt_metadata,
              0,
              pdf,
              crypt_type,
              user_pw,
              r,
              u,
              o,
              p,
              id,
              keylength,
              file_encryption_key),
            _b$_];
   }
   function owner_key(padded_owner, keylength, r){
    var
     _bR_ = caml_call1(Pdfio[39], padded_owner),
     digest1 = caml_call1(Stdlib_Digest[3], _bR_);
    if(3 <= r){
     var d = [0, digest1], x = 1;
     for(;;){
      d[1] = caml_call1(Stdlib_Digest[3], d[1]);
      var _bT_ = x + 1 | 0;
      if(50 === x){var digest2 = d[1]; break;}
      x = _bT_;
     }
    }
    else
     var digest2 = digest1;
    var _bS_ = caml_call3(Stdlib_String[16], digest2, 0, keylength / 8 | 0);
    return caml_call1(Pdfio[37], _bS_);
   }
   function mkkey(key, x){
    var
     key$0 = caml_call1(Stdlib_Array[7], key),
     _bO_ = key.length - 2 | 0,
     _bN_ = 0;
    if(_bO_ >= 0){
     var k = _bN_;
     for(;;){
      var _bP_ = caml_check_bound(key, k)[1 + k] ^ x;
      caml_check_bound(key$0, k)[1 + k] = _bP_;
      var _bQ_ = k + 1 | 0;
      if(_bO_ === k) break;
      k = _bQ_;
     }
    }
    return key$0;
   }
   function decrypt_single_stream(user_pw, owner_pw, pdf, obj, gen, stream){
    var match = caml_call3(Pdf[11], pdf, cst_Encrypt$3, pdf[5]);
    if(! match) return stream;
    var
     encrypt_dict = match[1],
     match$0 = get_encryption_values(pdf),
     oe = match$0[7],
     ue = match$0[6],
     id = match$0[5],
     p = match$0[4],
     o = match$0[3],
     u = match$0[2],
     crypt_type = match$0[1];
    if(typeof crypt_type === "number")
     var keylength = 128, r = 4;
    else if(0 === crypt_type[0])
     var r$0 = crypt_type[2], k = crypt_type[1], keylength = k, r = r$0;
    else
     var
      b = crypt_type[1],
      keylength$0 = 256,
      r$1 = b ? 6 : 5,
      keylength = keylength$0,
      r = r$1;
    var
     match$1 = caml_call3(Pdf[11], pdf, cst_EncryptMetadata$0, encrypt_dict);
    a:
    {
     b:
     if(match$1){
      var _bG_ = match$1[1];
      if(typeof _bG_ !== "number" && 0 === _bG_[0]){
       if(_bG_[1]) break b;
       var no_encrypt_metadata = 1;
       break a;
      }
     }
     var no_encrypt_metadata = 0;
    }
    if(1 >= r - 5 >>> 0 && 256 === keylength && ue && oe){
     var oe$0 = oe[1], ue$0 = ue[1];
     if(owner_pw)
      var x$1 = owner_pw[1], owner_pw$0 = x$1;
     else
      var owner_pw$0 = cst$11;
     if(user_pw)
      var x$2 = user_pw[1], user_pw$1 = x$2;
     else
      var user_pw$1 = cst$10;
     if
      (authenticate_user_password_aes
        (6 === r ? 1 : 0, make_utf8(user_pw$1), u))
      var
       file_encryption_key =
         file_encryption_key_aesv3_user
          (6 === r ? 1 : 0, make_utf8(user_pw$1), u, ue$0);
     else{
      if
       (!
        authenticate_owner_password_ae
         (6 === r ? 1 : 0, make_utf8(owner_pw$0), u, o))
       throw caml_maybe_attach_backtrace
              ([0, Pdf[4], cst_Encryption_Could_not_decry], 1);
      var
       file_encryption_key =
         file_encryption_key_aesv3
          (0, 6 === r ? 1 : 0, make_utf8(owner_pw$0), o, oe$0, u);
     }
     var _bM_ = [0, caml_call1(Pdfio[41], file_encryption_key)];
     return decrypt_stream
             (crypt_type,
              pdf,
              no_encrypt_metadata,
              0,
              obj,
              gen,
              caml_call1(Pdfio[36], file_encryption_key),
              keylength,
              r,
              _bM_,
              stream);
    }
    if(0 === owner_pw){
     if(user_pw)
      var x = user_pw[1], user_pw_string = x;
     else
      var user_pw_string = cst$9;
     if
      (!
       authenticate_user
        (no_encrypt_metadata, user_pw_string, r, u, o, p, id, keylength))
      throw caml_maybe_attach_backtrace
             ([0, Pdf[4], cst_Encryption_Bad_or_not_supp], 1);
     var
      key =
        find_key(no_encrypt_metadata, user_pw_string, r, o, p, id, keylength);
     return decrypt_stream
             (crypt_type,
              pdf,
              no_encrypt_metadata,
              0,
              obj,
              gen,
              key,
              keylength,
              r,
              0,
              stream);
    }
    var
     owner_pw_string = caml_call1(Pdfutil[207], owner_pw),
     padded_owner = pad_password(caml_call1(Pdfio[37], owner_pw_string)),
     key$0 = owner_key(padded_owner, keylength, r);
    if(2 === r)
     var
      _bH_ = caml_call1(Pdfio[30], o),
      _bI_ = caml_call2(Pdfcryptprimitives[1], key$0, _bH_),
      user_pw$0 = caml_call1(Pdfio[41], _bI_);
    else{
     var acc = [0, caml_call1(Pdfio[30], o)], x$0 = 19;
     for(;;){
      var _bJ_ = acc[1], _bK_ = mkkey(key$0, x$0);
      acc[1] = caml_call2(Pdfcryptprimitives[1], _bK_, _bJ_);
      var _bL_ = x$0 - 1 | 0;
      if(0 === x$0){var user_pw$0 = caml_call1(Pdfio[41], acc[1]); break;}
      x$0 = _bL_;
     }
    }
    if
     (!
      authenticate_user
       (no_encrypt_metadata, user_pw$0, r, u, o, p, id, keylength))
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_Encryption_Bad_or_not_supp$0], 1);
    var
     key$1 = find_key(no_encrypt_metadata, user_pw$0, r, o, p, id, keylength);
    return decrypt_stream
            (crypt_type,
             pdf,
             no_encrypt_metadata,
             0,
             obj,
             gen,
             key$1,
             keylength,
             r,
             0,
             stream);
   }
   function key_or_user_password_from_owne(encryption_values, owner_pw, pdf){
    var padded_owner = pad_password(caml_call1(Pdfio[37], owner_pw));
    if(encryption_values)
     var
      e = encryption_values[1],
      oe = e[4],
      o = e[3],
      u = e[2],
      crypt_type = e[1];
    else
     var
      match = get_encryption_values(pdf),
      oe$1 = match[7],
      o$0 = match[3],
      u$0 = match[2],
      crypt_type$0 = match[1],
      oe = oe$1,
      o = o$0,
      u = u$0,
      crypt_type = crypt_type$0;
    if(typeof crypt_type === "number")
     var keylength = 128, r = 4;
    else if(0 === crypt_type[0])
     var r$0 = crypt_type[2], k = crypt_type[1], keylength = k, r = r$0;
    else
     var
      x$0 = crypt_type[1],
      keylength$0 = 256,
      r$1 = x$0 ? 6 : 5,
      keylength = keylength$0,
      r = r$1;
    if(5 !== r && 6 !== r){
     var key$0 = owner_key(padded_owner, keylength, r);
     if(2 === r)
      var
       _bB_ = caml_call1(Pdfio[30], o),
       _bC_ = caml_call2(Pdfcryptprimitives[1], key$0, _bB_),
       user_pw = caml_call1(Pdfio[41], _bC_);
     else{
      var acc = [0, caml_call1(Pdfio[30], o)], x = 19;
      for(;;){
       var _bD_ = acc[1], _bE_ = mkkey(key$0, x);
       acc[1] = caml_call2(Pdfcryptprimitives[1], _bE_, _bD_);
       var _bF_ = x - 1 | 0;
       if(0 === x){var user_pw = caml_call1(Pdfio[41], acc[1]); break;}
       x = _bF_;
      }
     }
     return [0, [0, cst$13, user_pw]];
    }
    if
     (!
      authenticate_owner_password_ae
       (6 === r ? 1 : 0, make_utf8(owner_pw), u, o))
     return 0;
    if(! oe)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_decrypt_pdf_owner_No_OE_en], 1);
    var
     oe$0 = oe[1],
     _bA_ =
       file_encryption_key_aesv3
        (0, 6 === r ? 1 : 0, make_utf8(owner_pw), o, oe$0, u),
     key = caml_call1(Pdfio[41], _bA_);
    return [0, [0, key, cst$12]];
   }
   function decrypt_pdf_owner(owner_pw, pdf){
    if(! caml_call3(Pdf[11], pdf, cst_Encrypt$4, pdf[5])) return [0, pdf];
    var match = key_or_user_password_from_owne(0, owner_pw, pdf);
    if(! match) return 0;
    var match$0 = match[1], user_pw = match$0[2], key = match$0[1];
    return decrypt_pdf([0, key], user_pw, pdf)[1];
   }
   function mk_owner(r, owner_pw, user_pw, keylength){
    var
     source = owner_pw === cst$22 ? user_pw : owner_pw,
     padded_owner = pad_password(caml_call1(Pdfio[37], source)),
     key = owner_key(padded_owner, keylength, r),
     padded_user = pad_password(caml_call1(Pdfio[37], user_pw));
    if(2 === r){
     var
      _bu_ = caml_call1(Pdfio[35], padded_user),
      _bv_ = caml_call2(Pdfcryptprimitives[1], key, _bu_);
     return caml_call1(Pdfio[41], _bv_);
    }
    var
     _bw_ = caml_call1(Pdfio[35], padded_user),
     acc = [0, caml_call2(Pdfcryptprimitives[1], key, _bw_)],
     x = 1;
    for(;;){
     var _bx_ = acc[1], _by_ = mkkey(key, x);
     acc[1] = caml_call2(Pdfcryptprimitives[1], _by_, _bx_);
     var _bz_ = x + 1 | 0;
     if(19 === x) return caml_call1(Pdfio[41], acc[1]);
     x = _bz_;
    }
   }
   function mk_user(no_encrypt_metadata, user_pw, o, p, id, r, keylength){
    var key = find_key(no_encrypt_metadata, user_pw, r, o, p, id, keylength);
    if(2 === r){
     var
      _bk_ = caml_call1(Pdfio[35], paddings),
      _bl_ = caml_call2(Pdfcryptprimitives[1], key, _bk_);
     return caml_call1(Pdfio[41], _bl_);
    }
    var
     digest_input = [0, paddings, [0, caml_call1(Pdfio[37], id), 0]],
     _bm_ = caml_call1(Pdfio[38], digest_input),
     d = caml_call1(Stdlib_Digest[3], _bm_),
     _bn_ = caml_call1(Pdfio[30], d),
     acc = [0, caml_call2(Pdfcryptprimitives[1], key, _bn_)],
     x = 1;
    for(;;){
     var _br_ = acc[1], _bs_ = mkkey(key, x);
     acc[1] = caml_call2(Pdfcryptprimitives[1], _bs_, _br_);
     var _bt_ = x + 1 | 0;
     if(19 === x){
      var
       _bo_ = caml_call2(Pdfutil[88], 0, 16),
       _bp_ = caml_call1(Pdfutil[9], _bo_),
       _bq_ = caml_call1(Pdfio[41], acc[1]);
      return caml_call2(Stdlib[28], _bq_, _bp_);
     }
     x = _bt_;
    }
   }
   function get_or_add_id(pdf){
    var match = caml_call3(Pdf[11], pdf, cst_ID$0, pdf[5]);
    a:
    if(match){
     var _ba_ = match[1];
     if(typeof _ba_ !== "number" && 5 === _ba_[0]){
      var _bh_ = _ba_[1];
      if(! _bh_) break a;
      var _bi_ = _bh_[1];
      if(typeof _bi_ !== "number" && 3 === _bi_[0]){
       var _bj_ = _bh_[2];
       if(! _bj_) break a;
       if(_bj_[2]) break a;
       var s$0 = _bi_[1];
       return [0, s$0, pdf];
      }
      break a;
     }
    }
    var
     idobj =
       caml_call3
        (Pdf[50],
         pdf,
         cst$14,
         function(param){return caml_call1(Stdlib_Random[14], 1.);}),
     _bb_ = pdf[7],
     _bc_ = pdf[6],
     _bd_ = caml_call3(Pdf[19], pdf[5], cst_ID$1, idobj),
     pdf$0 = [0, pdf[1], pdf[2], pdf[3], pdf[4], _bd_, _bc_, _bb_];
    a:
    if(typeof idobj !== "number" && 5 === idobj[0]){
     var _be_ = idobj[1];
     if(_be_){
      var _bf_ = _be_[1];
      if(typeof _bf_ !== "number" && 3 === _bf_[0]){
       var _bg_ = _be_[2];
       if(! _bg_) break a;
       if(_bg_[2]) break a;
       var s = _bf_[1];
       return [0, s, pdf$0];
      }
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
   }
   function encrypt_pdf_40bit_inner(owner, user, p, user_pw, id, pdf){
    var
     crypt_dict =
       [6,
        [0,
         _m_,
         [0,
          _l_,
          [0,
           _k_,
           [0,
            [0, cst_O$1, [3, owner]],
            [0,
             [0, cst_U$1, [3, user]],
             [0, [0, cst_P$0, [1, caml_call1(Pdfutil[116], p)]], 0]]]]]]],
     match =
       process_cryption(0, 1, pdf, _n_, user_pw, 2, user, owner, p, id, 40, 0);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_Encryption_40_failed], 1);
    var
     pdf$0 = match[1],
     crypt_dict_num = caml_call2(Pdf[23], pdf$0, crypt_dict),
     _a9_ = pdf$0[7],
     _a__ = pdf$0[6],
     _a$_ = caml_call3(Pdf[19], pdf$0[5], cst_Encrypt$5, [8, crypt_dict_num]);
    return [0, pdf$0[1], pdf$0[2], pdf$0[3], pdf$0[4], _a$_, _a__, _a9_];
   }
   function encrypt_pdf_40bit(user_pw, owner_pw, banlist, pdf){
    var
     p = p_of_banlist(banlist),
     owner = mk_owner(2, owner_pw, user_pw, 40),
     match = get_or_add_id(pdf),
     pdf$0 = match[2],
     id = match[1],
     user = mk_user(0, user_pw, owner, p, id, 2, 40);
    return encrypt_pdf_40bit_inner(owner, user, p, user_pw, id, pdf$0);
   }
   function encrypt_pdf_128bit_inner(owner, user, p, user_pw, id, pdf){
    var
     crypt_dict =
       [6,
        [0,
         _r_,
         [0,
          _q_,
          [0,
           _p_,
           [0,
            [0, cst_O$2, [3, owner]],
            [0,
             [0, cst_U$2, [3, user]],
             [0, _o_, [0, [0, cst_P$1, [1, caml_call1(Pdfutil[116], p)]], 0]]]]]]]],
     match =
       process_cryption
        (0, 1, pdf, _s_, user_pw, 3, user, owner, p, id, 128, 0);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_Encryption_128_failed], 1);
    var
     pdf$0 = match[1],
     crypt_dict_num = caml_call2(Pdf[23], pdf$0, crypt_dict),
     _a6_ = pdf$0[7],
     _a7_ = pdf$0[6],
     _a8_ = caml_call3(Pdf[19], pdf$0[5], cst_Encrypt$6, [8, crypt_dict_num]);
    return [0, pdf$0[1], pdf$0[2], pdf$0[3], pdf$0[4], _a8_, _a7_, _a6_];
   }
   function encrypt_pdf_128bit_inner_r4
   (owner, user, p, user_pw, id, pdf, encrypt_metadata){
    var
     crypt_dict =
       [6,
        [0,
         _y_,
         [0,
          _x_,
          [0,
           _w_,
           [0,
            [0, cst_EncryptMetadata$1, [0, encrypt_metadata]],
            [0,
             _v_,
             [0,
              _u_,
              [0,
               [0, cst_O$3, [3, owner]],
               [0,
                [0, cst_U$3, [3, user]],
                [0, [0, cst_P$2, [1, caml_call1(Pdfutil[116], p)]], _t_]]]]]]]]]],
     match =
       process_cryption
        (1 - encrypt_metadata,
         1,
         pdf,
         _z_,
         user_pw,
         4,
         user,
         owner,
         p,
         id,
         128,
         0);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_Encryption_128_r4_failed], 1);
    var
     pdf$0 = match[1],
     crypt_dict_num = caml_call2(Pdf[23], pdf$0, crypt_dict),
     _a3_ = pdf$0[7],
     _a4_ = pdf$0[6],
     _a5_ = caml_call3(Pdf[19], pdf$0[5], cst_Encrypt$7, [8, crypt_dict_num]);
    return [0, pdf$0[1], pdf$0[2], pdf$0[3], pdf$0[4], _a5_, _a4_, _a3_];
   }
   function encrypt_pdf_128bit(user_pw, owner_pw, banlist, pdf){
    var
     p = p_of_banlist(banlist),
     owner = mk_owner(3, owner_pw, user_pw, 128),
     match = get_or_add_id(pdf),
     pdf$0 = match[2],
     id = match[1],
     user = mk_user(0, user_pw, owner, p, id, 3, 128);
    return encrypt_pdf_128bit_inner(owner, user, p, user_pw, id, pdf$0);
   }
   function encrypt_pdf_AES_inner
   (owner, user, p, user_pw, id, encrypt_metadata, pdf){
    var
     crypt_dict =
       [6,
        [0,
         _F_,
         [0,
          _E_,
          [0,
           _D_,
           [0,
            [0, cst_EncryptMetadata$2, [0, encrypt_metadata]],
            [0,
             _C_,
             [0,
              _B_,
              [0,
               [0, cst_O$4, [3, owner]],
               [0,
                [0, cst_U$4, [3, user]],
                [0, [0, cst_P$3, [1, caml_call1(Pdfutil[116], p)]], _A_]]]]]]]]]],
     match =
       process_cryption
        (1 - encrypt_metadata,
         1,
         pdf,
         0,
         user_pw,
         4,
         user,
         owner,
         p,
         id,
         128,
         0);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_Encryption_AES_failed], 1);
    var
     pdf$0 = match[1],
     crypt_dict_num = caml_call2(Pdf[23], pdf$0, crypt_dict),
     _a0_ = pdf$0[7],
     _a1_ = pdf$0[6],
     _a2_ = caml_call3(Pdf[19], pdf$0[5], cst_Encrypt$8, [8, crypt_dict_num]);
    return [0, pdf$0[1], pdf$0[2], pdf$0[3], pdf$0[4], _a2_, _a1_, _a0_];
   }
   function encrypt_pdf_AES(encrypt_metadata, user_pw, owner_pw, banlist, pdf){
    var
     p = p_of_banlist(banlist),
     owner = mk_owner(4, owner_pw, user_pw, 128),
     match = get_or_add_id(pdf),
     pdf$0 = match[2],
     id = match[1],
     user = mk_user(1 - encrypt_metadata, user_pw, owner, p, id, 4, 128);
    return encrypt_pdf_AES_inner
            (owner, user, p, user_pw, id, encrypt_metadata, pdf$0);
   }
   function encrypt_pdf_AES256_inner
   (iso, encrypt_metadata, owner, user, p, perms, oe, ue, id, key, pdf){
    if(crypt_debug[1]){
     var _aR_ = caml_call2(Stdlib_Printf[4], _G_, iso);
     caml_call1(Pdfe[3], _aR_);
    }
    var
     _aS_ =
       [0,
        [0, cst_O$5, [3, owner]],
        [0,
         [0, cst_U$5, [3, user]],
         [0,
          [0, cst_P$4, [1, caml_call1(Pdfutil[116], p)]],
          [0,
           _I_,
           [0,
            _H_,
            [0,
             [0, cst_Perms$1, [3, perms]],
             [0, [0, cst_OE$0, [3, oe]], [0, [0, cst_UE$0, [3, ue]], 0]]]]]]]],
     _aT_ = iso ? 6 : 5,
     crypt_dict =
       [6,
        [0,
         _M_,
         [0,
          _L_,
          [0,
           _K_,
           [0,
            [0, cst_EncryptMetadata$3, [0, encrypt_metadata]],
            [0, _J_, [0, [0, cst_R$0, [1, _aT_]], _aS_]]]]]]],
     _aU_ = [0, key],
     _aV_ = 256,
     _aW_ = iso ? 6 : 5,
     match =
       process_cryption
        (1 - encrypt_metadata,
         1,
         pdf,
         [1, iso],
         cst$15,
         _aW_,
         user,
         owner,
         p,
         id,
         _aV_,
         _aU_);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_256_bit_Encryption_AES_fai], 1);
    var
     pdf$0 = match[1],
     crypt_dict_num = caml_call2(Pdf[23], pdf$0, crypt_dict),
     _aX_ = pdf$0[7],
     _aY_ = pdf$0[6],
     _aZ_ = caml_call3(Pdf[19], pdf$0[5], cst_Encrypt$9, [8, crypt_dict_num]);
    return [0, pdf$0[1], pdf$0[2], pdf$0[3], pdf$0[4], _aZ_, _aY_, _aX_];
   }
   function mksalt(param){
    var s = caml_array_make(8, 0), x = 0;
    for(;;){
     var _aP_ = caml_call1(Stdlib_Random[5], 255);
     caml_check_bound(s, x)[1 + x] = _aP_;
     var _aQ_ = x + 1 | 0;
     if(7 === x) return caml_call1(Pdfio[39], s);
     x = _aQ_;
    }
   }
   function encrypt_pdf_AES256_call
   (iso, encrypt_metadata, user_pw, owner_pw, banlist, pdf){
    var
     user_pw$0 = make_utf8(user_pw),
     owner_pw$0 = make_utf8(owner_pw),
     user_validation_salt = mksalt(0),
     user_key_salt = mksalt(0),
     owner_validation_salt = mksalt(0),
     owner_key_salt = mksalt(0),
     s = caml_array_make(32, 0),
     x = 0;
    for(;;){
     var _aI_ = caml_call1(Stdlib_Random[5], 255);
     caml_check_bound(s, x)[1 + x] = _aI_;
     var _aJ_ = x + 1 | 0;
     if(31 === x) break;
     x = _aJ_;
    }
    var
     _aH_ = caml_call1(Pdfio[39], s),
     file_encryption_key = caml_call1(Pdfio[30], _aH_),
     p = p_of_banlist(banlist);
    if(iso)
     var
      _aw_ = 0,
      hash = function(_aN_){return shamix(user_pw$0, _aw_, _aN_);};
    else
     var
      hash =
        function(x){
         var _aO_ = caml_call2(Pdfio[4], 0, x);
         return caml_call1(Pdfcryptprimitives[6], _aO_);
        };
    var
     _ax_ =
       [0,
        hash
         (caml_call2
           (Stdlib_String[7],
            cst$16,
            [0, user_pw$0, [0, user_validation_salt, 0]])),
        [0, user_validation_salt, [0, user_key_salt, 0]]],
     u = caml_call2(Stdlib_String[7], cst$17, _ax_),
     _ay_ =
       hash
        (caml_call2
          (Stdlib_String[7], cst$18, [0, user_pw$0, [0, user_key_salt, 0]])),
     _az_ = caml_call1(Pdfio[37], _ay_),
     _aA_ = [0, caml_call1(Pdfio[37], zero_iv)],
     ue =
       caml_call4(Pdfcryptprimitives[4], _aA_, 8, _az_, file_encryption_key),
     _aB_ = caml_call1(Pdfio[41], ue),
     ue$0 = caml_call3(Stdlib_String[16], _aB_, 16, 32);
    if(iso)
     var
      _aC_ = [0, u],
      hash$0 = function(_aL_){return shamix(owner_pw$0, _aC_, _aL_);};
    else
     var
      hash$0 =
        function(x){
         var _aM_ = caml_call2(Pdfio[4], 0, x);
         return caml_call1(Pdfcryptprimitives[6], _aM_);
        };
    var
     _aD_ =
       [0,
        hash$0
         (caml_call2
           (Stdlib_String[7],
            cst$19,
            [0, owner_pw$0, [0, owner_validation_salt, [0, u, 0]]])),
        [0, owner_validation_salt, [0, owner_key_salt, 0]]],
     o = caml_call2(Stdlib_String[7], cst$20, _aD_),
     _aE_ =
       hash$0
        (caml_call2
          (Stdlib_String[7],
           cst$21,
           [0, owner_pw$0, [0, owner_key_salt, [0, u, 0]]])),
     digest = caml_call1(Pdfio[37], _aE_),
     _aF_ = [0, caml_call1(Pdfio[37], zero_iv)],
     oe =
       caml_call4(Pdfcryptprimitives[4], _aF_, 8, digest, file_encryption_key),
     _aG_ = caml_call1(Pdfio[41], oe),
     oe$0 = caml_call3(Stdlib_String[16], _aG_, 16, 32),
     match = get_or_add_id(pdf),
     pdf$0 = match[2],
     id = match[1],
     digest$0 = [0, digest],
     _aj_ = caml_call1(Pdfutil[152], p),
     extendedp = caml_call2(Pdfutil[143], _N_, _aj_),
     b = caml_array_make(16, 0),
     n$0 = 0;
    for(;;){
     var
      _aq_ = caml_call2(Pdfutil[142], _O_, n$0 * 8 | 0),
      _ar_ = caml_call2(Pdfutil[144], _aq_, extendedp),
      _as_ = caml_call2(Pdfutil[141], _ar_, n$0 * 8 | 0),
      _at_ = caml_call2(Pdfutil[144], _P_, _as_),
      _au_ = caml_call1(Pdfutil[134], _at_);
     caml_check_bound(b, n$0)[1 + n$0] = _au_;
     var _av_ = n$0 + 1 | 0;
     if(7 === n$0) break;
     n$0 = _av_;
    }
    var _ak_ = encrypt_metadata ? 84 : 70;
    caml_check_bound(b, 8)[9] = _ak_;
    caml_check_bound(b, 9)[10] = 97;
    caml_check_bound(b, 10)[11] = 100;
    caml_check_bound(b, 11)[12] = 98;
    var n = 12;
    for(;;){
     caml_check_bound(b, n)[1 + n] = 0;
     var _ap_ = n + 1 | 0;
     if(15 === n){
      var
       _al_ = file_encryption_key_aesv3(digest$0, iso, owner_pw$0, o, oe$0, u),
       _am_ = caml_call1(Pdfio[41], _al_),
       key = caml_call1(Pdfio[37], _am_),
       _an_ = caml_call1(Pdfio[39], b),
       _ao_ = caml_call1(Pdfio[30], _an_),
       perms = caml_call3(Pdfcryptprimitives[5], 8, key, _ao_),
       _aK_ = caml_call1(Pdfio[41], file_encryption_key);
      return encrypt_pdf_AES256_inner
              (iso,
               encrypt_metadata,
               o,
               u,
               p,
               caml_call1(Pdfio[41], perms),
               oe$0,
               ue$0,
               id,
               _aK_,
               pdf$0);
     }
     n = _ap_;
    }
   }
   var _Q_ = 0;
   function encrypt_pdf_AES256(_ae_, _af_, _ag_, _ah_, _ai_){
    return encrypt_pdf_AES256_call(_Q_, _ae_, _af_, _ag_, _ah_, _ai_);
   }
   var
    _R_ = 1,
    cst_Encrypt$10 = cst_Encrypt$11,
    cst_recrypt_pdf_bad_encryption = "recrypt_pdf: bad encryption",
    cst_recrypt_pdf_failed_AESV3_f = "recrypt_pdf: failed AESV3 fek.",
    cst_recrypt_pdf_bad_ue = cst_recrypt_pdf_bad_ue$1,
    cst_recrypt_pdf_bad_oe = cst_recrypt_pdf_bad_oe$1,
    cst_recrypt_pdf_no_saved_encry = cst_recrypt_pdf_no_saved_encry$1,
    cst_recrypt_pdf_owner_bad_encr = "recrypt_pdf_owner: bad encryption",
    cst_recrypt_pdf_bad_ue$0 = cst_recrypt_pdf_bad_ue$1,
    cst_recrypt_pdf_bad_oe$0 = cst_recrypt_pdf_bad_oe$1,
    cst_Recrypt_with_owner_passwor = "Recrypt with owner password failed.",
    cst_recrypt_pdf_no_saved_encry$0 = cst_recrypt_pdf_no_saved_encry$1,
    cst_recrypt_pdf_failed_Wrong_p = "recrypt_pdf failed. Wrong password?";
   function encrypt_pdf_AES256ISO(_$_, _aa_, _ab_, _ac_, _ad_){
    return encrypt_pdf_AES256_call(_R_, _$_, _aa_, _ab_, _ac_, _ad_);
   }
   function is_encrypted(pdf){
    var ___ = caml_call3(Pdf[11], pdf, cst_Encrypt$10, pdf[5]);
    return caml_call1(Pdfutil[205], ___);
   }
   function recrypt_pdf(opt, pdf, owner_pw){
    var renumber = opt ? opt[1] : 1;
    if(renumber)
     var
      _U_ = caml_call1(Pdf[44], pdf),
      pdf$0 = caml_call2(Pdf[45], _U_, pdf);
    else
     var pdf$0 = pdf;
    try{
     try{
      var match = pdf$0[7];
      if(! match)
       throw caml_maybe_attach_backtrace
              ([0, Pdf[4], cst_recrypt_pdf_no_saved_encry], 1);
      var
       x = match[1],
       perms = x[3],
       encrypt_metadata = x[2],
       match$0 = x[1],
       oe = match$0[7],
       ue = match$0[6],
       id = match$0[5],
       p = match$0[4],
       o = match$0[3],
       u = match$0[2],
       crypt_type = match$0[1];
      if(typeof crypt_type === "number")
       var
        _X_ =
          encrypt_pdf_AES_inner
           (o, u, p, owner_pw, id, encrypt_metadata, pdf$0);
      else if(0 === crypt_type[0]){
       var _S_ = crypt_type[1];
       if(40 === _S_)
        var _X_ = encrypt_pdf_40bit_inner(o, u, p, owner_pw, id, pdf$0);
       else{
        if(128 !== _S_)
         throw caml_maybe_attach_backtrace
                ([0, Pdf[4], cst_recrypt_pdf_bad_encryption], 1);
        var
         _X_ =
           4 === crypt_type[2]
            ? encrypt_pdf_128bit_inner_r4
              (o, u, p, owner_pw, id, pdf$0, encrypt_metadata)
            : encrypt_pdf_128bit_inner(o, u, p, owner_pw, id, pdf$0);
       }
      }
      else{
       var iso = crypt_type[1];
       if(! oe)
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_recrypt_pdf_bad_oe], 1);
       var oe$0 = oe[1];
       if(! ue)
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_recrypt_pdf_bad_ue], 1);
       var ue$0 = ue[1];
       if(! authenticate_user_password_aes(iso, make_utf8(owner_pw), u))
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_recrypt_pdf_failed_AESV3_f], 1);
       var
        key =
          file_encryption_key_aesv3_user(iso, make_utf8(owner_pw), u, ue$0),
        _X_ =
          encrypt_pdf_AES256_inner
           (iso,
            encrypt_metadata,
            o,
            u,
            p,
            perms,
            oe$0,
            ue$0,
            id,
            caml_call1(Pdfio[41], key),
            pdf$0);
      }
      var _W_ = _X_;
     }
     catch(_Z_){
      var match$1 = pdf$0[7];
      if(! match$1)
       throw caml_maybe_attach_backtrace
              ([0, Pdf[4], cst_recrypt_pdf_no_saved_encry$0], 1);
      var
       x$0 = match$1[1],
       perms$0 = x$0[3],
       encrypt_metadata$0 = x$0[2],
       match$2 = x$0[1],
       oe$1 = match$2[7],
       ue$1 = match$2[6],
       id$0 = match$2[5],
       p$0 = match$2[4],
       o$0 = match$2[3],
       u$0 = match$2[2],
       crypt_type$0 = match$2[1],
       match$3 =
         key_or_user_password_from_owne
          ([0, [0, crypt_type$0, u$0, o$0, oe$1]], owner_pw, pdf$0);
      if(! match$3)
       throw caml_maybe_attach_backtrace
              ([0, Pdf[4], cst_Recrypt_with_owner_passwor], 1);
      var match$4 = match$3[1], pw = match$4[2], key$0 = match$4[1];
      if(typeof crypt_type$0 === "number")
       var
        _V_ =
          encrypt_pdf_AES_inner
           (o$0, u$0, p$0, pw, id$0, encrypt_metadata$0, pdf$0);
      else if(0 === crypt_type$0[0]){
       var _T_ = crypt_type$0[1];
       if(40 === _T_)
        var _V_ = encrypt_pdf_40bit_inner(o$0, u$0, p$0, pw, id$0, pdf$0);
       else{
        if(128 !== _T_)
         throw caml_maybe_attach_backtrace
                ([0, Pdf[4], cst_recrypt_pdf_owner_bad_encr], 1);
        var
         _V_ =
           4 === crypt_type$0[2]
            ? encrypt_pdf_128bit_inner_r4
              (o$0, u$0, p$0, pw, id$0, pdf$0, encrypt_metadata$0)
            : encrypt_pdf_128bit_inner(o$0, u$0, p$0, pw, id$0, pdf$0);
       }
      }
      else{
       var iso$0 = crypt_type$0[1];
       if(! oe$1)
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_recrypt_pdf_bad_oe$0], 1);
       var oe$2 = oe$1[1];
       if(! ue$1)
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_recrypt_pdf_bad_ue$0], 1);
       var
        ue$2 = ue$1[1],
        _V_ =
          encrypt_pdf_AES256_inner
           (iso$0,
            encrypt_metadata$0,
            o$0,
            u$0,
            p$0,
            perms$0,
            oe$2,
            ue$2,
            id$0,
            key$0,
            pdf$0);
      }
      var _W_ = _V_;
     }
     return _W_;
    }
    catch(_Y_){
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_recrypt_pdf_failed_Wrong_p], 1);
    }
   }
   var
    Pdfcrypt =
      [0,
       crypt_debug,
       decrypt_pdf,
       decrypt_pdf_owner,
       is_encrypted,
       recrypt_pdf,
       encrypt_pdf_40bit,
       encrypt_pdf_128bit,
       encrypt_pdf_AES,
       encrypt_pdf_AES256,
       encrypt_pdf_AES256ISO,
       string_of_pdf,
       decrypt_single_stream,
       get_encryption_values,
       banlist_of_p];
   runtime.caml_register_global(200, Pdfcrypt, "Pdfcrypt");
   return;
  }
  (globalThis));

//# 8507 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Pdfflate_Error = "Pdfflate.Error",
    caml_create_bytes = runtime.caml_create_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Error = [248, cst_Pdfflate_Error, runtime.caml_fresh_oo_id(0)];
   caml_call2(Stdlib_Callback[2], cst_Pdfflate_Error, [0, Error, cst$0, cst]);
   function compress(_a_, opt, refill, flush){
    var
     level = _a_ ? _a_[1] : 6,
     header = opt ? opt[1] : 1,
     inbuf = caml_create_bytes(1024),
     outbuf = caml_create_bytes(1024),
     zs = runtime.camlpdf_camlzip_deflateInit(level, header),
     inpos = 0,
     inavail = 0;
    for(;;)
     if(0 === inavail){
      var incount = caml_call1(refill, inbuf);
      if(0 === incount) break;
      inpos = 0;
      inavail = incount;
     }
     else{
      var
       match =
         runtime.camlpdf_camlzip_deflate_bytecode
          (zs, inbuf, inpos, inavail, outbuf, 0, 1024, 0),
       used_out = match[3],
       used_in = match[2];
      caml_call2(flush, outbuf, used_out);
      var inavail$0 = inavail - used_in | 0, inpos$0 = inpos + used_in | 0;
      inpos = inpos$0;
      inavail = inavail$0;
     }
    for(;;){
     var
      match$0 =
        runtime.camlpdf_camlzip_deflate_bytecode
         (zs, inbuf, 0, 0, outbuf, 0, 1024, 3),
      used_out$0 = match$0[3],
      finished = match$0[1];
     caml_call2(flush, outbuf, used_out$0);
     if(! (1 - finished)) return runtime.camlpdf_camlzip_deflateEnd(zs);
    }
   }
   function uncompress(opt, refill, flush){
    var
     header = opt ? opt[1] : 1,
     inbuf = caml_create_bytes(1024),
     outbuf = caml_create_bytes(1024),
     zs = runtime.camlpdf_camlzip_inflateInit(header);
    a:
    {
     var inpos = 0, inavail = 0;
     for(;;)
      if(0 === inavail){
       var incount = caml_call1(refill, inbuf);
       if(0 === incount) break;
       inpos = 0;
       inavail = incount;
      }
      else{
       var
        match =
          runtime.camlpdf_camlzip_inflate_bytecode
           (zs, inbuf, inpos, inavail, outbuf, 0, 1024, 1),
        used_out = match[3],
        used_in = match[2],
        finished = match[1];
       caml_call2(flush, outbuf, used_out);
       if(! (1 - finished)) break a;
       var inavail$0 = inavail - used_in | 0, inpos$0 = inpos + used_in | 0;
       inpos = inpos$0;
       inavail = inavail$0;
      }
     var first_finish = 1;
     for(;;){
      b:
      {
       if(first_finish && ! header){var dummy_byte = 1; break b;}
       var dummy_byte = 0;
      }
      var
       match$0 =
         runtime.camlpdf_camlzip_inflate_bytecode
          (zs, inbuf, 0, dummy_byte, outbuf, 0, 1024, 1),
       used_out$0 = match$0[3],
       finished$0 = match$0[1];
      caml_call2(flush, outbuf, used_out$0);
      if(! (1 - finished$0)) break;
      first_finish = 0;
     }
    }
    return runtime.camlpdf_camlzip_inflateEnd(zs);
   }
   var Pdfflate = [0, Error, compress, uncompress];
   runtime.caml_register_global(5, Pdfflate, "Pdfflate");
   return;
  }
  (globalThis));

//# 8629 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = " ",
    cst_ASCII85Decode$0 = "/ASCII85Decode",
    cst_ASCIIHexDecode$0 = "/ASCIIHexDecode",
    cst_Columns$2 = "/Columns",
    cst_DP$8 = "/DP",
    cst_DecodeParms$8 = "/DecodeParms",
    cst_F$7 = "/F",
    cst_Filter$8 = "/Filter",
    cst_FlateDecode$0 = "/FlateDecode",
    cst_Length$2 = "/Length",
    cst_Predictor$1 = "/Predictor",
    cst_RunLengthDecode$0 = "/RunLengthDecode",
    cst_pdfcodec_ml = "pdfcodec.ml",
    caml_array_make = runtime.caml_array_make,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mod = runtime.caml_int64_mod,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$1 = "",
    cst = cst$2,
    cst$0 = cst$2,
    Pdfio = global_data.Pdfio,
    Stdlib = global_data.Stdlib,
    Pdf = global_data.Pdf,
    Pdfutil = global_data.Pdfutil,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Pdfe = global_data.Pdfe,
    Stdlib_Array = global_data.Stdlib__Array,
    Pdfflate = global_data.Pdfflate,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Sys = global_data.Stdlib__Sys,
    debug = [0, 0],
    flate_level = [0, 6];
   function get_streamchar(s){
    for(;;){
     var chr = caml_call1(s[4], 0);
     if(chr === Pdfio[1]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
     if(! caml_call1(Pdf[37], chr)) return chr;
    }
   }
   var
    Couldn_tDecodeStream =
      [248, "Pdfcodec.Couldn'tDecodeStream", caml_fresh_oo_id(0)],
    DecodeNotSupported =
      [248, "Pdfcodec.DecodeNotSupported", caml_fresh_oo_id(0)],
    _a_ = [0, [4, 8, [0, 2, 2], 0, 0], "%02X"],
    cst_0x = "0x",
    _b_ = [0, cst_pdfcodec_ml, 143, 9],
    _c_ = [0, 122, 0],
    _d_ = [0, 126, [0, 62, 0]],
    _e_ = [0, cst_pdfcodec_ml, 165, 15];
   function encode_ASCIIHex(stream){
    var
     size = caml_call1(Pdfio[18], stream),
     stream$0 = caml_call1(Pdfio[17], (size * 2 | 0) + 1 | 0);
    caml_call3(Pdfio[24], stream$0, size * 2 | 0, 62);
    var _ie_ = size - 1 | 0, _id_ = 0;
    if(_ie_ >= 0){
     var p = _id_;
     for(;;){
      var
       _if_ = caml_call2(Pdfio[21], stream, p),
       _ig_ = caml_call2(Stdlib_Printf[4], _a_, _if_),
       chars = caml_call1(Pdfutil[8], _ig_),
       _ih_ = caml_call1(Pdfutil[14], chars);
      caml_call3(Pdfio[24], stream$0, p * 2 | 0, _ih_);
      var
       _ii_ = caml_call1(Pdfutil[15], chars),
       _ij_ = caml_call1(Pdfutil[14], _ii_);
      caml_call3(Pdfio[24], stream$0, (p * 2 | 0) + 1 | 0, _ij_);
      var _ik_ = p + 1 | 0;
      if(_ie_ === p) break;
      p = _ik_;
     }
    }
    return stream$0;
   }
   function char_of_hex(a, b){
    var
     _h$_ = caml_call1(Pdfutil[10], b),
     _ia_ = caml_call1(Pdfutil[10], a),
     _ib_ = caml_call2(Stdlib[28], _ia_, _h$_),
     _ic_ = runtime.caml_int_of_string(caml_call2(Stdlib[28], cst_0x, _ib_));
    return caml_call1(Stdlib[29], _ic_);
   }
   function decode_5bytes(c1, c2, c3, c4, c5, n, o){
    function d(x, p){
     var
      _h8_ = caml_call2(Pdfutil[188], p, 85),
      _h9_ = caml_call1(Pdfutil[115], _h8_),
      _h__ = caml_call1(Pdfutil[115], x - 33 | 0);
     return caml_call2(Pdfutil[121], _h__, _h9_);
    }
    var
     _hR_ = d(c5, 0),
     _hS_ = d(c4, 1),
     _hT_ = caml_call2(Pdfutil[118], _hS_, _hR_),
     _hU_ = d(c3, 2),
     _hV_ = caml_call2(Pdfutil[118], _hU_, _hT_),
     _hW_ = d(c2, 3),
     _hX_ = d(c1, 4),
     _hY_ = caml_call2(Pdfutil[118], _hX_, _hW_),
     total = caml_call2(Pdfutil[118], _hY_, _hV_);
    function extract(t){
     var
      _h5_ = caml_call2(Pdfutil[124], total, 24 - t | 0),
      _h6_ = caml_call2(Pdfutil[123], _h5_, 24),
      _h7_ = caml_call1(Pdfutil[116], _h6_);
     return caml_call1(Stdlib[29], _h7_);
    }
    var switcher = n - 1 | 0;
    if(3 < switcher >>> 0) return o;
    switch(switcher){
      case 0:
       return [0, extract(24), o];
      case 1:
       var _hZ_ = [0, extract(24), o]; return [0, extract(16), _hZ_];
      case 2:
       var _h0_ = [0, extract(24), o], _h1_ = [0, extract(16), _h0_];
       return [0, extract(8), _h1_];
      default:
       var
        _h2_ = [0, extract(24), o],
        _h3_ = [0, extract(16), _h2_],
        _h4_ = [0, extract(8), _h3_];
       return [0, extract(0), _h4_];
    }
   }
   function conso(cs, o){
    if(cs){
     var _hN_ = cs[2];
     if(_hN_){
      var _hO_ = _hN_[2], c2 = _hN_[1], c1 = cs[1];
      if(! _hO_) return decode_5bytes(c1, c2, 126, 62, 33, 1, o);
      var _hP_ = _hO_[2], c3 = _hO_[1];
      if(! _hP_) return decode_5bytes(c1, c2, c3, 126, 62, 2, o);
      var _hQ_ = _hP_[2], c4 = _hP_[1];
      if(! _hQ_) return decode_5bytes(c1, c2, c3, c4, 126, 3, o);
      if(! _hQ_[2]){
       var c5 = _hQ_[1];
       return decode_5bytes(c1, c2, c3, c4, c5, 4, o);
      }
     }
    }
    return o;
   }
   function encode_4bytes(param){
    if(param){
     var _hq_ = param[2];
     if(_hq_){
      var _hr_ = _hq_[2];
      if(_hr_){
       var _hs_ = _hr_[2];
       if(_hs_ && ! _hs_[2]){
        var
         b4 = _hs_[1],
         b3 = _hr_[1],
         b2 = _hq_[1],
         b1 = param[1],
         _ht_ = caml_call2(Pdfutil[188], 0, 256),
         _hu_ = caml_call1(Pdfutil[133], _ht_),
         _hv_ = [0, caml_int64_mul(caml_call1(Pdfutil[133], b4), _hu_), 0],
         _hw_ = caml_call2(Pdfutil[188], 1, 256),
         _hx_ = caml_call1(Pdfutil[133], _hw_),
         _hy_ = [0, caml_int64_mul(caml_call1(Pdfutil[133], b3), _hx_), _hv_],
         _hz_ = caml_call2(Pdfutil[188], 2, 256),
         _hA_ = caml_call1(Pdfutil[133], _hz_),
         _hB_ = [0, caml_int64_mul(caml_call1(Pdfutil[133], b2), _hA_), _hy_],
         _hC_ = caml_call2(Pdfutil[188], 3, 256),
         _hD_ = caml_call1(Pdfutil[133], _hC_),
         numbers =
           [0, caml_int64_mul(caml_call1(Pdfutil[133], b1), _hD_), _hB_],
         t$0 =
           caml_call3
            (Pdfutil[33], runtime.caml_int64_add, Stdlib_Int64[1], numbers),
         _hE_ = caml_call2(Pdfutil[188], 1, 85),
         one85 = caml_call1(Pdfutil[133], _hE_),
         _hF_ = caml_call2(Pdfutil[188], 2, 85),
         two85 = caml_call1(Pdfutil[133], _hF_),
         _hG_ = caml_call2(Pdfutil[188], 3, 85),
         three85 = caml_call1(Pdfutil[133], _hG_),
         _hH_ = caml_call2(Pdfutil[188], 0, 85),
         zero85 = caml_call1(Pdfutil[133], _hH_),
         _hI_ = caml_call2(Pdfutil[188], 4, 85),
         four85 = caml_call1(Pdfutil[133], _hI_),
         c5 = caml_int64_div(caml_int64_mod(t$0, one85), zero85),
         t = caml_int64_sub(t$0, caml_int64_mod(t$0, one85)),
         c4 = caml_int64_div(caml_int64_mod(t, two85), one85),
         t$3 = caml_int64_sub(t, caml_int64_mod(t, two85)),
         c3 = caml_int64_div(caml_int64_mod(t$3, three85), two85),
         t$2 = caml_int64_sub(t$3, caml_int64_mod(t$3, three85)),
         c2 = caml_int64_div(caml_int64_mod(t$2, four85), three85),
         t$1 = caml_int64_sub(t$2, caml_int64_mod(t$2, four85)),
         _hJ_ = caml_call1(Pdfutil[134], c5),
         _hK_ = caml_call1(Pdfutil[134], c4),
         _hL_ = caml_call1(Pdfutil[134], c3),
         _hM_ = caml_call1(Pdfutil[134], c2);
        return [0,
                caml_call1(Pdfutil[134], caml_int64_div(t$1, four85)),
                _hM_,
                _hL_,
                _hK_,
                _hJ_];
       }
      }
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   function encode_ASCII85(stream){
    var
     output = [0, 0],
     enddata = [0, 0],
     istream = caml_call2(Pdfio[3], 0, stream);
    for(;;){
     if(enddata[1]) break;
     var
      b1 = caml_call1(istream[3], 0),
      b2 = caml_call1(istream[3], 0),
      b3 = caml_call1(istream[3], 0),
      b4 = caml_call1(istream[3], 0);
     if(b1){
      var b1$0 = b1[1];
      a:
      {
       b:
       {
        if(b2){
         var b2$0 = b2[1];
         if(b3){
          var b3$0 = b3[1];
          if(b4){
           var b4$0 = b4[1];
           output[1] =
            [0, [0, b1$0, [0, b2$0, [0, b3$0, [0, b4$0, 0]]]], output[1]];
          }
          else{
           caml_call1(Pdfutil[159], enddata);
           output[1] = [0, [0, b1$0, [0, b2$0, [0, b3$0, 0]]], output[1]];
          }
         }
         else{
          if(b4) break b;
          caml_call1(Pdfutil[159], enddata);
          output[1] = [0, [0, b1$0, [0, b2$0, 0]], output[1]];
         }
         break a;
        }
        if(! b3 && ! b4){
         caml_call1(Pdfutil[159], enddata);
         output[1] = [0, [0, b1$0, 0], output[1]];
         break a;
        }
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
      }
     }
     else
      caml_call1(Pdfutil[159], enddata);
    }
    function fix(k){return caml_call1(Stdlib[29], k + 33 | 0);}
    var
     charlists =
       caml_call2
        (Pdfutil[23],
         function(l){
          var len = caml_call1(Pdfutil[35], l);
          if(4 > len){
           var
            _hk_ = caml_call2(Pdfutil[88], 0, 4 - len | 0),
            l$0 = caml_call2(Pdfutil[21], l, _hk_),
            match$0 = encode_4bytes(l$0),
            c5$0 = match$0[5],
            c4$0 = match$0[4],
            c3$0 = match$0[3],
            c2$0 = match$0[2],
            c1$0 = match$0[1],
            _hl_ = [0, fix(c5$0), 0],
            _hm_ = [0, fix(c4$0), _hl_],
            _hn_ = [0, fix(c3$0), _hm_],
            _ho_ = [0, fix(c2$0), _hn_],
            _hp_ = [0, fix(c1$0), _ho_];
           return caml_call2(Pdfutil[55], _hp_, len + 1 | 0);
          }
          var
           match = encode_4bytes(l),
           c5 = match[5],
           c4 = match[4],
           c3 = match[3],
           c2 = match[2],
           c1 = match[1];
          if(0 === ((((c1 + c2 | 0) + c3 | 0) + c4 | 0) + c5 | 0)) return _c_;
          var
           _hg_ = [0, fix(c5), 0],
           _hh_ = [0, fix(c4), _hg_],
           _hi_ = [0, fix(c3), _hh_],
           _hj_ = [0, fix(c2), _hi_];
          return [0, fix(c1), _hj_];
         },
         output[1]),
     _he_ = caml_call1(Pdfutil[22], charlists),
     _hf_ = caml_call2(Pdfutil[21], _he_, _d_);
    return caml_call1(Pdfio[33], _hf_);
   }
   function bytes_of_strings_rev(strings){
    var len = 0, param = strings;
    for(;;){
     if(! param) break;
     var t = param[2], h = param[1], n = len + caml_ml_string_length(h) | 0;
     len = n;
     param = t;
    }
    var s = caml_call1(Pdfio[17], len), pos = [0, len - 1 | 0];
    caml_call2
     (Pdfutil[17],
      function(str){
       var _hc_ = caml_ml_string_length(str) - 1 | 0;
       if(_hc_ >= 0){
        var x = _hc_;
        for(;;){
         caml_call3
          (Pdfio[25], s, pos[1], runtime.caml_string_unsafe_get(str, x));
         pos[1]--;
         var _hd_ = x - 1 | 0;
         if(0 === x) break;
         x = _hd_;
        }
       }
       return 0;
      },
      strings);
    return s;
   }
   function flate_process(f, data){
    var
     strings = [0, 0],
     pos = [0, 0],
     inlength = caml_call1(Pdfio[18], data);
    function input(buf){
     var
      s = caml_ml_bytes_length(buf),
      towrite = caml_call2(Pdfutil[190], inlength - pos[1] | 0, s),
      _ha_ = towrite - 1 | 0,
      _g$_ = 0;
     if(_ha_ >= 0){
      var x = _g$_;
      for(;;){
       caml_bytes_unsafe_set(buf, x, caml_call2(Pdfio[22], data, pos[1]));
       pos[1]++;
       var _hb_ = x + 1 | 0;
       if(_ha_ === x) break;
       x = _hb_;
      }
     }
     return towrite;
    }
    function output(buf, length){
     var _g9_ = 0 < length ? 1 : 0;
     if(! _g9_) return _g9_;
     var _g__ = caml_call3(Stdlib_Bytes[8], buf, 0, length);
     return caml_call2(Pdfutil[170], strings, _g__);
    }
    caml_call2(f, input, output);
    return bytes_of_strings_rev(strings[1]);
   }
   var _f_ = Stdlib_Sys[5];
   a:
   {
    var
     cst_decode_ASCII85_i = "decode_ASCII85_i",
     _h_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]),
     _i_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]),
     _j_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1]),
     _k_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]),
     _l_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1]),
     _m_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0]),
     _n_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]),
     _o_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]),
     _p_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]),
     _q_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]),
     _r_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1]),
     _s_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0]),
     _t_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]),
     _u_ =
       [0,
        0,
        [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]]]]],
     _v_ = [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]],
     _w_ =
       [0,
        0,
        [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, 0]]]]]]]]],
     _x_ =
       [0,
        0,
        [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, 0]]]]]]]]],
     _y_ =
       [0,
        0,
        [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]]]],
     _z_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]]]]],
     _A_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, 0]]]]]]]]],
     _B_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, 0]]]]]]]]],
     _C_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]]]],
     _D_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]]]],
     _E_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, 0]]]]]]]]],
     _F_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]]]]],
     _G_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]]]],
     _H_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]]]]]],
     _I_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, 0]]]]]]]]],
     _J_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, 0]]]]]]]]],
     _K_ =
       [0,
        0,
        [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, 0]]]]]]]]],
     _L_ = [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]]],
     _M_ = [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]]],
     _N_ = [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]]]],
     _O_ = [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]]],
     _P_ = [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]]],
     _Q_ = [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, 0]]]]]]]],
     _R_ = [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]],
     _S_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]],
     _T_ = [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, 0]]]]],
     _U_ = [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]],
     cst_write_white_code_unknown = "write_white_code: unknown",
     _V_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),
     _W_ = [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]]]],
     _X_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]],
     _Y_ = [0, 0, [0, 1, [0, 1, [0, 1, 0]]]],
     _Z_ = [0, 1, [0, 0, [0, 0, [0, 0, 0]]]],
     ___ = [0, 1, [0, 0, [0, 1, [0, 1, 0]]]],
     _$_ = [0, 1, [0, 1, [0, 0, [0, 0, 0]]]],
     _aa_ = [0, 1, [0, 1, [0, 1, [0, 0, 0]]]],
     _ab_ = [0, 1, [0, 1, [0, 1, [0, 1, 0]]]],
     _ac_ = [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]],
     _ad_ = [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]],
     _ae_ = [0, 0, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]],
     _af_ = [0, 0, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]],
     _ag_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]],
     _ah_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]]],
     _ai_ = [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]],
     _aj_ = [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]],
     _ak_ = [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, 0]]]]]],
     _al_ = [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]],
     _am_ = [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]],
     _an_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, 0]]]]]]],
     _ao_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]],
     _ap_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]],
     _aq_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]]]],
     _ar_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]],
     _as_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]],
     _at_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]]],
     _au_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]]]],
     _av_ = [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]],
     _aw_ = [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]],
     _ax_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _ay_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _az_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _aA_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _aB_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _aC_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _aD_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]]],
     _aE_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]]]],
     _aF_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, 0]]]]]]]],
     _aG_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]]],
     _aH_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]]],
     _aI_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, 0]]]]]]]],
     _aJ_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _aK_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _aL_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, 0]]]]]]]],
     _aM_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, 0]]]]]]]],
     _aN_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]]],
     _aO_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]]]],
     _aP_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _aQ_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _aR_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _aS_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _aT_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]]],
     _aU_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]]]],
     _aV_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]]],
     _aW_ = [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]]]],
     _aX_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]]],
     _aY_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, 0]]]]]]]],
     _aZ_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _a0_ = [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _a1_ = [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _a2_ = [0, 0, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _a3_ = [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, [0, 0, 0]]]]]]]],
     _a4_ = [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]]]]],
     _a5_ = [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]]],
     _a6_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]),
     _a7_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]),
     _a8_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1]),
     _a9_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]),
     _a__ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1]),
     _a$_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0]),
     _ba_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]),
     _bb_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]),
     _bc_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]),
     _bd_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]),
     _be_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1]),
     _bf_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0]),
     _bg_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]),
     _bh_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1]),
     _bi_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0]),
     _bj_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1]),
     _bk_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0]),
     _bl_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1]),
     _bm_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0]),
     _bn_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1]),
     _bo_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0]),
     _bp_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1]),
     _bq_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0]),
     _br_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1]),
     _bs_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0]),
     _bt_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1]),
     _bu_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]),
     _bv_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1]),
     _bw_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0]),
     _bx_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1]),
     _by_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0]),
     _bz_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1]),
     _bA_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0]),
     _bB_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1]),
     _bC_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0]),
     _bD_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1]),
     _bE_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1]),
     _bF_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1]),
     _bG_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0]),
     _bH_ =
       [0,
        0,
        [0,
         0,
         [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 1, [0, 1, 0]]]]]]]]]],
     cst_write_black_code_unknown = "write_black_code: unknown",
     _bI_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),
     _bJ_ =
       [0,
        0,
        [0,
         0,
         [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]]]]],
     _bK_ = [0, 0, [0, 1, [0, 0, 0]]],
     _bL_ = [0, 1, [0, 1, 0]],
     _bM_ = [0, 1, [0, 0, 0]],
     _bN_ = [0, 0, [0, 1, [0, 1, 0]]],
     _bO_ = [0, 0, [0, 0, [0, 1, [0, 1, 0]]]],
     _bP_ = [0, 0, [0, 0, [0, 1, [0, 0, 0]]]],
     _bQ_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, 0]]]]],
     _bR_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]],
     _bS_ = [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]],
     _bT_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]],
     _bU_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, 0]]]]]]],
     _bV_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]],
     _bW_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, 0]]]]]]]],
     _bX_ = [0, 0, [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]]],
     _bY_ =
       [0,
        0,
        [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]]]],
     _bZ_ =
       [0,
        0,
        [0,
         0,
         [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 1, [0, 1, [0, 1, 0]]]]]]]]]],
     _b0_ =
       [0,
        0,
        [0,
         0,
         [0, 0, [0, 0, [0, 0, [0, 1, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]]]]],
     _b1_ =
       [0,
        0,
        [0,
         0,
         [0, 0, [0, 0, [0, 0, [0, 0, [0, 1, [0, 0, [0, 0, [0, 0, 0]]]]]]]]]],
     _b2_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1]),
     _b3_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0]),
     _b4_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0]),
     _b5_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1]),
     _b6_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]),
     _b7_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1]),
     _b8_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0]),
     _b9_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0]),
     _b__ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1]),
     _b$_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0]),
     _ca_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1]),
     _cb_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0]),
     _cc_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1]),
     _cd_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0]),
     _ce_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1]),
     _cf_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0]),
     _cg_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1]),
     _ch_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0]),
     _ci_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1]),
     _cj_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0]),
     _ck_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1]),
     _cl_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0]),
     _cm_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1]),
     _cn_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0]),
     _co_ = caml_list_of_js_array([0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1]),
     _cp_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0]),
     _cq_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1]),
     _cr_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0]),
     _cs_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1]),
     _ct_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0]),
     _cu_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1]),
     _cv_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0]),
     _cw_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1]),
     _cx_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0]),
     _cy_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1]),
     _cz_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0]),
     _cA_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1]),
     _cB_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]),
     _cC_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0]),
     _cD_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1]),
     _cE_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1]),
     _cF_ = caml_list_of_js_array([0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0]),
     _cG_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0]),
     _cH_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0]),
     _cI_ = caml_list_of_js_array([0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1]),
     cst_bad_white_code = "bad white code",
     cst_bad_black_code = "bad black code",
     cst_F$2 = cst_F$7,
     cst_Filter$2 = cst_Filter$8,
     _cT_ = [0, cst_pdfcodec_ml, 1576, 21],
     cst_Pdf_remove_decoder_malform = "Pdf.remove_decoder: malformed /Filter",
     cst_Pdf_decode_pdfstream_malfo = "Pdf.decode_pdfstream: malformed Stream",
     cst_Pdf_encode_pdfstream_malfo = "Pdf.encode_pdfstream: malformed Stream",
     _cV_ = [0, [0, cst_Predictor$1, [1, 12]], 0],
     cst_Columns$1 = cst_Columns$2,
     cst_DecodeParms$7 = cst_DecodeParms$8,
     cst_Encode_predictor_not_suppo = "Encode predictor not supported",
     _cW_ = [0, cst_pdfcodec_ml, 1697, 9],
     cst_Filter$6 = cst_Filter$8,
     cst_Malformed_Filter = "Malformed /Filter",
     cst_Length$1 = cst_Length$2,
     cst_Filter$7 = cst_Filter$8,
     cst_ASCIIHexDecode = cst_ASCIIHexDecode$0,
     cst_ASCII85Decode = cst_ASCII85Decode$0,
     cst_RunLengthDecode = cst_RunLengthDecode$0,
     cst_FlateDecode = cst_FlateDecode$0,
     _cU_ = [5, 0],
     cst_Filter$4 = cst_Filter$8,
     cst_F$4 = cst_F$7,
     cst_DecodeParms$5 = cst_DecodeParms$8,
     cst_DP$5 = cst_DP$8,
     cst_Filter$5 = cst_Filter$8,
     cst_F$5 = cst_F$7,
     cst_DP$6 = cst_DP$8,
     cst_DecodeParms$6 = cst_DecodeParms$8,
     cst_DP$7 = cst_DP$8,
     cst_F$6 = cst_F$7,
     cst_Malformed_filter_array = "Malformed filter array",
     cst_Filter$3 = cst_Filter$8,
     cst_F$3 = cst_F$7,
     cst_No_or_bad_filter = "No or bad filter",
     cst_Length = cst_Length$2,
     cst_no_Length = "no /Length",
     cst_No_Length = "No /Length",
     cst_Length$0 = cst_Length$2,
     cst_Pdf_decode_pdfstream_not_a =
       "Pdf.decode_pdfstream: not a valid Stream",
     cst_Filter$0 = cst_Filter$8,
     cst_F$0 = cst_F$7,
     cst_Filter$1 = cst_Filter$8,
     cst_F$1 = cst_F$7,
     cst_PDF_remove_decoder_malform = "PDF.remove_decoder: malformed /Filter",
     cst_DecodeParms$2 = cst_DecodeParms$8,
     cst_DP$2 = cst_DP$8,
     cst_DecodeParms$4 = cst_DecodeParms$8,
     cst_DP$4 = cst_DP$8,
     cst_DecodeParms$3 = cst_DecodeParms$8,
     cst_DP$3 = cst_DP$8,
     cst_PDF_remove_decoder_malform$0 =
       "PDF.remove_decoder: malformed /DecodeParms",
     cst_F = cst_F$7,
     cst_Filter = cst_Filter$8,
     cst_PDF_decode_Bad_filter_spec = "PDF.decode: Bad filter specification",
     cst_decode_one = "decode_one",
     cst_DP$1 = cst_DP$8,
     cst_DecodeParms$1 = cst_DecodeParms$8,
     _cS_ = [6, 0],
     cst_Predictor = cst_Predictor$1,
     cst_Colors = "/Colors",
     cst_malformed_Colors = "malformed /Colors",
     cst_BitsPerComponent = "/BitsPerComponent",
     cst_malformed_BitsPerComponent = "malformed /BitsPerComponent",
     cst_Columns$0 = cst_Columns$2,
     cst_malformed_Columns = "malformed /Columns",
     cst_Predictor$0 = "Predictor",
     cst_Malformed_Predictor = "Malformed /Predictor",
     _cR_ = [0, [11, "Unknown: ", [2, 0, 0]], "Unknown: %s"],
     cst_DP = cst_DP$8,
     cst_DecodeParms = cst_DecodeParms$8,
     cst_EarlyChange = "/EarlyChange",
     cst_malformed_EarlyChange = "malformed /EarlyChange",
     cst_DP$0 = cst_DP$8,
     cst_DecodeParms$0 = cst_DecodeParms$8,
     cst_bad_Decodeparms = "bad Decodeparms",
     cst_K = "/K",
     cst_EndOfLine = "/EndOfLine",
     cst_EncodedByteAlign = "/EncodedByteAlign",
     cst_Columns = cst_Columns$2,
     cst_Rows = "/Rows",
     cst_EndOfBlock = "/EndOfBlock",
     cst_BlackIs1 = "/BlackIs1",
     cst_DamagedRowsBeforeError = "/DamagedRowsBeforeError",
     cst_Warning_Missing_EOD_marker =
       "Warning: Missing EOD marker in runlength decode...\n",
     _cQ_ = [0, cst_pdfcodec_ml, 1318, 20],
     cst_encode_predictor_not_suppo = "encode_predictor: not supported - ",
     cst_unknown_PNG_predictor = "unknown PNG predictor",
     cst_TIFF_Predictor_for_1bpc_no = "TIFF Predictor for 1bpc not supported",
     cst_TIFF_Predictor_for_2bpc_no = "TIFF Predictor for 2bpc not supported",
     cst_TIFF_Predictor_for_4bpc_no = "TIFF Predictor for 4bpc not supported",
     cst_TIFF_Predictor_for_16bpc_n = "TIFF Predictor for 16bpc not supported",
     cst_Tiff_predictor_for_unknown = "Tiff predictor for unknown color depth",
     cst_Bad_CCITT_stream = "Bad CCITT stream",
     cst_CCITTFax_k_0 = "CCITTFax k > 0",
     cst_CCITT_Uncompressed = "CCITT Uncompressed",
     cst_CCITT_k = "CCITT k",
     cst_Bad_CCITT_Stream = "Bad CCITT Stream",
     _cP_ = [0, -1],
     _cO_ = [0, 1],
     _cL_ = [0, -2],
     _cK_ = [0, 2],
     _cN_ = [0, -3],
     _cM_ = [0, 3],
     cst_Not_a_valid_code_on_EOFB = "Not a valid code on EOFB",
     cst_Not_a_valid_code = "Not a valid code",
     _cJ_ = [0, 0],
     cst_length = " length ",
     cst_Flate = "Flate",
     cst_First_50_bytes = "First 50 bytes\n",
     _g_ = [0, [1, [11, " = ", [4, 3, 0, 0, [12, 10, 0]]]], "%C = %i\n"],
     cst_Error_decoding_ASCII85_str = "Error decoding ASCII85 stream",
     cst_ASCIIHex = "ASCIIHex";
    if(typeof _f_ !== "number" && _f_[1] === "js_of_ocaml"){var is_js = 1; break a;}
    var is_js = 0;
   }
   function encode_flate(stream){
    if(is_js){
     var
      _g8_ = runtime.camlpdf_caml_zlib_compress(caml_call1(Pdfio[41], stream));
     return caml_call1(Pdfio[30], _g8_);
    }
    var arg = caml_call1(Pdfflate[2], [0, flate_level[1]]);
    return flate_process
            (function(eta){return caml_call2(arg, 0, eta);}, stream);
   }
   function decode_flate(stream){
    if(0 === caml_call1(Pdfio[18], stream)) return caml_call1(Pdfio[17], 0);
    try{
     if(is_js)
      var
       _g6_ =
         runtime.camlpdf_caml_zlib_decompress(caml_call1(Pdfio[41], stream)),
       _g7_ = caml_call1(Pdfio[30], _g6_);
     else
      var
       arg = Pdfflate[3],
       _g7_ =
         flate_process(function(eta){return caml_call2(arg, 0, eta);}, stream);
     return _g7_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Pdfflate[1]) throw caml_maybe_attach_backtrace(exn, 0);
     var b = exn[3], a = exn[2];
     if(debug[1]){
      caml_call1(Pdfe[3], cst_First_50_bytes);
      var x = 0;
      for(;;){
       var
        _gU_ = caml_call2(Pdfio[21], stream, x),
        _gV_ = caml_call2(Pdfio[21], stream, x),
        _gW_ = caml_call1(Stdlib[29], _gV_),
        _gX_ = caml_call3(Stdlib_Printf[4], _g_, _gW_, _gU_);
       caml_call1(Pdfe[3], _gX_);
       var _gY_ = x + 1 | 0;
       if(50 === x) break;
       x = _gY_;
      }
     }
     var
      _gZ_ = caml_call1(Pdfio[18], stream),
      _g0_ = caml_call1(Stdlib[33], _gZ_),
      _g1_ = caml_call2(Stdlib[28], cst_length, _g0_),
      _g2_ = caml_call2(Stdlib[28], b, _g1_),
      _g3_ = caml_call2(Stdlib[28], cst, _g2_),
      _g4_ = caml_call2(Stdlib[28], a, _g3_),
      _g5_ = caml_call2(Stdlib[28], cst$0, _g4_);
     throw caml_maybe_attach_backtrace
            ([0,
              Couldn_tDecodeStream,
              caml_call2(Stdlib[28], cst_Flate, _g5_)],
             1);
    }
   }
   function write_white_code(n){
    var switcher = n + 1 | 0;
    if(64 >= switcher >>> 0){
     var _gT_ = switcher;
     if(33 <= _gT_)
      switch(_gT_){
        case 33:
         return _aA_;
        case 34:
         return _aB_;
        case 35:
         return _aC_;
        case 36:
         return _aD_;
        case 37:
         return _aE_;
        case 38:
         return _aF_;
        case 39:
         return _aG_;
        case 40:
         return _aH_;
        case 41:
         return _aI_;
        case 42:
         return _aJ_;
        case 43:
         return _aK_;
        case 44:
         return _aL_;
        case 45:
         return _aM_;
        case 46:
         return _aN_;
        case 47:
         return _aO_;
        case 48:
         return _aP_;
        case 49:
         return _aQ_;
        case 50:
         return _aR_;
        case 51:
         return _aS_;
        case 52:
         return _aT_;
        case 53:
         return _aU_;
        case 54:
         return _aV_;
        case 55:
         return _aW_;
        case 56:
         return _aX_;
        case 57:
         return _aY_;
        case 58:
         return _aZ_;
        case 59:
         return _a0_;
        case 60:
         return _a1_;
        case 61:
         return _a2_;
        case 62:
         return _a3_;
        case 63:
         return _a4_;
        default: return _a5_;
      }
     switch(_gT_){
       case 0:
        return _V_;
       case 1:
        return _W_;
       case 2:
        return _X_;
       case 3:
        return _Y_;
       case 4:
        return _Z_;
       case 5:
        return ___;
       case 6:
        return _$_;
       case 7:
        return _aa_;
       case 8:
        return _ab_;
       case 9:
        return _ac_;
       case 10:
        return _ad_;
       case 11:
        return _ae_;
       case 12:
        return _af_;
       case 13:
        return _ag_;
       case 14:
        return _ah_;
       case 15:
        return _ai_;
       case 16:
        return _aj_;
       case 17:
        return _ak_;
       case 18:
        return _al_;
       case 19:
        return _am_;
       case 20:
        return _an_;
       case 21:
        return _ao_;
       case 22:
        return _ap_;
       case 23:
        return _aq_;
       case 24:
        return _ar_;
       case 25:
        return _as_;
       case 26:
        return _at_;
       case 27:
        return _au_;
       case 28:
        return _av_;
       case 29:
        return _aw_;
       case 30:
        return _ax_;
       case 31:
        return _ay_;
       default: return _az_;
     }
    }
    if(2560 <= n){
     var _gf_ = write_white_code(n - 2560 | 0);
     return caml_call2(Pdfutil[21], _h_, _gf_);
    }
    if(2496 <= n){
     var _gg_ = write_white_code(n - 2496 | 0);
     return caml_call2(Pdfutil[21], _i_, _gg_);
    }
    if(2432 <= n){
     var _gh_ = write_white_code(n - 2432 | 0);
     return caml_call2(Pdfutil[21], _j_, _gh_);
    }
    if(2368 <= n){
     var _gi_ = write_white_code(n - 2368 | 0);
     return caml_call2(Pdfutil[21], _k_, _gi_);
    }
    if(2304 <= n){
     var _gj_ = write_white_code(n - 2304 | 0);
     return caml_call2(Pdfutil[21], _l_, _gj_);
    }
    if(2240 <= n){
     var _gk_ = write_white_code(n - 2240 | 0);
     return caml_call2(Pdfutil[21], _m_, _gk_);
    }
    if(2176 <= n){
     var _gl_ = write_white_code(n - 2176 | 0);
     return caml_call2(Pdfutil[21], _n_, _gl_);
    }
    if(2112 <= n){
     var _gm_ = write_white_code(n - 2112 | 0);
     return caml_call2(Pdfutil[21], _o_, _gm_);
    }
    if(2048 <= n){
     var _gn_ = write_white_code(n - 2048 | 0);
     return caml_call2(Pdfutil[21], _p_, _gn_);
    }
    if(1984 <= n){
     var _go_ = write_white_code(n - 1984 | 0);
     return caml_call2(Pdfutil[21], _q_, _go_);
    }
    if(1920 <= n){
     var _gp_ = write_white_code(n - 1920 | 0);
     return caml_call2(Pdfutil[21], _r_, _gp_);
    }
    if(1856 <= n){
     var _gq_ = write_white_code(n - 1856 | 0);
     return caml_call2(Pdfutil[21], _s_, _gq_);
    }
    if(1792 <= n){
     var _gr_ = write_white_code(n - 1792 | 0);
     return caml_call2(Pdfutil[21], _t_, _gr_);
    }
    if(1728 <= n){
     var _gs_ = write_white_code(n - 1728 | 0);
     return caml_call2(Pdfutil[21], _u_, _gs_);
    }
    if(1664 <= n){
     var _gt_ = write_white_code(n - 1664 | 0);
     return caml_call2(Pdfutil[21], _v_, _gt_);
    }
    if(1600 <= n){
     var _gu_ = write_white_code(n - 1600 | 0);
     return caml_call2(Pdfutil[21], _w_, _gu_);
    }
    if(1536 <= n){
     var _gv_ = write_white_code(n - 1536 | 0);
     return caml_call2(Pdfutil[21], _x_, _gv_);
    }
    if(1472 <= n){
     var _gw_ = write_white_code(n - 1472 | 0);
     return caml_call2(Pdfutil[21], _y_, _gw_);
    }
    if(1408 <= n){
     var _gx_ = write_white_code(n - 1408 | 0);
     return caml_call2(Pdfutil[21], _z_, _gx_);
    }
    if(1344 <= n){
     var _gy_ = write_white_code(n - 1344 | 0);
     return caml_call2(Pdfutil[21], _A_, _gy_);
    }
    if(1280 <= n){
     var _gz_ = write_white_code(n - 1280 | 0);
     return caml_call2(Pdfutil[21], _B_, _gz_);
    }
    if(1216 <= n){
     var _gA_ = write_white_code(n - 1216 | 0);
     return caml_call2(Pdfutil[21], _C_, _gA_);
    }
    if(1152 <= n){
     var _gB_ = write_white_code(n - 1152 | 0);
     return caml_call2(Pdfutil[21], _D_, _gB_);
    }
    if(1088 <= n){
     var _gC_ = write_white_code(n - 1088 | 0);
     return caml_call2(Pdfutil[21], _E_, _gC_);
    }
    if(1024 <= n){
     var _gD_ = write_white_code(n - 1024 | 0);
     return caml_call2(Pdfutil[21], _F_, _gD_);
    }
    if(960 <= n){
     var _gE_ = write_white_code(n - 960 | 0);
     return caml_call2(Pdfutil[21], _G_, _gE_);
    }
    if(896 <= n){
     var _gF_ = write_white_code(n - 896 | 0);
     return caml_call2(Pdfutil[21], _H_, _gF_);
    }
    if(832 <= n){
     var _gG_ = write_white_code(n - 832 | 0);
     return caml_call2(Pdfutil[21], _I_, _gG_);
    }
    if(768 <= n){
     var _gH_ = write_white_code(n - 768 | 0);
     return caml_call2(Pdfutil[21], _J_, _gH_);
    }
    if(704 <= n){
     var _gI_ = write_white_code(n - 704 | 0);
     return caml_call2(Pdfutil[21], _K_, _gI_);
    }
    if(640 <= n){
     var _gJ_ = write_white_code(n - 640 | 0);
     return caml_call2(Pdfutil[21], _L_, _gJ_);
    }
    if(576 <= n){
     var _gK_ = write_white_code(n - 576 | 0);
     return caml_call2(Pdfutil[21], _M_, _gK_);
    }
    if(512 <= n){
     var _gL_ = write_white_code(n - 512 | 0);
     return caml_call2(Pdfutil[21], _N_, _gL_);
    }
    if(448 <= n){
     var _gM_ = write_white_code(n - 448 | 0);
     return caml_call2(Pdfutil[21], _O_, _gM_);
    }
    if(384 <= n){
     var _gN_ = write_white_code(n - 384 | 0);
     return caml_call2(Pdfutil[21], _P_, _gN_);
    }
    if(320 <= n){
     var _gO_ = write_white_code(n - 320 | 0);
     return caml_call2(Pdfutil[21], _Q_, _gO_);
    }
    if(256 <= n){
     var _gP_ = write_white_code(n - 256 | 0);
     return caml_call2(Pdfutil[21], _R_, _gP_);
    }
    if(192 <= n){
     var _gQ_ = write_white_code(n - 192 | 0);
     return caml_call2(Pdfutil[21], _S_, _gQ_);
    }
    if(128 <= n){
     var _gR_ = write_white_code(n - 128 | 0);
     return caml_call2(Pdfutil[21], _T_, _gR_);
    }
    if(64 > n)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_write_white_code_unknown], 1);
    var _gS_ = write_white_code(n - 64 | 0);
    return caml_call2(Pdfutil[21], _U_, _gS_);
   }
   function write_black_code(n){
    var switcher = n + 1 | 0;
    if(64 >= switcher >>> 0){
     var _ge_ = switcher;
     if(33 <= _ge_)
      switch(_ge_){
        case 33:
         return _cd_;
        case 34:
         return _ce_;
        case 35:
         return _cf_;
        case 36:
         return _cg_;
        case 37:
         return _ch_;
        case 38:
         return _ci_;
        case 39:
         return _cj_;
        case 40:
         return _ck_;
        case 41:
         return _cl_;
        case 42:
         return _cm_;
        case 43:
         return _cn_;
        case 44:
         return _co_;
        case 45:
         return _cp_;
        case 46:
         return _cq_;
        case 47:
         return _cr_;
        case 48:
         return _cs_;
        case 49:
         return _ct_;
        case 50:
         return _cu_;
        case 51:
         return _cv_;
        case 52:
         return _cw_;
        case 53:
         return _cx_;
        case 54:
         return _cy_;
        case 55:
         return _cz_;
        case 56:
         return _cA_;
        case 57:
         return _cB_;
        case 58:
         return _cC_;
        case 59:
         return _cD_;
        case 60:
         return _cE_;
        case 61:
         return _cF_;
        case 62:
         return _cG_;
        case 63:
         return _cH_;
        default: return _cI_;
      }
     switch(_ge_){
       case 0:
        return _bI_;
       case 1:
        return _bJ_;
       case 2:
        return _bK_;
       case 3:
        return _bL_;
       case 4:
        return _bM_;
       case 5:
        return _bN_;
       case 6:
        return _bO_;
       case 7:
        return _bP_;
       case 8:
        return _bQ_;
       case 9:
        return _bR_;
       case 10:
        return _bS_;
       case 11:
        return _bT_;
       case 12:
        return _bU_;
       case 13:
        return _bV_;
       case 14:
        return _bW_;
       case 15:
        return _bX_;
       case 16:
        return _bY_;
       case 17:
        return _bZ_;
       case 18:
        return _b0_;
       case 19:
        return _b1_;
       case 20:
        return _b2_;
       case 21:
        return _b3_;
       case 22:
        return _b4_;
       case 23:
        return _b5_;
       case 24:
        return _b6_;
       case 25:
        return _b7_;
       case 26:
        return _b8_;
       case 27:
        return _b9_;
       case 28:
        return _b__;
       case 29:
        return _b$_;
       case 30:
        return _ca_;
       case 31:
        return _cb_;
       default: return _cc_;
     }
    }
    if(2560 <= n){
     var _fC_ = write_black_code(n - 2560 | 0);
     return caml_call2(Pdfutil[21], _a6_, _fC_);
    }
    if(2496 <= n){
     var _fD_ = write_black_code(n - 2496 | 0);
     return caml_call2(Pdfutil[21], _a7_, _fD_);
    }
    if(2432 <= n){
     var _fE_ = write_black_code(n - 2432 | 0);
     return caml_call2(Pdfutil[21], _a8_, _fE_);
    }
    if(2368 <= n){
     var _fF_ = write_black_code(n - 2368 | 0);
     return caml_call2(Pdfutil[21], _a9_, _fF_);
    }
    if(2304 <= n){
     var _fG_ = write_black_code(n - 2304 | 0);
     return caml_call2(Pdfutil[21], _a__, _fG_);
    }
    if(2240 <= n){
     var _fH_ = write_black_code(n - 2240 | 0);
     return caml_call2(Pdfutil[21], _a$_, _fH_);
    }
    if(2176 <= n){
     var _fI_ = write_black_code(n - 2176 | 0);
     return caml_call2(Pdfutil[21], _ba_, _fI_);
    }
    if(2112 <= n){
     var _fJ_ = write_black_code(n - 2112 | 0);
     return caml_call2(Pdfutil[21], _bb_, _fJ_);
    }
    if(2048 <= n){
     var _fK_ = write_black_code(n - 2048 | 0);
     return caml_call2(Pdfutil[21], _bc_, _fK_);
    }
    if(1984 <= n){
     var _fL_ = write_black_code(n - 1984 | 0);
     return caml_call2(Pdfutil[21], _bd_, _fL_);
    }
    if(1920 <= n){
     var _fM_ = write_black_code(n - 1920 | 0);
     return caml_call2(Pdfutil[21], _be_, _fM_);
    }
    if(1856 <= n){
     var _fN_ = write_black_code(n - 1856 | 0);
     return caml_call2(Pdfutil[21], _bf_, _fN_);
    }
    if(1792 <= n){
     var _fO_ = write_black_code(n - 1792 | 0);
     return caml_call2(Pdfutil[21], _bg_, _fO_);
    }
    if(1728 <= n){
     var _fP_ = write_black_code(n - 1728 | 0);
     return caml_call2(Pdfutil[21], _bh_, _fP_);
    }
    if(1664 <= n){
     var _fQ_ = write_black_code(n - 1664 | 0);
     return caml_call2(Pdfutil[21], _bi_, _fQ_);
    }
    if(1600 <= n){
     var _fR_ = write_black_code(n - 1600 | 0);
     return caml_call2(Pdfutil[21], _bj_, _fR_);
    }
    if(1536 <= n){
     var _fS_ = write_black_code(n - 1536 | 0);
     return caml_call2(Pdfutil[21], _bk_, _fS_);
    }
    if(1472 <= n){
     var _fT_ = write_black_code(n - 1472 | 0);
     return caml_call2(Pdfutil[21], _bl_, _fT_);
    }
    if(1408 <= n){
     var _fU_ = write_black_code(n - 1408 | 0);
     return caml_call2(Pdfutil[21], _bm_, _fU_);
    }
    if(1344 <= n){
     var _fV_ = write_black_code(n - 1344 | 0);
     return caml_call2(Pdfutil[21], _bn_, _fV_);
    }
    if(1280 <= n){
     var _fW_ = write_black_code(n - 1280 | 0);
     return caml_call2(Pdfutil[21], _bo_, _fW_);
    }
    if(1216 <= n){
     var _fX_ = write_black_code(n - 1216 | 0);
     return caml_call2(Pdfutil[21], _bp_, _fX_);
    }
    if(1152 <= n){
     var _fY_ = write_black_code(n - 1152 | 0);
     return caml_call2(Pdfutil[21], _bq_, _fY_);
    }
    if(1088 <= n){
     var _fZ_ = write_black_code(n - 1088 | 0);
     return caml_call2(Pdfutil[21], _br_, _fZ_);
    }
    if(1024 <= n){
     var _f0_ = write_black_code(n - 1024 | 0);
     return caml_call2(Pdfutil[21], _bs_, _f0_);
    }
    if(960 <= n){
     var _f1_ = write_black_code(n - 960 | 0);
     return caml_call2(Pdfutil[21], _bt_, _f1_);
    }
    if(896 <= n){
     var _f2_ = write_black_code(n - 896 | 0);
     return caml_call2(Pdfutil[21], _bu_, _f2_);
    }
    if(832 <= n){
     var _f3_ = write_black_code(n - 832 | 0);
     return caml_call2(Pdfutil[21], _bv_, _f3_);
    }
    if(768 <= n){
     var _f4_ = write_black_code(n - 768 | 0);
     return caml_call2(Pdfutil[21], _bw_, _f4_);
    }
    if(704 <= n){
     var _f5_ = write_black_code(n - 704 | 0);
     return caml_call2(Pdfutil[21], _bx_, _f5_);
    }
    if(640 <= n){
     var _f6_ = write_black_code(n - 640 | 0);
     return caml_call2(Pdfutil[21], _by_, _f6_);
    }
    if(576 <= n){
     var _f7_ = write_black_code(n - 576 | 0);
     return caml_call2(Pdfutil[21], _bz_, _f7_);
    }
    if(512 <= n){
     var _f8_ = write_black_code(n - 512 | 0);
     return caml_call2(Pdfutil[21], _bA_, _f8_);
    }
    if(448 <= n){
     var _f9_ = write_black_code(n - 448 | 0);
     return caml_call2(Pdfutil[21], _bB_, _f9_);
    }
    if(384 <= n){
     var _f__ = write_black_code(n - 384 | 0);
     return caml_call2(Pdfutil[21], _bC_, _f__);
    }
    if(320 <= n){
     var _f$_ = write_black_code(n - 320 | 0);
     return caml_call2(Pdfutil[21], _bD_, _f$_);
    }
    if(256 <= n){
     var _ga_ = write_black_code(n - 256 | 0);
     return caml_call2(Pdfutil[21], _bE_, _ga_);
    }
    if(192 <= n){
     var _gb_ = write_black_code(n - 192 | 0);
     return caml_call2(Pdfutil[21], _bF_, _gb_);
    }
    if(128 <= n){
     var _gc_ = write_black_code(n - 128 | 0);
     return caml_call2(Pdfutil[21], _bG_, _gc_);
    }
    if(64 > n)
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_write_black_code_unknown], 1);
    var _gd_ = write_black_code(n - 64 | 0);
    return caml_call2(Pdfutil[21], _bH_, _gd_);
   }
   function read_white_code(i){
    var
     a = caml_call1(Pdfio[50], i),
     b = caml_call1(Pdfio[50], i),
     c = caml_call1(Pdfio[50], i),
     d = caml_call1(Pdfio[50], i);
    if(0 === a){
     if(1 === b && 1 === c && 1 === d) return 2;
    }
    else
     if(1 === a)
      if(0 === b){
       if(0 === c){
        if(0 === d) return 3;
       }
       else if(1 === c && 1 === d) return 4;
      }
      else
       if(1 === b)
        if(0 === c){
         if(0 === d) return 5;
        }
        else if(1 === c){if(0 === d) return 6; if(1 === d) return 7;}
    var e = caml_call1(Pdfio[50], i);
    if(0 === a){
     if(0 === b){
      if(1 === c && 1 === d && 1 === e) return 10;
     }
     else if(1 === b && 0 === c && 0 === d && 0 === e) return 11;
    }
    else
     if(1 === a)
      if(0 === b){
       if(0 === c){
        if(1 === d){
         if(0 === e) return 128 + read_white_code(i) | 0;
         if(1 === e) return 8;
        }
       }
       else if(1 === c && 0 === d && 0 === e) return 9;
      }
      else if(1 === b && 0 === c && 1 === d && 1 === e)
       return 64 + read_white_code(i) | 0;
    var f = caml_call1(Pdfio[50], i);
    if(0 === a){
     if(0 === b){
      if(0 === c){
       if(0 === d){
        if(1 === e && 1 === f) return 13;
       }
       else if(1 === d && 1 === e && 1 === f) return 1;
      }
      else if(1 === c && 0 === d && 0 === e && 0 === f) return 12;
     }
     else
      if(1 === b)
       if(0 === c){
        if(1 === d && 1 === e && 1 === f) return 192 + read_white_code(i) | 0;
       }
       else if(1 === c && 0 === d && 0 === e && 0 === f)
        return 1664 + read_white_code(i) | 0;
    }
    else
     if(1 === a)
      if(0 === b){
       if(1 === c && 0 === d && 1 === e){
        if(0 === f) return 16;
        if(1 === f) return 17;
       }
      }
      else if(1 === b && 0 === c && 1 === d && 0 === e){if(0 === f) return 14; if(1 === f) return 15;}
    var g = caml_call1(Pdfio[50], i);
    if(0 === a)
     if(0 === b){
      if(0 === c){
       if(0 === d){
        if(0 === e){
         if(1 === f && 1 === g) return 22;
        }
        else if(1 === e && 0 === f && 0 === g) return 23;
       }
       else
        if(1 === d)
         if(0 === e){
          if(0 === f && 0 === g) return 20;
         }
         else if(1 === e && 0 === f && 0 === g) return 19;
      }
      else
       if(1 === c)
        if(0 === d){
         if(0 === e){
          if(1 === f && 1 === g) return 26;
         }
         else if(1 === e && 1 === f && 1 === g) return 21;
        }
        else if(1 === d && 0 === e && 0 === f && 0 === g) return 28;
     }
     else
      if(1 === b)
       if(0 === c){
        if(0 === d){
         if(1 === e)
          if(0 === f){
           if(0 === g) return 27;
          }
          else if(1 === f && 1 === g) return 18;
        }
        else
         if(1 === d && 0 === e)
          if(0 === f){
           if(0 === g) return 24;
          }
          else if(1 === f && 1 === g) return 25;
       }
       else if(1 === c && 0 === d && 1 === e && 1 === f && 1 === g)
        return 256 + read_white_code(i) | 0;
    var h = caml_call1(Pdfio[50], i);
    if(0 === a)
     if(0 === b){
      if(0 === c){
       if(0 === d){
        if(0 === e){
         if(0 === f){
          if(1 === g){if(0 === h) return 29; if(1 === h) return 30;}
         }
         else if(1 === f && 0 === g){
          if(0 === h) return 45;
          if(1 === h) return 46;
         }
        }
        else if(1 === e && 0 === f && 1 === g){
         if(0 === h) return 47;
         if(1 === h) return 48;
        }
       }
       else
        if(1 === d)
         if(0 === e){
          if(0 === f){
           if(1 === g){if(0 === h) return 33; if(1 === h) return 34;}
          }
          else
           if(1 === f)
            if(0 === g){
             if(0 === h) return 35;
             if(1 === h) return 36;
            }
            else if(1 === g){if(0 === h) return 37; if(1 === h) return 38;}
         }
         else if(1 === e && 0 === f && 1 === g){
          if(0 === h) return 31;
          if(1 === h) return 32;
         }
      }
      else
       if(1 === c)
        if(0 === d){
         if(0 === e){
          if(1 === f && 0 === g){
           if(0 === h) return 53;
           if(1 === h) return 54;
          }
         }
         else
          if(1 === e)
           if(0 === f){
            if(0 === g){
             if(0 === h) return 39;
             if(1 === h) return 40;
            }
            else if(1 === g){if(0 === h) return 41; if(1 === h) return 42;}
           }
           else if(1 === f && 0 === g){
            if(0 === h) return 43;
            if(1 === h) return 44;
           }
        }
        else
         if(1 === d && 0 === e)
          if(0 === f){
           if(1 === g){if(0 === h) return 61; if(1 === h) return 62;}
          }
          else
           if(1 === f)
            if(0 === g){
             if(0 === h) return 63;
             if(1 === h) return 0;
            }
            else if(1 === g){
             if(0 === h) return 320 + read_white_code(i) | 0;
             if(1 === h) return 384 + read_white_code(i) | 0;
            }
     }
     else
      if(1 === b)
       if(0 === c){
        if(0 === d){
         if(1 === e && 0 === f && 1 === g){
          if(0 === h) return 59;
          if(1 === h) return 60;
         }
        }
        else
         if(1 === d)
          if(0 === e){
           if(0 === f){
            if(1 === g){if(0 === h) return 49; if(1 === h) return 50;}
           }
           else if(1 === f && 0 === g){
            if(0 === h) return 51;
            if(1 === h) return 52;
           }
          }
          else
           if(1 === e && 0 === f)
            if(0 === g){
             if(0 === h) return 55;
             if(1 === h) return 56;
            }
            else if(1 === g){if(0 === h) return 57; if(1 === h) return 58;}
       }
       else
        if(1 === c && 0 === d)
         if(0 === e){
          if(1 === f)
           if(0 === g){
            if(0 === h) return 448 + read_white_code(i) | 0;
            if(1 === h) return 512 + read_white_code(i) | 0;
           }
           else if(1 === g && 1 === h) return 640 + read_white_code(i) | 0;
         }
         else if(1 === e && 0 === f && 0 === g && 0 === h)
          return 576 + read_white_code(i) | 0;
    var j = caml_call1(Pdfio[50], i);
    if(0 === a && 1 === b)
     if(0 === c){
      if(0 === d && 1 === e && 1 === f && 0 === g)
       if(0 === h){
        if(0 === j) return 1472 + read_white_code(i) | 0;
        if(1 === j) return 1536 + read_white_code(i) | 0;
       }
       else if(1 === h){
        if(0 === j) return 1600 + read_white_code(i) | 0;
        if(1 === j) return 1728 + read_white_code(i) | 0;
       }
     }
     else
      if(1 === c && 0 === d)
       if(0 === e){
        if(1 === f && 1 === g && 0 === h){
         if(0 === j) return 704 + read_white_code(i) | 0;
         if(1 === j) return 768 + read_white_code(i) | 0;
        }
       }
       else
        if(1 === e)
         if(0 === f){
          if(0 === g){
           if(1 === h){
            if(0 === j) return 832 + read_white_code(i) | 0;
            if(1 === j) return 896 + read_white_code(i) | 0;
           }
          }
          else
           if(1 === g)
            if(0 === h){
             if(0 === j) return 960 + read_white_code(i) | 0;
             if(1 === j) return 1024 + read_white_code(i) | 0;
            }
            else if(1 === h){
             if(0 === j) return 1088 + read_white_code(i) | 0;
             if(1 === j) return 1152 + read_white_code(i) | 0;
            }
         }
         else
          if(1 === f && 0 === g)
           if(0 === h){
            if(0 === j) return 1216 + read_white_code(i) | 0;
            if(1 === j) return 1280 + read_white_code(i) | 0;
           }
           else if(1 === h){
            if(0 === j) return 1344 + read_white_code(i) | 0;
            if(1 === j) return 1408 + read_white_code(i) | 0;
           }
    var k = caml_call1(Pdfio[50], i), l = caml_call1(Pdfio[50], i);
    if
     (0 === a
      &&
       0 === b
       && 0 === c && 0 === d && 0 === e && 0 === f && 0 === g && 1 === h)
     if(0 === j){
      if(0 === k && 0 === l) return 1792 + read_white_code(i) | 0;
     }
     else if(1 === j && 0 === k){
      if(0 === l) return 1856 + read_white_code(i) | 0;
      if(1 === l) return 1920 + read_white_code(i) | 0;
     }
    var m = caml_call1(Pdfio[50], i);
    if
     (0 === a
      && 0 === b && 0 === c && 0 === d && 0 === e && 0 === f && 0 === g)
     if(0 === h){
      if(0 === j && 0 === k && 0 === l && 1 === m) return -1;
     }
     else
      if(1 === h)
       if(0 === j){
        if(0 === k){
         if(1 === l){
          if(0 === m) return 1984 + read_white_code(i) | 0;
          if(1 === m) return 2048 + read_white_code(i) | 0;
         }
        }
        else
         if(1 === k)
          if(0 === l){
           if(0 === m) return 2112 + read_white_code(i) | 0;
           if(1 === m) return 2176 + read_white_code(i) | 0;
          }
          else if(1 === l){
           if(0 === m) return 2240 + read_white_code(i) | 0;
           if(1 === m) return 2304 + read_white_code(i) | 0;
          }
       }
       else
        if(1 === j && 1 === k)
         if(0 === l){
          if(0 === m) return 2368 + read_white_code(i) | 0;
          if(1 === m) return 2432 + read_white_code(i) | 0;
         }
         else if(1 === l){
          if(0 === m) return 2496 + read_white_code(i) | 0;
          if(1 === m) return 2560 + read_white_code(i) | 0;
         }
    throw caml_maybe_attach_backtrace([0, Stdlib[7], cst_bad_white_code], 1);
   }
   function read_black_code(i){
    var a = caml_call1(Pdfio[50], i), b = caml_call1(Pdfio[50], i);
    if(1 === a){if(0 === b) return 3; if(1 === b) return 2;}
    var c = caml_call1(Pdfio[50], i);
    if(0 === a && 1 === b){if(0 === c) return 1; if(1 === c) return 4;}
    var d = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 1 === c){
     if(0 === d) return 6;
     if(1 === d) return 5;
    }
    var e = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 1 === d && 1 === e) return 7;
    var f = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 1 === d && 0 === e){if(0 === f) return 9; if(1 === f) return 8;}
    var g = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 0 === d && 1 === e)
     if(0 === f){
      if(0 === g) return 10;
      if(1 === g) return 11;
     }
     else if(1 === f && 1 === g) return 12;
    var h = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 0 === d && 0 === e && 1 === f)
     if(0 === g){
      if(0 === h) return 13;
     }
     else if(1 === g && 1 === h) return 14;
    var j = caml_call1(Pdfio[50], i);
    if
     (0 === a
      &&
       0 === b
       &&
        0 === c
        && 0 === d && 1 === e && 1 === f && 0 === g && 0 === h && 0 === j)
     return 15;
    var k = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 0 === d)
     if(0 === e){
      if(0 === f){
       if(1 === g)
        if(0 === h){
         if(0 === j && 0 === k) return 18;
        }
        else if(1 === h && 1 === j && 1 === k)
         return 64 + read_black_code(i) | 0;
      }
      else
       if(1 === f)
        if(0 === g){
         if(1 === h && 1 === j && 1 === k) return 16;
        }
        else if(1 === g && 0 === h && 0 === j && 0 === k) return 17;
     }
     else if(1 === e && 1 === f && 0 === g && 1 === h && 1 === j && 1 === k)
      return 0;
    var l = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 0 === d)
     if(0 === e){
      if(0 === f){
       if(0 === g){
        if(1 === h)
         if(0 === j){
          if(0 === k && 0 === l) return 1792 + read_black_code(i) | 0;
         }
         else if(1 === j && 0 === k){
          if(0 === l) return 1856 + read_black_code(i) | 0;
          if(1 === l) return 1920 + read_black_code(i) | 0;
         }
       }
       else
        if(1 === g)
         if(0 === h){
          if(1 === j && 1 === k && 1 === l) return 24;
         }
         else if(1 === h && 0 === j && 0 === k && 0 === l) return 25;
      }
      else
       if(1 === f)
        if(0 === g){
         if(1 === h && 0 === j && 0 === k && 0 === l) return 23;
        }
        else if(1 === g && 0 === h && 1 === j && 1 === k && 1 === l)
         return 22;
     }
     else
      if(1 === e && 1 === f && 0 === g)
       if(0 === h){
        if(1 === j && 1 === k && 1 === l) return 19;
       }
       else
        if(1 === h)
         if(0 === j){
          if(0 === k && 0 === l) return 20;
         }
         else if(1 === j && 0 === k && 0 === l) return 21;
    var m = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 0 === d)
     if(0 === e){
      if(0 === f){
       if(0 === g){
        if(0 === h){
         if(0 === j && 0 === k && 0 === l && 1 === m) return -1;
        }
        else
         if(1 === h)
          if(0 === j){
           if(0 === k){
            if(1 === l){
             if(0 === m) return 1984 + read_black_code(i) | 0;
             if(1 === m) return 2048 + read_black_code(i) | 0;
            }
           }
           else
            if(1 === k)
             if(0 === l){
              if(0 === m) return 2112 + read_black_code(i) | 0;
              if(1 === m) return 2176 + read_black_code(i) | 0;
             }
             else if(1 === l){
              if(0 === m) return 2240 + read_black_code(i) | 0;
              if(1 === m) return 2304 + read_black_code(i) | 0;
             }
          }
          else
           if(1 === j && 1 === k)
            if(0 === l){
             if(0 === m) return 2368 + read_black_code(i) | 0;
             if(1 === m) return 2432 + read_black_code(i) | 0;
            }
            else if(1 === l){
             if(0 === m) return 2496 + read_black_code(i) | 0;
             if(1 === m) return 2560 + read_black_code(i) | 0;
            }
       }
       else
        if(1 === g)
         if(0 === h){
          if(0 === j){
           if(1 === k)
            if(0 === l){
             if(0 === m) return 52;
            }
            else if(1 === l && 1 === m) return 55;
          }
          else
           if(1 === j)
            if(0 === k){
             if(0 === l){
              if(0 === m) return 56;
             }
             else if(1 === l && 1 === m) return 59;
            }
            else if(1 === k && 0 === l && 0 === m) return 60;
         }
         else
          if(1 === h)
           if(0 === j){
            if(0 === k){
             if(1 === l && 1 === m) return 320 + read_black_code(i) | 0;
            }
            else
             if(1 === k)
              if(0 === l){
               if(0 === m) return 384 + read_black_code(i) | 0;
               if(1 === m) return 448 + read_black_code(i) | 0;
              }
              else if(1 === l && 1 === m) return 53;
           }
           else if(1 === j && 0 === k && 0 === l && 0 === m) return 54;
      }
      else
       if(1 === f)
        if(0 === g){
         if(1 === h)
          if(0 === j){
           if(0 === k){
            if(1 === l){if(0 === m) return 50; if(1 === m) return 51;}
           }
           else
            if(1 === k)
             if(0 === l){
              if(0 === m) return 44;
              if(1 === m) return 45;
             }
             else if(1 === l){if(0 === m) return 46; if(1 === m) return 47;}
          }
          else
           if(1 === j && 0 === k)
            if(0 === l){
             if(0 === m) return 57;
             if(1 === m) return 58;
            }
            else if(1 === l){
             if(0 === m) return 61;
             if(1 === m) return 256 + read_black_code(i) | 0;
            }
        }
        else
         if(1 === g && 0 === h)
          if(0 === j){
           if(1 === k)
            if(0 === l){
             if(0 === m) return 48;
             if(1 === m) return 49;
            }
            else if(1 === l){if(0 === m) return 62; if(1 === m) return 63;}
          }
          else
           if(1 === j)
            if(0 === k){
             if(0 === l){
              if(0 === m) return 30;
              if(1 === m) return 31;
             }
             else if(1 === l){if(0 === m) return 32; if(1 === m) return 33;}
            }
            else if(1 === k && 0 === l){
             if(0 === m) return 40;
             if(1 === m) return 41;
            }
     }
     else
      if(1 === e && 1 === f && 0 === g)
       if(0 === h){
        if(1 === j)
         if(0 === k){
          if(0 === l){
           if(0 === m) return 128 + read_black_code(i) | 0;
           if(1 === m) return 192 + read_black_code(i) | 0;
          }
          else if(1 === l){if(0 === m) return 26; if(1 === m) return 27;}
         }
         else if(1 === k && 0 === l){
          if(0 === m) return 28;
          if(1 === m) return 29;
         }
       }
       else
        if(1 === h)
         if(0 === j){
          if(0 === k){
           if(1 === l){if(0 === m) return 34; if(1 === m) return 35;}
          }
          else
           if(1 === k)
            if(0 === l){
             if(0 === m) return 36;
             if(1 === m) return 37;
            }
            else if(1 === l){if(0 === m) return 38; if(1 === m) return 39;}
         }
         else if(1 === j && 0 === k && 1 === l){
          if(0 === m) return 42;
          if(1 === m) return 43;
         }
    var n = caml_call1(Pdfio[50], i);
    if
     (0 === a
      && 0 === b && 0 === c && 0 === d && 0 === e && 0 === f && 1 === g)
     if(0 === h){
      if(0 === j){
       if(1 === k)
        if(0 === l){
         if(1 === m){
          if(0 === n) return 640 + read_black_code(i) | 0;
          if(1 === n) return 704 + read_black_code(i) | 0;
         }
        }
        else if(1 === l && 0 === m){
         if(0 === n) return 768 + read_black_code(i) | 0;
         if(1 === n) return 832 + read_black_code(i) | 0;
        }
      }
      else
       if(1 === j)
        if(0 === k){
         if(0 === l){
          if(1 === m){
           if(0 === n) return 1280 + read_black_code(i) | 0;
           if(1 === n) return 1344 + read_black_code(i) | 0;
          }
         }
         else if(1 === l && 0 === m){
          if(0 === n) return 1408 + read_black_code(i) | 0;
          if(1 === n) return 1472 + read_black_code(i) | 0;
         }
        }
        else if(1 === k && 0 === l && 1 === m){
         if(0 === n) return 1536 + read_black_code(i) | 0;
         if(1 === n) return 1600 + read_black_code(i) | 0;
        }
     }
     else
      if(1 === h)
       if(0 === j){
        if(0 === k){
         if(1 === l && 0 === m){
          if(0 === n) return 1664 + read_black_code(i) | 0;
          if(1 === n) return 1728 + read_black_code(i) | 0;
         }
        }
        else if(1 === k && 1 === l && 0 === m){
         if(0 === n) return 512 + read_black_code(i) | 0;
         if(1 === n) return 576 + read_black_code(i) | 0;
        }
       }
       else
        if(1 === j && 0 === k)
         if(0 === l){
          if(1 === m){
           if(0 === n) return 896 + read_black_code(i) | 0;
           if(1 === n) return 960 + read_black_code(i) | 0;
          }
         }
         else
          if(1 === l)
           if(0 === m){
            if(0 === n) return 1024 + read_black_code(i) | 0;
            if(1 === n) return 1088 + read_black_code(i) | 0;
           }
           else if(1 === m){
            if(0 === n) return 1152 + read_black_code(i) | 0;
            if(1 === n) return 1216 + read_black_code(i) | 0;
           }
    throw caml_maybe_attach_backtrace([0, Stdlib[7], cst_bad_black_code], 1);
   }
   function read_mode(i){
    var a = caml_call1(Pdfio[50], i);
    if(1 === a) return _cJ_;
    var b = caml_call1(Pdfio[50], i), c = caml_call1(Pdfio[50], i);
    if(0 === a)
     if(0 === b){
      if(1 === c) return 1;
     }
     else if(1 === b){if(0 === c) return _cO_; if(1 === c) return _cP_;}
    var d = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 1 === d) return 0;
    var e = caml_call1(Pdfio[50], i), f = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 0 === d && 1 === e){if(0 === f) return _cK_; if(1 === f) return _cL_;}
    var g = caml_call1(Pdfio[50], i);
    if(0 === a && 0 === b && 0 === c && 0 === d && 0 === e && 1 === f){if(0 === g) return _cM_; if(1 === g) return _cN_;}
    var
     h = caml_call1(Pdfio[50], i),
     j = caml_call1(Pdfio[50], i),
     k = caml_call1(Pdfio[50], i),
     l = caml_call1(Pdfio[50], i),
     m = caml_call1(Pdfio[50], i);
    if
     (0 === a
      &&
       0 === b
       && 0 === c && 0 === d && 0 === e && 0 === f && 0 === g && 0 === h)
     if(0 === j){
      if(0 === k && 0 === l && 1 === m){
       var
        a$0 = caml_call1(Pdfio[50], i),
        b$0 = caml_call1(Pdfio[50], i),
        c$0 = caml_call1(Pdfio[50], i),
        d$0 = caml_call1(Pdfio[50], i),
        e$0 = caml_call1(Pdfio[50], i),
        f$0 = caml_call1(Pdfio[50], i),
        g$0 = caml_call1(Pdfio[50], i),
        h$0 = caml_call1(Pdfio[50], i),
        j$0 = caml_call1(Pdfio[50], i),
        k$0 = caml_call1(Pdfio[50], i),
        l$0 = caml_call1(Pdfio[50], i),
        m$0 = caml_call1(Pdfio[50], i);
       if
        (0 === a$0
         &&
          0 === b$0
          &&
           0 === c$0
           &&
            0 === d$0
            &&
             0 === e$0
             &&
              0 === f$0
              &&
               0 === g$0
               &&
                0 === h$0 && 0 === j$0 && 0 === k$0 && 0 === l$0 && 1 === m$0)
        return 3;
       throw caml_maybe_attach_backtrace
              ([0, Stdlib[7], cst_Not_a_valid_code_on_EOFB], 1);
      }
     }
     else if(1 === j && 1 === k && 1 === l && 1 === m) return 2;
    throw caml_maybe_attach_backtrace([0, Stdlib[7], cst_Not_a_valid_code], 1);
   }
   function decode_CCITTFax(k, eol, eba, c, r, eob, bone, dra, input){
    if(0 < k)
     throw caml_maybe_attach_backtrace
            ([0, DecodeNotSupported, cst_CCITTFax_k_0], 1);
    if(bone)
     var blackval = 1, whiteval = 0;
    else
     var blackval = 0, whiteval = 1;
    var
     output = caml_call1(Pdfio[54], 0),
     b = caml_call1(Pdfio[46], input),
     column = [0, 0],
     row = [0, 0],
     refline = [0, caml_array_make(c, whiteval)],
     line = caml_array_make(c, 0),
     white = [0, 1];
    function output_span(l, v){
     if(0 > l)
      throw caml_maybe_attach_backtrace
             ([0, Stdlib[7], cst_Bad_CCITT_stream], 1);
     var _fz_ = column[1], _fA_ = (column[1] + l | 0) - 1 | 0;
     if(_fA_ >= _fz_){
      var x = _fz_;
      for(;;){
       caml_check_bound(line, x)[1 + x] = v;
       var _fB_ = x + 1 | 0;
       if(_fA_ === x) break;
       x = _fB_;
      }
     }
     return caml_call2(Pdfutil[162], column, l);
    }
    try{
     for(;;)
      if(c <= column[1]){
       var _fi_ = caml_call1(Pdfio[55], output);
       caml_call2(Stdlib_Array[12], _fi_, line);
       caml_call1(Pdfio[57], output);
       refline[1] = line;
       column[1] = 0;
       caml_call1(Pdfutil[159], white);
       if(eba) caml_call1(Pdfio[51], b);
       row[1]++;
       var _fm_ = r <= row[1] ? 1 : 0, _fn_ = _fm_ ? 0 < r ? 1 : 0 : _fm_;
       if(_fn_) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
      }
      else if(0 <= k){
       if(0 !== k)
        throw caml_maybe_attach_backtrace
               ([0, DecodeNotSupported, cst_CCITT_k], 1);
       var
        read_white_code$0 = white[1] ? read_white_code : read_black_code,
        l = read_white_code$0(b);
       if(-1 === l){
        if(0 < column[1]) output_span(c - column[1] | 0, whiteval);
       }
       else{
        var whiteval$0 = white[1] ? whiteval : blackval;
        output_span(l, whiteval$0);
        caml_call1(Pdfutil[161], white);
       }
      }
      else{
       var match = read_mode(b);
       if(typeof match === "number")
        switch(match){
          case 0:
           var
            whiteval$1 = white[1] ? whiteval : blackval,
            pos$0 = [0, column[1]],
            _fo_ = column[1];
           if(white[1])
            var opp$0 = blackval, curr$0 = whiteval;
           else
            var opp$0 = whiteval, curr$0 = blackval;
           let pos = pos$0;
           var
            find$0 =
              function(v){
               for(;;){
                var r = refline[1];
                a:
                {
                 if(0 <= pos[1] && pos[1] < r.length - 1){
                  var
                   _fu_ = pos[1],
                   _fv_ = caml_check_bound(r, _fu_)[1 + _fu_] !== v ? 1 : 0;
                  break a;
                 }
                 var _fv_ = 0;
                }
                if(! _fv_) return pos[1];
                pos[1]++;
               }
              };
           try{
            a:
            {if(0 === column[1] && white[1]) break a; find$0(curr$0);}
            find$0(opp$0);
            var _fk_ = find$0(curr$0), _fp_ = _fk_;
           }
           catch(_ft_){var _fp_ = c;}
           output_span(_fp_ - _fo_ | 0, whiteval$1);
           break;
          case 1:
           if(white[1]){
            output_span(read_white_code(b), whiteval);
            output_span(read_black_code(b), blackval);
           }
           else{
            output_span(read_black_code(b), blackval);
            output_span(read_white_code(b), whiteval);
           }
           break;
          case 2:
           throw caml_maybe_attach_backtrace
                  ([0, DecodeNotSupported, cst_CCITT_Uncompressed], 1);
          default: throw caml_maybe_attach_backtrace(Stdlib[12], 1);
        }
       else{
        var
         n = match[1],
         whiteval$2 = white[1] ? whiteval : blackval,
         pos = [0, column[1]],
         _fq_ = column[1];
        if(white[1])
         var opp = blackval, curr = whiteval;
        else
         var opp = whiteval, curr = blackval;
        let pos$0 = pos;
        var
         find =
           function(v){
            for(;;){
             var r = refline[1];
             a:
             {
              if(0 <= pos$0[1] && pos$0[1] < r.length - 1){
               var
                _fx_ = pos$0[1],
                _fy_ = caml_check_bound(r, _fx_)[1 + _fx_] !== v ? 1 : 0;
               break a;
              }
              var _fy_ = 0;
             }
             if(! _fy_) return pos$0[1];
             pos$0[1]++;
            }
           };
        try{
         a:
         {if(0 === column[1] && white[1]) break a; find(curr);}
         var _fj_ = find(opp), _fr_ = _fj_;
        }
        catch(_fw_){var _fr_ = c;}
        output_span((_fr_ - _fq_ | 0) - n | 0, whiteval$2);
        caml_call1(Pdfutil[161], white);
       }
      }
    }
    catch(_fs_){
     var _fl_ = caml_wrap_exception(_fs_);
     if(_fl_ === Stdlib[12]) return caml_call1(Pdfio[59], output);
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[7], cst_Bad_CCITT_Stream], 1);
    }
   }
   function encode_ccitt(columns, stream){
    var
     _e7_ = caml_call2(Pdfio[3], 0, stream),
     i = caml_call1(Pdfio[46], _e7_),
     o = caml_call1(Pdfio[54], 0);
    try{
     var cols_left = [0, columns];
     for(;;){
      var
       maxcols = cols_left[1],
       nbits = [0, 1],
       iswhite = caml_call1(Pdfio[49], i),
       fin = [0, 0];
      for(;;){
       if(nbits[1] >= maxcols) break;
       if(fin[1]) break;
       var _e6_ = caml_call1(Pdfio[47], i), newbit = caml_call1(Pdfio[49], i);
       if(newbit === iswhite)
        caml_call2(Pdfutil[162], nbits, 1);
       else{caml_call2(Pdfio[48], i, _e6_); caml_call1(Pdfutil[159], fin);}
      }
      var
       length = nbits[1],
       _fb_ = iswhite ? write_white_code : write_black_code,
       bits = _fb_(length),
       _fc_ = caml_call1(Pdfio[55], o);
      caml_call2(Pdfutil[17], _fc_, bits);
      var
       _fd_ = 1 - iswhite,
       _fe_ = _fd_ ? cols_left[1] === columns ? 1 : 0 : _fd_;
      if(_fe_){
       var _ff_ = write_black_code(0), _fg_ = caml_call1(Pdfio[55], o);
       caml_call2(Pdfutil[17], _fg_, _ff_);
      }
      caml_call2(Pdfutil[163], cols_left, length);
      if(0 === cols_left[1]) cols_left[1] = columns;
     }
    }
    catch(_fh_){
     var _e8_ = caml_wrap_exception(_fh_);
     if(_e8_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_e8_, 0);
     var _e9_ = write_white_code(-1), _e__ = caml_call1(Pdfio[55], o);
     caml_call2(Pdfutil[17], _e__, _e9_);
     var _e$_ = write_white_code(-1), _fa_ = caml_call1(Pdfio[55], o);
     caml_call2(Pdfutil[17], _fa_, _e$_);
     caml_call1(Pdfio[57], o);
     return caml_call1(Pdfio[59], o);
    }
   }
   function encode_ccittg4(columns, stream){return stream;}
   function get0(a, i){return 0 <= i ? caml_check_bound(a, i)[1 + i] : 0;}
   function decode_predictor(pred, colors, bpc, columns, stream){
    if(2 === pred){
     var switcher = bpc - 1 | 0;
     if(15 >= switcher >>> 0)
      switch(switcher){
        case 0:
         throw caml_maybe_attach_backtrace
                ([0, DecodeNotSupported, cst_TIFF_Predictor_for_1bpc_no], 1);
        case 1:
         throw caml_maybe_attach_backtrace
                ([0, DecodeNotSupported, cst_TIFF_Predictor_for_2bpc_no], 1);
        case 3:
         throw caml_maybe_attach_backtrace
                ([0, DecodeNotSupported, cst_TIFF_Predictor_for_4bpc_no], 1);
        case 7:
         var
          scanline_width =
            (caml_mul(caml_mul(colors, bpc), columns) + 7 | 0) / 8 | 0,
          _eE_ =
            caml_div(caml_call1(Pdfio[18], stream), scanline_width) - 1 | 0,
          _eD_ = 0;
         if(_eE_ >= 0){
          var line = _eD_;
          for(;;){
           var linestart = caml_mul(line, scanline_width), p = [0, colors];
           for(;;){
            if(p[1] >= scanline_width) break;
            var
             _eF_ = caml_call2(Pdfio[21], stream, linestart + p[1] | 0),
             _eG_ =
               (caml_call2
                (Pdfio[21], stream, (linestart + p[1] | 0) - colors | 0)
               + _eF_
               | 0)
               % 256
               | 0;
            caml_call3(Pdfio[24], stream, linestart + p[1] | 0, _eG_);
            p[1] = p[1] + 1 | 0;
           }
           var _eH_ = line + 1 | 0;
           if(_eE_ === line) break;
           line = _eH_;
          }
         }
         return stream;
        case 15:
         throw caml_maybe_attach_backtrace
                ([0, DecodeNotSupported, cst_TIFF_Predictor_for_16bpc_n], 1);
      }
     throw caml_maybe_attach_backtrace
            ([0, DecodeNotSupported, cst_Tiff_predictor_for_unknown], 1);
    }
    var
     i = caml_call2(Pdfio[3], 0, stream),
     scanline_width$0 =
       (caml_mul(caml_mul(colors, bpc), columns) + 7 | 0) / 8 | 0;
    function blank(param){return [0, caml_array_make(scanline_width$0, 0)];}
    var
     prior_decoded = blank(0),
     curr$0 = blank(0),
     prev = blank(0),
     outputlines = [0, 0],
     finished = [0, 0],
     pred$0 = [0, 0],
     got_predictor = [0, 0];
    for(;;){
     if(finished[1]){
      var _e2_ = caml_call1(Pdfutil[16], outputlines[1]);
      return caml_call1(Pdfio[34], _e2_);
     }
     caml_call1(Pdfutil[160], got_predictor);
     var x$3 = caml_call1(i[4], 0);
     if(x$3 === Pdfio[1])
      caml_call1(Pdfutil[159], finished);
     else
      pred$0[1] = x$3;
     if(! finished[1]){
      caml_call1(Pdfutil[159], got_predictor);
      prev[1] = curr$0[1];
      var _e4_ = scanline_width$0 - 1 | 0, _e3_ = 0;
      if(_e4_ >= 0){
       var x$4 = _e3_;
       for(;;){
        var x$5 = caml_call1(i[4], 0);
        if(x$5 === Pdfio[1])
         caml_call1(Pdfutil[159], finished);
        else
         caml_check_bound(curr$0[1], x$4)[1 + x$4] = x$5;
        var _e5_ = x$4 + 1 | 0;
        if(_e4_ === x$4) break;
        x$4 = _e5_;
       }
      }
     }
     if(got_predictor[1]){
      var
       cols = (caml_mul(bpc, colors) + 7 | 0) / 8 | 0,
       pred$1 = pred$0[1],
       current = curr$0[1],
       prior_decoded$0 = prior_decoded[1],
       output = caml_call1(Stdlib_Array[7], current);
      if(4 < pred$1 >>> 0)
       throw caml_maybe_attach_backtrace
              ([0, DecodeNotSupported, cst_unknown_PNG_predictor], 1);
      switch(pred$1){
        case 0: break;
        case 1:
         var _eJ_ = output.length - 2 | 0, _eI_ = 0;
         if(_eJ_ >= 0){
          var x = _eI_;
          for(;;){
           var
            _eK_ = get0(output, x - cols | 0),
            _eL_ = (get0(current, x) + _eK_ | 0) % 256 | 0;
           caml_check_bound(output, x)[1 + x] = _eL_;
           var _eM_ = x + 1 | 0;
           if(_eJ_ === x) break;
           x = _eM_;
          }
         }
         break;
        case 2:
         var _eO_ = output.length - 2 | 0, _eN_ = 0;
         if(_eO_ >= 0){
          var x$0 = _eN_;
          for(;;){
           var
            _eP_ = get0(prior_decoded$0, x$0),
            _eQ_ = (get0(current, x$0) + _eP_ | 0) % 256 | 0;
           caml_check_bound(output, x$0)[1 + x$0] = _eQ_;
           var _eR_ = x$0 + 1 | 0;
           if(_eO_ === x$0) break;
           x$0 = _eR_;
          }
         }
         break;
        case 3:
         var _eT_ = output.length - 2 | 0, _eS_ = 0;
         if(_eT_ >= 0){
          var x$1 = _eS_;
          for(;;){
           var
            _eU_ = get0(prior_decoded$0, x$1),
            _eV_ = (get0(output, x$1 - cols | 0) + _eU_ | 0) / 2 | 0,
            _eW_ = (get0(current, x$1) + _eV_ | 0) % 256 | 0;
           caml_check_bound(output, x$1)[1 + x$1] = _eW_;
           var _eX_ = x$1 + 1 | 0;
           if(_eT_ === x$1) break;
           x$1 = _eX_;
          }
         }
         break;
        default:
         var _eZ_ = output.length - 2 | 0, _eY_ = 0;
         if(_eZ_ >= 0){
          var x$2 = _eY_;
          for(;;){
           var
            curr = get0(current, x$2),
            currback = get0(output, x$2 - cols | 0),
            decoded = get0(prior_decoded$0, x$2),
            decodedback = get0(prior_decoded$0, x$2 - cols | 0),
            p$0 = (currback + decoded | 0) - decodedback | 0,
            pa = caml_call1(Stdlib[18], p$0 - currback | 0),
            pb = caml_call1(Stdlib[18], p$0 - decoded | 0),
            pc = caml_call1(Stdlib[18], p$0 - decodedback | 0);
           a:
           {
            if(pa <= pb && pa <= pc){var _e0_ = currback; break a;}
            var _e0_ = pb <= pc ? decoded : decodedback;
           }
           caml_check_bound(output, x$2)[1 + x$2] = (curr + _e0_ | 0) % 256 | 0;
           var _e1_ = x$2 + 1 | 0;
           if(_eZ_ === x$2) break;
           x$2 = _e1_;
          }
         }
      }
      prior_decoded[1] = output;
      caml_call2(Pdfutil[170], outputlines, prior_decoded[1]);
     }
    }
   }
   function encode_predictor(pred, colors, bpc, columns, stream){
    function get0(a, i){return 0 <= i ? caml_call2(Pdfio[21], a, i) : 0;}
    if(11 === pred){
     var
      match = caml_call1(Pdfio[6], 4096),
      bytes = match[2],
      o = match[1],
      _em_ = caml_div(caml_call1(Pdfio[18], stream), columns * 3 | 0) - 1 | 0,
      _el_ = 0;
     if(_em_ >= 0){
      var scanline = _el_;
      for(;;){
       caml_call1(o[4], 1);
       var _eo_ = (columns * 3 | 0) - 1 | 0, _en_ = 0;
       if(_eo_ >= 0){
        var byte$0 = _en_;
        for(;;){
         var
          _eq_ =
            3 <= byte$0
             ? get0
               (stream, (caml_mul(scanline, columns) + byte$0 | 0) - 3 | 0)
             : 0,
          _er_ =
            get0(stream, caml_mul(scanline, columns) + byte$0 | 0)
            - (_eq_ % 256 | 0)
            | 0;
         caml_call1(o[4], _er_);
         var _es_ = byte$0 + 1 | 0;
         if(_eo_ === byte$0) break;
         byte$0 = _es_;
        }
       }
       var _ep_ = scanline + 1 | 0;
       if(_em_ === scanline) break;
       scanline = _ep_;
      }
     }
     return caml_call2(Pdfio[7], o, bytes);
    }
    if(12 !== pred){
     var
      _eB_ = caml_call1(Stdlib[33], pred),
      _eC_ = caml_call2(Stdlib[28], cst_encode_predictor_not_suppo, _eB_);
     throw caml_maybe_attach_backtrace([0, Pdf[4], _eC_], 1);
    }
    var
     match$0 = caml_call1(Pdfio[6], 4096),
     bytes$0 = match$0[2],
     o$0 = match$0[1],
     _eu_ = caml_div(caml_call1(Pdfio[18], stream), columns) - 1 | 0,
     _et_ = 0;
    if(_eu_ >= 0){
     var scanline$0 = _et_;
     for(;;){
      caml_call1(o$0[4], 2);
      var _ew_ = columns - 1 | 0, _ev_ = 0;
      if(_ew_ >= 0){
       var byte$1 = _ev_;
       for(;;){
        var
         _ey_ =
           get0(stream, caml_mul(scanline$0 - 1 | 0, columns) + byte$1 | 0),
         _ez_ =
           (get0(stream, caml_mul(scanline$0, columns) + byte$1 | 0) - _ey_
           | 0)
           % 256
           | 0;
        caml_call1(o$0[4], _ez_);
        var _eA_ = byte$1 + 1 | 0;
        if(_ew_ === byte$1) break;
        byte$1 = _eA_;
       }
      }
      var _ex_ = scanline$0 + 1 | 0;
      if(_eu_ === scanline$0) break;
      scanline$0 = _ex_;
     }
    }
    return caml_call2(Pdfio[7], o$0, bytes$0);
   }
   function encode_runlength(stream){
    var i = caml_call2(Pdfio[3], 0, stream), data_in = [0, 0];
    try{
     for(;;){
      var x$1 = caml_call1(i[4], 0);
      if(x$1 === Pdfio[1]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
      caml_call2(Pdfutil[170], data_in, x$1);
     }
    }
    catch(_ei_){
     var _ec_ = caml_wrap_exception(_ei_);
     if(_ec_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_ec_, 0);
     data_in[1] = caml_call1(Pdfutil[16], data_in[1]);
     var prev = 0, param = data_in[1];
     for(;;){
      if(! param) break;
      var
       t = param[2],
       h = param[1],
       _ed_ = caml_call1(Pdfutil[228], h),
       match = caml_call2(Pdfutil[63], _ed_, [0, h, t]),
       rest = match[2],
       same = match[1],
       _ee_ = caml_call1(Pdfutil[14], same),
       prev$0 = [0, [0, caml_call1(Pdfutil[35], same), _ee_], prev];
      prev = prev$0;
      param = rest;
     }
     var
      runs = [0, caml_call1(Pdfutil[16], prev)],
      outbytes = [0, 0],
      chunksize = [0, 0],
      chunkdata = [0, 0],
      writechunk =
        function(param){
         if(0 < chunksize[1]){
          caml_call2(Pdfutil[170], outbytes, chunksize[1] - 1 | 0);
          var
           _ej_ = caml_call1(Pdfutil[16], chunkdata[1]),
           _ek_ = caml_call1(Pdfutil[170], outbytes);
          caml_call2(Pdfutil[17], _ek_, _ej_);
          chunkdata[1] = 0;
          chunksize[1] = 0;
         }
        };
     for(;;){
      if(0 === runs[1]){
       writechunk(0);
       caml_call2(Pdfutil[170], outbytes, 128);
       var _ef_ = caml_call1(Pdfutil[16], outbytes[1]);
       return caml_call1(Pdfio[32], _ef_);
      }
      var
       match$0 = caml_call1(Pdfutil[14], runs[1]),
       l = match$0[1],
       x = match$0[2];
      if(1 > l)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _cQ_], 1);
      if(3 <= l){
       var x$0 = match$0[2];
       writechunk(0);
       var l$0 = [0, l];
       for(;;){
        if(0 >= l$0[1]) break;
        var _eg_ = 257 - caml_call2(Pdfutil[190], l$0[1], 128) | 0;
        caml_call2(Pdfutil[170], outbytes, _eg_);
        caml_call2(Pdfutil[170], outbytes, x$0);
        caml_call2(Pdfutil[163], l$0, 128);
       }
      }
      else{
       if(128 < (l + chunksize[1] | 0)) writechunk(0);
       var _eh_ = caml_call2(Pdfutil[88], x, l);
       caml_call2(Pdfutil[171], chunkdata, _eh_);
       caml_call2(Pdfutil[162], chunksize, l);
      }
      runs[1] = caml_call1(Pdfutil[15], runs[1]);
     }
    }
   }
   function decoder(pdf, dict, source, name){
    if(0 === source[0])
     var s = source[1], i$0 = caml_call2(Pdfio[3], 0, s);
    else
     var i = source[1], i$0 = i;
    var switch$0 = runtime.caml_string_compare(name, "/Crypt");
    a:
    {
     if(0 <= switch$0){
      if(0 >= switch$0) return caml_call3(Pdfio[28], i$0, 0, i$0[5]);
      if(name !== "/Fl" && name !== cst_FlateDecode$0){
       if(name !== "/LZW" && name !== "/LZWDecode"){
        if(name !== "/RL" && name !== cst_RunLengthDecode$0) break a;
        var
         match$0 = caml_call1(Pdfio[6], 4096),
         data$0 = match$0[2],
         o$2 = match$0[1],
         eod = [0, 0];
        try{
         for(;;){
          if(eod[1]) break;
          var x = caml_call1(i$0[4], 0);
          if(x === Pdfio[1]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
          if(128 <= x)
           if(128 < x){
            var towrite = caml_call1(i$0[4], 0);
            if(towrite === Pdfio[1])
             throw caml_maybe_attach_backtrace(Stdlib[12], 1);
            var _dW_ = 257 - x | 0, _dV_ = 1;
            if(_dW_ >= 1){
             var x$0 = _dV_;
             for(;;){
              caml_call1(o$2[4], towrite);
              var _dX_ = x$0 + 1 | 0;
              if(_dW_ === x$0) break;
              x$0 = _dX_;
             }
            }
           }
           else
            caml_call1(Pdfutil[159], eod);
          else{
           var _dZ_ = x + 1 | 0, _dY_ = 1;
           if(_dZ_ >= 1){
            var x$1 = _dY_;
            for(;;){
             var x$2 = caml_call1(i$0[4], 0);
             if(x$2 === Pdfio[1])
              throw caml_maybe_attach_backtrace(Stdlib[12], 1);
             caml_call1(o$2[4], x$2);
             var _d0_ = x$1 + 1 | 0;
             if(_dZ_ === x$1) break;
             x$1 = _d0_;
            }
           }
          }
         }
        }
        catch(_eb_){
         var _dU_ = caml_wrap_exception(_eb_);
         if(_dU_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_dU_, 0);
         caml_call1(Pdfe[3], cst_Warning_Missing_EOD_marker);
        }
        return caml_call2(Pdfio[7], o$2, data$0);
       }
       var match$1 = caml_call4(Pdf[16], pdf, cst_DecodeParms, cst_DP, dict);
       b:
       {
        c:
        if(match$1){
         var _d1_ = match$1[1];
         d:
         if(typeof _d1_ !== "number"){
          switch(_d1_[0]){
            case 5:
             var _d2_ = _d1_[1];
             if(! _d2_) break c;
             var _d3_ = _d2_[1];
             if(typeof _d3_ === "number"){var early = 1; break b;}
             if(6 !== _d3_[0]) break c;
             var d = _d3_;
             break;
            case 6:
             var d = _d1_; break;
            default: break d;
          }
          var match$2 = caml_call3(Pdf[11], pdf, cst_EarlyChange, d);
          e:
          {
           if(match$2){
            var match$3 = match$2[1];
            if(typeof match$3 !== "number" && 1 === match$3[0]){var n = match$3[1], n$0 = n; break e;}
            throw caml_maybe_attach_backtrace
                   ([0, Pdf[4], cst_malformed_EarlyChange], 1);
           }
           var n$0 = 1;
          }
          var early = n$0;
          break b;
         }
        }
        var early = 1;
       }
       var
        prefix_code = caml_array_make(8192, 0),
        append_character = caml_array_make(8192, 0),
        bit_count = [0, 0],
        bit_buffer = [0, 0],
        endflush = [0, 4],
        code_length = [0, 9],
        next_code = [0, 258],
        new_code = [0, 0],
        old_code = [0, 256],
        character = [0, 0],
        decode_string =
          function(code, str){
           var code$0 = code, str$0 = str;
           for(;;){
            if(255 >= code$0) return [0, code$0, str$0];
            var
             str$1 =
               [0,
                caml_check_bound(append_character, code$0)[1 + code$0],
                str$0],
             code$1 = caml_check_bound(prefix_code, code$0)[1 + code$0];
            code$0 = code$1;
            str$0 = str$1;
           }
          },
        input_code =
          function(stream){
           for(;;){
            if(24 < bit_count[1]){
             var
              result =
                caml_call2
                 (Pdfutil[123], bit_buffer[1], 32 - code_length[1] | 0);
             bit_buffer[1] =
              caml_call2(Pdfutil[124], bit_buffer[1], code_length[1]);
             caml_call2(Pdfutil[163], bit_count, code_length[1]);
             return result;
            }
            var b = caml_call1(stream[4], 0);
            if(b === Pdfio[1]){
             if(0 === endflush[1])
              throw caml_maybe_attach_backtrace(Stdlib[12], 1);
             endflush[1]--;
             var streambyte = 0;
            }
            else
             var streambyte = b;
            var
             _d__ = 24 - bit_count[1] | 0,
             _d$_ = caml_call1(Pdfutil[115], streambyte),
             _ea_ = caml_call2(Pdfutil[124], _d$_, _d__);
            bit_buffer[1] = caml_call2(Pdfutil[125], bit_buffer[1], _ea_);
            caml_call2(Pdfutil[162], bit_count, 8);
           }
          },
        strip_cleartable_codes =
          function(stream){
           for(;;){
            if(256 !== old_code[1]) return;
            old_code[1] = input_code(stream);
           }
          },
        reset_table =
          function(param){
           next_code[1] = 258;
           code_length[1] = 9;
           old_code[1] = 256;
          };
       bit_count[1] = 0;
       bit_buffer[1] = 0;
       endflush[1] = 4;
       reset_table(0);
       var
        match = caml_call1(Pdfio[6], 16034),
        data = match[2],
        outstream = match[1],
        finished = [0, 0];
       strip_cleartable_codes(i$0);
       if(257 === old_code[1]) return caml_call1(Pdfio[17], 0);
       character[1] = old_code[1];
       caml_call1(outstream[4], old_code[1]);
       for(;;){
        if(finished[1]) return caml_call2(Pdfio[7], outstream, data);
        new_code[1] = input_code(i$0);
        var _dM_ = new_code[1];
        if(256 === _dM_){
         reset_table(0);
         caml_call2(Pdfutil[216], prefix_code, 0);
         caml_call2(Pdfutil[216], append_character, 0);
         strip_cleartable_codes(i$0);
         character[1] = old_code[1];
         caml_call1(outstream[4], old_code[1]);
        }
        else if(257 === _dM_)
         caml_call1(Pdfutil[159], finished);
        else{
         if(next_code[1] <= new_code[1])
          var
           _dN_ = [0, character[1], 0],
           _dO_ = decode_string(old_code[1], 0),
           chars = caml_call2(Pdfutil[21], _dO_, _dN_);
         else
          var chars = decode_string(new_code[1], 0);
         character[1] = caml_call1(Pdfutil[14], chars);
         caml_call2(Pdfutil[17], outstream[4], chars);
         var _dQ_ = next_code[1], _dP_ = old_code[1];
         caml_check_bound(prefix_code, _dQ_)[1 + _dQ_] = _dP_;
         var _dS_ = next_code[1], _dR_ = character[1];
         caml_check_bound(append_character, _dS_)[1 + _dS_] = _dR_;
         next_code[1]++;
         old_code[1] = new_code[1];
         var _dT_ = (next_code[1] + early | 0) - 512 | 0;
         b:
         {
          c:
          {
           if(512 < _dT_ >>> 0){
            if(1536 === _dT_) break c;
           }
           else if(510 < _dT_ - 1 >>> 0) break c;
           break b;
          }
          code_length[1]++;
         }
        }
       }
      }
      if(0 === source[0]){var s$0 = source[1]; return decode_flate(s$0);}
      var
       i$1 = source[1],
       strings = [0, 0],
       input =
         function(buf){
          var s = caml_ml_bytes_length(buf);
          if(0 >= s) return 0;
          var x = caml_call1(i$1[4], 0);
          if(x === Pdfio[1]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
          caml_bytes_unsafe_set(buf, 0, caml_call1(Stdlib[29], x));
          return 1;
         },
       output$0 =
         function(buf, length){
          var _d8_ = 0 < length ? 1 : 0;
          if(! _d8_) return _d8_;
          var _d9_ = caml_call3(Stdlib_Bytes[8], buf, 0, length);
          return caml_call2(Pdfutil[170], strings, _d9_);
         };
      caml_call3(Pdfflate[3], 0, input, output$0);
      return bytes_of_strings_rev(strings[1]);
     }
     b:
     if(name !== "/A85"){
      if(name !== "/AHx"){
       if(name === cst_ASCII85Decode$0) break b;
       if(name !== cst_ASCIIHexDecode$0){
        if(name !== "/CCF" && name !== "/CCITTFaxDecode") break a;
        var
         match$4 = caml_call4(Pdf[16], pdf, cst_DecodeParms$0, cst_DP$0, dict);
        if(! match$4) return decode_CCITTFax(0, 0, 0, 1728, 0, 1, 0, 0, i$0);
        var _d4_ = match$4[1];
        c:
        d:
        if(typeof _d4_ !== "number"){
         switch(_d4_[0]){
           case 5:
            var _d5_ = _d4_[1];
            if(! _d5_) break c;
            var dparms = _d5_[1];
            break;
           case 6:
            var dparms = _d4_; break;
           default: break d;
         }
         var
          dparms$0 = caml_call2(Pdf[20], pdf, dparms),
          match$5 = caml_call3(Pdf[11], pdf, cst_K, dparms$0);
         e:
         {
          if(match$5){
           var match$6 = match$5[1];
           if(typeof match$6 !== "number" && 1 === match$6[0]){var i$5 = match$6[1], k = i$5; break e;}
          }
          var k = 0;
         }
         var match$7 = caml_call3(Pdf[11], pdf, cst_EndOfLine, dparms$0);
         e:
         {
          if(match$7){
           var match$8 = match$7[1];
           if(typeof match$8 !== "number" && 0 === match$8[0]){var b$4 = match$8[1], eol = b$4; break e;}
          }
          var eol = 0;
         }
         var
          match$9 = caml_call3(Pdf[11], pdf, cst_EncodedByteAlign, dparms$0);
         e:
         {
          if(match$9){
           var match$10 = match$9[1];
           if(typeof match$10 !== "number" && 0 === match$10[0]){var b$3 = match$10[1], eba = b$3; break e;}
          }
          var eba = 0;
         }
         var match$11 = caml_call3(Pdf[11], pdf, cst_Columns, dparms$0);
         e:
         {
          if(match$11){
           var match$12 = match$11[1];
           if(typeof match$12 !== "number" && 1 === match$12[0]){var i$4 = match$12[1], c$0 = i$4; break e;}
          }
          var c$0 = 1728;
         }
         var match$13 = caml_call3(Pdf[11], pdf, cst_Rows, dparms$0);
         e:
         {
          if(match$13){
           var match$14 = match$13[1];
           if(typeof match$14 !== "number" && 1 === match$14[0]){var i$3 = match$14[1], r = i$3; break e;}
          }
          var r = 0;
         }
         var match$15 = caml_call3(Pdf[11], pdf, cst_EndOfBlock, dparms$0);
         e:
         {
          if(match$15){
           var match$16 = match$15[1];
           if(typeof match$16 !== "number" && 0 === match$16[0]){var b$2 = match$16[1], eob = b$2; break e;}
          }
          var eob = 1;
         }
         var match$17 = caml_call3(Pdf[11], pdf, cst_BlackIs1, dparms$0);
         e:
         {
          if(match$17){
           var match$18 = match$17[1];
           if(typeof match$18 !== "number" && 0 === match$18[0]){var b$1 = match$18[1], bone = b$1; break e;}
          }
          var bone = 0;
         }
         var
          match$19 =
            caml_call3(Pdf[11], pdf, cst_DamagedRowsBeforeError, dparms$0);
         e:
         {
          if(match$19){
           var match$20 = match$19[1];
           if(typeof match$20 !== "number" && 1 === match$20[0]){var i$2 = match$20[1], dra = i$2; break e;}
          }
          var dra = 0;
         }
         return decode_CCITTFax(k, eol, eba, c$0, r, eob, bone, dra, i$0);
        }
        throw caml_maybe_attach_backtrace([0, Pdf[4], cst_bad_Decodeparms], 1);
       }
      }
      var output = [0, 0], enddata = [0, 0];
      try{
       for(;;){
        if(enddata[1]){
         var
          _dF_ = caml_call1(Pdfutil[16], output[1]),
          _dG_ = caml_call1(Pdfio[33], _dF_);
         return _dG_;
        }
        var b = get_streamchar(i$0), b$0 = get_streamchar(i$0);
        c:
        {
         if(62 !== b){
          d:
          if(62 === b$0){
           e:
           {
            if(48 <= b && 57 >= b) break e;
            if(97 <= b && 102 >= b) break e;
            if(65 <= b && 70 >= b) break e;
            break d;
           }
           var _dI_ = char_of_hex(b, 48);
           caml_call2(Pdfutil[170], output, _dI_);
           caml_call1(Pdfutil[159], enddata);
           break c;
          }
          d:
          {
           e:
           {
            if(48 <= b && 57 >= b) break e;
            if(97 <= b && 102 >= b) break e;
            if(65 > b || 70 < b) break d;
           }
           e:
           {
            if(48 <= b$0 && 57 >= b$0) break e;
            if(97 <= b$0 && 102 >= b$0) break e;
            if(65 > b$0 || 70 < b$0) break d;
           }
           var _dH_ = char_of_hex(b, b$0);
           caml_call2(Pdfutil[170], output, _dH_);
           break c;
          }
          throw caml_maybe_attach_backtrace(Stdlib[8], 1);
         }
         caml_call1(Pdfutil[159], enddata);
         caml_call1(Pdfio[9], i$0);
        }
       }
      }
      catch(_d7_){
       var _dD_ = caml_wrap_exception(_d7_);
       if(_dD_ === Stdlib[12]){
        var _dE_ = caml_call1(Pdfutil[16], output[1]);
        return caml_call1(Pdfio[33], _dE_);
       }
       if(_dD_ === Stdlib[8])
        throw caml_maybe_attach_backtrace
               ([0, Couldn_tDecodeStream, cst_ASCIIHex], 1);
       throw caml_maybe_attach_backtrace(_dD_, 0);
      }
     }
     try{
      var cs = 0, o = 0;
      for(;;){
       var c = get_streamchar(i$0);
       if(122 !== c){
        if(126 === c){
         var
          _dJ_ = conso(caml_call1(Pdfutil[16], cs), o),
          _dK_ = caml_call1(Pdfutil[16], _dJ_),
          _dL_ = caml_call1(Pdfio[33], _dK_);
         return _dL_;
        }
        if(33 <= c && 117 >= c){
         if(5 === caml_call1(Pdfutil[35], cs)){
          var o$1 = conso(caml_call1(Pdfutil[16], cs), o), cs$0 = [0, c, 0];
          cs = cs$0;
          o = o$1;
          continue;
         }
         var cs$1 = [0, c, cs];
         cs = cs$1;
         continue;
        }
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_decode_ASCII85_i], 1);
       }
       var
        o$0 =
          [0,
           0,
           [0, 0, [0, 0, [0, 0, conso(caml_call1(Pdfutil[16], cs), o)]]]];
       cs = 0;
       o = o$0;
      }
     }
     catch(_d6_){
      throw caml_maybe_attach_backtrace
             ([0, Pdf[4], cst_Error_decoding_ASCII85_str], 1);
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, DecodeNotSupported, caml_call2(Stdlib_Printf[4], _cR_, name)],
            1);
   }
   function decode_one(pdf, dict, source){
    var match = caml_call4(Pdf[16], pdf, cst_Filter, cst_F, dict);
    a:
    if(match){
     var _du_ = match[1];
     b:
     c:
     if(typeof _du_ !== "number"){
      switch(_du_[0]){
        case 4:
         var n = _du_[1]; break;
        case 5:
         var _dA_ = _du_[1];
         if(! _dA_) break a;
         var _dB_ = _dA_[1];
         if(typeof _dB_ !== "number" && 4 === _dB_[0]){var n = _dB_[1]; break;}
         break b;
        default: break c;
      }
      var
       decoded = decoder(pdf, dict, source, n),
       match$0 = caml_call4(Pdf[16], pdf, cst_DecodeParms$1, cst_DP$1, dict);
      d:
      {
       e:
       if(match$0){
        var _dv_ = match$0[1];
        f:
        if(typeof _dv_ !== "number"){
         switch(_dv_[0]){
           case 5:
            var _dy_ = _dv_[1];
            if(! _dy_) break e;
            var _dz_ = _dy_[1];
            if(typeof _dz_ !== "number" && 6 === _dz_[0]){var d = _dz_[1]; break;}
            break e;
           case 6:
            var d = _dv_[1]; break;
           default: break f;
         }
         var decodeparms = [6, d];
         break d;
        }
       }
       var decodeparms = _cS_;
      }
      var match$1 = caml_call3(Pdf[11], pdf, cst_Predictor, decodeparms);
      d:
      if(match$1){
       var _dw_ = match$1[1];
       if(typeof _dw_ !== "number" && 1 === _dw_[0]){
        var pred = _dw_[1];
        if(1 === pred) break d;
        var match$2 = caml_call3(Pdf[11], pdf, cst_Colors, decodeparms);
        e:
        {
         if(match$2){
          var match$3 = match$2[1];
          if(typeof match$3 !== "number" && 1 === match$3[0]){var n$0 = match$3[1], colors = n$0; break e;}
          throw caml_maybe_attach_backtrace
                 ([0, Pdf[4], cst_malformed_Colors], 1);
         }
         var colors = 1;
        }
        var
         match$4 = caml_call3(Pdf[11], pdf, cst_BitsPerComponent, decodeparms);
        e:
        {
         if(match$4){
          var match$5 = match$4[1];
          if(typeof match$5 !== "number" && 1 === match$5[0]){
           var n$1 = match$5[1], bits_per_component = n$1;
           break e;
          }
          throw caml_maybe_attach_backtrace
                 ([0, Pdf[4], cst_malformed_BitsPerComponent], 1);
         }
         var bits_per_component = 8;
        }
        var match$6 = caml_call3(Pdf[11], pdf, cst_Columns$0, decodeparms);
        e:
        {
         if(match$6){
          var match$7 = match$6[1];
          if(typeof match$7 !== "number" && 1 === match$7[0]){var n$2 = match$7[1], columns = n$2; break e;}
          throw caml_maybe_attach_backtrace
                 ([0, Pdf[4], cst_malformed_Columns], 1);
         }
         var columns = 1;
        }
        try{
         var
          _dx_ =
            decode_predictor
             (pred, colors, bits_per_component, columns, decoded);
         return _dx_;
        }
        catch(_dC_){
         throw caml_maybe_attach_backtrace
                ([0, Couldn_tDecodeStream, cst_Predictor$0], 1);
        }
       }
       throw caml_maybe_attach_backtrace
              ([0, Pdf[4], cst_Malformed_Predictor], 1);
      }
      return decoded;
     }
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_PDF_decode_Bad_filter_spec], 1);
    }
    if(0 !== source[0])
     throw caml_maybe_attach_backtrace
            ([0, DecodeNotSupported, cst_decode_one], 1);
    var s = source[1];
    return s;
   }
   function decode_pdfstream_onestage(pdf, stream){
    caml_call1(Pdf[6], stream);
    a:
    if(typeof stream !== "number" && 7 === stream[0]){
     var
      stream_contents = stream[1],
      _dq_ = stream_contents[1],
      dict = _dq_[1];
     if(typeof dict !== "number" && 6 === dict[0]){
      var match$4 = _dq_[2], d$1 = dict[1];
      if(0 !== match$4[0]) break a;
      var
       s = match$4[1],
       _dr_ = caml_call4(Pdf[9], cst_no_Length, pdf, cst_Length, dict),
       match$5 = caml_call2(Pdf[20], pdf, _dr_);
      if(typeof match$5 !== "number" && 1 === match$5[0]){
       var
        stream$0 = decode_one(pdf, dict, [0, s]),
        d =
          caml_call2
           (Pdfutil[24],
            function(x){
             var k = x[1];
             if
              (k !== cst_DP$8
               &&
                k !== cst_DecodeParms$8 && k !== cst_F$7 && k !== cst_Filter$8)
              return x;
             var v = x[2];
             return [0, k, caml_call2(Pdf[20], pdf, v)];
            },
            d$1),
        match = caml_call2(Pdfutil[153], cst_Filter$0, d),
        match$0 = caml_call2(Pdfutil[153], cst_F$0, d);
       b:
       {
        c:
        {
         d:
         {
          if(! match){
           if(! match$0){var d$0 = d; break c;}
           var _do_ = match$0[1];
           e:
           if(typeof _do_ !== "number"){
            switch(_do_[0]){
              case 5:
               var _dp_ = _do_[1];
               if(! _dp_) break b;
               if(_dp_[2]) break d;
               break;
              case 4: break;
              default: break e;
            }
            var
             d$0 =
               caml_call2
                (Pdfutil[87],
                 function(param){
                  var n = param[1];
                  return n === cst_F$7 ? 1 : 0;
                 },
                 d);
            break c;
           }
           break b;
          }
          var _dg_ = match[1];
          e:
          if(typeof _dg_ !== "number"){
           f:
           {
            g:
            {
             switch(_dg_[0]){
               case 5:
                var _dn_ = _dg_[1];
                if(! _dn_) break d;
                if(_dn_[2]) break g;
                break;
               case 4: break;
               default: break e;
             }
             if(! match$0){
              var
               _dm_ =
                 caml_call2
                  (Pdfutil[87],
                   function(param){
                    var n = param[1];
                    return n === cst_Filter$8 ? 1 : 0;
                   },
                   d);
              break f;
             }
            }
            if(typeof _dg_ !== "number" && 5 === _dg_[0]){
             var
              t$2 = _dg_[1][2],
              _dm_ = caml_call3(Pdfutil[156], cst_Filter$1, [5, t$2], d);
             break f;
            }
            break d;
           }
           var d$0 = _dm_;
           break c;
          }
         }
         if(! match$0) break b;
         var _dh_ = match$0[1];
         if(typeof _dh_ !== "number" && 5 === _dh_[0]){
          var match$1 = _dh_[1];
          if(! match$1) break b;
          var
           t = match$1[2],
           d$0 = caml_call3(Pdfutil[156], cst_F$1, [5, t], d);
          break c;
         }
         break b;
        }
        var
         match$2 = caml_call2(Pdfutil[153], cst_DecodeParms$2, d$0),
         match$3 = caml_call2(Pdfutil[153], cst_DP$2, d$0);
        c:
        {
         d:
         if(match$2){
          var _di_ = match$2[1];
          e:
          if(typeof _di_ !== "number"){
           switch(_di_[0]){
             case 5:
              if(_di_[1]) break d; break;
             case 6: break;
             default: break e;
           }
           var _ds_ = caml_call2(Pdfutil[157], cst_DecodeParms$4, d$0);
           break c;
          }
         }
         else if(! match$3){var _ds_ = d$0; break c;}
         d:
         if(match$3){
          var _dj_ = match$3[1];
          e:
          if(typeof _dj_ !== "number"){
           switch(_dj_[0]){
             case 5:
              if(_dj_[1]) break d; break;
             case 6: break;
             default: break e;
           }
           var _ds_ = caml_call2(Pdfutil[157], cst_DP$4, d$0);
           break c;
          }
         }
         if(match$2){
          var _dk_ = match$2[1];
          if(typeof _dk_ !== "number" && 5 === _dk_[0]){
           var
            t$1 = _dk_[1][2],
            _ds_ = caml_call3(Pdfutil[156], cst_DecodeParms$3, [5, t$1], d$0);
           break c;
          }
         }
         if(match$3){
          var _dl_ = match$3[1];
          if(typeof _dl_ !== "number" && 5 === _dl_[0]){
           var
            t$0 = _dl_[1][2],
            _ds_ = caml_call3(Pdfutil[156], cst_DP$3, [5, t$0], d$0);
           break c;
          }
         }
         throw caml_maybe_attach_backtrace
                ([0, Pdf[4], cst_PDF_remove_decoder_malform$0], 1);
        }
        var
         _dt_ = [1, caml_call1(Pdfio[18], stream$0)],
         d$2 = caml_call3(Pdfutil[156], cst_Length$0, _dt_, _ds_);
        stream_contents[1] = [0, [6, d$2], [0, stream$0]];
        return 0;
       }
       throw caml_maybe_attach_backtrace
              ([0, Pdf[4], cst_PDF_remove_decoder_malform], 1);
      }
      throw caml_maybe_attach_backtrace([0, Pdf[4], cst_No_Length], 1);
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, Pdf[4], cst_Pdf_decode_pdfstream_not_a], 1);
   }
   var string_of_pdf = [0, function(param){return cst$1;}];
   function decode_pdfstream(pdf, stream){
    var stream$0 = stream;
    for(;;){
     if(typeof stream$0 !== "number")
      switch(stream$0[0]){
        case 7:
         var d = stream$0[1][1][1];
         caml_call1(Pdf[6], stream$0);
         var match = caml_call4(Pdf[16], pdf, cst_Filter$2, cst_F$2, d);
         if(! match) return 0;
         var _de_ = match[1];
         if(typeof _de_ !== "number")
          switch(_de_[0]){
            case 4:
            case 5:
             decode_pdfstream_onestage(pdf, stream$0);
             if(typeof stream$0 !== "number" && 7 === stream$0[0]){
              var
               d$0 = stream$0[1][1][1],
               _df_ = caml_call1(string_of_pdf[1], d$0);
              if(caml_call1(string_of_pdf[1], d) === _df_) return 0;
              continue;
             }
             throw caml_maybe_attach_backtrace([0, Assert_failure, _cT_], 1);
          }
         throw caml_maybe_attach_backtrace
                ([0, Pdf[4], cst_Pdf_remove_decoder_malform], 1);
        case 8:
         var i = stream$0[1], stream$1 = caml_call2(Pdf[20], pdf, [8, i]);
         stream$0 = stream$1;
         continue;
      }
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_Pdf_decode_pdfstream_malfo], 1);
    }
   }
   function decode_pdfstream_until_unknown(pdf, s){
    try{var _dc_ = decode_pdfstream(pdf, s); return _dc_;}
    catch(_dd_){
     var _db_ = caml_wrap_exception(_dd_);
     if(_db_[1] === DecodeNotSupported) return 0;
     throw caml_maybe_attach_backtrace(_db_, 0);
    }
   }
   function decode_from_input(i, dict){
    var
     _c7_ = caml_call1(Pdf[3], 0),
     match = caml_call4(Pdf[16], _c7_, cst_F$3, cst_Filter$3, dict);
    a:
    if(match){
     var _c8_ = match[1];
     if(typeof _c8_ !== "number")
      switch(_c8_[0]){
        case 4:
         return [0, decode_one(caml_call1(Pdf[3], 0), dict, [1, i])];
        case 5:
         var match$0 = _c8_[1];
         if(! match$0) break a;
         var
          t = match$0[2],
          stream = decode_one(caml_call1(Pdf[3], 0), dict, [1, i]),
          stream$0 = stream,
          param = t;
         for(;;){
          if(! param) return [0, stream$0];
          var _c9_ = param[1];
          if(typeof _c9_ !== "number" && 4 === _c9_[0]){
           var
            more = param[2],
            _c__ = caml_call1(Pdf[3], 0),
            filters = caml_call4(Pdf[16], _c__, cst_F$4, cst_Filter$4, dict),
            _c$_ = caml_call1(Pdf[3], 0),
            decodeparms =
              caml_call4(Pdf[16], _c$_, cst_DP$5, cst_DecodeParms$5, dict),
            dict$0 = caml_call2(Pdf[17], dict, cst_Filter$5),
            dict$1 = caml_call2(Pdf[17], dict$0, cst_F$5),
            dict$2 = caml_call2(Pdf[17], dict$1, cst_DP$6),
            dict$3 = caml_call2(Pdf[17], dict$2, cst_DecodeParms$6),
            strip =
              function(param){
               a:
               if(param){
                var _da_ = param[1];
                if(typeof _da_ !== "number" && 5 === _da_[0]){
                 var match = _da_[1];
                 if(! match) break a;
                 var t = match[2];
                 return [5, t];
                }
               }
               return _cU_;
              },
            decodeparms$0 = strip(decodeparms),
            filters$0 = strip(filters),
            dict$4 = caml_call3(Pdf[19], dict$3, cst_DP$7, decodeparms$0),
            dict$5 = caml_call3(Pdf[19], dict$4, cst_F$6, filters$0),
            stream$1 =
              decode_one(caml_call1(Pdf[3], 0), dict$5, [0, stream$0]);
           stream$0 = stream$1;
           param = more;
           continue;
          }
          throw caml_maybe_attach_backtrace
                 ([0, Pdf[4], cst_Malformed_filter_array], 1);
         }
      }
    }
    throw caml_maybe_attach_backtrace
           ([0, Couldn_tDecodeStream, cst_No_or_bad_filter], 1);
   }
   function name_of_encoding(param){
    switch(param){
      case 0:
       return cst_ASCIIHexDecode;
      case 1:
       return cst_ASCII85Decode;
      case 2:
       return cst_RunLengthDecode;
      default: return cst_FlateDecode;
    }
   }
   function encode_pdfstream(pdf, encoding, _c0_, predictor, opt, stream){
    var
     only_if_smaller = _c0_ ? _c0_[1] : 0,
     predictor_columns = opt ? opt[1] : 1;
    caml_call1(Pdf[6], stream);
    if(typeof stream !== "number" && 7 === stream[0]){
     var
      stream$0 = stream[1],
      _c1_ = stream$0[1],
      match$2 = _c1_[2],
      d$2 = _c1_[1];
     if(0 === match$2[0]){
      var s$0 = match$2[1];
      a:
      {
       if(0 !== predictor){
        var _cZ_ = stream$0[1], match$1 = _cZ_[2], d$0 = _cZ_[1];
        if(0 !== match$1[0])
         throw caml_maybe_attach_backtrace([0, Assert_failure, _cW_], 1);
        var s = match$1[1];
        if(predictor && 3 === predictor[1]){
         var
          data = encode_predictor(12, 1, 8, predictor_columns, s),
          decodeparms =
            [6, [0, [0, cst_Columns$1, [1, predictor_columns]], _cV_]],
          d$1 = caml_call3(Pdf[19], d$0, cst_DecodeParms$7, decodeparms),
          predicted = data,
          d$3 = d$1;
         break a;
        }
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_Encode_predictor_not_suppo], 1);
       }
       var predicted = s$0, d$3 = d$2;
      }
      switch(encoding){
        case 0:
         var _c6_ = encode_ASCIIHex; break;
        case 1:
         var _c6_ = encode_ASCII85; break;
        case 2:
         var _c6_ = encode_runlength; break;
        default: var _c6_ = encode_flate;
      }
      var
       data$0 = _c6_(predicted),
       length = caml_call1(Pdfio[18], data$0),
       match = caml_call3(Pdf[11], pdf, cst_Filter$6, d$3);
      a:
      {
       if(match){
        var match$0 = match[1];
        b:
        if(typeof match$0 !== "number"){
         switch(match$0[0]){
           case 4:
            var
             n = match$0[1],
             _cX_ = [5, [0, [4, name_of_encoding(encoding)], [0, [4, n], 0]]];
            break;
           case 5:
            var
             a = match$0[1],
             _cX_ = [5, [0, [4, name_of_encoding(encoding)], a]];
            break;
           default: break b;
         }
         var filter = _cX_;
         break a;
        }
        throw caml_maybe_attach_backtrace
               ([0, Pdf[4], cst_Malformed_Filter], 1);
       }
       var filter = [4, name_of_encoding(encoding)];
      }
      var
       _cY_ = caml_call3(Pdf[19], d$3, cst_Filter$7, filter),
       d = caml_call3(Pdf[18], _cY_, cst_Length$1, [1, length]),
       _c2_ = 1 - only_if_smaller;
      if(_c2_)
       var _c3_ = _c2_;
      else
       var
        _c5_ = caml_call1(Pdfio[18], s$0),
        _c3_ = (caml_call1(Pdfio[18], data$0) + 20 | 0) < _c5_ ? 1 : 0;
      var _c4_ = _c3_ ? (stream$0[1] = [0, d, [0, data$0]], 0) : _c3_;
      return _c4_;
     }
    }
    throw caml_maybe_attach_backtrace
           ([0, Pdf[4], cst_Pdf_encode_pdfstream_malfo], 1);
   }
   var
    Pdfcodec =
      [0,
       Couldn_tDecodeStream,
       DecodeNotSupported,
       encode_pdfstream,
       decode_pdfstream,
       decode_pdfstream_onestage,
       decode_pdfstream_until_unknown,
       decode_from_input,
       flate_level,
       encode_flate,
       decode_flate,
       encode_ccitt,
       encode_ccittg4,
       debug,
       string_of_pdf,
       encode_predictor];
   runtime.caml_register_global(373, Pdfcodec, "Pdfcodec");
   return;
  }
  (globalThis));

//# 12411 "../.js/default/camlpdf/camlpdf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst_EOF$1 = "\n%%EOF\n",
    cst_endobj$0 = "\nendobj\n",
    cst$4 = " ",
    cst_0_obj$0 = " 0 obj\n",
    cst_ID = "/ID",
    cst_Length$2 = "/Length",
    cst_Root$1 = "/Root",
    cst_Size$2 = "/Size",
    cst_Type = "/Type",
    cst_WARNING_toget_in_string_of =
      "WARNING: toget in string_of_pdf_including_data\n",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$4,
    cst$3 = cst$4,
    cst$1 = cst$4,
    cst$0 = "/",
    cst = " \n",
    dummy_encryption = [0, 2, cst$5, cst$5, 0],
    Pdf = global_data.Pdf,
    Stdlib = global_data.Stdlib,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Pdfio = global_data.Pdfio,
    Pdfutil = global_data.Pdfutil,
    Stdlib_Random = global_data.Stdlib__Random,
    Pdfcrypt = global_data.Pdfcrypt,
    Pdfcodec = global_data.Pdfcodec,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Pdfe = global_data.Pdfe,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    write_debug = [0, 0],
    b = caml_call1(Stdlib_Buffer[1], 30),
    _b_ = [0, [4, 6, [0, 2, 2], 0, 0], "%02x"];
   function make_hex_pdf_string(s){
    caml_call1(Stdlib_Buffer[8], b);
    caml_call2(Stdlib_Buffer[12], b, 60);
    caml_call2
     (Stdlib_String[30],
      function(c){
       var _bx_ = caml_call2(Stdlib_Printf[4], _b_, c);
       return caml_call2(Stdlib_Buffer[16], b, _bx_);
      },
      s);
    caml_call2(Stdlib_Buffer[12], b, 62);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   var
    max_int_float = Stdlib[19],
    min_int_float = Stdlib[20],
    cst_hexchar = "hexchar";
   function hexchar(param){
    if(15 < param >>> 0)
     throw caml_maybe_attach_backtrace([0, Stdlib[7], cst_hexchar], 1);
    switch(param){
      case 0:
       return 48;
      case 1:
       return 49;
      case 2:
       return 50;
      case 3:
       return 51;
      case 4:
       return 52;
      case 5:
       return 53;
      case 6:
       return 54;
      case 7:
       return 55;
      case 8:
       return 56;
      case 9:
       return 57;
      case 10:
       return 65;
      case 11:
       return 66;
      case 12:
       return 67;
      case 13:
       return 68;
      case 14:
       return 69;
      default: return 70;
    }
   }
   var
    b$0 = caml_call1(Stdlib_Buffer[1], 30),
    _c_ = [0, [8, [0, 0, 0], 0, 0, 0], "%f"],
    _d_ =
      [0,
       [11,
        "Warning: name ",
        [3, 0, [11, " contains the null character\n", 0]]],
       "Warning: name %S contains the null character\n"],
    cst_00 = "#00",
    cst_warning_bad_name = "warning: bad name",
    _e_ = [0, cst$4],
    _f_ = [0, cst$4],
    _g_ = [0, cst$4],
    _h_ = [0, "null"],
    _i_ = [0, "["],
    _j_ = [0, "]"],
    _k_ = [0, "<<"],
    _l_ = [0, ">>"],
    _m_ = [0, "\nstream\n"],
    _n_ = [0, "\nendstream"],
    _o_ = [0, " 0 R"];
   function make_pdf_name(n){
    var l = caml_ml_string_length(n);
    a:
    if(2 <= l){
     b:
     {
      var p = 1;
      for(;;){
       var _bv_ = p <= (l - 1 | 0) ? 1 : 0;
       if(! _bv_) break;
       var x$0 = caml_string_unsafe_get(n, p);
       if(33 > x$0) break b;
       if(126 < x$0) break b;
       if(caml_call1(Pdf[39], x$0)) break b;
       if(35 === x$0) break b;
       var p$0 = p + 1 | 0;
       p = p$0;
      }
      var _bw_ = _bv_;
      break a;
     }
     var _bw_ = 1;
    }
    else
     var _bw_ = 0;
    if(! _bw_) return n;
    if(n !== cst$5 && 47 === caml_string_unsafe_get(n, 0)){
     caml_call1(Stdlib_Buffer[8], b$0);
     caml_call2(Stdlib_Buffer[12], b$0, 47);
     var _bq_ = caml_ml_string_length(n) - 1 | 0, _bp_ = 1;
     if(_bq_ >= 1){
      var x = _bp_;
      for(;;){
       var h = runtime.caml_string_get(n, x);
       a:
       if(h){
        if(33 <= h && 126 >= h && ! caml_call1(Pdf[39], h) && 35 !== h){caml_call2(Stdlib_Buffer[12], b$0, h); break a;}
        caml_call2(Stdlib_Buffer[12], b$0, 35);
        var _br_ = hexchar(h / 16 | 0);
        caml_call2(Stdlib_Buffer[12], b$0, _br_);
        var _bs_ = hexchar(h % 16 | 0);
        caml_call2(Stdlib_Buffer[12], b$0, _bs_);
       }
       else{
        var _bu_ = caml_call2(Stdlib_Printf[4], _d_, n);
        caml_call1(Pdfe[3], _bu_);
        caml_call2(Stdlib_Buffer[16], b$0, cst_00);
       }
       var _bt_ = x + 1 | 0;
       if(_bq_ === x) break;
       x = _bt_;
      }
     }
     return caml_call1(Stdlib_Buffer[2], b$0);
    }
    caml_call1(Pdfe[3], cst_warning_bad_name);
    return cst$0;
   }
   function strings_of_pdf(opt$3, f, changetable, param$1){
    var hex$1 = opt$3 ? opt$3[1] : 0;
    if(typeof param$1 === "number") return caml_call1(f, _h_);
    switch(param$1[0]){
      case 0:
       var b$0 = param$1[1];
       return caml_call1(f, [0, caml_call1(Stdlib[30], b$0)]);
      case 1:
       var n = param$1[1];
       return caml_call1(f, [0, caml_call1(Stdlib[33], n)]);
      case 2:
       var r = param$1[1], fl = Math.floor(r);
       a:
       if(fl === r){
        if(! (max_int_float < r) && ! (r < min_int_float)){
         var _bk_ = caml_call1(Stdlib[33], fl | 0);
         break a;
        }
        var
         _be_ = caml_call1(Stdlib[35], r),
         _bf_ = caml_call1(Pdfutil[8], _be_),
         _bg_ = caml_call1(Pdfutil[98], _bf_),
         _bk_ = caml_call1(Pdfutil[9], _bg_);
       }
       else{
        if(r < 0.0001 && -0.0001 < r){
         var _bk_ = caml_call2(Stdlib_Printf[4], _c_, r);
         break a;
        }
        var _bk_ = caml_call1(Stdlib[35], r);
       }
       return caml_call1(f, [0, _bk_]);
      case 3:
       var s = param$1[1];
       return hex$1
               ? caml_call1(f, [0, make_hex_pdf_string(s)])
               : (caml_call1
                  (Stdlib_Buffer[8], b),
                 caml_call2(Stdlib_Buffer[12], b, 40),
                 caml_call2
                  (Stdlib_String[30],
                   function(c){
                    var _bo_ = c - 40 | 0;
                    if(52 < _bo_ >>> 0){
                     if(-26 > _bo_)
                      switch(_bo_ + 40 | 0){
                        case 8:
                         caml_call2(Stdlib_Buffer[12], b, 92);
                         return caml_call2(Stdlib_Buffer[12], b, 98);
                        case 9:
                         caml_call2(Stdlib_Buffer[12], b, 92);
                         return caml_call2(Stdlib_Buffer[12], b, 116);
                        case 10:
                         caml_call2(Stdlib_Buffer[12], b, 92);
                         return caml_call2(Stdlib_Buffer[12], b, 110);
                        case 12:
                         caml_call2(Stdlib_Buffer[12], b, 92);
                         return caml_call2(Stdlib_Buffer[12], b, 102);
                        case 13:
                         caml_call2(Stdlib_Buffer[12], b, 92);
                         return caml_call2(Stdlib_Buffer[12], b, 114);
                      }
                    }
                    else if(49 < _bo_ - 2 >>> 0){
                     caml_call2(Stdlib_Buffer[12], b, 92);
                     return caml_call2(Stdlib_Buffer[12], b, c);
                    }
                    return caml_call2(Stdlib_Buffer[12], b, c);
                   },
                   s),
                 caml_call2(Stdlib_Buffer[12], b, 41),
                 caml_call1(f, [0, caml_call1(Stdlib_Buffer[2], b)]));
      case 4:
       var n$0 = param$1[1]; return caml_call1(f, [0, make_pdf_name(n$0)]);
      case 5:
       var elts = param$1[1];
       caml_call1(f, _i_);
       var opt$4 = [0, hex$1], opt = opt$4, param = elts;
       for(;;){
        var hex = opt[1];
        if(param){
         var tail = param[2], x = param[1];
         if(tail){
          var h = tail[1];
          strings_of_pdf([0, hex], f, changetable, x);
          a:
          {
           if(typeof h !== "number")
            switch(h[0]){case 3:case 4:case 5:case 6: break a;}
           if(typeof x !== "number")
            switch(x[0]){case 3:case 5:case 6: break a;}
           caml_call1(f, _e_);
          }
          var opt$0 = [0, hex];
          opt = opt$0;
          param = tail;
          continue;
         }
         strings_of_pdf([0, hex], f, changetable, x);
        }
        return caml_call1(f, _j_);
       }
      case 6:
       var entries = param$1[1];
       caml_call1(f, _k_);
       var opt$5 = [0, hex$1];
       a:
       {
        var opt$1 = opt$5, param$0 = entries;
        for(;;){
         var hex$0 = opt$1[1];
         if(! param$0) break a;
         var _bh_ = param$0[1], k = _bh_[1];
         if(! param$0[2]) break;
         var t = param$0[2], v = _bh_[2];
         caml_call1(f, [0, make_pdf_name(k)]);
         b:
         {
          if(typeof v !== "number")
           switch(v[0]){case 3:case 4:case 5:case 6: break b;}
          caml_call1(f, _f_);
         }
         var _bi_ = hex$0 ? k === cst_ID ? 1 : 0 : hex$0;
         strings_of_pdf([0, _bi_], f, changetable, v);
         var opt$2 = [0, hex$0];
         opt$1 = opt$2;
         param$0 = t;
        }
        var v$0 = _bh_[2];
        caml_call1(f, [0, make_pdf_name(k)]);
        b:
        {
         if(typeof v$0 !== "number")
          switch(v$0[0]){case 3:case 4:case 5:case 6: break b;}
         caml_call1(f, _g_);
        }
        var _bj_ = hex$0 ? k === cst_ID ? 1 : 0 : hex$0;
        strings_of_pdf([0, _bj_], f, changetable, v$0);
       }
       return caml_call1(f, _l_);
      case 7:
       var match = param$1[1][1], data = match[2], dict = match[1];
       strings_of_pdf([0, hex$1], f, changetable, dict);
       caml_call1(f, _m_);
       caml_call1(f, [1, data]);
       return caml_call1(f, _n_);
      default:
       var n$1 = param$1[1];
       try{
        var
         _bm_ = caml_call2(Stdlib_Hashtbl[6], changetable, n$1),
         n$2 = _bm_;
       }
       catch(_bn_){
        var _bl_ = caml_wrap_exception(_bn_);
        if(_bl_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_bl_, 0);
        var n$2 = n$1;
       }
       caml_call1(f, [0, caml_call1(Stdlib[33], n$2)]);
       return caml_call1(f, _o_);
    }
   }
   var
    b$1 = caml_call1(Stdlib_Buffer[1], 100),
    _p_ =
      [0,
       [11, cst_WARNING_toget_in_string_of, 0],
       cst_WARNING_toget_in_string_of];
   function string_of_pdf(s){
    caml_call1(Stdlib_Buffer[8], b$1);
    strings_of_pdf
     (0,
      function(param){
       if(0 !== param[0]) return 0;
       var x = param[1];
       return caml_call2(Stdlib_Buffer[16], b$1, x);
      },
      caml_call2(Stdlib_Hashtbl[1], 0, 0),
      s);
    return caml_call1(Stdlib_Buffer[2], b$1);
   }
   function string_of_pdf_including_data(s){
    a:
    if(typeof s !== "number" && 7 === s[0]){caml_call1(Pdf[6], s); break a;}
    caml_call1(Stdlib_Buffer[8], b$1);
    strings_of_pdf
     (0,
      function(param){
       if(0 === param[0]){
        var x = param[1];
        return caml_call2(Stdlib_Buffer[16], b$1, x);
       }
       var stream = param[1];
       if(0 !== stream[0]) return caml_call1(Stdlib_Printf[2], _p_);
       var data = stream[1], _bd_ = caml_call1(Pdfio[41], data);
       return caml_call2(Stdlib_Buffer[16], b$1, _bd_);
      },
      caml_call2(Stdlib_Hashtbl[1], 0, 0),
      s);
    return caml_call1(Stdlib_Buffer[2], b$1);
   }
   Pdfcrypt[11][1] = string_of_pdf;
   Pdfcodec[14][1] = string_of_pdf;
   Pdf[61][1] = string_of_pdf;
   var
    _a_ =
      [0,
       [12,
        37,
        [11,
         "PDF-",
         [4,
          3,
          0,
          0,
          [12,
           46,
           [4, 3, 0, 0, [12, 10, [12, 37, [11, "\x80\x81\x82\x83\n", 0]]]]]]]],
       "%%PDF-%i.%i\n%%\x80\x81\x82\x83\n"],
    cst_00000_n = " 00000 n \n",
    cst_xref = "xref\n",
    cst_0 = "0 ",
    cst_0000000000_65535_f = "0000000000 65535 f \n",
    _q_ =
      [0, [11, "trailerdict = ", [2, 0, [12, 10, 0]]], "trailerdict = %s\n"],
    _r_ = [0, [4, 3, 0, 0, [11, " = ", [2, 0, [12, 10, 0]]]], "%i = %s\n"],
    _s_ = [0, cst_0_obj$0],
    _t_ = [0, cst_endobj$0],
    cst_output_stream = "output_stream",
    cst_First = "/First",
    cst_N = "/N",
    cst_Length = cst_Length$2,
    _u_ = [0, cst_Type, [4, "/ObjStm"]],
    _v_ = [0, 1],
    cst_max_bytes_required = "max_bytes_required",
    _w_ = [0, [0, 0, 65535, 0], 0],
    cst_Length$0 = cst_Length$2,
    cst_W = "/W",
    cst_Size = cst_Size$2,
    cst_Root = cst_Root$1,
    _x_ = [0, cst_Type, [4, "/XRef"]],
    _y_ = [0, 3],
    _z_ = [0, 1],
    cst_Length$1 = cst_Length$2,
    cst_Size$0 = cst_Size$2,
    cst_bad_xref_stream_generated = "bad xref stream generated\n",
    cst_0_obj = cst_0_obj$0,
    _A_ = [0, 1],
    cst_endobj = cst_endobj$0,
    cst_startxref = "startxref\n",
    cst_EOF = cst_EOF$1,
    cst_trailer = "trailer\n",
    cst_Pdf_pdf_to_output_Bad_trai =
      "Pdf.pdf_to_output: Bad trailer dictionary",
    cst_Root$0 = cst_Root$1,
    cst_Size$1 = cst_Size$2,
    _B_ = [0, 1],
    cst_startxref$0 = "\nstartxref\n",
    cst_EOF$0 = cst_EOF$1,
    _C_ = [0, 1],
    _D_ = [0, 0],
    _E_ = [0, 1];
   function debug_whole_pdf(pdf){
    var
     _a$_ = string_of_pdf(pdf[5]),
     _ba_ = caml_call2(Stdlib_Printf[4], _q_, _a$_);
    caml_call1(Pdfe[3], _ba_);
    return caml_call2
            (Pdf[30],
             function(i, o){
              var
               _bb_ = string_of_pdf(o),
               _bc_ = caml_call3(Stdlib_Printf[4], _r_, i, _bb_);
              return caml_call1(Pdfe[3], _bc_);
             },
             pdf);
   }
   function flatten_W(o, param){
    if(0 === param[0]){var s = param[1]; return caml_call1(o[5], s);}
    var data = param[1], s$0 = [7, [0, [0, 0, data]]];
    caml_call1(Pdf[6], s$0);
    if(7 === s$0[0]){
     var match = s$0[1][1][2];
     if(0 === match[0]){
      var arr = match[1], _a9_ = 0 < caml_call1(Pdfio[18], arr) ? 1 : 0;
      if(! _a9_) return _a9_;
      var _a__ = caml_call1(Pdfio[18], arr);
      return caml_call4(Pdfio[23], o, arr, 0, _a__);
     }
    }
    throw caml_maybe_attach_backtrace([0, Pdf[4], cst_output_stream], 1);
   }
   function max_bytes_required(l){
    if(0 === l)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[7], cst_max_bytes_required], 1);
    var
     r = [0, caml_call3(Pdfutil[33], Pdfutil[191], Stdlib[20], l)],
     b = [0, 0];
    for(;;){
     var v = 0 < r[1] ? 1 : 0;
     r[1] = r[1] >>> 8 | 0;
     if(! v) return caml_call2(Pdfutil[191], 1, b[1]);
     caml_call2(Pdfutil[162], b, 1);
    }
   }
   function output_bytes(nbytes, x, o){
    var _a7_ = nbytes - 1 | 0;
    if(_a7_ >= 0){
     var pos = _a7_;
     for(;;){
      caml_call1(o[4], (x & 255 << (pos * 8 | 0)) >>> (pos * 8 | 0) | 0);
      var _a8_ = pos - 1 | 0;
      if(0 === pos) break;
      pos = _a8_;
     }
    }
    return 0;
   }
   function pdf_to_output(_ay_, _ax_, _aw_, opt, encrypt, mk_id, pdf$0, o$0){
    var
     preserve_existing = _ay_ ? _ay_[1] : 0,
     generate_objstm = _ax_ ? _ax_[1] : 0,
     compress_objstm = _aw_ ? _aw_[1] : 1,
     recrypt = opt ? opt[1] : 0;
    if(mk_id){
     var
      _az_ = caml_call1(Stdlib_Random[14], 1.),
      _aA_ = caml_call1(Stdlib[35], _az_);
     caml_call2(Pdf[56], pdf$0, _aA_);
    }
    if(generate_objstm){
     var we_will_be_encrypting = encrypt ? 1 : 0;
     if(1 - preserve_existing) caml_call1(Stdlib_Hashtbl[2], pdf$0[4][4]);
     if(we_will_be_encrypting)
      caml_call2(Stdlib_Hashtbl[10], pdf$0[4][4], pdf$0[3]);
     var
      _aq_ = caml_call1(Pdfutil[210], pdf$0[4][4]),
      _ar_ = caml_call2(Pdfutil[24], function(_a6_){return _a6_[2];}, _aq_),
      _as_ = caml_call3(Pdfutil[33], Pdfutil[191], Stdlib[20], _ar_),
      biggest_hint = caml_call2(Pdfutil[191], _as_, 0),
      _at_ = caml_call1(Pdf[41], pdf$0),
      possibles =
        caml_call2
         (Pdfutil[42],
          function(x){
           return caml_call2(Stdlib_Hashtbl[9], pdf$0[4][4], x) ? 0 : [0, x];
          },
          _at_),
      indirect_lengths = caml_call1(Pdfutil[208], 0),
      for_streams =
        caml_call2
         (Pdfutil[42],
          function(x){
           var match = caml_call2(Pdf[8], pdf$0, x);
           if(typeof match !== "number" && 7 === match[0]){
            var match$0 = match[1][1][1];
            if(typeof match$0 !== "number" && 6 === match$0[0]){
             var
              d = match$0[1],
              match$1 = caml_call2(Pdfutil[153], cst_Length$1, d);
             a:
             if(match$1){
              var match$2 = match$1[1];
              if(typeof match$2 !== "number" && 8 === match$2[0]){
               var i = match$2[1];
               caml_call3(Stdlib_Hashtbl[5], indirect_lengths, i, 0);
               break a;
              }
             }
             return 0;
            }
           }
           return [0, x];
          },
          possibles),
      final$0 =
        caml_call2
         (Pdfutil[42],
          function(x){
           a:
           if(! caml_call2(Stdlib_Hashtbl[9], indirect_lengths, x)){
            if(x === pdf$0[3] && we_will_be_encrypting) break a;
            return [0, x];
           }
           return 0;
          },
          for_streams),
      _au_ = caml_call2(Pdfutil[36], runtime.caml_int_compare, final$0),
      groups = caml_call2(Pdfutil[90], 250, _au_),
      _av_ = caml_call2(Pdfutil[106], biggest_hint + 1 | 0, groups);
     caml_call3
      (Pdfutil[18],
       function(items, groupnum){
        return caml_call2
                (Pdfutil[17],
                 function(i){
                  return caml_call3
                          (Stdlib_Hashtbl[5], pdf$0[4][4], i, groupnum);
                 },
                 items);
       },
       groups,
       _av_);
    }
    a:
    {
     b:
     {
      if(! preserve_existing && ! generate_objstm) break b;
      if(0 < caml_call1(Stdlib_Hashtbl[15], pdf$0[4][4])){
       var
        preserve_objstm = 1,
        we_will_be_encrypting$0 = encrypt ? 1 : recrypt ? 1 : 0;
       if(we_will_be_encrypting$0)
        caml_call2(Stdlib_Hashtbl[10], pdf$0[4][4], pdf$0[3]);
       var
        table = caml_call1(Pdfutil[208], 0),
        keys = caml_call1(Pdfutil[208], 0);
       caml_call2
        (Stdlib_Hashtbl[12],
         function(objnum, instream){
          if(1 - caml_call2(Stdlib_Hashtbl[9], keys, instream))
           caml_call3(Stdlib_Hashtbl[5], keys, instream, 0);
          return caml_call3(Stdlib_Hashtbl[5], table, instream, objnum);
         },
         pdf$0[4][4]);
       var lists = [0, 0];
       caml_call2
        (Stdlib_Hashtbl[12],
         function(instream, param){
          var
           _a5_ =
             [0, instream, caml_call2(Stdlib_Hashtbl[8], table, instream)];
          return caml_call2(Pdfutil[170], lists, _a5_);
         },
         keys);
       var
        objects_for_streams = lists[1],
        all_in_stream = caml_call1(Pdfutil[208], 0),
        _P_ =
          caml_call2
           (Pdfutil[24], function(_a4_){return _a4_[2];}, objects_for_streams),
        _Q_ = caml_call1(Pdfutil[22], _P_);
       caml_call2
        (Pdfutil[17],
         function(x){
          return caml_call3(Stdlib_Hashtbl[5], all_in_stream, x, 0);
         },
         _Q_);
       var
        _R_ = caml_call1(Pdf[41], pdf$0),
        nonstream_objects =
          caml_call2
           (Pdfutil[42],
            function(x){
             return caml_call2(Stdlib_Hashtbl[9], all_in_stream, x)
                     ? 0
                     : [0, x];
            },
            _R_),
        n = caml_call1(Pdfutil[35], objects_for_streams),
        _S_ =
          caml_call2
           (Pdfutil[24], function(_a3_){return _a3_[2];}, objects_for_streams),
        _T_ = caml_call2(Pdfutil[24], Pdfutil[35], _S_),
        m = n + caml_call1(Pdfutil[37], _T_) | 0,
        changetable = caml_call1(Pdfutil[208], 0),
        _U_ = caml_call1(Pdfutil[104], objects_for_streams),
        _V_ =
          caml_call2
           (Pdfutil[24], function(_a2_){return _a2_[1];}, objects_for_streams),
        _W_ = caml_call1(Stdlib_Hashtbl[5], changetable);
       caml_call3(Pdfutil[18], _W_, _V_, _U_);
       var
        _X_ =
          caml_call2
           (Pdfutil[24], function(_a1_){return _a1_[2];}, objects_for_streams),
        x = caml_call1(Pdfutil[22], _X_),
        _Y_ = caml_call2(Pdfutil[106], n + 1 | 0, x),
        _Z_ = caml_call1(Stdlib_Hashtbl[5], changetable);
       caml_call3(Pdfutil[18], _Z_, x, _Y_);
       var
        ___ = caml_call2(Pdfutil[106], m + 1 | 0, nonstream_objects),
        _$_ = caml_call1(Stdlib_Hashtbl[5], changetable);
       caml_call3(Pdfutil[18], _$_, nonstream_objects, ___);
       var pdf = caml_call2(Pdf[45], changetable, pdf$0);
       pdf$0[3] = pdf[3];
       pdf$0[4] = pdf[4];
       pdf$0[5] = pdf[5];
       var
        _aa_ =
          caml_call2
           (Pdfutil[24], function(_a0_){return _a0_[2];}, objects_for_streams),
        _ab_ = caml_call1(Stdlib_Hashtbl[6], changetable),
        _ac_ = caml_call2(Pdfutil[69], _ab_, _aa_),
        _ad_ =
          caml_call2
           (Pdfutil[24], function(_aZ_){return _aZ_[1];}, objects_for_streams),
        _ae_ = caml_call1(Stdlib_Hashtbl[6], changetable),
        _af_ = caml_call2(Pdfutil[24], _ae_, _ad_),
        _ag_ = caml_call1(Pdfutil[104], _af_),
        renumbered_objects_for_streams = caml_call2(Pdfutil[31], _ag_, _ac_);
       caml_call2
        (Pdfutil[17],
         function(param){
          var
           objects = param[2],
           tostream = param[1],
           match = caml_call1(Pdfio[6], 32000),
           d = match[2],
           output = match[1],
           strings =
             caml_call2
              (Pdfutil[24],
               function(x){
                var _aY_ = string_of_pdf(caml_call2(Pdf[8], pdf$0, x));
                return caml_call2(Stdlib[28], _aY_, cst$1);
               },
               objects),
           _aT_ = caml_call1(Pdf[22], pdf$0);
          caml_call2(Pdfutil[17], _aT_, objects);
          var
           lengths = caml_call2(Pdfutil[24], caml_ml_string_length, strings),
           _aU_ = caml_call2(Pdfutil[39], 0, lengths),
           byte_offsets = [0, 0, caml_call1(Pdfutil[98], _aU_)];
          caml_call3
           (Pdfutil[18],
            function(o, boff){
             var _aW_ = caml_call1(Stdlib[33], o);
             caml_call1(output[5], _aW_);
             caml_call1(output[5], cst$2);
             var _aX_ = caml_call1(Stdlib[33], boff);
             caml_call1(output[5], _aX_);
             return caml_call1(output[5], cst$3);
            },
            objects,
            byte_offsets);
          var first = caml_call1(output[1], 0);
          caml_call2(Pdfutil[17], output[5], strings);
          var
           data = caml_call2(Pdfio[7], output, d),
           _aV_ =
             [0,
              [0, cst_N, [1, caml_call1(Pdfutil[35], objects)]],
              [0, [0, cst_First, [1, first]], 0]],
           dict =
             [6,
              [0,
               _u_,
               [0, [0, cst_Length, [1, caml_call1(Pdfio[18], data)]], _aV_]]],
           obj = [7, [0, [0, dict, [0, data]]]];
          if(compress_objstm)
           caml_call6(Pdfcodec[3], pdf$0, 3, _v_, 0, 0, obj);
          return caml_call2(Pdf[24], pdf$0, [0, tostream, obj]);
         },
         renumbered_objects_for_streams);
       var
        preserve_objstm$0 = preserve_objstm,
        renumbered_objects_for_streams$0 = renumbered_objects_for_streams;
       break a;
      }
     }
     var preserve_objstm$0 = 0, renumbered_objects_for_streams$0 = 0;
    }
    var encrypt$0 = recrypt ? [0, dummy_encryption] : encrypt;
    a:
    {
     if(! preserve_objstm$0 && ! generate_objstm){
      if(! encrypt$0){var pdf$1 = pdf$0; break a;}
      var e = encrypt$0[1];
      if(2 === e[1])
       var pdf$4 = pdf$0;
      else
       var
        _aG_ = caml_call1(Pdf[44], pdf$0),
        pdf$4 = caml_call2(Pdf[45], _aG_, pdf$0);
      var pdf$1 = pdf$4;
      break a;
     }
     var pdf$1 = pdf$0;
    }
    if(recrypt)
     var
      pw = recrypt[1],
      preserve_objstm$1 = preserve_objstm$0 || generate_objstm,
      pdf$2 = caml_call3(Pdfcrypt[5], [0, 1 - preserve_objstm$1], pdf$1, pw);
    else
     var pdf$2 = pdf$1;
    if(encrypt$0){
     var enc = encrypt$0[1], match = enc[1];
     if(typeof match === "number")
      switch(match){
        case 0:
         var f = Pdfcrypt[6]; break;
        case 1:
         var f = Pdfcrypt[7]; break;
        default: var f = function(_aS_, _aR_, param, pdf){return pdf;};
      }
     else
      switch(match[0]){
        case 0:
         var em = match[1], f = caml_call1(Pdfcrypt[8], em); break;
        case 1:
         var em$0 = match[1], f = caml_call1(Pdfcrypt[9], em$0); break;
        default: var em$1 = match[1], f = caml_call1(Pdfcrypt[10], em$1);
      }
     var pdf$3 = caml_call4(f, enc[3], enc[2], enc[4], pdf$2);
    }
    else
     var pdf$3 = pdf$2;
    var _M_ = caml_call3(Stdlib_Printf[4], _a_, pdf$3[1], pdf$3[2]);
    caml_call1(o$0[5], _M_);
    var xrefs = [0, 0];
    a:
    {
     if
      (!
       caml_call1(Pdfcrypt[4], pdf$3)
       && ! preserve_objstm$0 && ! generate_objstm){var objiter = Pdf[30]; break a;}
     var objiter = Pdf[31];
    }
    a:
    {
     if
      (!
       caml_call1(Pdfcrypt[4], pdf$3)
       && ! preserve_objstm$0 && ! generate_objstm){
      var changetable$0 = caml_call1(Pdf[44], pdf$3);
      break a;
     }
     var changetable$0 = caml_call2(Stdlib_Hashtbl[1], 0, 0);
    }
    var currobjnum = [0, 1];
    caml_call2
     (objiter,
      function(ob, pdfobject){
       var _aP_ = caml_call1(o$0[1], 0);
       caml_call2(Pdfutil[170], xrefs, _aP_);
       var ob$0 = preserve_objstm$0 ? ob : currobjnum[1];
       function f(_aQ_){return flatten_W(o$0, _aQ_);}
       flatten_W(o$0, [0, caml_call1(Stdlib[33], ob$0)]);
       flatten_W(o$0, _s_);
       strings_of_pdf(0, f, changetable$0, pdfobject);
       flatten_W(o$0, _t_);
       currobjnum[1]++;
       return 0;
      },
      pdf$3);
    var xrefstart = caml_call1(o$0[1], 0);
    if(! preserve_objstm$0 && ! generate_objstm){
     var xrefs$1 = caml_call1(Pdfutil[16], xrefs[1]);
     caml_call1(o$0[5], cst_xref);
     caml_call1(o$0[5], cst_0);
     var
      _N_ = caml_call1(Pdfutil[35], xrefs$1) + 1 | 0,
      _O_ = caml_call1(Stdlib[33], _N_);
     caml_call1(o$0[5], _O_);
     caml_call1(o$0[5], cst);
     caml_call1(o$0[5], cst_0000000000_65535_f);
     caml_call2
      (Pdfutil[17],
       function(n){
        var
         s = caml_call1(Stdlib[33], n),
         l = caml_ml_string_length(s),
         _aN_ = (10 - l | 0) - 1 | 0,
         _aM_ = 0;
        if(_aN_ >= 0){
         var x = _aM_;
         for(;;){
          caml_call1(o$0[3], 48);
          var _aO_ = x + 1 | 0;
          if(_aN_ === x) break;
          x = _aO_;
         }
        }
        caml_call1(o$0[5], s);
        return caml_call1(o$0[5], cst_00000_n);
       },
       xrefs$1);
     caml_call1(o$0[5], cst_trailer);
     var match$5 = pdf$3[5];
     if(typeof match$5 !== "number" && 6 === match$5[0]){
      var
       trailerdict = match$5[1],
       _aD_ = caml_call3(Pdfutil[155], cst_Root$0, [8, pdf$3[3]], trailerdict),
       _aE_ = [1, caml_call1(Pdfutil[35], xrefs[1]) + 1 | 0],
       trailerdict$0 = [6, caml_call3(Pdfutil[155], cst_Size$1, _aE_, _aD_)];
      strings_of_pdf
       (_B_,
        function(_aL_){return flatten_W(o$0, _aL_);},
        changetable$0,
        trailerdict$0);
      caml_call1(o$0[5], cst_startxref$0);
      var _aF_ = caml_call1(Stdlib[33], xrefstart);
      caml_call1(o$0[5], _aF_);
      return caml_call1(o$0[5], cst_EOF$0);
     }
     throw caml_maybe_attach_backtrace
            ([0, Pdf[4], cst_Pdf_pdf_to_output_Bad_trai], 1);
    }
    var
     xrefs$0 = caml_call1(Pdfutil[16], xrefs[1]),
     entries = [0, _w_],
     _ah_ = caml_call1(Pdfutil[35], renumbered_objects_for_streams$0),
     match$0 = caml_call2(Pdfutil[62], xrefs$0, _ah_),
     type1s_tranche2 = match$0[2],
     type1s = match$0[1],
     _ai_ = caml_call2(Pdfutil[24], function(x){return [0, 1, x, 0];}, type1s),
     _aj_ = caml_call1(Pdfutil[16], _ai_);
    caml_call2(Pdfutil[171], entries, _aj_);
    caml_call2
     (Pdfutil[17],
      function(param){
       var
        objnums = param[2],
        snum = param[1],
        _aI_ = caml_call1(Pdfutil[105], objnums),
        _aJ_ =
          caml_call2(Pdfutil[24], function(i){return [0, 2, snum, i];}, _aI_),
        _aK_ = caml_call1(Pdfutil[16], _aJ_);
       return caml_call2(Pdfutil[171], entries, _aK_);
      },
      renumbered_objects_for_streams$0);
    var
     _ak_ =
       caml_call2
        (Pdfutil[24], function(x){return [0, 1, x, 0];}, type1s_tranche2),
     _al_ = caml_call1(Pdfutil[16], _ak_);
    caml_call2(Pdfutil[171], entries, _al_);
    var
     w1 =
       max_bytes_required
        (caml_call2
          (Pdfutil[24],
           function(param){var x = param[1]; return x;},
           entries[1])),
     w2 =
       max_bytes_required
        (caml_call2
          (Pdfutil[24],
           function(param){var x = param[2]; return x;},
           entries[1])),
     w3 =
       max_bytes_required
        (caml_call2
          (Pdfutil[24],
           function(param){var x = param[3]; return x;},
           entries[1])),
     match$1 = caml_call1(Pdfio[6], 4096),
     bytes = match$1[2],
     o = match$1[1],
     _am_ = caml_call1(Pdfutil[16], entries[1]);
    caml_call2
     (Pdfutil[17],
      function(param){
       var b = param[3], a = param[2], typ = param[1];
       output_bytes(w1, typ, o);
       output_bytes(w2, a, o);
       return output_bytes(w3, b, o);
      },
      _am_);
    var data = caml_call2(Pdfio[7], o, bytes), match$2 = pdf$3[5];
    a:
    {
     if(typeof match$2 !== "number" && 6 === match$2[0]){var d = match$2[1], _an_ = d; break a;}
     var _an_ = 0;
    }
    var
     _ao_ =
       [0,
        [0, cst_W, [5, [0, [1, w1], [0, [1, w2], [0, [1, w3], 0]]]]],
        [0, [0, cst_Length$0, [1, caml_call1(Pdfio[18], data)]], 0]],
     _ap_ = [0, [0, cst_Size, [1, caml_call1(Pdfutil[35], entries[1])]], _ao_],
     dict =
       [6,
        caml_call3
         (Pdfutil[34],
          function(param, d){
           var v = param[2], k = param[1];
           return caml_call3(Pdfutil[155], k, v, d);
          },
          [0, _x_, [0, [0, cst_Root, [8, pdf$3[3]]], _ap_]],
          _an_)],
     xrefstream = [7, [0, [0, dict, [0, data]]]];
    caml_call6
     (Pdfcodec[3],
      pdf$3,
      3,
      _z_,
      _y_,
      [0, (w1 + w2 | 0) + w3 | 0],
      xrefstream);
    var match$3 = caml_call3(Pdf[11], pdf$3, cst_Size$0, xrefstream);
    a:
    {
     if(match$3){
      var match$4 = match$3[1];
      if(typeof match$4 !== "number" && 1 === match$4[0]){var i = match$4[1], thisnum = i; break a;}
     }
     var thisnum = caml_call1(Stdlib[2], cst_bad_xref_stream_generated);
    }
    var _aB_ = caml_call1(Stdlib[33], thisnum);
    caml_call1(o$0[5], _aB_);
    caml_call1(o$0[5], cst_0_obj);
    strings_of_pdf
     (_A_,
      function(_aH_){return flatten_W(o$0, _aH_);},
      changetable$0,
      xrefstream);
    caml_call1(o$0[5], cst_endobj);
    caml_call1(o$0[5], cst_startxref);
    var _aC_ = caml_call1(Stdlib[33], xrefstart);
    caml_call1(o$0[5], _aC_);
    return caml_call1(o$0[5], cst_EOF);
   }
   function pdf_to_channel(_L_, _K_, _J_, opt, encrypt, mk_id, pdf, ch){
    var
     preserve_objstm = _L_ ? _L_[1] : 0,
     generate_objstm = _K_ ? _K_[1] : 0,
     compress_objstm = _J_ ? _J_[1] : 1,
     recrypt = opt ? opt[1] : 0;
    return pdf_to_output
            ([0, preserve_objstm],
             [0, generate_objstm],
             [0, compress_objstm],
             [0, recrypt],
             encrypt,
             mk_id,
             pdf,
             caml_call1(Pdfio[5], ch));
   }
   function pdf_to_file_options(_H_, _G_, _F_, opt, encrypt, mk_id, pdf, f){
    var
     preserve_objstm = _H_ ? _H_[1] : 0,
     generate_objstm = _G_ ? _G_[1] : 0,
     compress_objstm = _F_ ? _F_[1] : 1,
     recrypt = opt ? opt[1] : 0;
    if(mk_id) caml_call2(Pdf[56], pdf, f);
    var ch = caml_call1(Stdlib[61], f);
    try{
     pdf_to_channel
      ([0, preserve_objstm],
       [0, generate_objstm],
       [0, compress_objstm],
       [0, recrypt],
       encrypt,
       0,
       pdf,
       ch);
     var _I_ = caml_call1(Stdlib[76], ch);
     return _I_;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[76], ch);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function pdf_to_file(pdf, f){
    return pdf_to_file_options(_E_, _D_, _C_, 0, 0, 1, pdf, f);
   }
   var
    Pdfwrite =
      [0,
       write_debug,
       pdf_to_output,
       pdf_to_channel,
       pdf_to_file_options,
       pdf_to_file,
       string_of_pdf,
       string_of_pdf_including_data,
       debug_whole_pdf,
       make_hex_pdf_string];
   runtime.caml_register_global(84, Pdfwrite, "Pdfwrite");
   return;
  }
  (globalThis));

//# 5 "../.js/default/uutf/uutf.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_ISO_8859_1$0 = "ISO-8859-1",
    cst_US_ASCII$0 = "US-ASCII",
    cst_UTF_16$0 = "UTF-16",
    cst_UTF_16BE$0 = "UTF-16BE",
    cst_UTF_16LE$0 = "UTF-16LE",
    cst_UTF_8$0 = "UTF-8",
    cst_Await = "`Await",
    cst_End = "`End",
    cst_src_uutf_ml = "src/uutf.ml",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    pp = Stdlib_Format[143],
    _a_ =
      [0,
       [11,
        "invalid bounds (index ",
        [4, 0, 0, 0, [11, ", length ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "invalid bounds (index %d, length %d)"];
   function invalid_bounds(j, l){
    var _am_ = caml_call3(Stdlib_Printf[4], _a_, j, l);
    return caml_call1(Stdlib[1], _am_);
   }
   function unsafe_set_byte(s, j, byte$0){
    runtime.caml_bytes_unsafe_set(s, j, byte$0);
   }
   var
    u_bom = caml_call1(Stdlib_Uchar[9], 65279),
    u_rep = caml_call1(Stdlib_Uchar[9], 65533),
    _b_ = [0, 684370880],
    _c_ = [0, -211555818],
    _d_ = [0, -211558048],
    _e_ = [0, 143365725],
    _f_ = [0, 423112016],
    _g_ = [0, 338302576],
    cst_UTF_8 = cst_UTF_8$0,
    cst_US_ASCII = cst_US_ASCII$0,
    cst_ISO_8859_1 = cst_ISO_8859_1$0,
    cst_UTF_16 = cst_UTF_16$0,
    cst_UTF_16LE = cst_UTF_16LE$0,
    cst_UTF_16BE = cst_UTF_16BE$0;
   function encoding_of_string(s){
    var
     match = caml_call1(Stdlib_String[26], s),
     _ak_ = caml_string_compare(match, "ISO646-US");
    a:
    {
     b:
     {
      if(0 <= _ak_){
       if(0 >= _ak_) break b;
       var switch$0 = caml_string_compare(match, "US");
       if(0 <= switch$0){
        if(0 >= switch$0) break b;
        if(match === cst_US_ASCII$0) break b;
        if(match === cst_UTF_16$0) return _e_;
        if(match === cst_UTF_16BE$0) return _d_;
        if(match === cst_UTF_16LE$0) return _c_;
        if(match !== cst_UTF_8$0) break a;
        return _b_;
       }
       if(match === "ISO_646.IRV:1991") break b;
       if
        (match !== "ISO_8859-1"
         &&
          match !== "ISO_8859-1:1987" && match !== "L1" && match !== "LATIN1")
        break a;
      }
      else{
       var _al_ = caml_string_compare(match, "CSISOLATIN1");
       if(0 <= _al_){
        if(0 < _al_){
         if(match === "IBM367") break b;
         if
          (match !== "IBM819"
           && match !== cst_ISO_8859_1$0 && match !== "ISO-IR-100"){if(match !== "ISO-IR-6") break a; break b;}
        }
       }
       else{
        if(match === "ANSI_X3.4-1968") break b;
        if(match === "ANSI_X3.4-1986") break b;
        if(match === "ASCII") break b;
        if(match === "CP367") break b;
        if(match !== "CP819"){if(match !== "CSASCII") break a; break b;}
       }
      }
      return _g_;
     }
     return _f_;
    }
    return 0;
   }
   function encoding_to_string(param){
    return 143365725 <= param
            ? 423112016
              <= param
              ? 684370880 <= param ? cst_UTF_8 : cst_US_ASCII
              : 338302576 <= param ? cst_ISO_8859_1 : cst_UTF_16
            : -211555818 <= param ? cst_UTF_16LE : cst_UTF_16BE;
   }
   function malformed(s, j, l){
    return [0, 659980059, caml_call3(Stdlib_Bytes[8], s, j, l)];
   }
   function malformed_pair(be, hi, s, j, l){
    var
     bs1 = caml_call3(Stdlib_Bytes[7], s, j, l),
     bs0 = caml_create_bytes(2);
    if(be) var j1 = 1, j0 = 0; else var j1 = 0, j0 = 1;
    unsafe_set_byte(bs0, j0, hi >>> 8 | 0);
    unsafe_set_byte(bs0, j1, hi & 255);
    var _aj_ = caml_call2(Stdlib_Bytes[14], bs0, bs1);
    return [0, 659980059, caml_call1(Stdlib_Bytes[44], _aj_)];
   }
   var
    utf_8_len =
      [0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0].slice
       (),
    cst_expected_Await_encode = "expected `Await encode",
    _h_ = [0, cst_src_uutf_ml, 120, 9],
    _i_ = [0, -211558048, 3299808],
    _j_ = [0, -211558048, 427938126],
    _k_ = [0, cst_src_uutf_ml, 153, 55],
    _l_ = [0, 684370880, 427938126],
    _m_ = [0, 684370880, 427938126],
    _n_ = [0, -211555818, 3299808],
    _o_ = [0, 684370880, 3299808],
    _p_ = [0, cst_src_uutf_ml, 152, 55],
    _q_ = [0, cst_src_uutf_ml, 154, 55],
    _r_ = [0, 684370880, 3455931],
    _s_ = [0, [11, cst_Await, 0], cst_Await],
    _t_ = [0, [11, cst_End, 0], cst_End],
    _u_ =
      [0,
       [18,
        [1, [0, 0, cst]],
        [11, "`Uchar U+", [4, 8, [0, 2, 4], 0, [17, 0, 0]]]],
       "@[`Uchar U+%04X@]"],
    _v_ =
      [0, [18, [1, [0, 0, cst]], [11, "`Malformed (", 0]], "@[`Malformed ("],
    _w_ = [0, [4, 8, [0, 2, 2], 0, 0], "%02X"],
    _x_ = [0, [12, 41, [17, 0, 0]], ")@]"],
    _y_ = [0, [12, 32, [4, 8, [0, 2, 2], 0, 0]], " %02X"],
    _z_ = [0, cst_src_uutf_ml, 363, 9];
   function r_utf_8(s, j, l){
    function uchar(c){return [0, 852405675, caml_call1(Stdlib_Uchar[9], c)];}
    var switcher = l - 1 | 0;
    if(3 < switcher >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    switch(switcher){
      case 0:
       return uchar(caml_bytes_unsafe_get(s, j));
      case 1:
       var
        b0$1 = caml_bytes_unsafe_get(s, j),
        j$0 = j + 1 | 0,
        b1$1 = caml_bytes_unsafe_get(s, j$0);
       return 2 === (b1$1 >>> 6 | 0)
               ? uchar((b0$1 & 31) << 6 | b1$1 & 63)
               : malformed(s, j, l);
      case 2:
       var
        b0$0 = caml_bytes_unsafe_get(s, j),
        j$1 = j + 1 | 0,
        b1$0 = caml_bytes_unsafe_get(s, j$1),
        j$2 = j + 2 | 0,
        b2$0 = caml_bytes_unsafe_get(s, j$2),
        c = (b0$0 & 15) << 12 | (b1$0 & 63) << 6 | b2$0 & 63;
       if(2 !== (b2$0 >>> 6 | 0)) return malformed(s, j, l);
       if(224 === b0$0){
        if(160 <= b1$0 && 191 >= b1$0) return uchar(c);
        return malformed(s, j, l);
       }
       if(237 !== b0$0)
        return 2 === (b1$0 >>> 6 | 0) ? uchar(c) : malformed(s, j, l);
       if(128 <= b1$0 && 159 >= b1$0) return uchar(c);
       return malformed(s, j, l);
      default:
       var
        b0 = caml_bytes_unsafe_get(s, j),
        j$3 = j + 1 | 0,
        b1 = caml_bytes_unsafe_get(s, j$3),
        j$4 = j + 2 | 0,
        b2 = caml_bytes_unsafe_get(s, j$4),
        j$5 = j + 3 | 0,
        b3 = caml_bytes_unsafe_get(s, j$5),
        c$0 = (b0 & 7) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63;
       if(2 === (b3 >>> 6 | 0) && 2 === (b2 >>> 6 | 0)){
        if(240 === b0){
         if(144 <= b1 && 191 >= b1) return uchar(c$0);
         return malformed(s, j, l);
        }
        if(244 !== b0)
         return 2 === (b1 >>> 6 | 0) ? uchar(c$0) : malformed(s, j, l);
        if(128 <= b1 && 143 >= b1) return uchar(c$0);
        return malformed(s, j, l);
       }
       return malformed(s, j, l);
    }
   }
   function r_utf_16(s, j0, j1){
    var
     b0 = caml_bytes_unsafe_get(s, j0),
     b1 = caml_bytes_unsafe_get(s, j1),
     u = b0 << 8 | b1;
    if(55296 <= u && 57343 >= u)
     return 56319 < u
             ? malformed(s, caml_call2(Stdlib[16], j0, j1), 2)
             : [0, 16161, u];
    return [0, 852405675, caml_call1(Stdlib_Uchar[9], u)];
   }
   function r_utf_16_lo(hi, s, j0, j1){
    var
     b0 = caml_bytes_unsafe_get(s, j0),
     b1 = caml_bytes_unsafe_get(s, j1),
     lo = b0 << 8 | b1;
    if(56320 <= lo && 57343 >= lo)
     return [0,
             852405675,
             caml_call1
              (Stdlib_Uchar[9], ((hi & 1023) << 10 | lo & 1023) + 65536 | 0)];
    return malformed_pair
            (j0 < j1 ? 1 : 0, hi, s, caml_call2(Stdlib[16], j0, j1), 2);
   }
   function r_encoding(s, j, l){
    function some(i){
     if(i >= l) return 0;
     var j$0 = j + i | 0;
     return [0, caml_bytes_unsafe_get(s, j$0)];
    }
    var match = some(0), match$0 = some(1), match$1 = some(2);
    if(! match){
     if(match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
     if(match$1)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
     return _r_;
    }
    var p = match[1];
    a:
    {
     if(240 <= p){
      if(254 === p){
       if(! match$0) break a;
       if(255 === match$0[1]) return _i_;
      }
      else if(255 === p){
       if(! match$0) break a;
       if(254 === match$0[1]) return _n_;
      }
     }
     else if(0 === p){
      if(! match$0) break a;
      var p$0 = match$0[1];
      if(0 < p$0) return [0, -211558048, [0, 605782321, p$0]];
     }
     else if(239 <= p){
      if(! match$0) break a;
      if(187 === match$0[1]){
       if(! match$1) break a;
       if(191 === match$1[1]) return _o_;
       break a;
      }
     }
     if(match$0 && 0 === match$0[1] && 0 < p)
      return [0, -211555818, [0, 605782321, p]];
    }
    if(0 !== caml_check_bound(utf_8_len, p)[1 + p]) return _m_;
    if(match$0) return _j_;
    if(match$1)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
    return _l_;
   }
   function pp_decode(ppf, param){
    if(typeof param === "number")
     return 1006505782 <= param
             ? caml_call2(pp, ppf, _s_)
             : caml_call2(pp, ppf, _t_);
    if(852405675 <= param[1]){
     var u = param[2];
     return caml_call3(pp, ppf, _u_, caml_call1(Stdlib_Uchar[10], u));
    }
    var bs = param[2], l = caml_ml_string_length(bs);
    caml_call2(pp, ppf, _v_);
    if(0 < l) caml_call3(pp, ppf, _w_, caml_string_get(bs, 0));
    var _ah_ = l - 1 | 0, _ag_ = 1;
    if(_ah_ >= 1){
     var i = _ag_;
     for(;;){
      caml_call3(pp, ppf, _y_, caml_string_get(bs, i));
      var _ai_ = i + 1 | 0;
      if(_ah_ === i) break;
      i = _ai_;
     }
    }
    return caml_call2(pp, ppf, _x_);
   }
   function i_rem(d){return (d[7] - d[6] | 0) + 1 | 0;}
   function eoi(d){
    d[5] = Stdlib_Bytes[3];
    d[6] = 0;
    d[7] = Stdlib[20];
    return 0;
   }
   function src(d, s, j, l){
    if(0 <= j && 0 <= l && caml_ml_bytes_length(s) >= (j + l | 0))
     return 0 === l
             ? eoi(d)
             : (d[5] = s, d[6] = j, d[7] = (j + l | 0) - 1 | 0, 0);
    return invalid_bounds(j, l);
   }
   function refill(k, d){
    var match = d[1];
    if(typeof match === "number"){d[18] = k; return 1006505782;}
    if(438511779 <= match[1]){
     var
      ic = match[2],
      rc = caml_call4(Stdlib[84], ic, d[5], 0, caml_ml_bytes_length(d[5]));
     src(d, d[5], 0, rc);
     return caml_call1(k, d);
    }
    eoi(d);
    return caml_call1(k, d);
   }
   function t_need(d, need){d[9] = 0; d[10] = need;}
   function t_fill(k, d){
    function blit(d, l){
     caml_blit_bytes(d[5], d[6], d[8], d[9], l);
     d[6] = d[6] + l | 0;
     d[9] = d[9] + l | 0;
    }
    var rem = i_rem(d);
    if(0 > rem) return caml_call1(k, d);
    var need = d[10] - d[9] | 0;
    return rem < need
            ? (blit
               (d, rem),
              refill(function(_af_){return t_fill(k, _af_);}, d))
            : (blit(d, need), caml_call1(k, d));
   }
   function ret(k, v, byte_count, d){
    d[18] = k;
    d[15] = d[15] + byte_count | 0;
    return caml_call2(d[17], d, v);
   }
   function decode_us_ascii(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_us_ascii, d) : 3455931;
    var j = d[6];
    d[6] = d[6] + 1 | 0;
    var
     s = d[5],
     b0 = caml_bytes_unsafe_get(s, j),
     _ad_ = 1,
     _ae_ =
       127 < b0
        ? malformed(s, j, 1)
        : [0, 852405675, caml_call1(Stdlib_Uchar[9], b0)];
    return ret(decode_us_ascii, _ae_, _ad_, d);
   }
   function decode_iso_8859_1(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_iso_8859_1, d) : 3455931;
    var j = d[6];
    d[6] = d[6] + 1 | 0;
    var s = d[5];
    return ret
            (decode_iso_8859_1,
             [0,
              852405675,
              caml_call1(Stdlib_Uchar[9], caml_bytes_unsafe_get(s, j))],
             1,
             d);
   }
   function t_decode_utf_8(d){
    if(d[9] < d[10]){
     var _ab_ = d[9];
     return ret(decode_utf_8, malformed(d[8], 0, d[9]), _ab_, d);
    }
    var _ac_ = d[9];
    return ret(decode_utf_8, r_utf_8(d[8], 0, d[9]), _ac_, d);
   }
   function decode_utf_8(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_utf_8, d) : 3455931;
    var j = d[6], s = d[5], need = utf_8_len[1 + caml_bytes_unsafe_get(s, j)];
    if(rem < need){t_need(d, need); return t_fill(t_decode_utf_8, d);}
    var j$0 = d[6];
    return 0 === need
            ? (d
               [6]
              = d[6] + 1 | 0,
              ret(decode_utf_8, malformed(d[5], j$0, 1), 1, d))
            : (d
               [6]
              = d[6] + need | 0,
              ret(decode_utf_8, r_utf_8(d[5], j$0, need), need, d));
   }
   function t_decode_utf_16be_lo(hi, d){
    var bcount = d[9] + 2 | 0;
    return d[9] < d[10]
            ? ret
              (decode_utf_16be,
               malformed_pair(1, hi, d[8], 0, d[9]),
               bcount,
               d)
            : ret(decode_utf_16be, r_utf_16_lo(hi, d[8], 0, 1), bcount, d);
   }
   function t_decode_utf_16be(d){
    if(d[9] >= d[10]) return decode_utf_16be_lo(r_utf_16(d[8], 0, 1), d);
    var _aa_ = d[9];
    return ret(decode_utf_16be, malformed(d[8], 0, d[9]), _aa_, d);
   }
   function decode_utf_16be_lo(v, d){
    if(659980059 <= v[1]) return ret(decode_utf_16be, v, 2, d);
    var hi = v[2], rem = i_rem(d);
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return ret(decode_utf_16be, r_utf_16_lo(hi, d[5], j, j + 1 | 0), 4, d);
    }
    t_need(d, 2);
    return t_fill(function(_$_){return t_decode_utf_16be_lo(hi, _$_);}, d);
   }
   function decode_utf_16be(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_utf_16be, d) : 3455931;
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return decode_utf_16be_lo(r_utf_16(d[5], j, j + 1 | 0), d);
    }
    t_need(d, 2);
    return t_fill(t_decode_utf_16be, d);
   }
   function t_decode_utf_16le_lo(hi, d){
    var bcount = d[9] + 2 | 0;
    return d[9] < d[10]
            ? ret
              (decode_utf_16le,
               malformed_pair(0, hi, d[8], 0, d[9]),
               bcount,
               d)
            : ret(decode_utf_16le, r_utf_16_lo(hi, d[8], 1, 0), bcount, d);
   }
   function t_decode_utf_16le(d){
    if(d[9] >= d[10]) return decode_utf_16le_lo(r_utf_16(d[8], 1, 0), d);
    var ___ = d[9];
    return ret(decode_utf_16le, malformed(d[8], 0, d[9]), ___, d);
   }
   function decode_utf_16le_lo(v, d){
    if(659980059 <= v[1]) return ret(decode_utf_16le, v, 2, d);
    var hi = v[2], rem = i_rem(d);
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return ret(decode_utf_16le, r_utf_16_lo(hi, d[5], j + 1 | 0, j), 4, d);
    }
    t_need(d, 2);
    return t_fill(function(_Z_){return t_decode_utf_16le_lo(hi, _Z_);}, d);
   }
   function decode_utf_16le(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_utf_16le, d) : 3455931;
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return decode_utf_16le_lo(r_utf_16(d[5], j + 1 | 0, j), d);
    }
    t_need(d, 2);
    return t_fill(t_decode_utf_16le, d);
   }
   function guessed_utf_16(d, be, v){
    if(be)
     var
      j1 = 1,
      j0 = 0,
      t_decode_utf_16_lo = t_decode_utf_16be_lo,
      t_decode_utf_16 = t_decode_utf_16be,
      decode_utf_16 = decode_utf_16be;
    else
     var
      j1 = 0,
      j0 = 1,
      t_decode_utf_16_lo = t_decode_utf_16le_lo,
      t_decode_utf_16 = t_decode_utf_16le,
      decode_utf_16 = decode_utf_16le;
    function b3(k, d){
     if(3 > d[9]) return decode_utf_16(d);
     d[10] = 2;
     d[9] = 1;
     var s = d[8];
     unsafe_set_byte(d[8], 0, caml_bytes_unsafe_get(s, 2));
     return t_fill(k, d);
    }
    if(typeof v !== "number"){
     var u = v[2];
     return ret
             (function(_Y_){return b3(t_decode_utf_16, _Y_);},
              [0, 852405675, caml_call1(Stdlib_Uchar[9], u)],
              2,
              d);
    }
    if(427938126 > v)
     return ret
             (function(_X_){return b3(t_decode_utf_16, _X_);},
              [0, 852405675, u_bom],
              2,
              d);
    var v$0 = r_utf_16(d[8], j0, j1);
    if(659980059 <= v$0[1])
     return ret(function(_W_){return b3(t_decode_utf_16, _W_);}, v$0, 2, d);
    var hi = v$0[2];
    if(3 <= d[9])
     return b3(function(_V_){return t_decode_utf_16_lo(hi, _V_);}, d);
    var _U_ = d[9];
    return ret
            (decode_utf_16,
             malformed_pair(be, hi, Stdlib_Bytes[3], 0, 0),
             _U_,
             d);
   }
   function guess_encoding(d){
    function setup(d){
     var match = r_encoding(d[8], 0, d[9]), _T_ = match[1];
     if(-211555818 === _T_){
      var r = match[2];
      d[2] = -211555818;
      d[18] = decode_utf_16le;
      return guessed_utf_16(d, 0, r);
     }
     if(684370880 > _T_){
      var r$1 = match[2];
      d[2] = -211558048;
      d[18] = decode_utf_16be;
      return guessed_utf_16(d, 1, r$1);
     }
     var r$0 = match[2];
     d[2] = 684370880;
     d[18] = decode_utf_8;
     if(3455931 === r$0) return 3455931;
     if(427938126 > r$0)
      return ret(decode_utf_8, [0, 852405675, u_bom], 3, d);
     function b3(d){
      var
       s = d[8],
       b3 = caml_bytes_unsafe_get(s, 2),
       n = caml_check_bound(utf_8_len, b3)[1 + b3];
      return 0 === n
              ? ret(decode_utf_8, malformed(d[8], 2, 1), 1, d)
              : (d
                 [10]
                = n,
                d[9] = 1,
                unsafe_set_byte(d[8], 0, b3),
                t_fill(t_decode_utf_8, d));
     }
     function b2(d){
      var
       s = d[8],
       b2 = caml_bytes_unsafe_get(s, 1),
       b3$0 = 2 < d[9] ? b3 : decode_utf_8,
       n = caml_check_bound(utf_8_len, b2)[1 + b2];
      if(0 === n) return ret(b3$0, malformed(d[8], 1, 1), 1, d);
      if(1 === n) return ret(b3$0, r_utf_8(d[8], 1, 1), 1, d);
      d[10] = n;
      unsafe_set_byte(d[8], 0, b2);
      if(3 <= d[9]){
       d[9] = 2;
       var s$0 = d[8];
       unsafe_set_byte(d[8], 1, caml_bytes_unsafe_get(s$0, 2));
      }
      else
       d[9] = 1;
      return t_fill(t_decode_utf_8, d);
     }
     var
      s = d[8],
      b1 = caml_bytes_unsafe_get(s, 0),
      b2$0 = 1 < d[9] ? b2 : decode_utf_8,
      n = caml_check_bound(utf_8_len, b1)[1 + b1];
     if(4 < n >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
     switch(n){
       case 0:
        return ret(b2$0, malformed(d[8], 0, 1), 1, d);
       case 1:
        return ret(b2$0, r_utf_8(d[8], 0, 1), 1, d);
       case 2:
        return 2 <= d[9]
                ? 3
                  <= d[9]
                  ? ret(b3, r_utf_8(d[8], 0, 2), 2, d)
                  : ret(decode_utf_8, r_utf_8(d[8], 0, 2), 2, d)
                : ret(decode_utf_8, malformed(d[8], 0, 1), 1, d);
       case 3:
        if(3 <= d[9]) return ret(decode_utf_8, r_utf_8(d[8], 0, 3), 3, d);
        var _R_ = d[9];
        return ret(decode_utf_8, malformed(d[8], 0, d[9]), _R_, d);
       default:
        if(3 <= d[9]){d[10] = 4; return t_fill(t_decode_utf_8, d);}
        var _S_ = d[9];
        return ret(decode_utf_8, malformed(d[8], 0, d[9]), _S_, d);
     }
    }
    t_need(d, 3);
    return t_fill(setup, d);
   }
   function nline(d){d[14] = 0; d[13] = d[13] + 1 | 0;}
   function ncol(d){d[14] = d[14] + 1 | 0;}
   function ncount(d){d[16] = d[16] + 1 | 0;}
   function cr(d, b){d[12] = b;}
   function pp_nln_none(d, v){
    if(852405675 > v[1]){cr(d, 0); ncount(d); ncol(d); return v;}
    var u = v[2], _Q_ = caml_call1(Stdlib_Uchar[10], u) - 133 | 0;
    a:
    {
     if(8100 < _Q_ >>> 0){
      var switcher = _Q_ + 123 | 0;
      if(3 < switcher >>> 0) break a;
      switch(switcher){
        case 0:
         var last_cr = d[12];
         cr(d, 0);
         ncount(d);
         return last_cr ? v : (nline(d), v);
        case 1:
         break a;
        case 2: break;
        default: cr(d, 1); ncount(d); nline(d); return v;
      }
     }
     else if(8097 >= _Q_ - 1 >>> 0) break a;
     cr(d, 0);
     ncount(d);
     nline(d);
     return v;
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return v;
   }
   function pp_nln_readline(d, v){
    if(852405675 > v[1]){cr(d, 0); ncount(d); ncol(d); return v;}
    var u = v[2], _P_ = caml_call1(Stdlib_Uchar[10], u) - 133 | 0;
    a:
    {
     if(8100 < _P_ >>> 0){
      var switcher = _P_ + 123 | 0;
      if(3 < switcher >>> 0) break a;
      switch(switcher){
        case 0:
         var last_cr = d[12];
         cr(d, 0);
         return last_cr
                 ? caml_call1(d[18], d)
                 : (ncount(d), nline(d), [0, 852405675, d[4]]);
        case 1:
         break a;
        case 2: break;
        default: cr(d, 1); ncount(d); nline(d); return [0, 852405675, d[4]];
      }
     }
     else if(8097 >= _P_ - 1 >>> 0) break a;
     cr(d, 0);
     ncount(d);
     nline(d);
     return [0, 852405675, d[4]];
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return v;
   }
   function pp_nln_nlf(d, v){
    if(852405675 > v[1]){cr(d, 0); ncount(d); ncol(d); return v;}
    var u = v[2], match = caml_call1(Stdlib_Uchar[10], u);
    a:
    {
     if(14 <= match){
      if(8232 <= match){
       if(8234 > match) break a;
      }
      else if(133 === match){
       cr(d, 0);
       ncount(d);
       nline(d);
       return [0, 852405675, d[4]];
      }
     }
     else if(10 <= match)
      switch(match - 10 | 0){
        case 0:
         var last_cr = d[12];
         cr(d, 0);
         return last_cr
                 ? caml_call1(d[18], d)
                 : (ncount(d), nline(d), [0, 852405675, d[4]]);
        case 1: break;
        case 2:
         break a;
        default: cr(d, 1); ncount(d); nline(d); return [0, 852405675, d[4]];
      }
     cr(d, 0);
     ncount(d);
     ncol(d);
     return v;
    }
    cr(d, 0);
    ncount(d);
    nline(d);
    return v;
   }
   function pp_nln_ascii(d, v){
    if(852405675 > v[1]){cr(d, 0); ncount(d); ncol(d); return v;}
    var u = v[2], _O_ = caml_call1(Stdlib_Uchar[10], u) - 133 | 0;
    a:
    {
     if(8100 < _O_ >>> 0){
      var switcher = _O_ + 123 | 0;
      if(3 < switcher >>> 0) break a;
      switch(switcher){
        case 0:
         var last_cr = d[12];
         cr(d, 0);
         return last_cr
                 ? caml_call1(d[18], d)
                 : (ncount(d), nline(d), [0, 852405675, d[4]]);
        case 1:
         break a;
        case 2: break;
        default: cr(d, 1); ncount(d); nline(d); return [0, 852405675, d[4]];
      }
     }
     else if(8097 >= _O_ - 1 >>> 0) break a;
     cr(d, 0);
     ncount(d);
     nline(d);
     return v;
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return v;
   }
   function decode_fun(param){
    return 143365725 <= param
            ? 423112016
              <= param
              ? 684370880 <= param ? decode_utf_8 : decode_us_ascii
              : 338302576 <= param ? decode_iso_8859_1 : decode_utf_16be
            : -211555818 <= param ? decode_utf_16le : decode_utf_16be;
   }
   function decoder(nln, encoding, src){
    if(nln){
     var match = nln[1], _N_ = match[1];
     if(3895880 === _N_)
      var nl = match[2], nl$0 = nl, pp = pp_nln_nlf;
     else if(605782321 <= _N_)
      var nl$1 = match[2], nl$0 = nl$1, pp = pp_nln_ascii;
     else
      var nl$2 = match[2], nl$0 = nl$2, pp = pp_nln_readline;
    }
    else
     var
      nl$3 = caml_call1(Stdlib_Uchar[9], 10),
      nl$0 = nl$3,
      pp = pp_nln_none;
    if(encoding)
     var e = encoding[1], k = decode_fun(e), encoding$0 = e;
    else
     var k = guess_encoding, encoding$0 = 684370880;
    if(typeof src === "number")
     var i_max = 0, i_pos = 1, i = Stdlib_Bytes[3];
    else if(438511779 <= src[1])
     var i_max = 0, i_pos = 1, i = caml_create_bytes(65536);
    else
     var
      s = src[2],
      i_max$0 = caml_ml_string_length(s) - 1 | 0,
      i$0 = caml_call1(Stdlib_Bytes[45], s),
      i_max = i_max$0,
      i_pos = 0,
      i = i$0;
    var utf16 = 143365725 === encoding$0 ? 1 : 0;
    return [0,
            src,
            encoding$0,
            nln,
            nl$0,
            i,
            i_pos,
            i_max,
            caml_create_bytes(4),
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            function(d, v){
             if(852405675 > v[1]){
              d[11] = 0;
              d[17] = pp;
              return caml_call2(d[17], d, v);
             }
             var u = v[2], match = caml_call1(Stdlib_Uchar[10], u);
             if(65279 === match){
              if(utf16){d[2] = -211558048; d[18] = decode_utf_16be;}
              d[11] = 1;
              d[17] = pp;
              return caml_call1(d[18], d);
             }
             if(65534 === match && utf16){
              d[2] = -211555818;
              d[18] = decode_utf_16le;
              d[11] = 1;
              d[17] = pp;
              return caml_call1(d[18], d);
             }
             d[11] = 0;
             d[17] = pp;
             return caml_call2(d[17], d, v);
            },
            k];
   }
   function decode(d){return caml_call1(d[18], d);}
   function decoder_line(d){return d[13];}
   function decoder_col(d){return d[14];}
   function decoder_byte_count(d){return d[15];}
   function decoder_count(d){return d[16];}
   function decoder_removed_bom(d){return d[11];}
   function decoder_src(d){return d[1];}
   function decoder_nln(d){return d[3];}
   function decoder_encoding(d){return d[2];}
   function set_decoder_encoding(d, e){
    d[2] = e;
    d[18] = decode_fun(e);
    return 0;
   }
   function o_rem(e){return (e[5] - e[4] | 0) + 1 | 0;}
   function dst(e, s, j, l){
    var _K_ = j < 0 ? 1 : 0;
    if(_K_)
     var _L_ = _K_;
    else
     var
      _M_ = l < 0 ? 1 : 0,
      _L_ = _M_ || (caml_ml_bytes_length(s) < (j + l | 0) ? 1 : 0);
    if(_L_) invalid_bounds(j, l);
    e[3] = s;
    e[4] = j;
    e[5] = (j + l | 0) - 1 | 0;
    return 0;
   }
   function flush(k, e){
    var match = e[1];
    if(typeof match === "number"){
     e[9] =
      function(e, param){
       if(typeof param === "number" && 1006505782 <= param)
        return caml_call1(k, e);
       return caml_call1(Stdlib[1], cst_expected_Await_encode);
      };
     return 939392865;
    }
    if(438511779 <= match[1]){
     var oc = match[2];
     caml_call4(Stdlib[68], oc, e[3], 0, e[4]);
     e[4] = 0;
     return caml_call1(k, e);
    }
    var b = match[2], o = caml_call1(Stdlib_Bytes[44], e[3]);
    caml_call4(Stdlib_Buffer[18], b, o, 0, e[4]);
    e[4] = 0;
    return caml_call1(k, e);
   }
   function t_range(e, max){e[7] = 0; e[8] = max;}
   function t_flush(k, e){
    function blit(e, l){
     caml_blit_bytes(e[6], e[7], e[3], e[4], l);
     e[4] = e[4] + l | 0;
     e[7] = e[7] + l | 0;
    }
    var rem = o_rem(e), len = (e[8] - e[7] | 0) + 1 | 0;
    return rem < len
            ? (blit(e, rem), flush(function(_J_){return t_flush(k, _J_);}, e))
            : (blit(e, len), caml_call1(k, e));
   }
   function encode_utf_8(e, v){
    function k(e){e[9] = encode_utf_8; return 17724;}
    if(typeof v === "number") return 1006505782 <= v ? k(e) : flush(k, e);
    var u = v[2], u$0 = caml_call1(Stdlib_Uchar[10], u), rem = o_rem(e);
    if(127 >= u$0)
     return 1 <= rem
             ? (unsafe_set_byte(e[3], e[4], u$0), e[4] = e[4] + 1 | 0, k(e))
             : flush(function(e){return encode_utf_8(e, v);}, e);
    if(2047 >= u$0){
     if(2 <= rem){
      var j$3 = e[4];
      e[4] = e[4] + 2 | 0;
      var s$3 = e[3], k$2 = k, j$4 = j$3, s$4 = s$3;
     }
     else{
      t_range(e, 1);
      var k$2 = function(_I_){return t_flush(k, _I_);}, j$4 = 0, s$4 = e[6];
     }
     unsafe_set_byte(s$4, j$4, 192 | u$0 >>> 6 | 0);
     unsafe_set_byte(s$4, j$4 + 1 | 0, 128 | u$0 & 63);
     return k$2(e);
    }
    if(65535 < u$0){
     if(4 <= rem){
      var j = e[4];
      e[4] = e[4] + 4 | 0;
      var s = e[3], k$0 = k, j$0 = j, s$0 = s;
     }
     else{
      t_range(e, 3);
      var k$0 = function(_H_){return t_flush(k, _H_);}, j$0 = 0, s$0 = e[6];
     }
     unsafe_set_byte(s$0, j$0, 240 | u$0 >>> 18 | 0);
     unsafe_set_byte(s$0, j$0 + 1 | 0, 128 | (u$0 >>> 12 | 0) & 63);
     unsafe_set_byte(s$0, j$0 + 2 | 0, 128 | (u$0 >>> 6 | 0) & 63);
     unsafe_set_byte(s$0, j$0 + 3 | 0, 128 | u$0 & 63);
     return k$0(e);
    }
    if(3 <= rem){
     var j$1 = e[4];
     e[4] = e[4] + 3 | 0;
     var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
    }
    else{
     t_range(e, 2);
     var k$1 = function(_G_){return t_flush(k, _G_);}, j$2 = 0, s$2 = e[6];
    }
    unsafe_set_byte(s$2, j$2, 224 | u$0 >>> 12 | 0);
    unsafe_set_byte(s$2, j$2 + 1 | 0, 128 | (u$0 >>> 6 | 0) & 63);
    unsafe_set_byte(s$2, j$2 + 2 | 0, 128 | u$0 & 63);
    return k$1(e);
   }
   function encode_utf_16be(e, v){
    function k(e){e[9] = encode_utf_16be; return 17724;}
    if(typeof v === "number") return 1006505782 <= v ? k(e) : flush(k, e);
    var u = v[2], u$0 = caml_call1(Stdlib_Uchar[10], u), rem = o_rem(e);
    if(65536 <= u$0){
     if(4 <= rem){
      var j = e[4];
      e[4] = e[4] + 4 | 0;
      var s = e[3], k$0 = k, j$0 = j, s$0 = s;
     }
     else{
      t_range(e, 3);
      var k$0 = function(_F_){return t_flush(k, _F_);}, j$0 = 0, s$0 = e[6];
     }
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_byte(s$0, j$0, hi >>> 8 | 0);
     unsafe_set_byte(s$0, j$0 + 1 | 0, hi & 255);
     unsafe_set_byte(s$0, j$0 + 2 | 0, lo >>> 8 | 0);
     unsafe_set_byte(s$0, j$0 + 3 | 0, lo & 255);
     return k$0(e);
    }
    if(2 <= rem){
     var j$1 = e[4];
     e[4] = e[4] + 2 | 0;
     var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
    }
    else{
     t_range(e, 1);
     var k$1 = function(_E_){return t_flush(k, _E_);}, j$2 = 0, s$2 = e[6];
    }
    unsafe_set_byte(s$2, j$2, u$0 >>> 8 | 0);
    unsafe_set_byte(s$2, j$2 + 1 | 0, u$0 & 255);
    return k$1(e);
   }
   function encode_utf_16le(e, v){
    function k(e){e[9] = encode_utf_16le; return 17724;}
    if(typeof v === "number") return 1006505782 <= v ? k(e) : flush(k, e);
    var u = v[2], u$0 = caml_call1(Stdlib_Uchar[10], u), rem = o_rem(e);
    if(65536 <= u$0){
     if(4 <= rem){
      var j = e[4];
      e[4] = e[4] + 4 | 0;
      var s = e[3], k$0 = k, j$0 = j, s$0 = s;
     }
     else{
      t_range(e, 3);
      var k$0 = function(_D_){return t_flush(k, _D_);}, j$0 = 0, s$0 = e[6];
     }
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_byte(s$0, j$0, hi & 255);
     unsafe_set_byte(s$0, j$0 + 1 | 0, hi >>> 8 | 0);
     unsafe_set_byte(s$0, j$0 + 2 | 0, lo & 255);
     unsafe_set_byte(s$0, j$0 + 3 | 0, lo >>> 8 | 0);
     return k$0(e);
    }
    if(2 <= rem){
     var j$1 = e[4];
     e[4] = e[4] + 2 | 0;
     var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
    }
    else{
     t_range(e, 1);
     var k$1 = function(_C_){return t_flush(k, _C_);}, j$2 = 0, s$2 = e[6];
    }
    unsafe_set_byte(s$2, j$2, u$0 & 255);
    unsafe_set_byte(s$2, j$2 + 1 | 0, u$0 >>> 8 | 0);
    return k$1(e);
   }
   function encoder(encoding, dst){
    if(typeof dst === "number")
     var o_max = 0, o_pos = 1, o = Stdlib_Bytes[3];
    else
     var o$0 = caml_create_bytes(65536), o_max = 65535, o_pos = 0, o = o$0;
    var
     _B_ =
       143365725 <= encoding
        ? 684370880 <= encoding ? encode_utf_8 : encode_utf_16be
        : -211555818 <= encoding ? encode_utf_16le : encode_utf_16be;
    return [0,
            dst,
            encoding,
            o,
            o_pos,
            o_max,
            caml_create_bytes(4),
            1,
            0,
            _B_];
   }
   function encode(e, v){return caml_call2(e[9], e, v);}
   function encoder_encoding(e){return e[2];}
   function encoder_dst(e){return e[1];}
   var Manual = [0, src, dst, o_rem];
   function encoding_guess(s){
    var
     s$0 = caml_call1(Stdlib_Bytes[45], s),
     match =
       r_encoding
        (s$0, 0, caml_call2(Stdlib[17], caml_ml_bytes_length(s$0), 3)),
     _A_ = match[1];
    if(-211555818 === _A_){
     var d = match[2];
     return [0, -211555818, 3299808 === d ? 1 : 0];
    }
    if(684370880 <= _A_){
     var d$0 = match[2];
     return [0, 684370880, 3299808 === d$0 ? 1 : 0];
    }
    var d$1 = match[2];
    return [0, -211558048, 3299808 === d$1 ? 1 : 0];
   }
   function fold_utf_8(opt, len, f, acc, s){
    var pos = opt ? opt[1] : 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var
     last = (pos + len$0 | 0) - 1 | 0,
     s$0 = caml_call1(Stdlib_Bytes[45], s),
     acc$0 = acc,
     i = pos;
    for(;;){
     if(last < i) return acc$0;
     var need = utf_8_len[1 + caml_bytes_unsafe_get(s$0, i)];
     if(0 === need){
      var
       i$0 = i + 1 | 0,
       acc$1 = caml_call3(f, acc$0, i, malformed(s$0, i, 1));
      acc$0 = acc$1;
      i = i$0;
     }
     else{
      var rem = (last - i | 0) + 1 | 0;
      if(rem < need) return caml_call3(f, acc$0, i, malformed(s$0, i, rem));
      var
       i$1 = i + need | 0,
       acc$2 = caml_call3(f, acc$0, i, r_utf_8(s$0, i, need));
      acc$0 = acc$2;
      i = i$1;
     }
    }
   }
   function fold_utf_16be(opt, len, f, acc, s){
    var pos = opt ? opt[1] : 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var
     last = (pos + len$0 | 0) - 1 | 0,
     s$0 = caml_call1(Stdlib_Bytes[45], s),
     acc$0 = acc,
     i = pos;
    for(;;){
     if(last < i) return acc$0;
     var rem = (last - i | 0) + 1 | 0;
     if(2 > rem) return caml_call3(f, acc$0, i, malformed(s$0, i, 1));
     var v = r_utf_16(s$0, i, i + 1 | 0);
     if(659980059 <= v[1]){
      var i$0 = i + 2 | 0, acc$1 = caml_call3(f, acc$0, i, v);
      acc$0 = acc$1;
      i = i$0;
     }
     else{
      var hi = v[2];
      if(4 > rem) return caml_call3(f, acc$0, i, malformed(s$0, i, rem));
      var
       i$1 = i + 4 | 0,
       acc$2 =
         caml_call3(f, acc$0, i, r_utf_16_lo(hi, s$0, i + 2 | 0, i + 3 | 0));
      acc$0 = acc$2;
      i = i$1;
     }
    }
   }
   function fold_utf_16le(opt, len, f, acc, s){
    var pos = opt ? opt[1] : 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var
     last = (pos + len$0 | 0) - 1 | 0,
     s$0 = caml_call1(Stdlib_Bytes[45], s),
     acc$0 = acc,
     i = pos;
    for(;;){
     if(last < i) return acc$0;
     var rem = (last - i | 0) + 1 | 0;
     if(2 > rem) return caml_call3(f, acc$0, i, malformed(s$0, i, 1));
     var v = r_utf_16(s$0, i + 1 | 0, i);
     if(659980059 <= v[1]){
      var i$0 = i + 2 | 0, acc$1 = caml_call3(f, acc$0, i, v);
      acc$0 = acc$1;
      i = i$0;
     }
     else{
      var hi = v[2];
      if(4 > rem) return caml_call3(f, acc$0, i, malformed(s$0, i, rem));
      var
       i$1 = i + 4 | 0,
       acc$2 =
         caml_call3(f, acc$0, i, r_utf_16_lo(hi, s$0, i + 3 | 0, i + 2 | 0));
      acc$0 = acc$2;
      i = i$1;
     }
    }
   }
   var
    String = [0, encoding_guess, fold_utf_8, fold_utf_16be, fold_utf_16le],
    add_utf_8 = Stdlib_Buffer[13],
    add_utf_16be = Stdlib_Buffer[15],
    add_utf_16le = Stdlib_Buffer[14],
    Buffer = [0, add_utf_8, add_utf_16be, add_utf_16le],
    Uutf =
      [0,
       u_bom,
       u_rep,
       encoding_of_string,
       encoding_to_string,
       decoder,
       decode,
       decoder_encoding,
       set_decoder_encoding,
       decoder_line,
       decoder_col,
       decoder_byte_count,
       decoder_count,
       decoder_removed_bom,
       decoder_src,
       decoder_nln,
       pp_decode,
       encoder,
       encode,
       encoder_encoding,
       encoder_dst,
       Manual,
       String,
       Buffer];
   runtime.caml_register_global(66, Uutf, "Uutf");
   return;
  }
  (globalThis));

//# 5 "../.js/default/otfm/otfm.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst = "@ ",
    cst_Invalid = "Invalid",
    cst_Unicode = "Unicode",
    cst_Unknown = "Unknown",
    cst_are = "are",
    cst_code = "code",
    cst_in = "in",
    cst_offset_table = "offset table",
    cst_point = "point",
    cst_table_directory = "table directory",
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    acc = [0, 0, 0],
    unix_epoch = runtime.caml_int64_create_lo_mi_hi(2470016, 124, 0),
    partial = [17, [0, cst, 1, 0], [11, "supported", [17, 0, 0]]],
    partial$0 = [15, [11, ", ", [15, [12, 41, [17, 0, 0]]]]],
    partial$1 = [17, 0, 0],
    partial$2 = [15, [12, 41, [17, 0, 0]]],
    partial$3 = [15, [17, 0, 0]],
    partial$4 = [17, 0, 0],
    partial$5 = [17, 0, 0],
    partial$6 = [17, 0, 0],
    partial$7 = [17, 0, 0],
    lcid_to_bcp47 =
      caml_list_of_js_array
       ([[0, 1025, "ar-sa"],
         [0, 1026, "bg-bg"],
         [0, 1027, "ca-es"],
         [0, 1028, "zh-tw"],
         [0, 1029, "cs-cz"],
         [0, 1030, "da-dk"],
         [0, 1031, "de-de"],
         [0, 1032, "el-gr"],
         [0, 1033, "en-us"],
         [0, 1034, "es-es_tradnl"],
         [0, 1035, "fi-fi"],
         [0, 1036, "fr-fr"],
         [0, 1037, "he-il"],
         [0, 1037, "he"],
         [0, 1038, "hu-hu"],
         [0, 1038, "hu"],
         [0, 1039, "is-is"],
         [0, 1040, "it-it"],
         [0, 1041, "ja-jp"],
         [0, 1042, "ko-kr"],
         [0, 1043, "nl-nl"],
         [0, 1044, "nb-no"],
         [0, 1045, "pl-pl"],
         [0, 1046, "pt-br"],
         [0, 1047, "rm-ch"],
         [0, 1048, "ro-ro"],
         [0, 1049, "ru-ru"],
         [0, 1050, "hr-hr"],
         [0, 1051, "sk-sk"],
         [0, 1052, "sq-al"],
         [0, 1053, "sv-se"],
         [0, 1054, "th-th"],
         [0, 1055, "tr-tr"],
         [0, 1056, "ur-pk"],
         [0, 1057, "id-id"],
         [0, 1058, "uk-ua"],
         [0, 1059, "be-by"],
         [0, 1060, "sl-si"],
         [0, 1061, "et-ee"],
         [0, 1062, "lv-lv"],
         [0, 1063, "lt-lt"],
         [0, 1064, "tg-cyrl-tj"],
         [0, 1065, "fa-ir"],
         [0, 1066, "vi-vn"],
         [0, 1067, "hy-am"],
         [0, 1068, "az-latn-az"],
         [0, 1069, "eu-es"],
         [0, 1070, "hsb-de"],
         [0, 1071, "mk-mk"],
         [0, 1074, "tn-za"],
         [0, 1076, "xh-za"],
         [0, 1077, "zu-za"],
         [0, 1078, "af-za"],
         [0, 1079, "ka-ge"],
         [0, 1080, "fo-fo"],
         [0, 1081, "hi-in"],
         [0, 1082, "mt-mt"],
         [0, 1083, "se-no"],
         [0, 1086, "ms-my"],
         [0, 1087, "kk-kz"],
         [0, 1088, "ky-kg"],
         [0, 1089, "sw-ke"],
         [0, 1090, "tk-tm"],
         [0, 1091, "uz-latn-uz"],
         [0, 1091, "uz"],
         [0, 1092, "tt-ru"],
         [0, 1093, "bn-in"],
         [0, 1094, "pa-in"],
         [0, 1095, "gu-in"],
         [0, 1096, "or-in"],
         [0, 1097, "ta-in"],
         [0, 1098, "te-in"],
         [0, 1099, "kn-in"],
         [0, 1100, "ml-in"],
         [0, 1101, "as-in"],
         [0, 1102, "mr-in"],
         [0, 1103, "sa-in"],
         [0, 1104, "mn-cyrl"],
         [0, 1105, "bo-cn"],
         [0, 1106, "cy-gb"],
         [0, 1107, "km-kh"],
         [0, 1108, "lo-la"],
         [0, 1110, "gl-es"],
         [0, 1111, "kok-in"],
         [0, 1114, "syr-sy"],
         [0, 1115, "si-lk"],
         [0, 1117, "iu-cans-ca"],
         [0, 1118, "am-et"],
         [0, 1121, "ne-np"],
         [0, 1122, "fy-nl"],
         [0, 1123, "ps-af"],
         [0, 1124, "fil-ph"],
         [0, 1125, "dv-mv"],
         [0, 1128, "ha-latn-ng"],
         [0, 1130, "yo-ng"],
         [0, 1131, "quz-bo"],
         [0, 1132, "nso-za"],
         [0, 1133, "ba-ru"],
         [0, 1134, "lb-lu"],
         [0, 1135, "kl-gl"],
         [0, 1136, "ig-ng"],
         [0, 1144, "ii-cn"],
         [0, 1146, "arn-cl"],
         [0, 1148, "moh-ca"],
         [0, 1150, "br-fr"],
         [0, 1152, "ug-cn"],
         [0, 1153, "mi-nz"],
         [0, 1154, "oc-fr"],
         [0, 1155, "co-fr"],
         [0, 1156, "gsw-fr"],
         [0, 1157, "sah-ru"],
         [0, 1158, "qut-gt"],
         [0, 1159, "rw-rw"],
         [0, 1160, "wo-sn"],
         [0, 1164, "prs-af"],
         [0, 1169, "gd-gb"],
         [0, 2049, "ar-iq"],
         [0, 2052, "zh-hans"],
         [0, 2055, "de-ch"],
         [0, 2057, "en-gb"],
         [0, 2058, "es-mx"],
         [0, 2060, "fr-be"],
         [0, 2064, "it-ch"],
         [0, 2067, "nl-be"],
         [0, 2068, "nn-no"],
         [0, 2070, "pt-pt"],
         [0, 2074, "sr-latn-cs"],
         [0, 2077, "sv-fi"],
         [0, 2092, "az-cyrl-az"],
         [0, 2094, "dsb-de"],
         [0, 2094, "dsb"],
         [0, 2107, "se-se"],
         [0, 2108, "ga-ie"],
         [0, 2110, "ms-bn"],
         [0, 2115, "uz-cyrl-uz"],
         [0, 2117, "bn-bd"],
         [0, 2128, "mn-mong-cn"],
         [0, 2141, "iu-latn-ca"],
         [0, 2143, "tzm-latn-dz"],
         [0, 2155, "quz-ec"],
         [0, 3073, "ar-eg"],
         [0, 3076, "zh-hant"],
         [0, 3079, "de-at"],
         [0, 3081, "en-au"],
         [0, 3082, "es-es"],
         [0, 3084, "fr-ca"],
         [0, 3098, "sr-cyrl-cs"],
         [0, 3131, "se-fi"],
         [0, 3179, "quz-pe"],
         [0, 4097, "ar-ly"],
         [0, 4100, "zh-sg"],
         [0, 4103, "de-lu"],
         [0, 4105, "en-ca"],
         [0, 4106, "es-gt"],
         [0, 4108, "fr-ch"],
         [0, 4122, "hr-ba"],
         [0, 4155, "smj-no"],
         [0, 5121, "ar-dz"],
         [0, 5124, "zh-mo"],
         [0, 5127, "de-li"],
         [0, 5129, "en-nz"],
         [0, 5130, "es-cr"],
         [0, 5132, "fr-lu"],
         [0, 5146, "bs-latn-ba"],
         [0, 5146, "bs"],
         [0, 5179, "smj-se"],
         [0, 5179, "smj"],
         [0, 6145, "ar-ma"],
         [0, 6153, "en-ie"],
         [0, 6154, "es-pa"],
         [0, 6156, "fr-mc"],
         [0, 6170, "sr-latn-ba"],
         [0, 6203, "sma-no"],
         [0, 7169, "ar-tn"],
         [0, 7177, "en-za"],
         [0, 7178, "es-do"],
         [0, 7194, "sr-cyrl-ba"],
         [0, 7227, "sma-se"],
         [0, 7227, "sma"],
         [0, 8193, "ar-om"],
         [0, 8201, "en-jm"],
         [0, 8202, "es-ve"],
         [0, 8218, "bs-cyrl-ba"],
         [0, 8218, "bs-cyrl"],
         [0, 8251, "sms-fi"],
         [0, 8251, "sms"],
         [0, 9217, "ar-ye"],
         [0, 9225, "en-029"],
         [0, 9226, "es-co"],
         [0, 9242, "sr-latn-rs"],
         [0, 9275, "smn-fi"],
         [0, 10241, "ar-sy"],
         [0, 10249, "en-bz"],
         [0, 10250, "es-pe"],
         [0, 10266, "sr-cyrl-rs"],
         [0, 11265, "ar-jo"],
         [0, 11273, "en-tt"],
         [0, 11274, "es-ar"],
         [0, 11290, "sr-latn-me"],
         [0, 12289, "ar-lb"],
         [0, 12297, "en-zw"],
         [0, 12298, "es-ec"],
         [0, 12314, "sr-cyrl-me"],
         [0, 13313, "ar-kw"],
         [0, 13321, "en-ph"],
         [0, 13322, "es-cl"],
         [0, 14337, "ar-ae"],
         [0, 14346, "es-uy"],
         [0, 15361, "ar-bh"],
         [0, 15370, "es-py"],
         [0, 16385, "ar-qa"],
         [0, 16393, "en-in"],
         [0, 16394, "es-bo"],
         [0, 17417, "en-my"],
         [0, 17418, "es-sv"],
         [0, 18441, "en-sg"],
         [0, 18442, "es-hn"],
         [0, 19466, "es-ni"],
         [0, 20490, "es-pr"],
         [0, 21514, "es-us"]]),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Uutf = global_data.Uutf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Printf = global_data.Stdlib__Printf,
    pp = Stdlib_Format[143],
    cmap = 1668112752,
    head = 1751474532,
    hhea = 1751672161,
    hmtx = 1752003704,
    maxp = 1835104368,
    name = 1851878757,
    os2 = 1330851634,
    glyf = 1735162214,
    loca = 1819239265,
    kern = 1801810542,
    _a_ =
      [0,
       [11, "invalid OpenType tag (", [3, 0, [12, 41, 0]]],
       "invalid OpenType tag (%S)"],
    _b_ = [0, [0, [0, [0, [0, 0]]]], "%c%c%c%c"];
   function of_bytes(s){
    if(4 === caml_ml_string_length(s)){
     var
      _a8_ = caml_string_get(s, 1),
      s0 = caml_string_get(s, 0) << 8 | _a8_,
      _a9_ = caml_string_get(s, 3),
      s1 = caml_string_get(s, 2) << 8 | _a9_;
     return s0 << 16 | s1;
    }
    var _a7_ = caml_call2(Stdlib_Printf[4], _a_, s);
    return caml_call1(Stdlib[1], _a7_);
   }
   function to_bytes(t){
    var
     c0 = caml_call1(Stdlib_Char[1], t >> 24),
     c1 = caml_call1(Stdlib_Char[1], t >> 16 & 255),
     c2 = caml_call1(Stdlib_Char[1], t >> 8 & 255),
     c3 = caml_call1(Stdlib_Char[1], t & 255);
    return caml_call5(Stdlib_Printf[4], _b_, c0, c1, c2, c3);
   }
   function to_int32(x){return x;}
   function of_int32(x){return x;}
   var
    compare = runtime.caml_int_compare,
    v_OTTO = 1330926671,
    v_ttcf = 1953784678,
    v_true = 1953658213,
    _c_ = [0, [12, 39, [2, 0, [12, 39, 0]]], "'%s'"],
    _d_ = [0, [11, "U+", [4, 8, [0, 2, 4], 0, 0]], "U+%04X"],
    _e_ = [0, [11, cst_offset_table, 0], cst_offset_table],
    _f_ = [0, [11, cst_table_directory, 0], cst_table_directory],
    _g_ = [0, [11, "table ", [15, 0]], "table %a"],
    _h_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         "True",
         [17,
          [0, cst, 1, 0],
          [11,
           "Type",
           [17,
            [0, cst, 1, 0],
            [11,
             "collections (TTC)",
             [17,
              [0, cst, 1, 0],
              [11, cst_are, [17, [0, cst, 1, 0], [11, "not", partial]]]]]]]]]],
       "@[True@ Type@ collections (TTC)@ are@ not@ supported@]"],
    _i_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         "Unsupported",
         [17,
          [0, cst, 1, 0],
          [11,
           "glyf",
           [17,
            [0, cst, 1, 0],
            [11,
             "matching",
             [17, [0, cst, 1, 0], [11, "points)", [17, 0, 0]]]]]]]]],
       "@[Unsupported@ glyf@ matching@ points)@]"],
    _j_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         "Missing",
         [17,
          [0, cst, 1, 0],
          [11,
           "required",
           [17, [0, cst, 1, 0], [11, "table (", [15, [12, 41, [17, 0, 0]]]]]]]]],
       "@[Missing@ required@ table (%a)@]"],
    _k_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         cst_Invalid,
         [17,
          [0, cst, 1, 0],
          [11,
           cst_Unicode,
           [17,
            [0, cst, 1, 0],
            [11,
             cst_code,
             [17,
              [0, cst, 1, 0],
              [11,
               cst_point,
               [17, [0, cst, 1, 0], [11, "range (", partial$0]]]]]]]]]],
       "@[Invalid@ Unicode@ code@ point@ range (%a, %a)@]"],
    _l_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         cst_Unknown,
         [17,
          [0, cst, 1, 0],
          [11,
           "version (",
           [5,
            8,
            0,
            0,
            [12,
             41,
             [17,
              [0, cst, 1, 0],
              [11, cst_in, [17, [0, cst, 1, 0], [15, partial$1]]]]]]]]]],
       "@[Unknown@ version (%lX)@ in@ %a@]"],
    _m_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         cst_Unknown,
         [17,
          [0, cst, 1, 0],
          [11,
           "OpenType",
           [17, [0, cst, 1, 0], [11, "flavour (", [15, [12, 41, [17, 0, 0]]]]]]]]],
       "@[Unknown@ OpenType@ flavour (%a)@]"],
    _n_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         cst_Invalid,
         [17,
          [0, cst, 1, 0],
          [11,
           cst_Unicode,
           [17,
            [0, cst, 1, 0],
            [11,
             cst_code,
             [17,
              [0, cst, 1, 0],
              [11, cst_point, [17, [0, cst, 1, 0], [12, 40, partial$2]]]]]]]]]],
       "@[Invalid@ Unicode@ code@ point@ (%a)@]"],
    _o_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         "Unexpected",
         [17,
          [0, cst, 1, 0],
          [11,
           "end",
           [17,
            [0, cst, 1, 0],
            [11,
             "of",
             [17,
              [0, cst, 1, 0],
              [11, "input", [17, [0, cst, 1, 0], [11, "in ", partial$3]]]]]]]]]],
       "@[Unexpected@ end@ of@ input@ in %a@]"],
    _p_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         cst_Unknown,
         [17,
          [0, cst, 1, 0],
          [11,
           "loca table format (",
           [4,
            0,
            0,
            0,
            [12,
             41,
             [17,
              [0, cst, 1, 0],
              [11, cst_in, [17, [0, cst, 1, 0], [15, partial$7]]]]]]]]]],
       "@[Unknown@ loca table format (%d)@ in@ %a@]"],
    _q_ = [0, [12, 44, [17, [0, cst, 1, 0], 0]], ",@ "],
    _r_ =
      [0,
       [12,
        40,
        [4,
         0,
         0,
         0,
         [12, 44, [4, 0, 0, 0, [12, 44, [4, 0, 0, 0, [12, 41, 0]]]]]]],
       "(%d,%d,%d)"],
    _s_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         "All",
         [17,
          [0, cst, 1, 0],
          [11,
           "cmaps:",
           [17,
            [0, cst, 1, 0],
            [15,
             [17,
              [0, cst, 1, 0],
              [11,
               cst_are,
               [17, [0, cst, 1, 0], [11, "unsupported", partial$4]]]]]]]]]],
       "@[All@ cmaps:@ %a@ are@ unsupported@]"],
    _t_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         cst_Invalid,
         [17,
          [0, cst, 1, 0],
          [11,
           "offset (",
           [4,
            0,
            0,
            0,
            [12,
             41,
             [17,
              [0, cst, 1, 0],
              [11, cst_in, [17, [0, cst, 1, 0], [15, partial$5]]]]]]]]]],
       "@[Invalid@ offset (%d)@ in@ %a@]"],
    _u_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         cst_Unknown,
         [17,
          [0, cst, 1, 0],
          [11,
           "composite glyph format (",
           [4,
            0,
            0,
            0,
            [12,
             41,
             [17,
              [0, cst, 1, 0],
              [11, cst_in, [17, [0, cst, 1, 0], [15, partial$6]]]]]]]]]],
       "@[Unknown@ composite glyph format (%d)@ in@ %a@]"],
    _v_ =
      [0,
       [18,
        [1, [0, 0, cst$0]],
        [11,
         cst_Invalid,
         [17,
          [0, cst, 1, 0],
          [11,
           "PostScript",
           [17, [0, cst, 1, 0], [11, "name (", [3, 0, [12, 41, [17, 0, 0]]]]]]]]],
       "@[Invalid@ PostScript@ name (%S)@]"],
    _w_ = [0, 0],
    _x_ = [0, 0],
    _y_ = [0, 0],
    _z_ = [0, 0],
    _A_ = [0, 0],
    _B_ = [0, 0],
    _C_ = [0, 0],
    _D_ = [1, -35348775],
    _E_ = [0, 0],
    _F_ = [0, 0],
    _G_ = [0, 0],
    _H_ = [0, "src/otfm.ml", 532, 65],
    _I_ = [0, 0],
    _J_ = [0, 0],
    _K_ = [0, 0],
    _L_ = [0, 0],
    cst_und = "und",
    _M_ = [0, 0],
    _N_ = [0, 0],
    _O_ = [0, 0],
    _P_ = [0, 0],
    _Q_ = [0, 0],
    _R_ = [0, 0],
    dummy = 0;
   function pp$0(ppf, t){return caml_call3(pp, ppf, _c_, to_bytes(t));}
   function is_cp(i){
    var _a5_ = 0 <= i ? 1 : 0, _a6_ = _a5_ ? i <= 1114111 ? 1 : 0 : _a5_;
    return _a6_;
   }
   function pp_cp(ppf, cp){
    return caml_call3(Stdlib_Format[143], ppf, _d_, cp);
   }
   function pp_ctx(ppf, param){
    if(typeof param === "number")
     return -230993086 <= param
             ? caml_call2(pp, ppf, _e_)
             : caml_call2(pp, ppf, _f_);
    var tag = param[2];
    return caml_call4(pp, ppf, _g_, pp$0, tag);
   }
   function pp_error(ppf, param){
    if(typeof param === "number")
     return -35348775 <= param
             ? caml_call2(pp, ppf, _h_)
             : caml_call2(pp, ppf, _i_);
    var _a3_ = param[1];
    if(-95440847 <= _a3_){
     if(243759772 > _a3_){
      if(-36074923 <= _a3_){
       var u = param[2];
       return caml_call4(pp, ppf, _n_, pp_cp, u);
      }
      var ctx$0 = param[2];
      return caml_call4(pp, ppf, _o_, pp_ctx, ctx$0);
     }
     if(658793747 <= _a3_){
      if(836297223 <= _a3_){
       var tag = param[2];
       return caml_call4(pp, ppf, _j_, pp$0, tag);
      }
      var match = param[2], u1 = match[2], u0 = match[1];
      return caml_call6(pp, ppf, _k_, pp_cp, u0, pp_cp, u1);
     }
     if(590284291 <= _a3_){
      var match$0 = param[2], v = match$0[2], ctx = match$0[1];
      return caml_call5(pp, ppf, _l_, v, pp_ctx, ctx);
     }
     var tag$0 = param[2];
     return caml_call4(pp, ppf, _m_, pp$0, tag$0);
    }
    if(-957602944 === _a3_){
     var match$1 = param[2], v$0 = match$1[2], ctx$1 = match$1[1];
     return caml_call5(pp, ppf, _p_, v$0, pp_ctx, ctx$1);
    }
    if(-377503941 <= _a3_){
     if(-351472176 <= _a3_){
      var maps = param[2];
      return caml_call4
              (pp,
               ppf,
               _s_,
               function(ppf, param$0){
                var param = param$0;
                for(;;){
                 if(! param) return 0;
                 var
                  vs = param[2],
                  v = param[1],
                  fmt = v[3],
                  eid = v[2],
                  pid = v[1];
                 caml_call5(pp, ppf, _r_, pid, eid, fmt);
                 var _a4_ = 0 !== vs ? 1 : 0;
                 if(! _a4_) return _a4_;
                 caml_call2(pp, ppf, _q_);
                 param = vs;
                }
               },
               maps);
     }
     var match$2 = param[2], o = match$2[2], ctx$2 = match$2[1];
     return caml_call5(pp, ppf, _t_, o, pp_ctx, ctx$2);
    }
    if(-938550428 <= _a3_){
     var match$3 = param[2], v$1 = match$3[2], ctx$3 = match$3[1];
     return caml_call5(pp, ppf, _u_, v$1, pp_ctx, ctx$3);
    }
    var n = param[2];
    return caml_call3(pp, ppf, _v_, n);
   }
   function decoder_src(d){return [0, -976970511, d[1]];}
   function decoder(src){
    var s = src[2], i_max = caml_ml_string_length(s) - 1 | 0;
    return [0,
            s,
            0,
            i_max,
            0,
            389604418,
            -230993086,
            4196038,
            0,
            -1,
            -1,
            -1,
            caml_call1(Stdlib_Buffer[1], 253)];
   }
   function err_eoi(d){return [1, [0, -95440847, d[6]]];}
   function err_version(d, v){return [1, [0, 590284291, [0, d[6], v]]];}
   function set_ctx(d, ctx){d[6] = ctx;}
   function miss(d, count){
    return ((d[3] - d[2] | 0) + 1 | 0) < count ? 1 : 0;
   }
   function seek_pos(pos, d){
    if(d[3] < pos){var e = [0, -377503941, [0, d[6], pos]]; return [1, e];}
    d[2] = pos;
    return _w_;
   }
   function seek_table_pos(pos, d){return seek_pos(d[4] + pos | 0, d);}
   function seek_table(tag, d, param){
    try{
     var
      match =
        caml_call2
         (Stdlib_List[39],
          function(param){var t = param[1]; return caml_equal(tag, t);},
          d[8]),
      len = match[3],
      pos = match[2];
     if(d[3] < pos)
      var e = [0, -377503941, [0, [0, 504440814, tag], pos]], _a1_ = [1, e];
     else{
      set_ctx(d, [0, 504440814, tag]);
      d[4] = pos;
      d[2] = pos;
      var _a1_ = [0, [0, len]];
     }
     return _a1_;
    }
    catch(_a2_){
     var _a0_ = caml_wrap_exception(_a2_);
     if(_a0_ === Stdlib[8]) return _x_;
     throw caml_maybe_attach_backtrace(_a0_, 0);
    }
   }
   function seek_required_table(tag, d, param){
    var e = seek_table(tag, d, 0);
    if(0 !== e[0]) return e;
    if(e[1]) return _y_;
    var e$0 = [0, 836297223, tag];
    return [1, e$0];
   }
   function d_skip(len, d){
    return miss(d, len) ? err_eoi(d) : (d[2] = d[2] + len | 0, _z_);
   }
   function raw_byte(d){
    var j = d[2];
    d[2] = d[2] + 1 | 0;
    var s = d[1];
    return runtime.caml_string_unsafe_get(s, j);
   }
   function d_bytes(len, d){
    if(miss(d, len)) return err_eoi(d);
    var start = d[2];
    d[2] = d[2] + len | 0;
    return [0, caml_call3(Stdlib_String[16], d[1], start, len)];
   }
   function d_uint8(d){return miss(d, 1) ? err_eoi(d) : [0, raw_byte(d)];}
   function d_int8(d){
    var e = d_uint8(d);
    if(0 !== e[0]) return e;
    var i = e[1], _aZ_ = 127 < i ? i - 256 | 0 : i;
    return [0, _aZ_];
   }
   function d_uint16(d){
    if(miss(d, 2)) return err_eoi(d);
    var b0 = raw_byte(d), b1 = raw_byte(d);
    return [0, b0 << 8 | b1];
   }
   function d_int16(d){
    var e = d_uint16(d);
    if(0 !== e[0]) return e;
    var i = e[1], _aY_ = 32767 < i ? i - 65536 | 0 : i;
    return [0, _aY_];
   }
   function d_uint32(d){
    if(miss(d, 4)) return err_eoi(d);
    var
     b0 = raw_byte(d),
     b1 = raw_byte(d),
     b2 = raw_byte(d),
     b3 = raw_byte(d),
     s0 = b0 << 8 | b1,
     s1 = b2 << 8 | b3;
    return [0, s0 << 16 | s1];
   }
   function d_uint32_int(d){
    if(miss(d, 4)) return err_eoi(d);
    var
     b0 = raw_byte(d),
     b1 = raw_byte(d),
     b2 = raw_byte(d),
     b3 = raw_byte(d),
     s0 = b0 << 8 | b1,
     s1 = b2 << 8 | b3;
    return [0, s0 << 16 | s1];
   }
   function d_time(d){
    if(miss(d, 8)) return err_eoi(d);
    var
     b0 = raw_byte(d),
     b1 = raw_byte(d),
     b2 = raw_byte(d),
     b3 = raw_byte(d),
     b4 = raw_byte(d),
     b5 = raw_byte(d),
     b6 = raw_byte(d),
     b7 = raw_byte(d),
     s0 = caml_int64_of_int32(b0 << 8 | b1),
     s1 = caml_int64_of_int32(b2 << 8 | b3),
     s2 = caml_int64_of_int32(b4 << 8 | b5),
     s3 = caml_int64_of_int32(b6 << 8 | b7),
     v =
       caml_int64_or
        (caml_int64_shift_left(s0, 48),
         caml_int64_or
          (caml_int64_shift_left(s1, 32),
           caml_int64_or(caml_int64_shift_left(s2, 16), s3)));
    return [0,
            runtime.caml_int64_to_float(runtime.caml_int64_sub(v, unix_epoch))];
   }
   function d_f2dot14(d){
    var e = d_int16(d);
    if(0 !== e[0]) return e;
    var v = e[1];
    return [0, v / 16384.];
   }
   function d_utf_16be(len, d){
    var e = d_bytes(len, d);
    if(0 !== e[0]) return e;
    var s = e[1];
    function add_utf_8(b, i, param){
     var param$0 = param;
     for(;;){
      if(852405675 <= param$0[1]){
       var u = param$0[2];
       caml_call2(Uutf[23][1], b, u);
       return b;
      }
      param$0 = [0, 852405675, Uutf[2]];
     }
    }
    caml_call1(Stdlib_Buffer[8], d[12]);
    var _aX_ = caml_call5(Uutf[22][3], 0, 0, add_utf_8, d[12], s);
    return [0, caml_call1(Stdlib_Buffer[2], _aX_)];
   }
   function d_table_records$0(counter, d, count){
    if(0 === count){d[5] = -102231997; return _A_;}
    var x$2 = d_uint32(d);
    if(1 === x$2[0]) return x$2;
    var tag = x$2[1], x$1 = d_skip(4, d);
    if(1 === x$1[0]) return x$1;
    var x$0 = d_uint32_int(d);
    if(1 === x$0[0]) return x$0;
    var off = x$0[1], x = d_uint32_int(d);
    if(1 === x[0]) return x;
    var len = x[1];
    d[8] = [0, [0, tag, off, len], d[8]];
    var _aW_ = count - 1 | 0;
    if(counter >= 50)
     return caml_trampoline_return(d_table_records$0, [0, d, _aW_]);
    var counter$0 = counter + 1 | 0;
    return d_table_records$0(counter$0, d, _aW_);
   }
   function d_table_records(d, count){
    return caml_trampoline(d_table_records$0(0, d, count));
   }
   function init_decoder(d){
    var match = d[5];
    if(typeof match !== "number"){var e$0 = match[2]; return [1, e$0];}
    if(389604418 > match){d[6] = -631829604; return _E_;}
    var x = d_uint32(d);
    if(1 === x[0])
     var x$0 = x;
    else{
     var v = x[1];
     a:
     if(caml_equal(v, v_OTTO)){
      d[7] = 3347523;
      var _aV_ = _B_;
     }
     else{
      if(! caml_equal(v, v_true) && ! caml_equal(v, 65536)){
       if(caml_equal(v, v_ttcf)){var _aV_ = _D_; break a;}
       var _aV_ = [1, [0, 243759772, v]];
       break a;
      }
      d[7] = 4196038;
      var _aV_ = _C_;
     }
     var x$0 = _aV_;
    }
    if(1 === x$0[0])
     var ok = x$0;
    else{
     var x$2 = d_uint16(d);
     if(1 === x$2[0])
      var _aU_ = x$2;
     else
      var
       count = x$2[1],
       x$1 = d_skip(6, d),
       _aU_ =
         1 === x$1[0]
          ? x$1
          : (set_ctx(d, -631829604), d_table_records(d, count));
     var ok = _aU_;
    }
    if(0 === ok[0]) return ok;
    var e = ok[1];
    d[5] = [0, 243443684, e];
    return [1, e];
   }
   function flavour(d){
    var x = init_decoder(d);
    return 1 === x[0] ? x : [0, d[7]];
   }
   function table_list(d){
    var x = init_decoder(d);
    return 1 === x[0]
            ? x
            : [0,
              caml_call2
               (Stdlib_List[22],
                function(param){var t = param[1]; return t;},
                d[8])];
   }
   function table_mem(d, tag){
    var x = init_decoder(d);
    return 1 === x[0]
            ? x
            : [0,
              caml_call2
               (Stdlib_List[34],
                function(param){var t = param[1]; return caml_equal(tag, t);},
                d[8])];
   }
   function table_raw(d, tag){
    var x$0 = init_decoder(d);
    if(1 === x$0[0])
     var x$1 = x$0;
    else
     var v$0 = x$0[1], x$1 = seek_table(tag, d, v$0);
    if(1 === x$1[0]) return x$1;
    var v = x$1[1];
    if(! v) return _F_;
    var len = v[1], x = d_bytes(len, d);
    if(1 === x[0]) return x;
    var bytes = x[1];
    return [0, [0, bytes]];
   }
   function glyph_count(d){
    var x$1 = init_decoder(d);
    if(1 === x$1[0])
     var x$2 = x$1;
    else
     var v = x$1[1], x$2 = seek_required_table(maxp, d, v);
    if(1 === x$2[0]) return x$2;
    var x$0 = d_skip(4, d);
    if(1 === x$0[0]) return x$0;
    var x = d_uint16(d);
    if(1 === x[0]) return x;
    var count = x[1];
    return [0, count];
   }
   function postscript_name(d){
    var x$2 = init_decoder(d);
    if(1 === x$2[0])
     var x$3 = x$2;
    else
     var v = x$2[1], x$3 = seek_required_table(name, d, v);
    if(1 === x$3[0]) return x$3;
    var x$1 = d_uint16(d);
    if(1 === x$1[0]) return x$1;
    var version = x$1[1];
    if(1 < version) return err_version(d, version);
    var x$0 = d_uint16(d);
    if(1 === x$0[0]) return x$0;
    var ncount = x$0[1], x = d_uint16(d);
    if(1 === x[0]) return x;
    var soff = x[1];
    function loop$0(counter, ncount, param){
     if(0 === ncount) return _G_;
     var ncount$0 = ncount - 1 | 0;
     function look_for(the_eid, the_lid, decode){
      var x$8 = d_uint16(d);
      if(1 === x$8[0]) return x$8;
      var eid = x$8[1];
      if(eid !== the_eid){
       var x = d_skip(8, d);
       if(1 === x[0]) return x;
       var v$1 = x[1];
       return loop(ncount$0, v$1);
      }
      var x$7 = d_uint16(d);
      if(1 === x$7[0]) return x$7;
      var lid = x$7[1];
      if(lid !== the_lid){
       var x$0 = d_skip(6, d);
       if(1 === x$0[0]) return x$0;
       var v$0 = x$0[1];
       return loop(ncount$0, v$0);
      }
      var x$6 = d_uint16(d);
      if(1 === x$6[0]) return x$6;
      var nid = x$6[1];
      if(6 !== nid){
       var x$5 = d_skip(4, d);
       if(1 === x$5[0]) return x$5;
       var v = x$5[1];
       return loop(ncount$0, v);
      }
      var x$4 = d_uint16(d);
      if(1 === x$4[0]) return x$4;
      var len = x$4[1], x$3 = d_uint16(d);
      if(1 === x$3[0]) return x$3;
      var off = x$3[1], x$2 = seek_table_pos(soff + off | 0, d);
      if(1 === x$2[0]) return x$2;
      var x$1 = caml_call2(decode, len, d);
      if(1 === x$1[0]) return x$1;
      var name = x$1[1];
      function invalid(name){return [1, [0, -1005112521, name]];}
      var name_len = caml_ml_string_length(name);
      if(63 < name_len) return invalid(name);
      try{
       var _aP_ = name_len - 1 | 0, _aO_ = 0;
       if(_aP_ >= 0){
        var i = _aO_;
        for(;;){
         var d$0 = caml_string_get(name, i);
         if(33 <= d$0 && 126 >= d$0){
          a:
          {
           if(93 <= d$0){
            var _aR_ = d$0 - 94 | 0;
            if(30 < _aR_ >>> 0){
             if(32 <= _aR_) break a;
            }
            else if(29 !== _aR_) break a;
           }
           else
            if(63 <= d$0){
             if(91 !== d$0) break a;
            }
            else{
             if(37 > d$0) break a;
             switch(d$0 - 37 | 0){
               case 0:
               case 3:
               case 4:
               case 10:
               case 23:
               case 25: break;
               default: break a;
             }
            }
           throw caml_maybe_attach_backtrace(Stdlib[3], 1);
          }
          var _aS_ = i + 1 | 0;
          if(_aP_ === i) break;
          i = _aS_;
          continue;
         }
         throw caml_maybe_attach_backtrace(Stdlib[3], 1);
        }
       }
       var _aQ_ = [0, [0, name]];
       return _aQ_;
      }
      catch(_aT_){
       var _aN_ = caml_wrap_exception(_aT_);
       if(_aN_ === Stdlib[3]) return invalid(name);
       throw caml_maybe_attach_backtrace(_aN_, 0);
      }
     }
     var x$0 = d_uint16(d);
     if(1 === x$0[0]) return x$0;
     var v$0 = x$0[1], switcher = v$0 - 1 | 0;
     if(2 >= switcher >>> 0)
      switch(switcher){
        case 0:
         return look_for(0, 0, d_bytes);
        case 1: break;
        default: return look_for(1, 1033, d_utf_16be);
      }
     var _aM_ = ncount - 1 | 0, x = d_skip(10, d);
     if(1 === x[0]) return x;
     var v = x[1];
     if(counter >= 50) return caml_trampoline_return(loop$0, [0, _aM_, v]);
     var counter$0 = counter + 1 | 0;
     return loop$0(counter$0, _aM_, v);
    }
    function loop(ncount, param){
     return caml_trampoline(loop$0(0, ncount, param));
    }
    return loop(ncount, 0);
   }
   function d_array$0(counter, el, count, i, a, d){
    if(i === count) return [0, a];
    var x = caml_call1(el, d);
    if(1 === x[0]) return x;
    var v = x[1];
    caml_check_bound(a, i)[1 + i] = v;
    var _aL_ = i + 1 | 0;
    if(counter >= 50)
     return caml_trampoline_return(d_array$0, [0, el, count, _aL_, a, d]);
    var counter$0 = counter + 1 | 0;
    return d_array$0(counter$0, el, count, _aL_, a, d);
   }
   function d_array(el, count, i, a, d){
    return caml_trampoline(d_array$0(0, el, count, i, a, d));
   }
   function d_cmap_4(cmap, d, f, acc, param){
    var x$6 = d_skip(6, d);
    if(1 === x$6[0]) return x$6;
    var x$5 = d_uint16(d);
    if(1 === x$5[0]) return x$5;
    var count2 = x$5[1], count = count2 / 2 | 0, x$4 = d_skip(6, d);
    if(1 === x$4[0]) return x$4;
    var x$3 = d_array(d_uint16, count, 0, caml_array_make(count, 0), d);
    if(1 === x$3[0]) return x$3;
    var u1s = x$3[1], x$2 = d_skip(2, d);
    if(1 === x$2[0]) return x$2;
    var x$1 = d_array(d_uint16, count, 0, caml_array_make(count, 0), d);
    if(1 === x$1[0]) return x$1;
    var
     u0s = x$1[1],
     x$0 = d_array(d_int16, count, 0, caml_array_make(count, 0), d);
    if(1 === x$0[0]) return x$0;
    var
     delta = x$0[1],
     x = d_array(d_uint16, count, 0, caml_array_make(count, 0), d);
    if(1 === x[0]) return x;
    var offset = x[1], garray_pos = d[2];
    function loop$0(counter, acc, i){
     var acc$0 = acc, i$0 = i;
     for(;;){
      if(i$0 === count) return [0, [0, cmap, acc$0]];
      var
       i$1 = i$0 + 1 | 0,
       offset$0 = caml_check_bound(offset, i$0)[1 + i$0],
       delta$0 = caml_check_bound(delta, i$0)[1 + i$0],
       u0 = caml_check_bound(u0s, i$0)[1 + i$0];
      if(! is_cp(u0)){var e$1 = [0, -36074923, u0]; return [1, e$1];}
      var u1 = caml_check_bound(u1s, i$0)[1 + i$0];
      if(! is_cp(u1)){var e$0 = [0, -36074923, u1]; return [1, e$0];}
      if(u1 < u0){var e = [0, 658793747, [0, u0, u1]]; return [1, e];}
      if(0 !== offset$0){
       var
        garray$0 =
          function(counter, acc, u, u1, param){
           if(u1 < u) return [0, acc];
           var x = d_uint16(d);
           if(1 === x[0]) return x;
           var
            gindex = x[1],
            g = (gindex + delta$0 | 0) & 65535,
            _aI_ = 0,
            _aJ_ = u + 1 | 0,
            _aK_ = caml_call4(f, acc, 691170700, [0, u, u], g);
           if(counter >= 50)
            return caml_trampoline_return(garray$0, [0, _aK_, _aJ_, u1, _aI_]);
           var counter$0 = counter + 1 | 0;
           return garray$0(counter$0, _aK_, _aJ_, u1, _aI_);
          },
        garray =
          function(acc, u, u1, param){
           return caml_trampoline(garray$0(0, acc, u, u1, param));
          },
        pos = (garray_pos - ((count - i$0 | 0) * 2 | 0) | 0) + offset$0 | 0,
        x = seek_pos(pos, d);
       if(1 === x[0])
        var x$0 = x;
       else
        var v = x[1], x$0 = garray(acc$0, u0, u1, v);
       if(1 === x$0[0]) return x$0;
       var acc$6 = x$0[1];
       if(counter >= 50)
        return caml_trampoline_return(loop$0, [0, acc$6, i$1]);
       var counter$0 = counter + 1 | 0;
       return loop$0(counter$0, acc$6, i$1);
      }
      var g0 = u0 + delta$0 | 0, g1 = u1 + delta$0 | 0;
      if(0 > g0 && 0 <= g1){
       var
        acc$4 =
          caml_call4
           (f,
            acc$0,
            -603583606,
            [0, u0, (- delta$0 | 0) - 1 | 0],
            g0 & 65535),
        acc$5 = caml_call4(f, acc$4, -603583606, [0, - delta$0 | 0, u1], 0);
       acc$0 = acc$5;
       i$0 = i$1;
       continue;
      }
      if(65535 >= g0 && 65535 < g1){
       var
        acc$2 =
          caml_call4(f, acc$0, -603583606, [0, u0, 65535 - delta$0 | 0], g0),
        acc$3 =
          caml_call4(f, acc$2, -603583606, [0, 65536 - delta$0 | 0, u1], 0);
       acc$0 = acc$3;
       i$0 = i$1;
       continue;
      }
      var acc$1 = caml_call4(f, acc$0, -603583606, [0, u0, u1], g0 & 65535);
      acc$0 = acc$1;
      i$0 = i$1;
     }
    }
    function loop(acc, i){return caml_trampoline(loop$0(0, acc, i));}
    return loop(acc, 0);
   }
   function d_cmap_groups$0(counter, cmap, d, count, f, kind, acc){
    if(0 === count) return [0, [0, cmap, acc]];
    var x$1 = d_uint32_int(d);
    if(1 === x$1[0]) return x$1;
    var u0 = x$1[1];
    if(! is_cp(u0)){var e$1 = [0, -36074923, u0]; return [1, e$1];}
    var x$0 = d_uint32_int(d);
    if(1 === x$0[0]) return x$0;
    var u1 = x$0[1];
    if(! is_cp(u1)){var e$0 = [0, -36074923, u1]; return [1, e$0];}
    if(u1 < u0){var e = [0, 658793747, [0, u0, u1]]; return [1, e];}
    var x = d_uint32_int(d);
    if(1 === x[0]) return x;
    var
     gid = x[1],
     _aG_ = caml_call4(f, acc, kind, [0, u0, u1], gid),
     _aH_ = count - 1 | 0;
    if(counter >= 50)
     return caml_trampoline_return
             (d_cmap_groups$0, [0, cmap, d, _aH_, f, kind, _aG_]);
    var counter$0 = counter + 1 | 0;
    return d_cmap_groups$0(counter$0, cmap, d, _aH_, f, kind, _aG_);
   }
   function d_cmap_groups(cmap, d, count, f, kind, acc){
    return caml_trampoline(d_cmap_groups$0(0, cmap, d, count, f, kind, acc));
   }
   function d_cmap_seg(cmap, kind, d, f, acc, param){
    var x$0 = d_skip(12, d);
    if(1 === x$0[0]) return x$0;
    var x = d_uint32_int(d);
    if(1 === x[0]) return x;
    var count = x[1];
    return d_cmap_groups(cmap, d, count, f, kind, acc);
   }
   function d_cmap_12(cmap, d, f, acc, param){
    return d_cmap_seg(cmap, -603583606, d, f, acc, 0);
   }
   function d_cmap_13(cmap, d, f, acc, param){
    return d_cmap_seg(cmap, 691170700, d, f, acc, 0);
   }
   function d_cmap_records$0(counter, d, count, acc){
    if(0 === count) return [0, acc];
    var x$4 = d_uint16(d);
    if(1 === x$4[0]) return x$4;
    var pid = x$4[1], x$3 = d_uint16(d);
    if(1 === x$3[0]) return x$3;
    var eid = x$3[1], x$2 = d_uint32_int(d);
    if(1 === x$2[0]) return x$2;
    var pos = x$2[1], cur = d[2], x$1 = seek_table_pos(pos, d);
    if(1 === x$1[0]) return x$1;
    var x$0 = d_uint16(d);
    if(1 === x$0[0]) return x$0;
    var fmt = x$0[1], x = seek_pos(cur, d);
    if(1 === x[0]) return x;
    var _aE_ = [0, [0, pos, pid, eid, fmt], acc], _aF_ = count - 1 | 0;
    if(counter >= 50)
     return caml_trampoline_return(d_cmap_records$0, [0, d, _aF_, _aE_]);
    var counter$0 = counter + 1 | 0;
    return d_cmap_records$0(counter$0, d, _aF_, _aE_);
   }
   function d_cmap_records(d, count, acc){
    return caml_trampoline(d_cmap_records$0(0, d, count, acc));
   }
   function cmap$0(d, f$1, acc){
    var x$3 = init_decoder(d);
    if(1 === x$3[0])
     var x$4 = x$3;
    else
     var v$0 = x$3[1], x$4 = seek_required_table(cmap, d, v$0);
    if(1 === x$4[0]) return x$4;
    var x$2 = d_uint16(d);
    if(1 === x$2[0]) return x$2;
    var version = x$2[1];
    if(0 !== version) return err_version(d, version);
    var x$1 = d_uint16(d);
    if(1 === x$1[0]) return x$1;
    var count = x$1[1], x$0 = d_cmap_records(d, count, 0);
    if(1 === x$0[0]) return x$0;
    var cmaps = x$0[1], f$0 = Stdlib[20], sel = 0, param = cmaps;
    for(;;){
     if(! param) break;
     var c = param[1], f = c[4];
     a:
     {
      if(12 <= f){if(14 <= f) break a;} else if(4 !== f) break a;
      var cs$0 = param[2];
      if(f$0 < f){var sel$0 = [0, c]; sel = sel$0; param = cs$0; continue;}
     }
     var cs = param[2];
     param = cs;
    }
    if(! sel){
     var
      drop_pos =
        function(param){
         var fmt = param[4], eid = param[3], pid = param[2];
         return [0, pid, eid, fmt];
        },
      e = [0, -351472176, caml_call2(Stdlib_List[20], drop_pos, cmaps)];
     return [1, e];
    }
    var
     match = sel[1],
     fmt = match[4],
     eid = match[3],
     pid = match[2],
     pos = match[1],
     switcher = fmt - 4 | 0;
    a:
    if(9 >= switcher >>> 0){
     switch(switcher){
       case 0:
        var cmap$0 = d_cmap_4; break;
       case 8:
        var cmap$0 = d_cmap_12; break;
       case 9:
        var cmap$0 = d_cmap_13; break;
       default: break a;
     }
     var x = seek_table_pos(pos, d), _aD_ = [0, pid, eid, fmt];
     if(1 === x[0]) return x;
     var v = x[1];
     return cmap$0(_aD_, d, f$1, acc, v);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
   }
   function d_rev_coord(short_mask, same_mask, d, flags){
    function loop$0(counter, x, acc, param){
     var acc$0 = acc, param$0 = param;
     for(;;){
      if(! param$0) return [0, acc$0];
      var fs = param$0[2], f = param$0[1];
      if(0 < (f & short_mask)){
       var x$1 = d_uint8(d);
       if(1 === x$1[0]) return x$1;
       var
        dx$0 = x$1[1],
        dx = 0 < (f & same_mask) ? dx$0 : - dx$0 | 0,
        x$0 = x + dx | 0,
        _aB_ = [0, x$0, acc$0];
       if(counter >= 50)
        return caml_trampoline_return(loop$0, [0, x$0, _aB_, fs]);
       var counter$1 = counter + 1 | 0;
       return loop$0(counter$1, x$0, _aB_, fs);
      }
      if(0 >= (f & same_mask)){
       var x$3 = d_int16(d);
       if(1 === x$3[0]) return x$3;
       var dx$1 = x$3[1], x$2 = x + dx$1 | 0, _aC_ = [0, x$2, acc$0];
       if(counter >= 50)
        return caml_trampoline_return(loop$0, [0, x$2, _aC_, fs]);
       var counter$0 = counter + 1 | 0;
       return loop$0(counter$0, x$2, _aC_, fs);
      }
      var acc$1 = [0, x, acc$0];
      acc$0 = acc$1;
      param$0 = fs;
     }
    }
    function loop(x, acc, param){
     return caml_trampoline(loop$0(0, x, acc, param));
    }
    return loop(0, 0, flags);
   }
   function glyf$0(d, loc){
    var x$14 = init_decoder(d);
    if(1 === x$14[0])
     var x$15 = x$14;
    else{
     if(-1 === d[11])
      var
       x = seek_required_table(glyf, d, 0),
       _aq_ = 1 === x[0] ? x : (d[11] = d[2], _I_);
     else
      var _aq_ = _J_;
     var x$15 = _aq_;
    }
    if(1 === x$15[0]) return x$15;
    var x$13 = seek_pos(d[11] + loc | 0, d);
    if(1 === x$13[0]) return x$13;
    var x$12 = d_int16(d);
    if(1 === x$12[0]) return x$12;
    var ccount = x$12[1], x$11 = d_int16(d);
    if(1 === x$11[0]) return x$11;
    var xmin = x$11[1], x$10 = d_int16(d);
    if(1 === x$10[0]) return x$10;
    var ymin = x$10[1], x$9 = d_int16(d);
    if(1 === x$9[0]) return x$9;
    var xmax = x$9[1], x$8 = d_int16(d);
    if(1 === x$8[0]) return x$8;
    var ymax = x$8[1];
    if(-1 > ccount) return [1, [0, -938550428, [0, d[6], ccount]]];
    if(-1 === ccount){
     var
      loop$2 =
        function(counter, acc){
         var x$10 = d_uint16(d);
         if(1 === x$10[0]) return x$10;
         var flags = x$10[1], x$9 = d_uint16(d);
         if(1 === x$9[0]) return x$9;
         var gid = x$9[1];
         if(0 === (flags & 2)) return [1, -231910014];
         var dec = 0 < (flags & 1) ? d_int16 : d_int8, x$8 = dec(d);
         if(1 === x$8[0]) return x$8;
         var dx = x$8[1], x$7 = dec(d);
         if(1 === x$7[0]) return x$7;
         var dy = x$7[1];
         if(0 < (flags & 8)){
          var x = d_f2dot14(d);
          if(1 === x[0])
           var _aw_ = x;
          else
           var v$3 = x[1], _aw_ = [0, [0, [0, v$3, 0., 0., v$3]]];
          var x$0 = _aw_;
         }
         else if(0 < (flags & 64)){
          var x$2 = d_f2dot14(d);
          if(1 === x$2[0])
           var _ax_ = x$2;
          else{
           var sx = x$2[1], x$1 = d_f2dot14(d);
           if(1 === x$1[0])
            var _az_ = x$1;
           else
            var sy = x$1[1], _az_ = [0, [0, [0, sx, 0., 0., sy]]];
           var _ax_ = _az_;
          }
          var x$0 = _ax_;
         }
         else if(0 < (flags & 128)){
          var x$6 = d_f2dot14(d);
          if(1 === x$6[0])
           var _ay_ = x$6;
          else{
           var v$4 = x$6[1], x$5 = d_f2dot14(d);
           if(1 === x$5[0])
            var _aA_ = x$5;
           else{
            var v$1 = x$5[1], x$4 = d_f2dot14(d);
            if(1 === x$4[0])
             var _aA_ = x$4;
            else{
             var v$0 = x$4[1], x$3 = d_f2dot14(d);
             if(1 === x$3[0])
              var _aA_ = x$3;
             else
              var v = x$3[1], _aA_ = [0, [0, [0, v$4, v$1, v$0, v]]];
            }
           }
           var _ay_ = _aA_;
          }
          var x$0 = _ay_;
         }
         else
          var x$0 = _L_;
         if(1 === x$0[0]) return x$0;
         var v$2 = x$0[1], acc$0 = [0, [0, gid, [0, dx, dy], v$2], acc];
         if(0 >= (flags & 32)) return [0, caml_call1(Stdlib_List[10], acc$0)];
         if(counter >= 50) return caml_trampoline_return(loop$2, [0, acc$0]);
         var counter$0 = counter + 1 | 0;
         return loop$2(counter$0, acc$0);
        },
      loop$1 = function(acc){return caml_trampoline(loop$2(0, acc));},
      x$6 = loop$1(0);
     if(1 === x$6[0]) return x$6;
     var components = x$6[1];
     return [0, [0, [0, 880275431, components], [0, xmin, ymin, xmax, ymax]]];
    }
    if(0 === ccount)
     var x$7 = _K_;
    else{
     var
      loop$4 =
        function(counter, i, acc){
         if(0 >= i) return [0, acc];
         var x = d_uint16(d);
         if(1 === x[0]) return x;
         var v = x[1], _au_ = [0, v, acc], _av_ = i - 1 | 0;
         if(counter >= 50)
          return caml_trampoline_return(loop$4, [0, _av_, _au_]);
         var counter$0 = counter + 1 | 0;
         return loop$4(counter$0, _av_, _au_);
        },
      loop = function(i, acc){return caml_trampoline(loop$4(0, i, acc));},
      x$0 = loop(ccount, 0);
     if(1 === x$0[0])
      var _ao_ = x$0;
     else{
      var rev_epts = x$0[1];
      if(rev_epts)
       var e = rev_epts[1], pt_count = e + 1 | 0;
      else
       var pt_count = 0;
      var x$5 = d_uint16(d);
      if(1 === x$5[0])
       var _ap_ = x$5;
      else{
       var ins_len = x$5[1], x$4 = d_skip(ins_len, d);
       if(1 === x$4[0])
        var _ap_ = x$4;
       else{
        var
         loop$3 =
           function(counter, i, acc){
            if(0 >= i) return [0, acc];
            var x$0 = d_uint8(d);
            if(1 === x$0[0]) return x$0;
            var v$0 = x$0[1];
            if(0 === (v$0 & 8)){
             var _ar_ = [0, v$0, acc], _as_ = i - 1 | 0;
             if(counter >= 50)
              return caml_trampoline_return(loop$3, [0, _as_, _ar_]);
             var counter$0 = counter + 1 | 0;
             return loop$3(counter$0, _as_, _ar_);
            }
            var x = d_uint8(d);
            if(1 === x[0]) return x;
            var v = x[1], n$1 = v + 1 | 0, n = n$1, acc$0 = acc;
            for(;;){
             if(0 === n){
              var _at_ = (i - 1 | 0) - v | 0;
              if(counter >= 50)
               return caml_trampoline_return(loop$3, [0, _at_, acc$0]);
              var counter$1 = counter + 1 | 0;
              return loop$3(counter$1, _at_, acc$0);
             }
             var acc$1 = [0, v$0, acc$0], n$0 = n - 1 | 0;
             n = n$0;
             acc$0 = acc$1;
            }
           },
         loop$0 = function(i, acc){return caml_trampoline(loop$3(0, i, acc));},
         x$1 = loop$0(pt_count, 0);
        if(1 === x$1[0])
         var _ap_ = x$1;
        else{
         var
          rev_flags = x$1[1],
          flags = caml_call1(Stdlib_List[10], rev_flags),
          x$2 = d_rev_coord(2, 16, d, flags);
         if(1 === x$2[0])
          var _ap_ = x$2;
         else{
          var rxs$1 = x$2[1], x$3 = d_rev_coord(4, 32, d, flags);
          if(1 === x$3[0])
           var _ap_ = x$3;
          else{
           var
            rys$1 = x$3[1],
            i$1 = pt_count - 1 | 0,
            repts$1 = caml_call1(Stdlib_List[7], rev_epts),
            repts = repts$1,
            flags$0 = rev_flags,
            rxs = rxs$1,
            rys = rys$1,
            i = i$1,
            acc$0 = acc;
           for(;;){
            if(! flags$0){var _ap_ = [0, acc$0]; break;}
            var flags$1 = flags$0[2], f = flags$0[1];
            if(repts){
             var es = repts[2], e$0 = repts[1];
             if(e$0 === i)
              var repts$0 = es, new_contour = 1;
             else
              var repts$0 = repts, new_contour = 0;
            }
            else
             var repts$0 = 0, new_contour = 0;
            var
             cs = acc$0[2],
             c = acc$0[1],
             _an_ = caml_call1(Stdlib_List[6], rys),
             new_pt =
               [0, 0 < (f & 1) ? 1 : 0, caml_call1(Stdlib_List[6], rxs), _an_],
             acc$1 =
               new_contour
                ? [0, [0, new_pt, 0], [0, c, cs]]
                : [0, [0, new_pt, c], cs],
             i$0 = i - 1 | 0,
             rys$0 = caml_call1(Stdlib_List[7], rys),
             rxs$0 = caml_call1(Stdlib_List[7], rxs);
            repts = repts$0;
            flags$0 = flags$1;
            rxs = rxs$0;
            rys = rys$0;
            i = i$0;
            acc$0 = acc$1;
           }
          }
         }
        }
       }
      }
      var _ao_ = _ap_;
     }
     var x$7 = _ao_;
    }
    if(1 === x$7[0]) return x$7;
    var contours = x$7[1];
    return [0, [0, [0, -317491118, contours], [0, xmin, ymin, xmax, ymax]]];
   }
   function head$0(d){
    var x$14 = init_decoder(d);
    if(1 === x$14[0])
     var x$15 = x$14;
    else
     var v = x$14[1], x$15 = seek_required_table(head, d, v);
    if(1 === x$15[0]) return x$15;
    var x$13 = d_uint32(d);
    if(1 === x$13[0]) return x$13;
    var version = x$13[1];
    if(caml_notequal(version, 65536)) return err_version(d, version);
    var x$12 = d_uint32(d);
    if(1 === x$12[0]) return x$12;
    var head_font_revision = x$12[1], x$11 = d_skip(8, d);
    if(1 === x$11[0]) return x$11;
    var x$10 = d_uint16(d);
    if(1 === x$10[0]) return x$10;
    var head_flags = x$10[1], x$9 = d_uint16(d);
    if(1 === x$9[0]) return x$9;
    var head_units_per_em = x$9[1], x$8 = d_time(d);
    if(1 === x$8[0]) return x$8;
    var head_created = x$8[1], x$7 = d_time(d);
    if(1 === x$7[0]) return x$7;
    var head_modified = x$7[1], x$6 = d_int16(d);
    if(1 === x$6[0]) return x$6;
    var head_xmin = x$6[1], x$5 = d_int16(d);
    if(1 === x$5[0]) return x$5;
    var head_ymin = x$5[1], x$4 = d_int16(d);
    if(1 === x$4[0]) return x$4;
    var head_xmax = x$4[1], x$3 = d_int16(d);
    if(1 === x$3[0]) return x$3;
    var head_ymax = x$3[1], x$2 = d_uint16(d);
    if(1 === x$2[0]) return x$2;
    var head_mac_style = x$2[1], x$1 = d_uint16(d);
    if(1 === x$1[0]) return x$1;
    var head_lowest_rec_ppem = x$1[1], x$0 = d_skip(2, d);
    if(1 === x$0[0]) return x$0;
    var x = d_uint16(d);
    if(1 === x[0]) return x;
    var head_index_to_loc_format = x[1];
    return [0,
            [0,
             head_font_revision,
             head_flags,
             head_units_per_em,
             head_created,
             head_modified,
             head_xmin,
             head_ymin,
             head_xmax,
             head_ymax,
             head_mac_style,
             head_lowest_rec_ppem,
             head_index_to_loc_format]];
   }
   function hhea$0(d){
    var x$10 = init_decoder(d);
    if(1 === x$10[0])
     var x$11 = x$10;
    else
     var v = x$10[1], x$11 = seek_required_table(hhea, d, v);
    if(1 === x$11[0]) return x$11;
    var x$9 = d_uint32(d);
    if(1 === x$9[0]) return x$9;
    var version = x$9[1];
    if(caml_notequal(version, 65536)) return err_version(d, version);
    var x$8 = d_int16(d);
    if(1 === x$8[0]) return x$8;
    var hhea_ascender = x$8[1], x$7 = d_int16(d);
    if(1 === x$7[0]) return x$7;
    var hhea_descender = x$7[1], x$6 = d_int16(d);
    if(1 === x$6[0]) return x$6;
    var hhea_line_gap = x$6[1], x$5 = d_uint16(d);
    if(1 === x$5[0]) return x$5;
    var hhea_advance_width_max = x$5[1], x$4 = d_int16(d);
    if(1 === x$4[0]) return x$4;
    var hhea_min_left_side_bearing = x$4[1], x$3 = d_int16(d);
    if(1 === x$3[0]) return x$3;
    var hhea_min_right_side_bearing = x$3[1], x$2 = d_int16(d);
    if(1 === x$2[0]) return x$2;
    var hhea_xmax_extent = x$2[1], x$1 = d_int16(d);
    if(1 === x$1[0]) return x$1;
    var hhea_caret_slope_rise = x$1[1], x$0 = d_int16(d);
    if(1 === x$0[0]) return x$0;
    var hhea_caret_slope_run = x$0[1], x = d_int16(d);
    if(1 === x[0]) return x;
    var hhea_caret_offset = x[1];
    return [0,
            [0,
             hhea_ascender,
             hhea_descender,
             hhea_line_gap,
             hhea_advance_width_max,
             hhea_min_left_side_bearing,
             hhea_min_right_side_bearing,
             hhea_xmax_extent,
             hhea_caret_slope_rise,
             hhea_caret_slope_run,
             hhea_caret_offset]];
   }
   function d_hmetric$0(counter, goffset, i, f, acc, last_adv, d){
    if(0 === i) return [0, [0, acc, last_adv]];
    var x$0 = d_uint16(d);
    if(1 === x$0[0]) return x$0;
    var adv = x$0[1], x = d_int16(d);
    if(1 === x[0]) return x;
    var
     lsb = x[1],
     acc$0 = caml_call4(f, acc, goffset - i | 0, adv, lsb),
     _am_ = i - 1 | 0;
    if(counter >= 50)
     return caml_trampoline_return
             (d_hmetric$0, [0, goffset, _am_, f, acc$0, adv, d]);
    var counter$0 = counter + 1 | 0;
    return d_hmetric$0(counter$0, goffset, _am_, f, acc$0, adv, d);
   }
   function d_hmetric(goffset, i, f, acc, last_adv, d){
    return caml_trampoline(d_hmetric$0(0, goffset, i, f, acc, last_adv, d));
   }
   function d_hlsb$0(counter, goffset, i, f, acc, adv, d){
    if(0 === i) return [0, acc];
    var x = d_int16(d);
    if(1 === x[0]) return x;
    var
     lsb = x[1],
     acc$0 = caml_call4(f, acc, goffset - i | 0, adv, lsb),
     _al_ = i - 1 | 0;
    if(counter >= 50)
     return caml_trampoline_return
             (d_hlsb$0, [0, goffset, _al_, f, acc$0, adv, d]);
    var counter$0 = counter + 1 | 0;
    return d_hlsb$0(counter$0, goffset, _al_, f, acc$0, adv, d);
   }
   function d_hlsb(goffset, i, f, acc, adv, d){
    return caml_trampoline(d_hlsb$0(0, goffset, i, f, acc, adv, d));
   }
   function hmtx$0(d, f, acc){
    var x$5 = glyph_count(d);
    if(1 === x$5[0]) return x$5;
    var glyph_count$0 = x$5[1], x$1 = seek_required_table(hhea, d, 0);
    if(1 === x$1[0])
     var x$2 = x$1;
    else{
     var x$0 = d_skip(34, d);
     if(1 === x$0[0])
      var _ak_ = x$0;
     else{
      var x = d_uint16(d);
      if(1 === x[0])
       var _ak_ = x;
      else
       var hm_count = x[1], _ak_ = [0, hm_count];
     }
     var x$2 = _ak_;
    }
    if(1 === x$2[0]) return x$2;
    var hm_count$0 = x$2[1], x$4 = seek_required_table(hmtx, d, 0);
    if(1 === x$4[0]) return x$4;
    var x$3 = d_hmetric(hm_count$0, hm_count$0, f, acc, -1, d);
    if(1 === x$3[0]) return x$3;
    var v = x$3[1], last_adv = v[2], acc$0 = v[1];
    return d_hlsb
            (glyph_count$0,
             glyph_count$0 - hm_count$0 | 0,
             f,
             acc$0,
             last_adv,
             d);
   }
   function d_name_records$0(counter, soff, ncount, f, acc, langs, seen, d){
    if(0 === ncount) return [0, acc];
    var x$7 = d_uint16(d);
    if(1 === x$7[0]) return x$7;
    var pid = x$7[1], x$6 = d_uint16(d);
    if(1 === x$6[0]) return x$6;
    var eid = x$6[1], x$5 = d_uint16(d);
    if(1 === x$5[0]) return x$5;
    var lid = x$5[1], x$4 = d_uint16(d);
    if(1 === x$4[0]) return x$4;
    var nid = x$4[1], x$3 = d_uint16(d);
    if(1 === x$3[0]) return x$3;
    var len = x$3[1], x$2 = d_uint16(d);
    if(1 === x$2[0]) return x$2;
    var off = x$2[1];
    a:
    {
     if(0 < pid){
      if(4 <= pid) break a;
      switch(pid - 1 | 0){
        case 0:
         break a;
        case 1: break;
        default: if(1 !== eid) break a;
      }
     }
     else if(0 > pid) break a;
     var cpos = d[2], n = [0, nid, lid];
     if(caml_call2(Stdlib_List[37], n, seen)){
      var _ae_ = ncount - 1 | 0;
      if(counter >= 50)
       return caml_trampoline_return
               (d_name_records$0, [0, soff, _ae_, f, acc, langs, seen, d]);
      var counter$2 = counter + 1 | 0;
      return d_name_records$0(counter$2, soff, _ae_, f, acc, langs, seen, d);
     }
     var x$1 = seek_table_pos(soff + off | 0, d);
     if(1 === x$1[0]) return x$1;
     var x$0 = d_utf_16be(len, d);
     if(1 === x$0[0]) return x$0;
     var v = x$0[1], x = seek_pos(cpos, d);
     if(1 === x[0]) return x;
     try{var _ai_ = caml_call2(Stdlib_List[53], lid, langs), lang = _ai_;}
     catch(_aj_){
      var _af_ = caml_wrap_exception(_aj_);
      if(_af_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_af_, 0);
      var lang = cst_und;
     }
     var
      acc$0 = caml_call4(f, acc, nid, lang, v),
      _ag_ = [0, n, seen],
      _ah_ = ncount - 1 | 0;
     if(counter >= 50)
      return caml_trampoline_return
              (d_name_records$0, [0, soff, _ah_, f, acc$0, langs, _ag_, d]);
     var counter$0 = counter + 1 | 0;
     return d_name_records$0(counter$0, soff, _ah_, f, acc$0, langs, _ag_, d);
    }
    var _ad_ = ncount - 1 | 0;
    if(counter >= 50)
     return caml_trampoline_return
             (d_name_records$0, [0, soff, _ad_, f, acc, langs, seen, d]);
    var counter$1 = counter + 1 | 0;
    return d_name_records$0(counter$1, soff, _ad_, f, acc, langs, seen, d);
   }
   function d_name_records(soff, ncount, f, acc, langs, seen, d){
    return caml_trampoline
            (d_name_records$0(0, soff, ncount, f, acc, langs, seen, d));
   }
   function name$0(d, f, acc){
    var x$6 = init_decoder(d);
    if(1 === x$6[0])
     var x$7 = x$6;
    else
     var v = x$6[1], x$7 = seek_required_table(name, d, v);
    if(1 === x$7[0]) return x$7;
    var x$5 = d_uint16(d);
    if(1 === x$5[0]) return x$5;
    var version = x$5[1];
    if(0 <= version && 1 >= version){
     var x$4 = d_uint16(d);
     if(1 === x$4[0]) return x$4;
     var ncount = x$4[1], x$3 = d_uint16(d);
     if(1 === x$3[0]) return x$3;
     var soff = x$3[1], cpos = d[2];
     if(0 === version)
      var x$2 = _M_;
     else{
      var x$0 = d_skip((ncount * 6 | 0) * 2 | 0, d);
      if(1 === x$0[0])
       var _$_ = x$0;
      else{
       var x = d_uint16(d);
       if(1 === x[0])
        var _aa_ = x;
       else
        var
         lcount = x[1],
         loop$0 =
           function(counter, i, acc){
            if(0 === i) return [0, acc];
            var x$3 = d_uint16(d);
            if(1 === x$3[0]) return x$3;
            var len = x$3[1], x$2 = d_uint16(d);
            if(1 === x$2[0]) return x$2;
            var
             off = x$2[1],
             cpos = d[2],
             x$1 = seek_table_pos(soff + off | 0, d);
            if(1 === x$1[0]) return x$1;
            var x$0 = d_utf_16be(len, d);
            if(1 === x$0[0]) return x$0;
            var lang = x$0[1], x = seek_pos(cpos, d);
            if(1 === x[0]) return x;
            var
             _ab_ = [0, [0, 32768 + (lcount - i | 0) | 0, lang], acc],
             _ac_ = i - 1 | 0;
            if(counter >= 50)
             return caml_trampoline_return(loop$0, [0, _ac_, _ab_]);
            var counter$0 = counter + 1 | 0;
            return loop$0(counter$0, _ac_, _ab_);
           },
         loop = function(i, acc){return caml_trampoline(loop$0(0, i, acc));},
         _aa_ = loop(lcount, 0);
       var _$_ = _aa_;
      }
      var x$2 = _$_;
     }
     if(1 === x$2[0]) return x$2;
     var
      langs$0 = x$2[1],
      langs = caml_call2(Stdlib_List[13], langs$0, lcid_to_bcp47),
      x$1 = seek_pos(cpos, d);
     return 1 === x$1[0]
             ? x$1
             : d_name_records(soff, ncount, f, acc, langs, 0, d);
    }
    return err_version(d, version);
   }
   function os2$0(d){
    var x$8 = init_decoder(d);
    if(1 === x$8[0])
     var x$9 = x$8;
    else
     var v$0 = x$8[1], x$9 = seek_required_table(os2, d, v$0);
    if(1 === x$9[0]) return x$9;
    var x$7 = d_uint16(d);
    if(1 === x$7[0]) return x$7;
    var version = x$7[1];
    if(4 < version) return err_version(d, version);
    function opt(v, dec, d){
     if(version < v) return _N_;
     var e = caml_call1(dec, d);
     if(0 !== e[0]) return e;
     var v$0 = e[1];
     return [0, [0, v$0]];
    }
    var x$6 = d_int16(d);
    if(1 === x$6[0]) return x$6;
    var os2_x_avg_char_width = x$6[1], x$5 = d_uint16(d);
    if(1 === x$5[0]) return x$5;
    var os2_us_weight_class = x$5[1], x$4 = d_uint16(d);
    if(1 === x$4[0]) return x$4;
    var os2_us_width_class = x$4[1], x$3 = d_uint16(d);
    if(1 === x$3[0]) return x$3;
    var os2_fs_type = x$3[1], x$2 = d_int16(d);
    if(1 === x$2[0]) return x$2;
    var os2_y_subscript_x_size = x$2[1], x$1 = d_int16(d);
    if(1 === x$1[0]) return x$1;
    var os2_y_subscript_y_size = x$1[1], x$0 = d_int16(d);
    if(1 === x$0[0]) return x$0;
    var os2_y_subscript_x_offset = x$0[1];
    function f(os2_y_subscript_y_offset){
     var x$26 = d_int16(d);
     if(1 === x$26[0]) return x$26;
     var os2_y_superscript_x_size = x$26[1], x$25 = d_int16(d);
     if(1 === x$25[0]) return x$25;
     var os2_y_superscript_y_size = x$25[1], x$24 = d_int16(d);
     if(1 === x$24[0]) return x$24;
     var os2_y_superscript_x_offset = x$24[1], x$23 = d_int16(d);
     if(1 === x$23[0]) return x$23;
     var os2_y_superscript_y_offset = x$23[1], x$22 = d_int16(d);
     if(1 === x$22[0]) return x$22;
     var os2_y_strikeout_size = x$22[1], x$21 = d_int16(d);
     if(1 === x$21[0]) return x$21;
     var os2_y_strikeout_position = x$21[1], x$20 = d_int16(d);
     if(1 === x$20[0]) return x$20;
     var os2_family_class = x$20[1], x$19 = d_bytes(10, d);
     if(1 === x$19[0]) return x$19;
     var os2_panose = x$19[1], x$18 = d_uint32(d);
     if(1 === x$18[0]) return x$18;
     var os2_ul_unicode_range1 = x$18[1], x$17 = d_uint32(d);
     if(1 === x$17[0]) return x$17;
     var os2_ul_unicode_range2 = x$17[1], x$16 = d_uint32(d);
     if(1 === x$16[0]) return x$16;
     var os2_ul_unicode_range3 = x$16[1], x$15 = d_uint32(d);
     if(1 === x$15[0]) return x$15;
     var os2_ul_unicode_range4 = x$15[1], x$14 = d_uint32(d);
     if(1 === x$14[0]) return x$14;
     var os2_ach_vend_id = x$14[1], x$13 = d_uint16(d);
     if(1 === x$13[0]) return x$13;
     var os2_fs_selection = x$13[1], x$12 = d_uint16(d);
     if(1 === x$12[0]) return x$12;
     var os2_us_first_char_index = x$12[1], x$11 = d_uint16(d);
     if(1 === x$11[0]) return x$11;
     var os2_us_last_char_index = x$11[1], x$10 = d_int16(d);
     if(1 === x$10[0]) return x$10;
     var os2_s_typo_ascender = x$10[1], x$9 = d_int16(d);
     if(1 === x$9[0]) return x$9;
     var os2_s_type_descender = x$9[1], x$8 = d_int16(d);
     if(1 === x$8[0]) return x$8;
     var os2_s_typo_linegap = x$8[1], x$7 = d_uint16(d);
     if(1 === x$7[0]) return x$7;
     var os2_us_win_ascent = x$7[1], x$6 = d_uint16(d);
     if(1 === x$6[0]) return x$6;
     var os2_us_win_descent = x$6[1], x$5 = opt(1, d_uint32, d);
     if(1 === x$5[0]) return x$5;
     var os2_ul_code_page_range_1 = x$5[1], x$4 = opt(1, d_uint32, d);
     if(1 === x$4[0]) return x$4;
     var os2_ul_code_page_range_2 = x$4[1], x$3 = opt(2, d_int16, d);
     if(1 === x$3[0]) return x$3;
     var os2_s_x_height = x$3[1], x$2 = opt(2, d_int16, d);
     if(1 === x$2[0]) return x$2;
     var os2_s_cap_height = x$2[1], x$1 = opt(2, d_uint16, d);
     if(1 === x$1[0]) return x$1;
     var os2_us_default_char = x$1[1], x$0 = opt(2, d_uint16, d);
     if(1 === x$0[0]) return x$0;
     var os2_us_break_char = x$0[1], x = opt(2, d_uint16, d);
     if(1 === x[0]) return x;
     var os2_us_max_context = x[1];
     return [0,
             [0,
              os2_x_avg_char_width,
              os2_us_weight_class,
              os2_us_width_class,
              os2_fs_type,
              os2_y_subscript_x_size,
              os2_y_subscript_y_size,
              os2_y_subscript_x_offset,
              os2_y_subscript_y_offset,
              os2_y_superscript_x_size,
              os2_y_superscript_y_size,
              os2_y_superscript_x_offset,
              os2_y_superscript_y_offset,
              os2_y_strikeout_size,
              os2_y_strikeout_position,
              os2_family_class,
              os2_panose,
              os2_ul_unicode_range1,
              os2_ul_unicode_range2,
              os2_ul_unicode_range3,
              os2_ul_unicode_range4,
              os2_ach_vend_id,
              os2_fs_selection,
              os2_us_first_char_index,
              os2_us_last_char_index,
              os2_s_typo_ascender,
              os2_s_type_descender,
              os2_s_typo_linegap,
              os2_us_win_ascent,
              os2_us_win_descent,
              os2_ul_code_page_range_1,
              os2_ul_code_page_range_2,
              os2_s_x_height,
              os2_s_cap_height,
              os2_us_default_char,
              os2_us_break_char,
              os2_us_max_context]];
    }
    var x = d_int16(d);
    if(1 === x[0]) return x;
    var v = x[1];
    return f(v);
   }
   function kern_tables$0(counter, ntables, t, p, acc, d){
    if(0 === ntables) return [0, acc];
    var x$3 = d_uint16(d);
    if(1 === x$3[0]) return x$3;
    var version = x$3[1];
    if(0 < version) return err_version(d, version);
    var x$2 = d_uint16(d);
    if(1 === x$2[0]) return x$2;
    var len = x$2[1], x$1 = d_uint16(d);
    if(1 === x$1[0]) return x$1;
    var coverage = x$1[1], format = coverage >>> 8 | 0;
    function skip(acc){
     var x = d_skip(len - 6 | 0, d);
     return 1 === x[0] ? x : kern_tables(ntables - 1 | 0, t, p, acc, d);
    }
    if(0 !== format) return skip(acc);
    var
     _U_ = 0 < (coverage & 4) ? 1 : 0,
     _V_ = 0 < (coverage & 2) ? 3852658 : 836765686,
     _W_ = 0 < (coverage & 1) ? 72 : 86,
     _X_ = caml_call2(t, acc, [0, _W_, _V_, _U_]);
    if(925778591 <= _X_[1]){var acc$0 = _X_[2]; return skip(acc$0);}
    var acc$1 = _X_[2];
    function d_pairs$0(counter, len, acc, d){
     if(0 >= len) return [0, acc];
     var x$1 = d_uint16(d);
     if(1 === x$1[0]) return x$1;
     var left = x$1[1], x$0 = d_uint16(d);
     if(1 === x$0[0]) return x$0;
     var right = x$0[1], x = d_int16(d);
     if(1 === x[0]) return x;
     var
      values = x[1],
      _Z_ = caml_call4(p, acc, left, right, values),
      ___ = len - 6 | 0;
     if(counter >= 50)
      return caml_trampoline_return(d_pairs$0, [0, ___, _Z_, d]);
     var counter$0 = counter + 1 | 0;
     return d_pairs$0(counter$0, ___, _Z_, d);
    }
    function d_pairs(len, acc, d){
     return caml_trampoline(d_pairs$0(0, len, acc, d));
    }
    var x$0 = d_skip(8, d);
    if(1 === x$0[0]) return x$0;
    var x = d_pairs((len - 8 | 0) - 6 | 0, acc$1, d);
    if(1 === x[0]) return x;
    var acc$2 = x[1], _Y_ = ntables - 1 | 0;
    if(counter >= 50)
     return caml_trampoline_return(kern_tables$0, [0, _Y_, t, p, acc$2, d]);
    var counter$0 = counter + 1 | 0;
    return kern_tables$0(counter$0, _Y_, t, p, acc$2, d);
   }
   function kern_tables(ntables, t, p, acc, d){
    return caml_trampoline(kern_tables$0(0, ntables, t, p, acc, d));
   }
   function kern$0(d, t, p, acc){
    var x$1 = init_decoder(d);
    if(1 === x$1[0])
     var x$2 = x$1;
    else
     var v$0 = x$1[1], x$2 = seek_table(kern, d, v$0);
    if(1 === x$2[0]) return x$2;
    var v = x$2[1];
    if(! v) return [0, acc];
    var x$0 = d_uint16(d);
    if(1 === x$0[0]) return x$0;
    var version = x$0[1];
    if(0 < version) return err_version(d, version);
    var x = d_uint16(d);
    if(1 === x[0]) return x;
    var ntables = x[1];
    return kern_tables(ntables, t, p, acc, d);
   }
   function loca$0(d, gid){
    var x$10 = init_decoder(d);
    if(0 === x$10[0]){
     if(-1 === d[9]){
      var x$3 = seek_required_table(head, d, 0);
      if(1 === x$3[0])
       var _S_ = x$3;
      else{
       var x$1 = d_skip(50, d);
       if(1 === x$1[0])
        var x$2 = x$1;
       else{
        var x = d_uint16(d);
        if(1 === x[0])
         var _T_ = x;
        else
         var
          v = x[1],
          _T_ = 1 < v ? [1, [0, -957602944, [0, d[6], v]]] : [0, v];
        var x$2 = _T_;
       }
       if(1 === x$2[0])
        var _S_ = x$2;
       else{
        var loca_format = x$2[1];
        d[10] = loca_format;
        var
         x$0 = seek_required_table(loca, d, 0),
         _S_ = 1 === x$0[0] ? x$0 : (d[9] = d[2], _O_);
       }
      }
     }
     else
      var _S_ = _P_;
     var x$11 = _S_;
    }
    else
     var x$11 = x$10;
    if(1 === x$11[0]) return x$11;
    if(0 === d[10]){
     var x$6 = seek_pos(d[9] + (gid * 2 | 0) | 0, d);
     if(1 === x$6[0]) return x$6;
     var x$5 = d_uint16(d);
     if(1 === x$5[0]) return x$5;
     var o1$0 = x$5[1], x$4 = d_uint16(d);
     if(1 === x$4[0]) return x$4;
     var o2$0 = x$4[1], o1 = o1$0 * 2 | 0, o2 = o2$0 * 2 | 0;
     return o1 === o2 ? _Q_ : [0, [0, o1]];
    }
    var x$9 = seek_pos(d[9] + (gid * 4 | 0) | 0, d);
    if(1 === x$9[0]) return x$9;
    var x$8 = d_uint32_int(d);
    if(1 === x$8[0]) return x$8;
    var o1$1 = x$8[1], x$7 = d_uint32_int(d);
    if(1 === x$7[0]) return x$7;
    var o2$1 = x$7[1];
    return o1$1 === o2$1 ? _R_ : [0, [0, o1$1]];
   }
   var
    Otfm =
      [0,
       [0,
        cmap,
        head,
        hhea,
        hmtx,
        maxp,
        name,
        os2,
        1886352244,
        1668707360,
        1718642541,
        glyf,
        loca,
        1886545264,
        1128678944,
        1448038983,
        1161970772,
        1161972803,
        1161974595,
        1146308935,
        1734439792,
        1751412088,
        kern,
        1280594760,
        1346587732,
        1447316824,
        1986553185,
        1986884728,
        1111577413,
        1195656518,
        1196445523,
        1196643650,
        1246975046,
        of_bytes,
        to_bytes,
        to_int32,
        of_int32,
        compare,
        pp$0],
       is_cp,
       pp_cp,
       pp_error,
       decoder,
       decoder_src,
       flavour,
       table_list,
       table_mem,
       table_raw,
       glyph_count,
       postscript_name,
       cmap$0,
       glyf$0,
       head$0,
       hhea$0,
       hmtx$0,
       name$0,
       os2$0,
       kern$0,
       loca$0];
   runtime.caml_register_global(102, Otfm, "Otfm");
   return;
  }
  (globalThis));

//# 15 "../lib/.label_maker_lib.objs/jsoo/default/label_maker_lib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = " ('",
    cst_glyph = "') -> glyph ",
    cst$3 = ")\n",
    cst_02X_04X = "<%02X> <%04X>\n",
    cst$2 = ">\n",
    cst$1 = "> <",
    cst_DEBUG_Found = "DEBUG: Found ",
    cst_XCCWJoined23a$1 = "XCCWJoined23a",
    cst_endbfchar$1 = "endbfchar\n",
    caml_array_make = runtime.caml_array_make,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$3,
    cst$0 = cst$3,
    partial = [12, 10, [10, 0]],
    partial$0 = [0, 0, 0],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Otfm = global_data.Otfm,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    _a_ =
      [0,
       [11, "ERROR: Font extraction failed: ", [2, 0, [12, 10, [10, 0]]]],
       "ERROR: Font extraction failed: %s\n%!"],
    _b_ =
      [0,
       cst_XCCWJoined23a$1,
       [0, -200., -200., 1200., 1000.],
       800.,
       -200.,
       1000.],
    _c_ =
      [0,
       [11, "DEBUG: Found PostScript name: ", [2, 0, [12, 10, [10, 0]]]],
       "DEBUG: Found PostScript name: %s\n%!"],
    _d_ =
      [0,
       [11,
        "DEBUG: Font units per em: ",
        [8,
         [0, 0, 0],
         0,
         0,
         [11, ", scale factor: ", [8, [0, 0, 0], 0, 0, [12, 10, [10, 0]]]]]],
       "DEBUG: Font units per em: %f, scale factor: %f\n%!"],
    _e_ =
      [0,
       [11,
        "DEBUG: Font bbox: [",
        [8,
         [0, 0, 0],
         0,
         0,
         [12,
          32,
          [8,
           [0, 0, 0],
           0,
           0,
           [12,
            32,
            [8,
             [0, 0, 0],
             0,
             0,
             [12, 32, [8, [0, 0, 0], 0, 0, [11, "]\n", [10, 0]]]]]]]]]],
       "DEBUG: Font bbox: [%f %f %f %f]\n%!"],
    _f_ =
      [0,
       [11,
        "DEBUG: Ascent: ",
        [8,
         [0, 0, 0],
         0,
         0,
         [11, ", Descent: ", [8, [0, 0, 0], 0, 0, [12, 10, [10, 0]]]]]],
       "DEBUG: Ascent: %f, Descent: %f\n%!"],
    _g_ =
      [0,
       [11, "DEBUG: Error reading hhea table, using defaults\n", [10, 0]],
       "DEBUG: Error reading hhea table, using defaults\n%!"],
    _h_ =
      [0,
       [11, "DEBUG: Error reading head table, using defaults\n", [10, 0]],
       "DEBUG: Error reading head table, using defaults\n%!"],
    _i_ = [0, -200., -200., 1200., 1000.],
    _j_ =
      [0,
       [11, "DEBUG: No PostScript name found, using fallback\n", [10, 0]],
       "DEBUG: No PostScript name found, using fallback\n%!"],
    cst_XCCWJoined23a = cst_XCCWJoined23a$1,
    _k_ =
      [0,
       [11, "DEBUG: Error reading PostScript name, using fallback\n", [10, 0]],
       "DEBUG: Error reading PostScript name, using fallback\n%!"],
    cst_XCCWJoined23a$0 = cst_XCCWJoined23a$1,
    _l_ =
      [0,
       [11,
        "ERROR: Character mapping extraction error: ",
        [2, 0, [12, 10, [10, 0]]]],
       "ERROR: Character mapping extraction error: %s\n%!"],
    _m_ =
      [0,
       [11,
        "DEBUG: Cmap extraction failed (",
        [2, 0, [11, "), using fallback ASCII mapping\n", [10, 0]]]],
       "DEBUG: Cmap extraction failed (%s), using fallback ASCII mapping\n%!"],
    _n_ =
      [0,
       [11,
        "DEBUG: Hmtx extraction failed (",
        [2, 0, [11, "), using default widths\n", [10, 0]]]],
       "DEBUG: Hmtx extraction failed (%s), using default widths\n%!"],
    _o_ =
      [0,
       [11, "DEBUG: Scale factor: ", [8, [0, 0, 0], 0, 0, [12, 10, [10, 0]]]],
       "DEBUG: Scale factor: %f\n%!"],
    _p_ =
      [0,
       [11,
        "DEBUG: Width not found for char ",
        [4,
         0,
         0,
         0,
         [11, cst$4, [0, [11, cst_glyph, [4, 0, 0, 0, [12, 10, [10, 0]]]]]]]],
       "DEBUG: Width not found for char %d ('%c') -> glyph %d\n%!"],
    _q_ =
      [0,
       [11,
        "DEBUG: Final char ",
        [4,
         0,
         0,
         0,
         [11,
          cst$4,
          [0,
           [11,
            cst_glyph,
            [4,
             0,
             0,
             0,
             [11,
              ", width ",
              [4, 0, 0, 0, [11, " -> scaled ", [8, partial$0, 0, 0, partial]]]]]]]]]],
       "DEBUG: Final char %d ('%c') -> glyph %d, width %d -> scaled %f\n%!"],
    _r_ =
      [0,
       [11, "DEBUG: Extracting glyph widths from hmtx table...\n", [10, 0]],
       "DEBUG: Extracting glyph widths from hmtx table...\n%!"],
    _s_ =
      [0,
       [11,
        "DEBUG: Glyph ",
        [4, 0, 0, 0, [11, " width: ", [4, 0, 0, 0, [12, 10, [10, 0]]]]]],
       "DEBUG: Glyph %d width: %d\n%!"],
    _t_ =
      [0,
       [11,
        cst_DEBUG_Found,
        [4, 0, 0, 0, [11, " glyph widths from hmtx\n", [10, 0]]]],
       "DEBUG: Found %d glyph widths from hmtx\n%!"],
    _u_ =
      [0,
       [11,
        "DEBUG: Fallback char ",
        [4,
         0,
         0,
         0,
         [11, cst$4, [0, [11, cst_glyph, [4, 0, 0, 0, [12, 10, [10, 0]]]]]]]],
       "DEBUG: Fallback char %d ('%c') -> glyph %d\n%!"],
    _v_ =
      [0,
       [11,
        "DEBUG: Extracting character mappings from cmap table...\n",
        [10, 0]],
       "DEBUG: Extracting character mappings from cmap table...\n%!"],
    _w_ =
      [0,
       [11,
        "DEBUG: Char ",
        [4,
         0,
         0,
         0,
         [11, cst$4, [0, [11, cst_glyph, [4, 0, 0, 0, [12, 10, [10, 0]]]]]]]],
       "DEBUG: Char %d ('%c') -> glyph %d\n%!"],
    _x_ =
      [0,
       [11,
        cst_DEBUG_Found,
        [4, 0, 0, 0, [11, " character mappings from cmap\n", [10, 0]]]],
       "DEBUG: Found %d character mappings from cmap\n%!"],
    _y_ =
      [0,
       [11,
        "DEBUG: Creating CMap for ",
        [4, 0, 0, 0, [11, " character mappings\n", [10, 0]]]],
       "DEBUG: Creating CMap for %d character mappings\n%!"],
    cst_CIDInit_ProcSet_findresour = "/CIDInit /ProcSet findresource begin\n",
    cst_12_dict_begin = "12 dict begin\n",
    cst_begincmap = "begincmap\n",
    cst_CIDSystemInfo = "/CIDSystemInfo\n",
    cst_Registry = "<< /Registry (",
    cst_Ordering = "   /Ordering (",
    cst_Supplement_0 = "   /Supplement 0\n",
    cst_def = ">> def\n",
    cst_def$0 = " def\n",
    cst_CMapName = "/CMapName /",
    cst_CMapType_2_def = "/CMapType 2 def\n",
    cst_1_begincodespacerange = "1 begincodespacerange\n",
    cst_00_FF = "<00> <FF>\n",
    cst_endcodespacerange = "endcodespacerange\n",
    cst_beginbfchar = " beginbfchar\n",
    _z_ =
      [0,
       [12,
        60,
        [4,
         8,
         [0, 2, 2],
         0,
         [11, cst$1, [4, 8, [0, 2, 4], 0, [11, cst$2, 0]]]]],
       cst_02X_04X],
    _A_ =
      [0,
       [11,
        "DEBUG: CMap entry: <",
        [4,
         8,
         [0, 2, 2],
         0,
         [11, cst$1, [4, 8, [0, 2, 4], 0, [11, cst$2, [10, 0]]]]]],
       "DEBUG: CMap entry: <%02X> <%04X>\n%!"],
    cst_endbfchar = cst_endbfchar$1,
    cst_endcmap = "endcmap\n",
    cst_CMapName_currentdict_CMap_ =
      "CMapName currentdict /CMap defineresource pop\n",
    cst_end = "end\n",
    cst_end$0 = "end",
    _B_ =
      [0,
       [11,
        "DEBUG: No character mappings, creating fallback ASCII mapping\n",
        [10, 0]],
       "DEBUG: No character mappings, creating fallback ASCII mapping\n%!"],
    cst_95_beginbfchar = "95 beginbfchar\n",
    cst_endbfchar$0 = cst_endbfchar$1,
    _C_ =
      [0,
       [12,
        60,
        [4,
         8,
         [0, 2, 2],
         0,
         [11, cst$1, [4, 8, [0, 2, 4], 0, [11, cst$2, 0]]]]],
       cst_02X_04X];
   function extract_basic_font_data(font_bytes){
    try{
     var
      bytes_string = caml_call1(Stdlib_Bytes[6], font_bytes),
      d = caml_call1(Otfm[5], [0, -976970511, bytes_string]),
      match = caml_call1(Otfm[12], d);
     if(0 === match[0]){
      var match$0 = match[1];
      if(match$0){
       var name = match$0[1];
       caml_call2(Stdlib_Printf[2], _c_, name);
       var name$0 = name;
      }
      else{caml_call1(Stdlib_Printf[2], _j_); var name$0 = cst_XCCWJoined23a;}
      var ps_name = name$0;
     }
     else{
      caml_call1(Stdlib_Printf[2], _k_);
      var ps_name = cst_XCCWJoined23a$0;
     }
     var match$1 = caml_call1(Otfm[15], d);
     if(0 === match$1[0]){
      var
       head = match$1[1],
       upm = head[3],
       scale = 1000. / upm,
       left = head[6] * scale,
       bottom = head[7] * scale,
       right = head[8] * scale,
       top = head[9] * scale;
      caml_call3(Stdlib_Printf[2], _d_, upm, scale);
      caml_call5(Stdlib_Printf[2], _e_, left, bottom, right, top);
      var units_per_em = upm, bbox = [0, left, bottom, right, top];
     }
     else{
      caml_call1(Stdlib_Printf[2], _h_);
      var units_per_em = 1000., bbox = _i_;
     }
     var match$2 = caml_call1(Otfm[16], d);
     if(0 === match$2[0]){
      var
       hhea = match$2[1],
       scale$0 = 1000. / units_per_em,
       asc = hhea[1] * scale$0,
       desc = hhea[2] * scale$0;
      caml_call3(Stdlib_Printf[2], _f_, asc, desc);
      var descent = desc, ascent = asc;
     }
     else{
      caml_call1(Stdlib_Printf[2], _g_);
      var descent = -200., ascent = 800.;
     }
     var _ah_ = [0, ps_name, bbox, ascent, descent, units_per_em];
     return _ah_;
    }
    catch(e$0){
     var
      e = caml_wrap_exception(e$0),
      _ag_ = caml_call1(Stdlib_Printexc[1], e);
     caml_call2(Stdlib_Printf[2], _a_, _ag_);
     return _b_;
    }
   }
   function extract_cmap_and_widths(font_bytes){
    try{
     var
      bytes_string = caml_call1(Stdlib_Bytes[6], font_bytes),
      d = caml_call1(Otfm[5], [0, -976970511, bytes_string]),
      char_to_glyph = [0, 0];
     try{
      caml_call1(Stdlib_Printf[2], _v_);
      var cmap_fold = caml_call1(Otfm[13], d);
      caml_call2
       (cmap_fold,
        function(acc, map_kind, cp_range, glyph_id){
         var
          end_cp = cp_range[2],
          start_cp = cp_range[1],
          _ab_ = caml_call2(Stdlib[16], end_cp, 255);
         if(_ab_ >= start_cp){
          var cp = start_cp;
          for(;;){
           var
            _ac_ = 32 <= cp ? 1 : 0,
            _ad_ = _ac_ ? cp <= 126 ? 1 : 0 : _ac_;
           if(_ad_)
            char_to_glyph[1] =
             [0,
              [0, cp, glyph_id + (cp - start_cp | 0) | 0],
              char_to_glyph[1]];
           var _ae_ = caml_call1(Stdlib[29], cp);
           caml_call4
            (Stdlib_Printf[2],
             _w_,
             cp,
             _ae_,
             glyph_id + (cp - start_cp | 0) | 0);
           var _af_ = cp + 1 | 0;
           if(_ab_ === cp) break;
           cp = _af_;
          }
         }
         return acc;
        },
        0);
      var _V_ = caml_call1(Stdlib_List[1], char_to_glyph[1]);
      caml_call2(Stdlib_Printf[2], _x_, _V_);
     }
     catch(e){
      var
       e$0 = caml_wrap_exception(e),
       _P_ = caml_call1(Stdlib_Printexc[1], e$0);
      caml_call2(Stdlib_Printf[2], _m_, _P_);
      var i = 32;
      for(;;){
       char_to_glyph[1] = [0, [0, i, i - 29 | 0], char_to_glyph[1]];
       var _T_ = caml_call1(Stdlib[29], i);
       caml_call4(Stdlib_Printf[2], _u_, i, _T_, i - 29 | 0);
       var _U_ = i + 1 | 0;
       if(126 === i) break;
       i = _U_;
      }
     }
     var glyph_widths = [0, 0];
     try{
      caml_call1(Stdlib_Printf[2], _r_);
      var hmtx_fold = caml_call1(Otfm[17], d);
      caml_call2
       (hmtx_fold,
        function(acc, glyph_id, advance_width, lsb){
         glyph_widths[1] = [0, [0, glyph_id, advance_width], glyph_widths[1]];
         if(glyph_id < 20)
          caml_call3(Stdlib_Printf[2], _s_, glyph_id, advance_width);
         return acc;
        },
        0);
      var _S_ = caml_call1(Stdlib_List[1], glyph_widths[1]);
      caml_call2(Stdlib_Printf[2], _t_, _S_);
     }
     catch(e){
      var
       e$1 = caml_wrap_exception(e),
       _Q_ = caml_call1(Stdlib_Printexc[1], e$1);
      caml_call2(Stdlib_Printf[2], _n_, _Q_);
     }
     var match = caml_call1(Otfm[15], d);
     if(0 === match[0])
      var head = match[1], scale_factor = 1000. / head[3];
     else
      var scale_factor = 1.;
     caml_call2(Stdlib_Printf[2], _o_, scale_factor);
     var widths$0 = caml_array_make(256, 600.);
     caml_call2
      (Stdlib_List[18],
       function(param){
        var glyph_id = param[2], char_code = param[1];
        try{
         var
          raw_width = caml_call2(Stdlib_List[53], glyph_id, glyph_widths[1]),
          scaled_width = raw_width * scale_factor,
          _Y_ = 0 <= char_code ? 1 : 0,
          _Z_ = _Y_ ? char_code < 256 ? 1 : 0 : _Y_;
         if(_Z_)
          runtime.caml_check_bound(widths$0, char_code)[1 + char_code] = scaled_width;
         var
          ___ = caml_call1(Stdlib[29], char_code),
          _$_ =
            caml_call6
             (Stdlib_Printf[2],
              _q_,
              char_code,
              ___,
              glyph_id,
              raw_width,
              scaled_width);
         return _$_;
        }
        catch(_aa_){
         var _W_ = caml_wrap_exception(_aa_);
         if(_W_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_W_, 0);
         var _X_ = caml_call1(Stdlib[29], char_code);
         return caml_call4(Stdlib_Printf[2], _p_, char_code, _X_, glyph_id);
        }
       },
       char_to_glyph[1]);
     var _R_ = [0, char_to_glyph[1], widths$0, scale_factor];
     return _R_;
    }
    catch(e$0){
     var
      e = caml_wrap_exception(e$0),
      _O_ = caml_call1(Stdlib_Printexc[1], e);
     caml_call2(Stdlib_Printf[2], _l_, _O_);
     var widths = caml_array_make(256, 600.);
     return [0, 0, widths, 1.];
    }
   }
   function create_proper_cmap(char_mappings, subset_name){
    var _D_ = caml_call1(Stdlib_List[1], char_mappings);
    caml_call2(Stdlib_Printf[2], _y_, _D_);
    var buffer = caml_call1(Stdlib_Buffer[1], 1024);
    caml_call2(Stdlib_Buffer[16], buffer, cst_CIDInit_ProcSet_findresour);
    caml_call2(Stdlib_Buffer[16], buffer, cst_12_dict_begin);
    caml_call2(Stdlib_Buffer[16], buffer, cst_begincmap);
    caml_call2(Stdlib_Buffer[16], buffer, cst_CIDSystemInfo);
    var
     _E_ = caml_call2(Stdlib[28], subset_name, cst),
     _F_ = caml_call2(Stdlib[28], cst_Registry, _E_);
    caml_call2(Stdlib_Buffer[16], buffer, _F_);
    var
     _G_ = caml_call2(Stdlib[28], subset_name, cst$0),
     _H_ = caml_call2(Stdlib[28], cst_Ordering, _G_);
    caml_call2(Stdlib_Buffer[16], buffer, _H_);
    caml_call2(Stdlib_Buffer[16], buffer, cst_Supplement_0);
    caml_call2(Stdlib_Buffer[16], buffer, cst_def);
    var
     _I_ = caml_call2(Stdlib[28], subset_name, cst_def$0),
     _J_ = caml_call2(Stdlib[28], cst_CMapName, _I_);
    caml_call2(Stdlib_Buffer[16], buffer, _J_);
    caml_call2(Stdlib_Buffer[16], buffer, cst_CMapType_2_def);
    caml_call2(Stdlib_Buffer[16], buffer, cst_1_begincodespacerange);
    caml_call2(Stdlib_Buffer[16], buffer, cst_00_FF);
    caml_call2(Stdlib_Buffer[16], buffer, cst_endcodespacerange);
    var mapping_count = caml_call1(Stdlib_List[1], char_mappings);
    if(0 < mapping_count){
     var
      _K_ = caml_call1(Stdlib[33], mapping_count),
      _L_ = caml_call2(Stdlib[28], _K_, cst_beginbfchar);
     caml_call2(Stdlib_Buffer[16], buffer, _L_);
     var _M_ = caml_call1(Stdlib_List[10], char_mappings);
     caml_call2
      (Stdlib_List[18],
       function(param){
        var char_code = param[1];
        caml_call4(Stdlib_Printf[5], buffer, _z_, char_code, char_code);
        return caml_call3(Stdlib_Printf[2], _A_, char_code, char_code);
       },
       _M_);
     caml_call2(Stdlib_Buffer[16], buffer, cst_endbfchar);
    }
    else{
     caml_call1(Stdlib_Printf[2], _B_);
     caml_call2(Stdlib_Buffer[16], buffer, cst_95_beginbfchar);
     var i = 32;
     for(;;){
      caml_call4(Stdlib_Printf[5], buffer, _C_, i, i);
      var _N_ = i + 1 | 0;
      if(126 === i){
       caml_call2(Stdlib_Buffer[16], buffer, cst_endbfchar$0);
       break;
      }
      i = _N_;
     }
    }
    caml_call2(Stdlib_Buffer[16], buffer, cst_endcmap);
    caml_call2(Stdlib_Buffer[16], buffer, cst_CMapName_currentdict_CMap_);
    caml_call2(Stdlib_Buffer[16], buffer, cst_end);
    caml_call2(Stdlib_Buffer[16], buffer, cst_end$0);
    return caml_call1(Stdlib_Buffer[2], buffer);
   }
   var
    Label_maker_lib_Font_utils =
      [0,
       extract_basic_font_data,
       extract_cmap_and_widths,
       create_proper_cmap];
   runtime.caml_register_global
    (72, Label_maker_lib_Font_utils, "Label_maker_lib__Font_utils");
   return;
  }
  (globalThis));

//# 591 "../lib/.label_maker_lib.objs/jsoo/default/label_maker_lib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_mm = " mm\n";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    avery_l7160 = [0, "Avery L7160", 63.5, 38.1, 3, 7, 7., 15., 2.5, 0.],
    avery_l7162 = [0, "Avery L7162", 99.1, 33.9, 2, 8, 6., 15., 0., 0.],
    avery_l7160_93 = [0, "Avery L7160-93", 63.5, 38.1, 3, 7, 7., 15., 2.5, 0.],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib;
   function mm_to_points(mm){return mm * 2.834645669;}
   var
    available_layouts =
      [0, avery_l7160, [0, avery_l7162, [0, avery_l7160_93, 0]]],
    _a_ = [0, [11, "Layout: ", [2, 0, [12, 10, 0]]], "Layout: %s\n"],
    _b_ =
      [0,
       [11,
        "Label size: ",
        [8,
         [0, 0, 0],
         0,
         [0, 1],
         [11, " x ", [8, [0, 0, 0], 0, [0, 1], [11, cst_mm, 0]]]]],
       "Label size: %.1f x %.1f mm\n"],
    _c_ =
      [0,
       [11,
        "Grid: ",
        [4,
         0,
         0,
         0,
         [11,
          " cols x ",
          [4, 0, 0, 0, [11, " rows = ", [4, 0, 0, 0, [11, " labels\n", 0]]]]]]],
       "Grid: %d cols x %d rows = %d labels\n"],
    _d_ =
      [0,
       [11,
        "Margins: left=",
        [8,
         [0, 0, 0],
         0,
         [0, 1],
         [11, " mm, top=", [8, [0, 0, 0], 0, [0, 1], [11, cst_mm, 0]]]]],
       "Margins: left=%.1f mm, top=%.1f mm\n"],
    _e_ =
      [0,
       [11,
        "Spacing: x=",
        [8,
         [0, 0, 0],
         0,
         [0, 1],
         [11, " mm, y=", [8, [0, 0, 0], 0, [0, 1], [11, cst_mm, 0]]]]],
       "Spacing: x=%.1f mm, y=%.1f mm\n"];
   function calculate_label_position(layout, row, col){
    var
     x_mm = layout[6] + col * (layout[2] + layout[8]),
     y_from_top_mm = layout[7] + row * (layout[3] + layout[9]),
     y_mm = 297. - y_from_top_mm - layout[3];
    return [0, x_mm * 2.834645669, y_mm * 2.834645669];
   }
   function get_all_label_positions(layout){
    var positions = [0, 0], _h_ = layout[5] - 1 | 0, _g_ = 0;
    if(_h_ >= 0){
     var row = _g_;
     for(;;){
      var _j_ = layout[4] - 1 | 0, _i_ = 0;
      if(_j_ >= 0){
       var col = _i_;
       for(;;){
        var
         match = calculate_label_position(layout, row, col),
         y = match[2],
         x = match[1];
        positions[1] = [0, [0, x, y], positions[1]];
        var _l_ = col + 1 | 0;
        if(_j_ === col) break;
        col = _l_;
       }
      }
      var _k_ = row + 1 | 0;
      if(_h_ === row) break;
      row = _k_;
     }
    }
    return caml_call1(Stdlib_List[10], positions[1]);
   }
   function calculate_optimal_font_size(layout, text, max_font_size){
    var
     mm = layout[2],
     label_width_points = mm * 2.834645669,
     mm$0 = layout[3],
     label_height_points = mm$0 * 2.834645669,
     text_length = runtime.caml_ml_string_length(text),
     max_font_size_for_width =
       0 < text_length
        ? label_width_points / (text_length * 0.6)
        : max_font_size,
     max_font_size_for_height = label_height_points * 0.8,
     _f_ =
       caml_call2
        (Stdlib[16], max_font_size_for_width, max_font_size_for_height);
    return caml_call2(Stdlib[16], max_font_size, _f_);
   }
   function get_layout_by_name(name){
    return caml_call2
            (Stdlib_List[40],
             function(layout){return layout[1] === name ? 1 : 0;},
             available_layouts);
   }
   function print_layout_info(layout){
    caml_call2(Stdlib_Printf[2], _a_, layout[1]);
    caml_call3(Stdlib_Printf[2], _b_, layout[2], layout[3]);
    caml_call4
     (Stdlib_Printf[2],
      _c_,
      layout[4],
      layout[5],
      runtime.caml_mul(layout[4], layout[5]));
    caml_call3(Stdlib_Printf[2], _d_, layout[6], layout[7]);
    return caml_call3(Stdlib_Printf[2], _e_, layout[8], layout[9]);
   }
   var
    Label_maker_lib_Label_layouts =
      [0,
       210.,
       297.,
       mm_to_points,
       avery_l7160,
       avery_l7162,
       avery_l7160_93,
       available_layouts,
       calculate_label_position,
       get_all_label_positions,
       calculate_optimal_font_size,
       get_layout_by_name,
       print_layout_info];
   runtime.caml_register_global
    (16, Label_maker_lib_Label_layouts, "Label_maker_lib__Label_layouts");
   return;
  }
  (globalThis));

//# 761 "../lib/.label_maker_lib.objs/jsoo/default/label_maker_lib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "\n",
    cst$7 = " ",
    cst_re_S = " re S",
    cst_2f_2f_2f_2f_re_S = "%.2f %.2f %.2f %.2f re S",
    cst$6 = "/",
    cst_Catalog = "/Catalog",
    cst_Count = "/Count",
    cst_Font$0 = "/Font",
    cst_FontDescriptor$0 = "/FontDescriptor",
    cst_Kids$0 = "/Kids",
    cst_Length$2 = "/Length",
    cst_Pages$0 = "/Pages",
    cst_Type = "/Type",
    caml_check_bound = runtime.caml_check_bound,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$5,
    catalog_dict = [6, [0, [0, cst_Type, [4, cst_Catalog]], 0]],
    pages_dict =
      [6,
       [0,
        [0, cst_Type, [4, cst_Pages$0]],
        [0, [0, cst_Kids$0, [5, 0]], [0, [0, cst_Count, [1, 0]], 0]]]],
    cst$1 = cst$6,
    cst$2 = cst$6,
    cst$4 = cst$5,
    cst = cst$7,
    cst$0 = cst$7,
    Pdfio = global_data.Pdfio,
    Pdfwrite = global_data.Pdfwrite,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Label_maker_lib_Label_layouts = global_data.Label_maker_lib__Label_layouts,
    Label_maker_lib_Font_utils = global_data.Label_maker_lib__Font_utils,
    Pdf = global_data.Pdf,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Array = global_data.Stdlib__Array,
    cst_Failed_to_save_PDF = "Failed to save PDF: ",
    _a_ = [0, 0, 0.],
    _b_ = [0, 0, 0],
    cst_Multi_label_PDF_generation = "Multi-label PDF generation failed: ",
    cst_Pages = cst_Pages$0,
    _c_ = [0, cst_Type, [4, cst_Catalog]],
    cst_Length1 = "/Length1",
    cst_Length = cst_Length$2,
    cst_CUSTOM = "CUSTOM+",
    cst_Length$0 = cst_Length$2,
    cst_MissingWidth = "/MissingWidth",
    cst_StemV = "/StemV",
    cst_CapHeight = "/CapHeight",
    cst_Descent = "/Descent",
    cst_Ascent = "/Ascent",
    _d_ = [0, "/ItalicAngle", [2, 0.]],
    cst_FontBBox = "/FontBBox",
    _e_ = [0, "/Flags", [1, 4]],
    cst_FontFile2 = "/FontFile2",
    cst_FontName = "/FontName",
    _f_ = [0, cst_Type, [4, cst_FontDescriptor$0]],
    _g_ = [0, [0, "/Encoding", [4, "/WinAnsiEncoding"]], 0],
    cst_ToUnicode = "/ToUnicode",
    cst_Widths = "/Widths",
    cst_LastChar = "/LastChar",
    cst_FirstChar = "/FirstChar",
    cst_FontDescriptor = cst_FontDescriptor$0,
    cst_BaseFont = "/BaseFont",
    _h_ = [0, "/Subtype", [4, "/TrueType"]],
    _i_ = [0, cst_Type, [4, cst_Font$0]],
    _j_ =
      [0,
       [8,
        [0, 0, 0],
        0,
        [0, 2],
        [12,
         32,
         [8,
          [0, 0, 0],
          0,
          [0, 2],
          [12,
           32,
           [8,
            [0, 0, 0],
            0,
            [0, 2],
            [12, 32, [8, [0, 0, 0], 0, [0, 2], [11, cst_re_S, 0]]]]]]]],
       cst_2f_2f_2f_2f_re_S],
    _k_ =
      [0,
       [8,
        [0, 0, 0],
        0,
        [0, 2],
        [12,
         32,
         [8,
          [0, 0, 0],
          0,
          [0, 2],
          [12,
           32,
           [8,
            [0, 0, 0],
            0,
            [0, 2],
            [12, 32, [8, [0, 0, 0], 0, [0, 2], [11, cst_re_S, 0]]]]]]]],
       cst_2f_2f_2f_2f_re_S],
    _l_ =
      [0,
       [11,
        "BT /F1 ",
        [8,
         [0, 0, 0],
         0,
         [0, 1],
         [11,
          " Tf ",
          [8,
           [0, 0, 0],
           0,
           [0, 2],
           [12,
            32,
            [8,
             [0, 0, 0],
             0,
             [0, 2],
             [11, " Td (", [2, 0, [11, ") Tj ET", 0]]]]]]]]],
       "BT /F1 %.1f Tf %.2f %.2f Td (%s) Tj ET"],
    cst_Length$1 = cst_Length$2,
    cst_F1 = "/F1",
    cst_Font = cst_Font$0,
    cst_Resources = "/Resources",
    cst_Contents = "/Contents",
    _m_ = [2, 0.],
    _n_ = [2, 0.],
    cst_MediaBox = "/MediaBox",
    cst_Parent = "/Parent",
    _o_ = [0, cst_Type, [4, "/Page"]],
    _p_ = [0, [0, cst_Count, [1, 1]], 0],
    cst_Kids = cst_Kids$0,
    _q_ = [0, cst_Type, [4, cst_Pages$0]],
    cst_Error = "Error: ";
   function save_pdf_to_file(pdf, filename){
    try{var _F_ = caml_call2(Pdfwrite[5], pdf, filename); return _F_;}
    catch(e$0){
     var
      e = caml_wrap_exception(e$0),
      _D_ = caml_call1(Stdlib_Printexc[1], e),
      _E_ = caml_call2(Stdlib[28], cst_Failed_to_save_PDF, _D_);
     return caml_call1(Stdlib[2], _E_);
    }
   }
   function estimate_text_width(font_size, widths, text){
    var
     char_width_sum =
       caml_call3
        (Stdlib_String[20],
         function(acc, char_code){
          a:
          {
           if(32 <= char_code && 126 >= char_code){
            var
             char_width = caml_check_bound(widths, char_code)[1 + char_code];
            break a;
           }
           var char_width = caml_check_bound(widths, 32)[33];
          }
          return acc + char_width;
         },
         0.,
         text);
    return char_width_sum * font_size / 1000.;
   }
   function wrap_text(_A_, _z_, opt, text, max_width, font_size, widths){
    var
     max_width_with_checkbox = _A_ ? _A_[1] : 0.,
     checkbox_height = _z_ ? _z_[1] : 0.,
     line_height = opt ? opt[1] : 0.,
     user_lines = caml_call2(Stdlib_String[17], 10, text),
     all_lines =
       caml_call3
         (Stdlib_List[26],
          function(param, user_line){
           var
            current_y = param[2],
            all_lines = param[1],
            words = caml_call2(Stdlib_String[17], 32, user_line),
            match =
              caml_call3
               (Stdlib_List[26],
                function(param, word){
                 var
                  line_y = param[2],
                  lines = param[1],
                  current_line = caml_call1(Stdlib_List[6], lines),
                  line = caml_call2(Stdlib[37], current_line, [0, word, 0]),
                  line_max_width =
                    line_y <= checkbox_height
                     ? max_width_with_checkbox
                     : max_width,
                  test_width =
                    estimate_text_width
                     (font_size, widths, caml_call2(Stdlib_String[7], cst, line));
                 return test_width <= line_max_width
                         ? [0, [0, line, caml_call1(Stdlib_List[7], lines)], line_y]
                         : caml_call1
                            (Stdlib_List[4], current_line)
                           ? [0,
                             [0, [0, word, 0], caml_call1(Stdlib_List[7], lines)],
                             line_y]
                           : [0, [0, [0, word, 0], lines], line_y + line_height];
                },
                [0, _b_, current_y],
                words),
            final_y = match[2],
            lines = match[1],
            _B_ = caml_call1(Stdlib_String[7], cst$0),
            _C_ = caml_call2(Stdlib_List[22], _B_, lines);
           return [0,
                   caml_call2(Stdlib[37], all_lines, _C_),
                   final_y + line_height];
          },
          _a_,
          user_lines)
        [1];
    return all_lines;
   }
   function create_pdf_with_labels
   (font_bytes, text, layout_name, font_size, _s_, opt, param){
    var show_borders = _s_ ? _s_[1] : 0, include_checkbox = opt ? opt[1] : 1;
    try{
     var match = caml_call1(Label_maker_lib_Label_layouts[11], layout_name);
     if(match)
      var l = match[1], layout = l;
     else
      var layout = Label_maker_lib_Label_layouts[4];
     var
      match$0 = caml_call1(Label_maker_lib_Font_utils[1], font_bytes),
      descent = match$0[4],
      ascent = match$0[3],
      bbox = match$0[2],
      ps_name = match$0[1],
      match$1 = caml_call1(Label_maker_lib_Font_utils[2], font_bytes),
      widths = match$1[2],
      char_mappings = match$1[1],
      pdf = caml_call1(Pdf[3], 0),
      catalog_num = caml_call2(Pdf[23], pdf, catalog_dict),
      pdf$0 = [0, pdf[1], pdf[2], catalog_num, pdf[4], pdf[5], pdf[6], pdf[7]],
      pages_num = caml_call2(Pdf[23], pdf$0, pages_dict),
      updated_catalog = [6, [0, _c_, [0, [0, cst_Pages, [8, pages_num]], 0]]];
     caml_call2(Pdf[24], pdf$0, [0, catalog_num, updated_catalog]);
     var
      _v_ = caml_call1(Stdlib_Bytes[6], font_bytes),
      font_data_stream =
        [7,
         [0,
          [0,
           [6,
            [0,
             [0, cst_Length, [1, caml_ml_bytes_length(font_bytes)]],
             [0, [0, cst_Length1, [1, caml_ml_bytes_length(font_bytes)]], 0]]],
           [0, caml_call1(Pdfio[30], _v_)]]]],
      font_data_num = caml_call2(Pdf[23], pdf$0, font_data_stream),
      subset_name = caml_call2(Stdlib[28], cst_CUSTOM, ps_name),
      cmap_content =
        caml_call2(Label_maker_lib_Font_utils[3], char_mappings, subset_name),
      cmap_stream =
        [7,
         [0,
          [0,
           [6,
            [0,
             [0, cst_Length$0, [1, caml_ml_string_length(cmap_content)]],
             0]],
           [0, caml_call1(Pdfio[30], cmap_content)]]]],
      cmap_num = caml_call2(Pdf[23], pdf$0, cmap_stream),
      bbox_top = bbox[4],
      bbox_right = bbox[3],
      bbox_bottom = bbox[2],
      bbox_left = bbox[1],
      cap_height = ascent * 0.8,
      font_descriptor =
        [6,
         [0,
          _f_,
          [0,
           [0, cst_FontName, [4, caml_call2(Stdlib[28], cst$1, subset_name)]],
           [0,
            [0, cst_FontFile2, [8, font_data_num]],
            [0,
             _e_,
             [0,
              [0,
               cst_FontBBox,
               [5,
                [0,
                 [2, bbox_left],
                 [0,
                  [2, bbox_bottom],
                  [0, [2, bbox_right], [0, [2, bbox_top], 0]]]]]],
              [0,
               _d_,
               [0,
                [0, cst_Ascent, [2, ascent]],
                [0,
                 [0, cst_Descent, [2, descent]],
                 [0,
                  [0, cst_CapHeight, [2, cap_height]],
                  [0,
                   [0, cst_StemV, [2, 100.]],
                   [0, [0, cst_MissingWidth, [2, 600.]], 0]]]]]]]]]]]],
      font_descriptor_num = caml_call2(Pdf[23], pdf$0, font_descriptor),
      first_char = 32,
      width_array = caml_call3(Stdlib_Array[6], widths, first_char, 95),
      _w_ =
        caml_call2(Stdlib_Array[14], function(w){return [2, w];}, width_array),
      _x_ =
        [0,
         [0, cst_FontDescriptor, [8, font_descriptor_num]],
         [0,
          [0, cst_FirstChar, [1, first_char]],
          [0,
           [0, cst_LastChar, [1, 126]],
           [0,
            [0, cst_Widths, [5, caml_call1(Stdlib_Array[10], _w_)]],
            [0, [0, cst_ToUnicode, [8, cmap_num]], _g_]]]]],
      font_dict =
        [6,
         [0,
          _i_,
          [0,
           _h_,
           [0,
            [0, cst_BaseFont, [4, caml_call2(Stdlib[28], cst$2, subset_name)]],
            _x_]]]],
      font_num = caml_call2(Pdf[23], pdf$0, font_dict),
      positions = caml_call1(Label_maker_lib_Label_layouts[9], layout),
      label_width_points =
        caml_call1(Label_maker_lib_Label_layouts[3], layout[2]),
      label_height_points =
        caml_call1(Label_maker_lib_Label_layouts[3], layout[3]),
      checkbox_height = caml_call1(Label_maker_lib_Label_layouts[3], 8.),
      line_height = font_size * 1.2,
      max_width = label_width_points - 6.,
      max_width_with_checkbox =
        0. < checkbox_height
         ? label_width_points - 6. - checkbox_height - 2.
         : max_width,
      text_lines =
        wrap_text
         ([0, max_width_with_checkbox],
          [0, checkbox_height],
          [0, line_height],
          text,
          max_width,
          font_size,
          widths),
      content_parts =
        caml_call2
         (Stdlib_List[20],
          function(param){
           var
            y = param[2],
            x = param[1],
            border_parts =
              show_borders
               ? [0,
                 caml_call5
                  (Stdlib_Printf[4],
                   _j_,
                   x,
                   y,
                   label_width_points,
                   label_height_points),
                 0]
               : 0;
           if(include_checkbox)
            var
             checkbox_x = x + label_width_points - checkbox_height - 5.,
             checkbox_y = y + label_height_points - checkbox_height - 5.,
             checkbox_parts =
               [0,
                caml_call5
                 (Stdlib_Printf[4],
                  _k_,
                  checkbox_x,
                  checkbox_y,
                  checkbox_height,
                  checkbox_height),
                0];
           else
            var checkbox_parts = 0;
           var
            text_parts =
              caml_call2
               (Stdlib_List[21],
                function(line_idx, line){
                 var
                  text_x = x + 3.,
                  text_y =
                    y + label_height_points - 3. - line_idx * line_height
                    - font_size;
                 return caml_call5
                         (Stdlib_Printf[4], _l_, font_size, text_x, text_y, line);
                },
                text_lines),
            _y_ = caml_call2(Stdlib[37], checkbox_parts, text_parts),
            all_parts = caml_call2(Stdlib[37], border_parts, _y_);
           return caml_call2(Stdlib_String[7], cst$3, all_parts);
          },
          positions),
      full_content = caml_call2(Stdlib_String[7], cst$4, content_parts),
      content_dict =
        [6,
         [0, [0, cst_Length$1, [1, caml_ml_string_length(full_content)]], 0]],
      content_stream =
        [7, [0, [0, content_dict, [0, caml_call1(Pdfio[30], full_content)]]]],
      content_num = caml_call2(Pdf[23], pdf$0, content_stream),
      page_width =
        caml_call1
         (Label_maker_lib_Label_layouts[3], Label_maker_lib_Label_layouts[1]),
      page_height =
        caml_call1
         (Label_maker_lib_Label_layouts[3], Label_maker_lib_Label_layouts[2]),
      page_dict =
        [6,
         [0,
          _o_,
          [0,
           [0, cst_Parent, [8, pages_num]],
           [0,
            [0,
             cst_MediaBox,
             [5,
              [0,
               _n_,
               [0, _m_, [0, [2, page_width], [0, [2, page_height], 0]]]]]],
            [0,
             [0, cst_Contents, [8, content_num]],
             [0,
              [0,
               cst_Resources,
               [6,
                [0, [0, cst_Font, [6, [0, [0, cst_F1, [8, font_num]], 0]]], 0]]],
              0]]]]]],
      page_num = caml_call2(Pdf[23], pdf$0, page_dict),
      updated_pages =
        [6, [0, _q_, [0, [0, cst_Kids, [5, [0, [8, page_num], 0]]], _p_]]];
     caml_call2(Pdf[24], pdf$0, [0, pages_num, updated_pages]);
     return pdf$0;
    }
    catch(e$0){
     var
      e = caml_wrap_exception(e$0),
      _t_ = caml_call1(Stdlib_Printexc[1], e),
      _u_ = caml_call2(Stdlib[28], cst_Multi_label_PDF_generation, _t_);
     return caml_call1(Stdlib[2], _u_);
    }
   }
   function create_pdf_as_string(pdf){
    try{
     var
      match = caml_call1(Pdfio[6], 16384),
      bytes_ref = match[2],
      output = match[1];
     caml_call8(Pdfwrite[2], 0, 0, 0, 0, 0, 1, pdf, output);
     var
      pdf_bytes = caml_call2(Pdfio[7], output, bytes_ref),
      pdf_string = caml_call1(Pdfio[41], pdf_bytes);
     return pdf_string;
    }
    catch(e$0){
     var
      e = caml_wrap_exception(e$0),
      _r_ = caml_call1(Stdlib_Printexc[1], e);
     return caml_call2(Stdlib[28], cst_Error, _r_);
    }
   }
   var
    Label_maker_lib_Pdf_generator =
      [0,
       save_pdf_to_file,
       estimate_text_width,
       wrap_text,
       create_pdf_with_labels,
       create_pdf_as_string];
   runtime.caml_register_global
    (82, Label_maker_lib_Pdf_generator, "Label_maker_lib__Pdf_generator");
   return;
  }
  (globalThis));

//# 4 ".label_maker.eobjs/jsoo/dune__exe.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dune_exe = [0];
   runtime.caml_register_global(0, Dune_exe, "Dune__exe");
   return;
  }
  (globalThis));

//# 5 ".label_maker.eobjs/jsoo/dune__exe__Label_maker.cmo.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_bytes$2 = " bytes",
    cst_555 = "#555",
    cst_888 = "#888",
    cst_02X_02X_02X_02X = "%02X %02X %02X %02X",
    cst_100 = "100%",
    cst_10px = "10px",
    cst_12px = "12px",
    cst_14px = "14px",
    cst_1px_solid_ddd = "1px solid #ddd",
    cst_20px = "20px",
    cst_30px = "30px",
    cst_4px = "4px",
    cst_80px = "80px",
    cst_8px = "8px",
    cst_Arial_sans_serif = "Arial, sans-serif",
    cst_INSUFFICIENT_DATA$1 = "INSUFFICIENT_DATA",
    cst_application_pdf = "application/pdf",
    cst_block = "block",
    cst_bold = "bold",
    cst_center = "center",
    cst_checkbox$1 = "checkbox",
    cst_none = "none",
    cst_white = "white",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_js_from_array = runtime.caml_js_from_array,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    filename = "XCCW_Joined_23a.ttf",
    cst$0 = cst$1,
    cst = cst$1,
    Stdlib = global_data.Stdlib,
    Label_maker_lib_Pdf_generator = global_data.Label_maker_lib__Pdf_generator,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html;
   global_data.CamlinternalOO;
   var
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_Typed_array = global_data.Js_of_ocaml__Typed_array,
    Stdlib_Printf = global_data.Stdlib__Printf;
   function create_select_option(value, text){
    var
     option = caml_call1(Js_of_ocaml_Dom_html[38], Js_of_ocaml_Dom_html[2]),
     t18 = caml_jsstring_of_string(value);
    option.value = t18;
    var t20 = caml_jsstring_of_string(text);
    option.innerHTML = t20;
    return option;
   }
   var t22 = Js_of_ocaml_Dom_html[2], body = t22.body, t25 = body.style;
   t25.margin = "0";
   var t28 = body.style;
   t28.padding = "40px 20px";
   var t31 = body.style;
   t31.fontFamily = cst_Arial_sans_serif;
   var t34 = body.style;
   t34.backgroundColor = "#f5f5f5";
   var
    main_container =
      caml_call1(Js_of_ocaml_Dom_html[51], Js_of_ocaml_Dom_html[2]),
    t37 = main_container.style;
   t37.maxWidth = "600px";
   var t40 = main_container.style;
   t40.margin = "0 auto";
   var t43 = main_container.style;
   t43.backgroundColor = cst_white;
   var t46 = main_container.style;
   t46.padding = "40px";
   var t49 = main_container.style;
   t49.borderRadius = cst_8px;
   var t52 = main_container.style;
   t52.border = cst_1px_solid_ddd;
   var title = caml_call1(Js_of_ocaml_Dom_html[54], Js_of_ocaml_Dom_html[2]);
   title.innerHTML = "Avery Label Maker";
   var t57 = title.style;
   t57.textAlign = cst_center;
   var t60 = title.style;
   t60.marginBottom = cst_30px;
   var t63 = title.style;
   t63.color = "#333";
   caml_call2(Js_of_ocaml_Dom[5], main_container, title);
   var
    form_div = caml_call1(Js_of_ocaml_Dom_html[51], Js_of_ocaml_Dom_html[2]),
    text_label = caml_call1(Js_of_ocaml_Dom_html[43], Js_of_ocaml_Dom_html[2]);
   text_label.innerHTML = "Text for labels:";
   var t68 = text_label.style;
   t68.display = cst_block;
   var t71 = text_label.style;
   t71.marginBottom = cst_8px;
   var t74 = text_label.style;
   t74.fontWeight = cst_bold;
   var t77 = text_label.style;
   t77.color = cst_555;
   caml_call2(Js_of_ocaml_Dom[5], form_div, text_label);
   var
    text_input =
      caml_call3(Js_of_ocaml_Dom_html[41], 0, 0, Js_of_ocaml_Dom_html[2]);
   text_input.value =
    "Line 1: Sample text\nLine 2: More text\nLine 3: Final line";
   var t82 = text_input.style;
   t82.width = cst_100;
   var t85 = text_input.style;
   t85.height = cst_80px;
   var t88 = text_input.style;
   t88.marginBottom = cst_20px;
   var t91 = text_input.style;
   t91.padding = cst_10px;
   var t94 = text_input.style;
   t94.border = cst_1px_solid_ddd;
   var t97 = text_input.style;
   t97.borderRadius = cst_4px;
   var t100 = text_input.style;
   t100.fontFamily = cst_Arial_sans_serif;
   var t103 = text_input.style;
   t103.fontSize = cst_14px;
   caml_call2(Js_of_ocaml_Dom[5], form_div, text_input);
   var
    layout_label =
      caml_call1(Js_of_ocaml_Dom_html[43], Js_of_ocaml_Dom_html[2]);
   layout_label.innerHTML = "Label Layout:";
   var t108 = layout_label.style;
   t108.display = cst_block;
   var t111 = layout_label.style;
   t111.marginBottom = cst_8px;
   var t114 = layout_label.style;
   t114.fontWeight = cst_bold;
   var t117 = layout_label.style;
   t117.color = cst_555;
   caml_call2(Js_of_ocaml_Dom[5], form_div, layout_label);
   var
    layout_select =
      caml_call3(Js_of_ocaml_Dom_html[39], 0, 0, Js_of_ocaml_Dom_html[2]),
    t120 = layout_select.style;
   t120.width = cst_100;
   var t123 = layout_select.style;
   t123.padding = cst_10px;
   var t126 = layout_select.style;
   t126.marginBottom = cst_20px;
   var t129 = layout_select.style;
   t129.border = cst_1px_solid_ddd;
   var t132 = layout_select.style;
   t132.borderRadius = cst_4px;
   var t135 = layout_select.style;
   t135.fontSize = cst_14px;
   var
    option_l7160 =
      create_select_option
       ("Avery L7160", "Avery L7160 (21 labels, 63.5x38.1mm)"),
    option_l7162 =
      create_select_option
       ("Avery L7162", "Avery L7162 (16 labels, 99.1x33.9mm)"),
    option_l7160_93 =
      create_select_option
       ("Avery L7160-93", "Avery L7160-93 (21 labels, 63.5x38.1mm)");
   caml_call2(Js_of_ocaml_Dom[5], layout_select, option_l7160);
   caml_call2(Js_of_ocaml_Dom[5], layout_select, option_l7162);
   caml_call2(Js_of_ocaml_Dom[5], layout_select, option_l7160_93);
   caml_call2(Js_of_ocaml_Dom[5], form_div, layout_select);
   var
    font_size_label =
      caml_call1(Js_of_ocaml_Dom_html[43], Js_of_ocaml_Dom_html[2]);
   font_size_label.innerHTML = "Font Size:";
   var t140 = font_size_label.style;
   t140.display = cst_block;
   var t143 = font_size_label.style;
   t143.marginBottom = cst_8px;
   var t146 = font_size_label.style;
   t146.fontWeight = cst_bold;
   var t149 = font_size_label.style;
   t149.color = cst_555;
   caml_call2(Js_of_ocaml_Dom[5], form_div, font_size_label);
   var
    font_size_container =
      caml_call1(Js_of_ocaml_Dom_html[51], Js_of_ocaml_Dom_html[2]),
    t152 = font_size_container.style;
   t152.marginBottom = cst_20px;
   var
    font_size_input =
      caml_call3
       (Js_of_ocaml_Dom_html[40], [0, "number"], 0, Js_of_ocaml_Dom_html[2]);
   font_size_input.value = "12";
   font_size_input.setAttribute("min", "6");
   font_size_input.setAttribute("max", "72");
   var t163 = font_size_input.style;
   t163.width = cst_80px;
   var t166 = font_size_input.style;
   t166.padding = cst_10px;
   var t169 = font_size_input.style;
   t169.border = cst_1px_solid_ddd;
   var t172 = font_size_input.style;
   t172.borderRadius = cst_4px;
   var t175 = font_size_input.style;
   t175.fontSize = cst_14px;
   caml_call2(Js_of_ocaml_Dom[5], font_size_container, font_size_input);
   var
    font_size_unit =
      caml_call1(Js_of_ocaml_Dom_html[86], Js_of_ocaml_Dom_html[2]);
   font_size_unit.innerHTML = " pt";
   var t180 = font_size_unit.style;
   t180.marginLeft = cst_8px;
   var t183 = font_size_unit.style;
   t183.color = "#666";
   caml_call2(Js_of_ocaml_Dom[5], font_size_container, font_size_unit);
   caml_call2(Js_of_ocaml_Dom[5], form_div, font_size_container);
   var
    options_container =
      caml_call1(Js_of_ocaml_Dom_html[51], Js_of_ocaml_Dom_html[2]),
    t186 = options_container.style;
   t186.marginBottom = cst_20px;
   var
    border_container =
      caml_call1(Js_of_ocaml_Dom_html[51], Js_of_ocaml_Dom_html[2]),
    t189 = border_container.style;
   t189.marginBottom = cst_10px;
   var
    border_checkbox =
      caml_call3
       (Js_of_ocaml_Dom_html[40],
        [0, cst_checkbox$1],
        0,
        Js_of_ocaml_Dom_html[2]),
    t192 = border_checkbox.style;
   t192.marginRight = cst_8px;
   caml_call2(Js_of_ocaml_Dom[5], border_container, border_checkbox);
   var
    border_label =
      caml_call1(Js_of_ocaml_Dom_html[43], Js_of_ocaml_Dom_html[2]);
   border_label.innerHTML = "Show borders (debug)";
   var t197 = border_label.style;
   t197.fontSize = cst_14px;
   var t200 = border_label.style;
   t200.color = cst_555;
   caml_call2(Js_of_ocaml_Dom[5], border_container, border_label);
   var
    border_help =
      caml_call1(Js_of_ocaml_Dom_html[86], Js_of_ocaml_Dom_html[2]);
   border_help.innerHTML = " - helps visualize label positioning";
   var t205 = border_help.style;
   t205.fontSize = cst_12px;
   var t208 = border_help.style;
   t208.color = cst_888;
   caml_call2(Js_of_ocaml_Dom[5], border_container, border_help);
   caml_call2(Js_of_ocaml_Dom[5], options_container, border_container);
   var
    checkbox_container =
      caml_call1(Js_of_ocaml_Dom_html[51], Js_of_ocaml_Dom_html[2]),
    t211 = checkbox_container.style;
   t211.marginBottom = cst_10px;
   var
    checkbox_feature_checkbox =
      caml_call3
       (Js_of_ocaml_Dom_html[40],
        [0, cst_checkbox$1],
        0,
        Js_of_ocaml_Dom_html[2]),
    t212 = ! ! 1;
   checkbox_feature_checkbox.checked = t212;
   var t216 = checkbox_feature_checkbox.style;
   t216.marginRight = cst_8px;
   caml_call2
    (Js_of_ocaml_Dom[5], checkbox_container, checkbox_feature_checkbox);
   var
    checkbox_feature_label =
      caml_call1(Js_of_ocaml_Dom_html[43], Js_of_ocaml_Dom_html[2]);
   checkbox_feature_label.innerHTML = "Include checkbox";
   var t221 = checkbox_feature_label.style;
   t221.fontSize = cst_14px;
   var t224 = checkbox_feature_label.style;
   t224.color = cst_555;
   caml_call2(Js_of_ocaml_Dom[5], checkbox_container, checkbox_feature_label);
   var
    checkbox_feature_help =
      caml_call1(Js_of_ocaml_Dom_html[86], Js_of_ocaml_Dom_html[2]);
   checkbox_feature_help.innerHTML = " - adds 8mm square for ticking";
   var t229 = checkbox_feature_help.style;
   t229.fontSize = cst_12px;
   var t232 = checkbox_feature_help.style;
   t232.color = cst_888;
   caml_call2(Js_of_ocaml_Dom[5], checkbox_container, checkbox_feature_help);
   caml_call2(Js_of_ocaml_Dom[5], options_container, checkbox_container);
   caml_call2(Js_of_ocaml_Dom[5], form_div, options_container);
   var
    button_container =
      caml_call1(Js_of_ocaml_Dom_html[51], Js_of_ocaml_Dom_html[2]),
    t235 = button_container.style;
   t235.textAlign = cst_center;
   var t238 = button_container.style;
   t238.marginTop = cst_30px;
   var
    generate_button =
      caml_call3(Js_of_ocaml_Dom_html[42], 0, 0, Js_of_ocaml_Dom_html[2]);
   generate_button.innerHTML = "Generate Label PDF";
   var t243 = generate_button.style;
   t243.backgroundColor = "#4CAF50";
   var t246 = generate_button.style;
   t246.color = cst_white;
   var t249 = generate_button.style;
   t249.padding = "12px 24px";
   var t252 = generate_button.style;
   t252.border = cst_none;
   var t255 = generate_button.style;
   t255.borderRadius = cst_4px;
   var t258 = generate_button.style;
   t258.cursor = "pointer";
   var t261 = generate_button.style;
   t261.fontSize = "16px";
   var t264 = generate_button.style;
   t264.fontWeight = "500";
   caml_call2(Js_of_ocaml_Dom[5], button_container, generate_button);
   var
    _a_ =
      [0,
       [4,
        8,
        [0, 2, 2],
        0,
        [12,
         32,
         [4,
          8,
          [0, 2, 2],
          0,
          [12, 32, [4, 8, [0, 2, 2], 0, [12, 32, [4, 8, [0, 2, 2], 0, 0]]]]]]],
       cst_02X_02X_02X_02X],
    _b_ =
      [0,
       [4,
        8,
        [0, 2, 2],
        0,
        [12,
         32,
         [4,
          8,
          [0, 2, 2],
          0,
          [12, 32, [4, 8, [0, 2, 2], 0, [12, 32, [4, 8, [0, 2, 2], 0, 0]]]]]]],
       cst_02X_02X_02X_02X],
    cst_Actual_size = ", Actual size: ",
    cst_FONT_DEBUG_Expected_size = "FONT_DEBUG: Expected size: ",
    cst_FONT_DEBUG_First_4_bytes = "FONT_DEBUG: First 4 bytes: ",
    cst_FONT_DEBUG_Last_4_bytes = "FONT_DEBUG: Last 4 bytes: ",
    _c_ = [0, [0, [0, [0, [0, 0]]]], "%c%c%c%c"],
    cst_FONT_DEBUG_Valid_font_magi = "FONT_DEBUG: Valid font magic number: ",
    cst_FONT_DEBUG_First_100_bytes = "FONT_DEBUG: First 100 bytes checksum: ",
    cst_INSUFFICIENT_DATA = cst_INSUFFICIENT_DATA$1,
    cst_INSUFFICIENT_DATA$0 = cst_INSUFFICIENT_DATA$1,
    cst_Font_loading_error = "Font loading error: ",
    cst_Loading_font_from_js_of_oc =
      "Loading font from js_of_ocaml virtual filesystem: ",
    cst_bytes = cst_bytes$2,
    cst_Font_loaded_successfully_f = "Font loaded successfully from VFS: ",
    cst_checksum = ", checksum=",
    cst_valid_magic = ", valid_magic=",
    cst_Font_integrity_check_size_ = "Font integrity check: size_ok=",
    cst_Creating_binary_safe_PDF_d = "Creating binary-safe PDF download for ",
    cst_bytes$0 = cst_bytes$2,
    cst_PDF_content_length = "PDF content length: ",
    cst_Binary_safe_download_faile =
      "Binary-safe download failed, falling back to string method: ",
    cst_Error = "Error: ",
    cst_checkbox = ", checkbox: ",
    cst_borders = ", borders: ",
    cst_font_size = ", font size: ",
    cst_layout = "', layout: ",
    cst_Generating_labels_with_tex = "Generating labels with text: '",
    cst_bytes$1 = cst_bytes$2,
    cst_Font_loaded_successfully_S = "Font loaded successfully! Size: ",
    cst_Error_creating_PDF = "Error creating PDF: ",
    cst_pdf = ".pdf",
    cst_checkbox$0 = "_checkbox",
    cst_bordered = "_bordered",
    cst_labels = "labels_",
    cst_Label_PDF_generated_and_op =
      "Label PDF generated and opened in browser: ",
    t270 =
      caml_call1
       (Js_of_ocaml_Dom_html[10],
        function(param){
         try{
          var
           text = caml_string_of_jsstring(text_input.value),
           layout_name = caml_string_of_jsstring(layout_select.value),
           font_size =
             runtime.caml_float_of_string
              (caml_string_of_jsstring(font_size_input.value)),
           show_borders = border_checkbox.checked | 0,
           include_checkbox = checkbox_feature_checkbox.checked | 0,
           _W_ = caml_call1(Stdlib[30], include_checkbox),
           _X_ = caml_call2(Stdlib[28], cst_checkbox, _W_),
           _Y_ = caml_call1(Stdlib[30], show_borders),
           _Z_ = caml_call2(Stdlib[28], _Y_, _X_),
           ___ = caml_call2(Stdlib[28], cst_borders, _Z_),
           _$_ = caml_call1(Stdlib[35], font_size),
           _aa_ = caml_call2(Stdlib[28], _$_, ___),
           _ab_ = caml_call2(Stdlib[28], cst_font_size, _aa_),
           _ac_ = caml_call2(Stdlib[28], layout_name, _ab_),
           _ad_ = caml_call2(Stdlib[28], cst_layout, _ac_),
           _ae_ = caml_call2(Stdlib[28], text, _ad_);
          caml_call2(Stdlib[28], cst_Generating_labels_with_tex, _ae_);
          try{
           caml_call2(Stdlib[28], cst_Loading_font_from_js_of_oc, filename);
           var
            ic = caml_call1(Stdlib[80], filename),
            length = caml_call1(Stdlib[92], ic),
            font_bytes = runtime.caml_create_bytes(length);
           caml_call4(Stdlib[85], ic, font_bytes, 0, length);
           caml_call1(Stdlib[93], ic);
           var
            _E_ = caml_call1(Stdlib[33], length),
            _F_ = caml_call2(Stdlib[28], _E_, cst_bytes);
           caml_call2(Stdlib[28], cst_Font_loaded_successfully_f, _F_);
           var
            actual_size = caml_ml_bytes_length(font_bytes),
            expected_size = 63200;
           if(4 <= actual_size)
            var
             _d_ = caml_bytes_get(font_bytes, 3),
             _e_ = caml_bytes_get(font_bytes, 2),
             _f_ = caml_bytes_get(font_bytes, 1),
             _g_ = caml_bytes_get(font_bytes, 0),
             first_4_bytes =
               caml_call5(Stdlib_Printf[4], _a_, _g_, _f_, _e_, _d_);
           else
            var first_4_bytes = cst_INSUFFICIENT_DATA$0;
           if(4 <= actual_size)
            var
             _h_ = caml_bytes_get(font_bytes, actual_size - 1 | 0),
             _i_ = caml_bytes_get(font_bytes, actual_size - 2 | 0),
             _j_ = caml_bytes_get(font_bytes, actual_size - 3 | 0),
             _k_ = caml_bytes_get(font_bytes, actual_size - 4 | 0),
             last_4_bytes =
               caml_call5(Stdlib_Printf[4], _b_, _k_, _j_, _i_, _h_);
           else
            var last_4_bytes = cst_INSUFFICIENT_DATA;
           var
            _l_ = caml_call1(Stdlib[33], actual_size),
            _m_ = caml_call2(Stdlib[28], cst_Actual_size, _l_),
            _n_ = caml_call1(Stdlib[33], expected_size),
            _o_ = caml_call2(Stdlib[28], _n_, _m_);
           caml_call2(Stdlib[28], cst_FONT_DEBUG_Expected_size, _o_);
           caml_call2(Stdlib[28], cst_FONT_DEBUG_First_4_bytes, first_4_bytes);
           caml_call2(Stdlib[28], cst_FONT_DEBUG_Last_4_bytes, last_4_bytes);
           if(4 <= actual_size){
            var
             _p_ = caml_bytes_get(font_bytes, 3),
             _q_ = caml_bytes_get(font_bytes, 2),
             _r_ = caml_bytes_get(font_bytes, 1),
             _s_ = caml_bytes_get(font_bytes, 0),
             magic = caml_call5(Stdlib_Printf[4], _c_, _s_, _r_, _q_, _p_),
             _t_ = magic === "\0\x01\0\0" ? 1 : 0;
            if(_t_)
             var _u_ = _t_;
            else{
             var _B_ = magic === "OTTO" ? 1 : 0;
             if(_B_)
              var _u_ = _B_;
             else
              var
               _C_ = magic === "true" ? 1 : 0,
               _u_ = _C_ || (magic === "ttcf" ? 1 : 0);
            }
            var is_valid_font = _u_;
           }
           else
            var is_valid_font = 0;
           var _v_ = caml_call1(Stdlib[30], is_valid_font);
           caml_call2(Stdlib[28], cst_FONT_DEBUG_Valid_font_magi, _v_);
           var
            checksum = [0, 0],
            _x_ = caml_call2(Stdlib[16], 99, actual_size - 1 | 0),
            _w_ = 0;
           if(_x_ >= 0){
            var i = _w_;
            for(;;){
             var _z_ = caml_bytes_get(font_bytes, i);
             checksum[1] = checksum[1] + _z_ | 0;
             var _A_ = i + 1 | 0;
             if(_x_ === i) break;
             i = _A_;
            }
           }
           var _y_ = caml_call1(Stdlib[33], checksum[1]);
           caml_call2(Stdlib[28], cst_FONT_DEBUG_First_100_bytes, _y_);
           var
            checksum$0 = checksum[1],
            size_ok = actual_size === 63200 ? 1 : 0,
            _G_ = caml_call1(Stdlib[33], checksum$0),
            _H_ = caml_call2(Stdlib[28], cst_checksum, _G_),
            _I_ = caml_call1(Stdlib[30], is_valid_font),
            _J_ = caml_call2(Stdlib[28], _I_, _H_),
            _K_ = caml_call2(Stdlib[28], cst_valid_magic, _J_),
            _L_ = caml_call1(Stdlib[30], size_ok),
            _M_ = caml_call2(Stdlib[28], _L_, _K_);
           caml_call2(Stdlib[28], cst_Font_integrity_check_size_, _M_);
           var _N_ = [0, font_bytes], match = _N_;
          }
          catch(e$0){
           var
            e = caml_wrap_exception(e$0),
            _D_ = caml_call1(Stdlib_Printexc[1], e);
           caml_call2(Stdlib[28], cst_Font_loading_error, _D_);
           var match = 0;
          }
          if(match){
           var
            font_bytes$0 = match[1],
            _af_ = caml_call1(Stdlib[33], caml_ml_bytes_length(font_bytes$0)),
            _ag_ = caml_call2(Stdlib[28], _af_, cst_bytes$1);
           caml_call2(Stdlib[28], cst_Font_loaded_successfully_S, _ag_);
           try{
            var
             pdf =
               caml_call7
                (Label_maker_lib_Pdf_generator[4],
                 font_bytes$0,
                 text,
                 layout_name,
                 font_size,
                 [0, show_borders],
                 [0, include_checkbox],
                 0),
             pdf_content = caml_call1(Label_maker_lib_Pdf_generator[5], pdf);
            a:
            {
             if
              (6 < caml_ml_string_length(pdf_content)
               &&
                caml_call3(Stdlib_String[16], pdf_content, 0, 6) === "Error:")
              break a;
             var
              _ai_ = include_checkbox ? cst_checkbox$0 : cst$0,
              _aj_ = caml_call2(Stdlib[28], _ai_, cst_pdf),
              _ak_ = show_borders ? cst_bordered : cst,
              _al_ = caml_call2(Stdlib[28], _ak_, _aj_),
              _am_ = caml_call2(Stdlib[28], layout_name, _al_),
              filename$0 = caml_call2(Stdlib[28], cst_labels, _am_);
             try{
              caml_call2
               (Stdlib[28], cst_Creating_binary_safe_PDF_d, filename$0);
              var
               _O_ =
                 caml_call1(Stdlib[33], caml_ml_string_length(pdf_content)),
               _P_ = caml_call2(Stdlib[28], _O_, cst_bytes$0);
              caml_call2(Stdlib[28], cst_PDF_content_length, _P_);
              var
               length$0 = caml_ml_string_length(pdf_content),
               t1 = Js_of_ocaml_Typed_array[10],
               uint8_array = new t1(length$0),
               _R_ = length$0 - 1 | 0,
               _Q_ = 0;
              if(_R_ >= 0){
               var i$0 = _Q_;
               for(;;){
                var _S_ = runtime.caml_string_get(pdf_content, i$0);
                caml_call3(Js_of_ocaml_Typed_array[45], uint8_array, i$0, _S_);
                var _T_ = i$0 + 1 | 0;
                if(_R_ === i$0) break;
                i$0 = _T_;
               }
              }
              var
               blob_constructor = Blob,
               blob_data = caml_js_from_array([0, uint8_array]),
               blob_options = {type: cst_application_pdf},
               blob = new blob_constructor(blob_data, blob_options),
               url = URL.createObjectURL(blob),
               t4 =
                 caml_call1(Js_of_ocaml_Dom_html[67], Js_of_ocaml_Dom_html[2]);
              t4.href = url;
              var t7 = t4.style;
              t7.display = cst_none;
              var t8 = Js_of_ocaml_Dom_html[2], body = t8.body;
              caml_call2(Js_of_ocaml_Dom[5], body, t4);
              t4.click();
              caml_call2(Js_of_ocaml_Dom[4], body, t4);
              URL.revokeObjectURL(url);
             }
             catch(e){
              var
               e$0 = caml_wrap_exception(e),
               _U_ = caml_call1(Stdlib_Printexc[1], e$0);
              caml_call2(Stdlib[28], cst_Binary_safe_download_faile, _U_);
              var
               blob_constructor$0 = Blob,
               blob_data$0 =
                 caml_js_from_array([0, caml_jsstring_of_string(pdf_content)]),
               blob_options$0 = {type: cst_application_pdf},
               blob$0 = new blob_constructor$0(blob_data$0, blob_options$0),
               url$0 = URL.createObjectURL(blob$0),
               t12 =
                 caml_call1(Js_of_ocaml_Dom_html[67], Js_of_ocaml_Dom_html[2]);
              t12.href = url$0;
              var t15 = t12.style;
              t15.display = cst_none;
              var t16 = Js_of_ocaml_Dom_html[2], body$0 = t16.body;
              caml_call2(Js_of_ocaml_Dom[5], body$0, t12);
              t12.click();
              caml_call2(Js_of_ocaml_Dom[4], body$0, t12);
              URL.revokeObjectURL(url$0);
             }
             caml_call2
              (Stdlib[28], cst_Label_PDF_generated_and_op, filename$0);
            }
           }
           catch(e){
            var
             e$2 = caml_wrap_exception(e),
             _ah_ = caml_call1(Stdlib_Printexc[1], e$2);
            caml_call2(Stdlib[28], cst_Error_creating_PDF, _ah_);
           }
          }
         }
         catch(e){
          var
           e$1 = caml_wrap_exception(e),
           _V_ = caml_call1(Stdlib_Printexc[1], e$1);
          caml_call2(Stdlib[28], cst_Error, _V_);
         }
         return Js_of_ocaml_Js[7];
        });
   generate_button.onclick = t270;
   caml_call2(Js_of_ocaml_Dom[5], form_div, button_container);
   caml_call2(Js_of_ocaml_Dom[5], main_container, form_div);
   caml_call2(Js_of_ocaml_Dom[5], body, main_container);
   var Dune_exe_Label_maker = [0];
   runtime.caml_register_global
    (344, Dune_exe_Label_maker, "Dune__exe__Label_maker");
   return;
  }
  (globalThis));

//# 5 "../.js/default/stdlib/std_exit.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib;
   caml_call1(Stdlib[103], 0);
   var Std_exit = [0];
   runtime.caml_register_global(1, Std_exit, "Std_exit");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
